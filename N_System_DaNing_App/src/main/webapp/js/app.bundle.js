/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "build/js/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(3);
	__webpack_require__(26);
	__webpack_require__(27);
	module.exports = __webpack_require__(42);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global, process) { /*!
	  * https://github.com/paulmillr/es6-shim
	  * @license es6-shim Copyright 2013-2015 by Paul Miller (http://paulmillr.com)
	  *   and contributors,  MIT License
	  * es6-shim: v0.33.6
	  * see https://github.com/paulmillr/es6-shim/blob/0.33.3/LICENSE
	  * Details and documentation:
	  * https://github.com/paulmillr/es6-shim/
	  */

	// UMD (Universal Module Definition)
	// see https://github.com/umdjs/umd/blob/master/returnExports.js
	(function (root, factory) {
	  /*global define, module, exports */
	  if (true) {
	    // AMD. Register as an anonymous module.
	    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports === 'object') {
	    // Node. Does not work with strict CommonJS, but
	    // only CommonJS-like enviroments that support module.exports,
	    // like Node.
	    module.exports = factory();
	  } else {
	    // Browser globals (root is window)
	    root.returnExports = factory();
	  }
	}(this, function () {
	  'use strict';

	  var _apply = Function.call.bind(Function.apply);
	  var _call = Function.call.bind(Function.call);
	  var isArray = Array.isArray;

	  var not = function notThunker(func) {
	    return function notThunk() { return !_apply(func, this, arguments); };
	  };
	  var throwsError = function (func) {
	    try {
	      func();
	      return false;
	    } catch (e) {
	      return true;
	    }
	  };
	  var valueOrFalseIfThrows = function valueOrFalseIfThrows(func) {
	    try {
	      return func();
	    } catch (e) {
	      return false;
	    }
	  };

	  var isCallableWithoutNew = not(throwsError);
	  var arePropertyDescriptorsSupported = function () {
	    // if Object.defineProperty exists but throws, it's IE 8
	    return !throwsError(function () { Object.defineProperty({}, 'x', { get: function () {} }); });
	  };
	  var supportsDescriptors = !!Object.defineProperty && arePropertyDescriptorsSupported();
	  var functionsHaveNames = (function foo() {}).name === 'foo';

	  var _forEach = Function.call.bind(Array.prototype.forEach);
	  var _reduce = Function.call.bind(Array.prototype.reduce);
	  var _filter = Function.call.bind(Array.prototype.filter);
	  var _every = Function.call.bind(Array.prototype.every);

	  var createDataProperty = function createDataProperty(object, name, value) {
	    if (supportsDescriptors) {
	      Object.defineProperty(object, name, {
	        configurable: true,
	        enumerable: true,
	        writable: true,
	        value: value
	      });
	    } else {
	      object[name] = value;
	    }
	  };
	  var createDataPropertyOrThrow = function createDataPropertyOrThrow(object, name, value) {
	    createDataProperty(object, name, value);
	    if (!ES.SameValue(object[name], value)) {
	      throw new TypeError('property is nonconfigurable');
	    }
	  };
	  var defineProperty = function (object, name, value, force) {
	    if (!force && name in object) { return; }
	    if (supportsDescriptors) {
	      Object.defineProperty(object, name, {
	        configurable: true,
	        enumerable: false,
	        writable: true,
	        value: value
	      });
	    } else {
	      object[name] = value;
	    }
	  };

	  // Define configurable, writable and non-enumerable props
	  // if they donâ€™t exist.
	  var defineProperties = function (object, map) {
	    _forEach(Object.keys(map), function (name) {
	      var method = map[name];
	      defineProperty(object, name, method, false);
	    });
	  };

	  // Simple shim for Object.create on ES3 browsers
	  // (unlike real shim, no attempt to support `prototype === null`)
	  var create = Object.create || function (prototype, properties) {
	    var Prototype = function Prototype() {};
	    Prototype.prototype = prototype;
	    var object = new Prototype();
	    if (typeof properties !== 'undefined') {
	      Object.keys(properties).forEach(function (key) {
	        Value.defineByDescriptor(object, key, properties[key]);
	      });
	    }
	    return object;
	  };

	  var supportsSubclassing = function (C, f) {
	    if (!Object.setPrototypeOf) { return false; /* skip test on IE < 11 */ }
	    return valueOrFalseIfThrows(function () {
	      var Sub = function Subclass(arg) {
	        var o = new C(arg);
	        Object.setPrototypeOf(o, Subclass.prototype);
	        return o;
	      };
	      Object.setPrototypeOf(Sub, C);
	      Sub.prototype = create(C.prototype, {
	        constructor: { value: Sub }
	      });
	      return f(Sub);
	    });
	  };

	  var startsWithRejectsRegex = function () {
	    return String.prototype.startsWith && throwsError(function () {
	      /* throws if spec-compliant */
	      '/a/'.startsWith(/a/);
	    });
	  };
	  var startsWithHandlesInfinity = (function () {
	    return String.prototype.startsWith && 'abc'.startsWith('a', Infinity) === false;
	  }());

	  var getGlobal = function () {
		// the only reliable means to get the global object is
		// `Function('return this')()`
		// However, this causes CSP violations in Chrome apps.
	    if (typeof self !== 'undefined') { return self; }
	    if (typeof window !== 'undefined') { return window; }
	    if (typeof global !== 'undefined') { return global; }
		throw new Error('unable to locate global object');
	  };

	  var globals = getGlobal();
	  var globalIsFinite = globals.isFinite;
	  var hasStrictMode = (function () { return this === null; }.call(null));
	  var startsWithIsCompliant = startsWithRejectsRegex() && startsWithHandlesInfinity;
	  var _indexOf = Function.call.bind(String.prototype.indexOf);
	  var _toString = Function.call.bind(Object.prototype.toString);
	  var _concat = Function.call.bind(Array.prototype.concat);
	  var _strSlice = Function.call.bind(String.prototype.slice);
	  var _push = Function.call.bind(Array.prototype.push);
	  var _pushApply = Function.apply.bind(Array.prototype.push);
	  var _shift = Function.call.bind(Array.prototype.shift);
	  var _max = Math.max;
	  var _min = Math.min;
	  var _floor = Math.floor;
	  var _abs = Math.abs;
	  var _log = Math.log;
	  var _sqrt = Math.sqrt;
	  var _hasOwnProperty = Function.call.bind(Object.prototype.hasOwnProperty);
	  var ArrayIterator; // make our implementation private
	  var noop = function () {};

	  var Symbol = globals.Symbol || {};
	  var symbolSpecies = Symbol.species || '@@species';

	  var Value = {
	    getter: function (object, name, getter) {
	      if (!supportsDescriptors) {
	        throw new TypeError('getters require true ES5 support');
	      }
	      Object.defineProperty(object, name, {
	        configurable: true,
	        enumerable: false,
	        get: getter
	      });
	    },
	    proxy: function (originalObject, key, targetObject) {
	      if (!supportsDescriptors) {
	        throw new TypeError('getters require true ES5 support');
	      }
	      var originalDescriptor = Object.getOwnPropertyDescriptor(originalObject, key);
	      Object.defineProperty(targetObject, key, {
	        configurable: originalDescriptor.configurable,
	        enumerable: originalDescriptor.enumerable,
	        get: function getKey() { return originalObject[key]; },
	        set: function setKey(value) { originalObject[key] = value; }
	      });
	    },
	    redefine: function (object, property, newValue) {
	      if (supportsDescriptors) {
	        var descriptor = Object.getOwnPropertyDescriptor(object, property);
	        descriptor.value = newValue;
	        Object.defineProperty(object, property, descriptor);
	      } else {
	        object[property] = newValue;
	      }
	    },
	    defineByDescriptor: function (object, property, descriptor) {
	      if (supportsDescriptors) {
	        Object.defineProperty(object, property, descriptor);
	      } else if ('value' in descriptor) {
	        object[property] = descriptor.value;
	      }
	    },
	    preserveToString: function (target, source) {
	      defineProperty(target, 'toString', source.toString.bind(source), true);
	    }
	  };

	  var wrapConstructor = function wrapConstructor(original, replacement, keysToSkip) {
	    Value.preserveToString(replacement, original);
	    if (Object.setPrototypeOf) {
	      // sets up proper prototype chain where possible
	      Object.setPrototypeOf(original, replacement);
	    }
	    _forEach(Object.getOwnPropertyNames(original), function (key) {
	      if (key in noop || keysToSkip[key]) { return; }
	      Value.proxy(original, key, replacement);
	    });
	    replacement.prototype = original.prototype;
	    Value.redefine(original.prototype, 'constructor', replacement);
	  };

	  var defaultSpeciesGetter = function () { return this; };
	  var addDefaultSpecies = function (C) {
	    if (supportsDescriptors && !_hasOwnProperty(C, symbolSpecies)) {
	      Value.getter(C, symbolSpecies, defaultSpeciesGetter);
	    }
	  };
	  var Type = {
	    primitive: function (x) { return x === null || (typeof x !== 'function' && typeof x !== 'object'); },
	    object: function (x) { return x !== null && typeof x === 'object'; },
	    string: function (x) { return _toString(x) === '[object String]'; },
	    regex: function (x) { return _toString(x) === '[object RegExp]'; },
	    symbol: function (x) {
	      return typeof globals.Symbol === 'function' && typeof x === 'symbol';
	    }
	  };

	  var numberIsNaN = Number.isNaN || function isNaN(value) {
	    // NaN !== NaN, but they are identical.
	    // NaNs are the only non-reflexive value, i.e., if x !== x,
	    // then x is NaN.
	    // isNaN is broken: it converts its argument to number, so
	    // isNaN('foo') => true
	    return value !== value;
	  };
	  var numberIsFinite = Number.isFinite || function isFinite(value) {
	    return typeof value === 'number' && globalIsFinite(value);
	  };

	  var overrideNative = function overrideNative(object, property, replacement) {
	    var original = object[property];
	    defineProperty(object, property, replacement, true);
	    Value.preserveToString(object[property], original);
	  };

	  // This is a private name in the es6 spec, equal to '[Symbol.iterator]'
	  // we're going to use an arbitrary _-prefixed name to make our shims
	  // work properly with each other, even though we don't have full Iterator
	  // support.  That is, `Array.from(map.keys())` will work, but we don't
	  // pretend to export a "real" Iterator interface.
	  var $iterator$ = Type.symbol(Symbol.iterator) ? Symbol.iterator : '_es6-shim iterator_';
	  // Firefox ships a partial implementation using the name @@iterator.
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=907077#c14
	  // So use that name if we detect it.
	  if (globals.Set && typeof new globals.Set()['@@iterator'] === 'function') {
	    $iterator$ = '@@iterator';
	  }
	  var addIterator = function (prototype, impl) {
	    var implementation = impl || function iterator() { return this; };
	    defineProperty(prototype, $iterator$, implementation);
	    if (!prototype[$iterator$] && Type.symbol($iterator$)) {
	      // implementations are buggy when $iterator$ is a Symbol
	      prototype[$iterator$] = implementation;
	    }
	  };

	  // taken directly from https://github.com/ljharb/is-arguments/blob/master/index.js
	  // can be replaced with require('is-arguments') if we ever use a build process instead
	  var isStandardArguments = function isArguments(value) {
	    return _toString(value) === '[object Arguments]';
	  };
	  var isLegacyArguments = function isArguments(value) {
	    return value !== null &&
	      typeof value === 'object' &&
	      typeof value.length === 'number' &&
	      value.length >= 0 &&
	      _toString(value) !== '[object Array]' &&
	      _toString(value.callee) === '[object Function]';
	  };
	  var isArguments = isStandardArguments(arguments) ? isStandardArguments : isLegacyArguments;

	  var ES = {
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-call-f-v-args
	    Call: function Call(F, V) {
	      var args = arguments.length > 2 ? arguments[2] : [];
	      if (!ES.IsCallable(F)) {
	        throw new TypeError(F + ' is not a function');
	      }
	      return _apply(F, V, args);
	    },

	    RequireObjectCoercible: function (x, optMessage) {
	      /* jshint eqnull:true */
	      if (x == null) {
	        throw new TypeError(optMessage || 'Cannot call method on ' + x);
	      }
	    },

	    TypeIsObject: function (x) {
	      /* jshint eqnull:true */
	      // this is expensive when it returns false; use this function
	      // when you expect it to return true in the common case.
	      return x != null && Object(x) === x;
	    },

	    ToObject: function (o, optMessage) {
	      ES.RequireObjectCoercible(o, optMessage);
	      return Object(o);
	    },

	    IsCallable: function (x) {
	      // some versions of IE say that typeof /abc/ === 'function'
	      return typeof x === 'function' && _toString(x) === '[object Function]';
	    },

	    IsConstructor: function (x) {
	      // We can't tell callables from constructors in ES5
	      return ES.IsCallable(x);
	    },

	    ToInt32: function (x) {
	      return ES.ToNumber(x) >> 0;
	    },

	    ToUint32: function (x) {
	      return ES.ToNumber(x) >>> 0;
	    },

	    ToNumber: function (value) {
	      if (_toString(value) === '[object Symbol]') {
	        throw new TypeError('Cannot convert a Symbol value to a number');
	      }
	      return +value;
	    },

	    ToInteger: function (value) {
	      var number = ES.ToNumber(value);
	      if (numberIsNaN(number)) { return 0; }
	      if (number === 0 || !numberIsFinite(number)) { return number; }
	      return (number > 0 ? 1 : -1) * _floor(_abs(number));
	    },

	    ToLength: function (value) {
	      var len = ES.ToInteger(value);
	      if (len <= 0) { return 0; } // includes converting -0 to +0
	      if (len > Number.MAX_SAFE_INTEGER) { return Number.MAX_SAFE_INTEGER; }
	      return len;
	    },

	    SameValue: function (a, b) {
	      if (a === b) {
	        // 0 === -0, but they are not identical.
	        if (a === 0) { return 1 / a === 1 / b; }
	        return true;
	      }
	      return numberIsNaN(a) && numberIsNaN(b);
	    },

	    SameValueZero: function (a, b) {
	      // same as SameValue except for SameValueZero(+0, -0) == true
	      return (a === b) || (numberIsNaN(a) && numberIsNaN(b));
	    },

	    IsIterable: function (o) {
	      return ES.TypeIsObject(o) && (typeof o[$iterator$] !== 'undefined' || isArguments(o));
	    },

	    GetIterator: function (o) {
	      if (isArguments(o)) {
	        // special case support for `arguments`
	        return new ArrayIterator(o, 'value');
	      }
	      var itFn = ES.GetMethod(o, $iterator$);
	      if (!ES.IsCallable(itFn)) {
	        // Better diagnostics if itFn is null or undefined
	        throw new TypeError('value is not an iterable');
	      }
	      var it = _call(itFn, o);
	      if (!ES.TypeIsObject(it)) {
	        throw new TypeError('bad iterator');
	      }
	      return it;
	    },

	    GetMethod: function (o, p) {
	      var func = ES.ToObject(o)[p];
	      if (func === void 0 || func === null) {
	        return void 0;
	      }
	      if (!ES.IsCallable(func)) {
	        throw new TypeError('Method not callable: ' + p);
	      }
	      return func;
	    },

	    IteratorComplete: function (iterResult) {
	      return !!(iterResult.done);
	    },

	    IteratorClose: function (iterator, completionIsThrow) {
	      var returnMethod = ES.GetMethod(iterator, 'return');
	      if (returnMethod === void 0) {
	        return;
	      }
	      var innerResult, innerException;
	      try {
	        innerResult = _call(returnMethod, iterator);
	      } catch (e) {
	        innerException = e;
	      }
	      if (completionIsThrow) {
	        return;
	      }
	      if (innerException) {
	        throw innerException;
	      }
	      if (!ES.TypeIsObject(innerResult)) {
	        throw new TypeError("Iterator's return method returned a non-object.");
	      }
	    },

	    IteratorNext: function (it) {
	      var result = arguments.length > 1 ? it.next(arguments[1]) : it.next();
	      if (!ES.TypeIsObject(result)) {
	        throw new TypeError('bad iterator');
	      }
	      return result;
	    },

	    IteratorStep: function (it) {
	      var result = ES.IteratorNext(it);
	      var done = ES.IteratorComplete(result);
	      return done ? false : result;
	    },

	    Construct: function (C, args, newTarget, isES6internal) {
	      if (newTarget === void 0) {
	        newTarget = C;
	      }
	      if (!isES6internal) {
	        // Try to use Reflect.construct if available
	        return Reflect.construct(C, args, newTarget);
	      }
	      // OK, we have to fake it.  This will only work if the
	      // C.[[ConstructorKind]] == "base" -- but that's the only
	      // kind we can make in ES5 code anyway.

	      // OrdinaryCreateFromConstructor(newTarget, "%ObjectPrototype%")
	      var proto = newTarget.prototype;
	      if (!ES.TypeIsObject(proto)) {
	        proto = Object.prototype;
	      }
	      var obj = create(proto);
	      // Call the constructor.
	      var result = ES.Call(C, obj, args);
	      return ES.TypeIsObject(result) ? result : obj;
	    },

	    SpeciesConstructor: function (O, defaultConstructor) {
	      var C = O.constructor;
	      if (C === void 0) {
	        return defaultConstructor;
	      }
	      if (!ES.TypeIsObject(C)) {
	        throw new TypeError('Bad constructor');
	      }
	      var S = C[symbolSpecies];
	      if (S === void 0 || S === null) {
	        return defaultConstructor;
	      }
	      if (!ES.IsConstructor(S)) {
	        throw new TypeError('Bad @@species');
	      }
	      return S;
	    },

	    CreateHTML: function (string, tag, attribute, value) {
	      var S = String(string);
	      var p1 = '<' + tag;
	      if (attribute !== '') {
	        var V = String(value);
	        var escapedV = V.replace(/"/g, '&quot;');
	        p1 += ' ' + attribute + '="' + escapedV + '"';
	      }
	      var p2 = p1 + '>';
	      var p3 = p2 + S;
	      return p3 + '</' + tag + '>';
	    }
	  };

	  var emulateES6construct = function (o, defaultNewTarget, defaultProto, slots) {
	    // This is an es5 approximation to es6 construct semantics.  in es6,
	    // 'new Foo' invokes Foo.[[Construct]] which (for almost all objects)
	    // just sets the internal variable NewTarget (in es6 syntax `new.target`)
	    // to Foo and then returns Foo().

	    // Many ES6 object then have constructors of the form:
	    // 1. If NewTarget is undefined, throw a TypeError exception
	    // 2. Let xxx by OrdinaryCreateFromConstructor(NewTarget, yyy, zzz)

	    // So we're going to emulate those first two steps.
	    if (!ES.TypeIsObject(o)) {
	      throw new TypeError('Constructor requires `new`: ' + defaultNewTarget.name);
	    }
	    var proto = defaultNewTarget.prototype;
	    if (!ES.TypeIsObject(proto)) {
	      proto = defaultProto;
	    }
	    o = create(proto);
	    for (var name in slots) {
	      if (_hasOwnProperty(slots, name)) {
	        var value = slots[name];
	        defineProperty(o, name, value, true);
	      }
	    }
	    return o;
	  };

	  // Firefox 31 reports this function's length as 0
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=1062484
	  if (String.fromCodePoint && String.fromCodePoint.length !== 1) {
	    var originalFromCodePoint = String.fromCodePoint;
	    overrideNative(String, 'fromCodePoint', function fromCodePoint(codePoints) { return _apply(originalFromCodePoint, this, arguments); });
	  }

	  var StringShims = {
	    fromCodePoint: function fromCodePoint(codePoints) {
	      var result = [];
	      var next;
	      for (var i = 0, length = arguments.length; i < length; i++) {
	        next = Number(arguments[i]);
	        if (!ES.SameValue(next, ES.ToInteger(next)) || next < 0 || next > 0x10FFFF) {
	          throw new RangeError('Invalid code point ' + next);
	        }

	        if (next < 0x10000) {
	          _push(result, String.fromCharCode(next));
	        } else {
	          next -= 0x10000;
	          _push(result, String.fromCharCode((next >> 10) + 0xD800));
	          _push(result, String.fromCharCode((next % 0x400) + 0xDC00));
	        }
	      }
	      return result.join('');
	    },

	    raw: function raw(callSite) {
	      var cooked = ES.ToObject(callSite, 'bad callSite');
	      var rawString = ES.ToObject(cooked.raw, 'bad raw value');
	      var len = rawString.length;
	      var literalsegments = ES.ToLength(len);
	      if (literalsegments <= 0) {
	        return '';
	      }

	      var stringElements = [];
	      var nextIndex = 0;
	      var nextKey, next, nextSeg, nextSub;
	      while (nextIndex < literalsegments) {
	        nextKey = String(nextIndex);
	        nextSeg = String(rawString[nextKey]);
	        _push(stringElements, nextSeg);
	        if (nextIndex + 1 >= literalsegments) {
	          break;
	        }
	        next = nextIndex + 1 < arguments.length ? arguments[nextIndex + 1] : '';
	        nextSub = String(next);
	        _push(stringElements, nextSub);
	        nextIndex++;
	      }
	      return stringElements.join('');
	    }
	  };
	  defineProperties(String, StringShims);
	  if (String.raw({ raw: { 0: 'x', 1: 'y', length: 2 } }) !== 'xy') {
	    // IE 11 TP has a broken String.raw implementation
	    overrideNative(String, 'raw', StringShims.raw);
	  }

	  // Fast repeat, uses the `Exponentiation by squaring` algorithm.
	  // Perf: http://jsperf.com/string-repeat2/2
	  var stringRepeat = function repeat(s, times) {
	    if (times < 1) { return ''; }
	    if (times % 2) { return repeat(s, times - 1) + s; }
	    var half = repeat(s, times / 2);
	    return half + half;
	  };
	  var stringMaxLength = Infinity;

	  var StringPrototypeShims = {
	    repeat: function repeat(times) {
	      ES.RequireObjectCoercible(this);
	      var thisStr = String(this);
	      var numTimes = ES.ToInteger(times);
	      if (numTimes < 0 || numTimes >= stringMaxLength) {
	        throw new RangeError('repeat count must be less than infinity and not overflow maximum string size');
	      }
	      return stringRepeat(thisStr, numTimes);
	    },

	    startsWith: function startsWith(searchString) {
	      ES.RequireObjectCoercible(this);
	      var thisStr = String(this);
	      if (Type.regex(searchString)) {
	        throw new TypeError('Cannot call method "startsWith" with a regex');
	      }
	      var searchStr = String(searchString);
	      var startArg = arguments.length > 1 ? arguments[1] : void 0;
	      var start = _max(ES.ToInteger(startArg), 0);
	      return _strSlice(thisStr, start, start + searchStr.length) === searchStr;
	    },

	    endsWith: function endsWith(searchString) {
	      ES.RequireObjectCoercible(this);
	      var thisStr = String(this);
	      if (Type.regex(searchString)) {
	        throw new TypeError('Cannot call method "endsWith" with a regex');
	      }
	      var searchStr = String(searchString);
	      var thisLen = thisStr.length;
	      var posArg = arguments.length > 1 ? arguments[1] : void 0;
	      var pos = typeof posArg === 'undefined' ? thisLen : ES.ToInteger(posArg);
	      var end = _min(_max(pos, 0), thisLen);
	      return _strSlice(thisStr, end - searchStr.length, end) === searchStr;
	    },

	    includes: function includes(searchString) {
	      if (Type.regex(searchString)) {
	        throw new TypeError('"includes" does not accept a RegExp');
	      }
	      var position;
	      if (arguments.length > 1) {
	        position = arguments[1];
	      }
	      // Somehow this trick makes method 100% compat with the spec.
	      return _indexOf(this, searchString, position) !== -1;
	    },

	    codePointAt: function codePointAt(pos) {
	      ES.RequireObjectCoercible(this);
	      var thisStr = String(this);
	      var position = ES.ToInteger(pos);
	      var length = thisStr.length;
	      if (position >= 0 && position < length) {
	        var first = thisStr.charCodeAt(position);
	        var isEnd = (position + 1 === length);
	        if (first < 0xD800 || first > 0xDBFF || isEnd) { return first; }
	        var second = thisStr.charCodeAt(position + 1);
	        if (second < 0xDC00 || second > 0xDFFF) { return first; }
	        return ((first - 0xD800) * 1024) + (second - 0xDC00) + 0x10000;
	      }
	    }
	  };
	  defineProperties(String.prototype, StringPrototypeShims);

	  if ('a'.includes('a', Infinity) !== false) {
	    overrideNative(String.prototype, 'includes', StringPrototypeShims.includes);
	  }

	  var hasStringTrimBug = '\u0085'.trim().length !== 1;
	  if (hasStringTrimBug) {
	    delete String.prototype.trim;
	    // whitespace from: http://es5.github.io/#x15.5.4.20
	    // implementation from https://github.com/es-shims/es5-shim/blob/v3.4.0/es5-shim.js#L1304-L1324
	    var ws = [
	      '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003',
	      '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028',
	      '\u2029\uFEFF'
	    ].join('');
	    var trimRegexp = new RegExp('(^[' + ws + ']+)|([' + ws + ']+$)', 'g');
	    defineProperties(String.prototype, {
	      trim: function trim() {
	        if (typeof this === 'undefined' || this === null) {
	          throw new TypeError("can't convert " + this + ' to object');
	        }
	        return String(this).replace(trimRegexp, '');
	      }
	    });
	  }

	  // see https://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype-@@iterator
	  var StringIterator = function (s) {
	    ES.RequireObjectCoercible(s);
	    this._s = String(s);
	    this._i = 0;
	  };
	  StringIterator.prototype.next = function () {
	    var s = this._s, i = this._i;
	    if (typeof s === 'undefined' || i >= s.length) {
	      this._s = void 0;
	      return { value: void 0, done: true };
	    }
	    var first = s.charCodeAt(i), second, len;
	    if (first < 0xD800 || first > 0xDBFF || (i + 1) === s.length) {
	      len = 1;
	    } else {
	      second = s.charCodeAt(i + 1);
	      len = (second < 0xDC00 || second > 0xDFFF) ? 1 : 2;
	    }
	    this._i = i + len;
	    return { value: s.substr(i, len), done: false };
	  };
	  addIterator(StringIterator.prototype);
	  addIterator(String.prototype, function () {
	    return new StringIterator(this);
	  });

	  if (!startsWithIsCompliant) {
	    // Firefox (< 37?) and IE 11 TP have a noncompliant startsWith implementation
	    overrideNative(String.prototype, 'startsWith', StringPrototypeShims.startsWith);
	    overrideNative(String.prototype, 'endsWith', StringPrototypeShims.endsWith);
	  }

	  var ArrayShims = {
	    from: function from(items) {
	      var C = this;
	      var mapFn = arguments.length > 1 ? arguments[1] : void 0;
	      var mapping, T;
	      if (mapFn === void 0) {
	        mapping = false;
	      } else {
	        if (!ES.IsCallable(mapFn)) {
	          throw new TypeError('Array.from: when provided, the second argument must be a function');
	        }
	        T = arguments.length > 2 ? arguments[2] : void 0;
	        mapping = true;
	      }

	      // Note that that Arrays will use ArrayIterator:
	      // https://bugs.ecmascript.org/show_bug.cgi?id=2416
	      var usingIterator = isArguments(items) || ES.GetMethod(items, $iterator$);

	      var length, result, i;
	      if (usingIterator !== void 0) {
	        result = ES.IsConstructor(C) ? Object(new C()) : [];
	        var iterator = ES.GetIterator(items);
	        var next, nextValue;

	        i = 0;
	        while (true) {
	          next = ES.IteratorStep(iterator);
	          if (next === false) {
	            break;
	          }
	          nextValue = next.value;
	          try {
	            if (mapping) {
	              nextValue = T !== undefined ? _call(mapFn, T, nextValue, i) : mapFn(nextValue, i);
	            }
	            result[i] = nextValue;
	          } catch (e) {
	            ES.IteratorClose(iterator, true);
	            throw e;
	          }
	          i += 1;
	        }
	        length = i;
	      } else {
	        var arrayLike = ES.ToObject(items);
	        length = ES.ToLength(arrayLike.length);
	        result = ES.IsConstructor(C) ? Object(new C(length)) : new Array(length);
	        var value;
	        for (i = 0; i < length; ++i) {
	          value = arrayLike[i];
	          if (mapping) {
	            value = T !== undefined ? _call(mapFn, T, value, i) : mapFn(value, i);
	          }
	          result[i] = value;
	        }
	      }

	      result.length = length;
	      return result;
	    },

	    of: function of() {
	      var len = arguments.length;
	      var C = this;
	      var A = isArray(C) || !ES.IsCallable(C) ? new Array(len) : ES.Construct(C, [len]);
	      for (var k = 0; k < len; ++k) {
	        createDataPropertyOrThrow(A, k, arguments[k]);
	      }
	      A.length = len;
	      return A;
	    }
	  };
	  defineProperties(Array, ArrayShims);
	  addDefaultSpecies(Array);

	  // Given an argument x, it will return an IteratorResult object,
	  // with value set to x and done to false.
	  // Given no arguments, it will return an iterator completion object.
	  var iteratorResult = function (x) {
	    return { value: x, done: arguments.length === 0 };
	  };

	  // Our ArrayIterator is private; see
	  // https://github.com/paulmillr/es6-shim/issues/252
	  ArrayIterator = function (array, kind) {
	      this.i = 0;
	      this.array = array;
	      this.kind = kind;
	  };

	  defineProperties(ArrayIterator.prototype, {
	    next: function () {
	      var i = this.i, array = this.array;
	      if (!(this instanceof ArrayIterator)) {
	        throw new TypeError('Not an ArrayIterator');
	      }
	      if (typeof array !== 'undefined') {
	        var len = ES.ToLength(array.length);
	        for (; i < len; i++) {
	          var kind = this.kind;
	          var retval;
	          if (kind === 'key') {
	            retval = i;
	          } else if (kind === 'value') {
	            retval = array[i];
	          } else if (kind === 'entry') {
	            retval = [i, array[i]];
	          }
	          this.i = i + 1;
	          return { value: retval, done: false };
	        }
	      }
	      this.array = void 0;
	      return { value: void 0, done: true };
	    }
	  });
	  addIterator(ArrayIterator.prototype);

	  var ObjectIterator = function (object, kind) {
	    defineProperties(this, {
	      object: object,
	      array: getAllKeys(object),
	      kind: kind
	    });
	  };

	  var getAllKeys = function getAllKeys(object) {
	    var keys = [];

	    for (var key in object) {
	      _push(keys, key);
	    }

	    return keys;
	  };

	  defineProperties(ObjectIterator.prototype, {
	    next: function next() {
	      var key;
	      var array = this.array;

	      if (!(this instanceof ObjectIterator)) {
	        throw new TypeError('Not an ObjectIterator');
	      }

	      // Find next key in the object
	      while (array.length > 0) {
	        key = _shift(array);

	        // The candidate key isn't defined on object.
	        // Must have been deleted, or object[[Prototype]]
	        // has been modified.
	        if (!(key in this.object)) {
	          continue;
	        }

	        if (this.kind === 'key') {
	          return iteratorResult(key);
	        } else if (this.kind === 'value') {
	          return iteratorResult(this.object[key]);
	        } else {
	          return iteratorResult([key, this.object[key]]);
	        }
	      }

	      return iteratorResult();
	    }
	  });
	  addIterator(ObjectIterator.prototype);

	  // note: this is positioned here because it depends on ArrayIterator
	  var arrayOfSupportsSubclassing = Array.of === ArrayShims.of || (function () {
	    // Detects a bug in Webkit nightly r181886
	    var Foo = function Foo(len) { this.length = len; };
	    Foo.prototype = [];
	    var fooArr = Array.of.apply(Foo, [1, 2]);
	    return fooArr instanceof Foo && fooArr.length === 2;
	  }());
	  if (!arrayOfSupportsSubclassing) {
	    overrideNative(Array, 'of', ArrayShims.of);
	  }

	  var ArrayPrototypeShims = {
	    copyWithin: function copyWithin(target, start) {
	      var end = arguments[2]; // copyWithin.length must be 2
	      var o = ES.ToObject(this);
	      var len = ES.ToLength(o.length);
	      var relativeTarget = ES.ToInteger(target);
	      var relativeStart = ES.ToInteger(start);
	      var to = relativeTarget < 0 ? _max(len + relativeTarget, 0) : _min(relativeTarget, len);
	      var from = relativeStart < 0 ? _max(len + relativeStart, 0) : _min(relativeStart, len);
	      end = typeof end === 'undefined' ? len : ES.ToInteger(end);
	      var fin = end < 0 ? _max(len + end, 0) : _min(end, len);
	      var count = _min(fin - from, len - to);
	      var direction = 1;
	      if (from < to && to < (from + count)) {
	        direction = -1;
	        from += count - 1;
	        to += count - 1;
	      }
	      while (count > 0) {
	        if (_hasOwnProperty(o, from)) {
	          o[to] = o[from];
	        } else {
	          delete o[from];
	        }
	        from += direction;
	        to += direction;
	        count -= 1;
	      }
	      return o;
	    },

	    fill: function fill(value) {
	      var start = arguments.length > 1 ? arguments[1] : void 0;
	      var end = arguments.length > 2 ? arguments[2] : void 0;
	      var O = ES.ToObject(this);
	      var len = ES.ToLength(O.length);
	      start = ES.ToInteger(typeof start === 'undefined' ? 0 : start);
	      end = ES.ToInteger(typeof end === 'undefined' ? len : end);

	      var relativeStart = start < 0 ? _max(len + start, 0) : _min(start, len);
	      var relativeEnd = end < 0 ? len + end : end;

	      for (var i = relativeStart; i < len && i < relativeEnd; ++i) {
	        O[i] = value;
	      }
	      return O;
	    },

	    find: function find(predicate) {
	      var list = ES.ToObject(this);
	      var length = ES.ToLength(list.length);
	      if (!ES.IsCallable(predicate)) {
	        throw new TypeError('Array#find: predicate must be a function');
	      }
	      var thisArg = arguments.length > 1 ? arguments[1] : null;
	      for (var i = 0, value; i < length; i++) {
	        value = list[i];
	        if (thisArg) {
	          if (_call(predicate, thisArg, value, i, list)) { return value; }
	        } else if (predicate(value, i, list)) {
	          return value;
	        }
	      }
	    },

	    findIndex: function findIndex(predicate) {
	      var list = ES.ToObject(this);
	      var length = ES.ToLength(list.length);
	      if (!ES.IsCallable(predicate)) {
	        throw new TypeError('Array#findIndex: predicate must be a function');
	      }
	      var thisArg = arguments.length > 1 ? arguments[1] : null;
	      for (var i = 0; i < length; i++) {
	        if (thisArg) {
	          if (_call(predicate, thisArg, list[i], i, list)) { return i; }
	        } else if (predicate(list[i], i, list)) {
	          return i;
	        }
	      }
	      return -1;
	    },

	    keys: function keys() {
	      return new ArrayIterator(this, 'key');
	    },

	    values: function values() {
	      return new ArrayIterator(this, 'value');
	    },

	    entries: function entries() {
	      return new ArrayIterator(this, 'entry');
	    }
	  };
	  // Safari 7.1 defines Array#keys and Array#entries natively,
	  // but the resulting ArrayIterator objects don't have a "next" method.
	  if (Array.prototype.keys && !ES.IsCallable([1].keys().next)) {
	    delete Array.prototype.keys;
	  }
	  if (Array.prototype.entries && !ES.IsCallable([1].entries().next)) {
	    delete Array.prototype.entries;
	  }

	  // Chrome 38 defines Array#keys and Array#entries, and Array#@@iterator, but not Array#values
	  if (Array.prototype.keys && Array.prototype.entries && !Array.prototype.values && Array.prototype[$iterator$]) {
	    defineProperties(Array.prototype, {
	      values: Array.prototype[$iterator$]
	    });
	    if (Type.symbol(Symbol.unscopables)) {
	      Array.prototype[Symbol.unscopables].values = true;
	    }
	  }
	  // Chrome 40 defines Array#values with the incorrect name, although Array#{keys,entries} have the correct name
	  if (functionsHaveNames && Array.prototype.values && Array.prototype.values.name !== 'values') {
	    var originalArrayPrototypeValues = Array.prototype.values;
	    overrideNative(Array.prototype, 'values', function values() { return _call(originalArrayPrototypeValues, this); });
	    defineProperty(Array.prototype, $iterator$, Array.prototype.values, true);
	  }
	  defineProperties(Array.prototype, ArrayPrototypeShims);

	  addIterator(Array.prototype, function () { return this.values(); });
	  // Chrome defines keys/values/entries on Array, but doesn't give us
	  // any way to identify its iterator.  So add our own shimmed field.
	  if (Object.getPrototypeOf) {
	    addIterator(Object.getPrototypeOf([].values()));
	  }

	  // note: this is positioned here because it relies on Array#entries
	  var arrayFromSwallowsNegativeLengths = (function () {
	    // Detects a Firefox bug in v32
	    // https://bugzilla.mozilla.org/show_bug.cgi?id=1063993
	    return valueOrFalseIfThrows(function () { return Array.from({ length: -1 }).length === 0; });
	  }());
	  var arrayFromHandlesIterables = (function () {
	    // Detects a bug in Webkit nightly r181886
	    var arr = Array.from([0].entries());
	    return arr.length === 1 && isArray(arr[0]) && arr[0][0] === 0 && arr[0][1] === 0;
	  }());
	  if (!arrayFromSwallowsNegativeLengths || !arrayFromHandlesIterables) {
	    overrideNative(Array, 'from', ArrayShims.from);
	  }
	  var arrayFromHandlesUndefinedMapFunction = (function () {
	    // Microsoft Edge v0.11 throws if the mapFn argument is *provided* but undefined,
	    // but the spec doesn't care if it's provided or not - undefined doesn't throw.
	    return valueOrFalseIfThrows(function () { return Array.from([0], undefined); });
	  }());
	  if (!arrayFromHandlesUndefinedMapFunction) {
	    var origArrayFrom = Array.from;
	    overrideNative(Array, 'from', function from(items) {
	      if (arguments.length > 0 && typeof arguments[1] !== 'undefined') {
	        return _apply(origArrayFrom, this, arguments);
	      } else {
	        return _call(origArrayFrom, this, items);
	      }
	    });
	  }

	  var toLengthsCorrectly = function (method, reversed) {
	    var obj = { length: -1 };
	    obj[reversed ? ((-1 >>> 0) - 1) : 0] = true;
	    return valueOrFalseIfThrows(function () {
	      _call(method, obj, function () {
	        // note: in nonconforming browsers, this will be called
	        // -1 >>> 0 times, which is 4294967295, so the throw matters.
	        throw new RangeError('should not reach here');
	      }, []);
	    });
	  };
	  if (!toLengthsCorrectly(Array.prototype.forEach)) {
	    var originalForEach = Array.prototype.forEach;
	    overrideNative(Array.prototype, 'forEach', function forEach(callbackFn) {
	      return _apply(originalForEach, this.length >= 0 ? this : [], arguments);
	    }, true);
	  }
	  if (!toLengthsCorrectly(Array.prototype.map)) {
	    var originalMap = Array.prototype.map;
	    overrideNative(Array.prototype, 'map', function map(callbackFn) {
	      return _apply(originalMap, this.length >= 0 ? this : [], arguments);
	    }, true);
	  }
	  if (!toLengthsCorrectly(Array.prototype.filter)) {
	    var originalFilter = Array.prototype.filter;
	    overrideNative(Array.prototype, 'filter', function filter(callbackFn) {
	      return _apply(originalFilter, this.length >= 0 ? this : [], arguments);
	    }, true);
	  }
	  if (!toLengthsCorrectly(Array.prototype.some)) {
	    var originalSome = Array.prototype.some;
	    overrideNative(Array.prototype, 'some', function some(callbackFn) {
	      return _apply(originalSome, this.length >= 0 ? this : [], arguments);
	    }, true);
	  }
	  if (!toLengthsCorrectly(Array.prototype.every)) {
	    var originalEvery = Array.prototype.every;
	    overrideNative(Array.prototype, 'every', function every(callbackFn) {
	      return _apply(originalEvery, this.length >= 0 ? this : [], arguments);
	    }, true);
	  }
	  if (!toLengthsCorrectly(Array.prototype.reduce)) {
	    var originalReduce = Array.prototype.reduce;
	    overrideNative(Array.prototype, 'reduce', function reduce(callbackFn) {
	      return _apply(originalReduce, this.length >= 0 ? this : [], arguments);
	    }, true);
	  }
	  if (!toLengthsCorrectly(Array.prototype.reduceRight, true)) {
	    var originalReduceRight = Array.prototype.reduceRight;
	    overrideNative(Array.prototype, 'reduceRight', function reduceRight(callbackFn) {
	      return _apply(originalReduceRight, this.length >= 0 ? this : [], arguments);
	    }, true);
	  }

	  if (Number('0o10') !== 8 || Number('0b10') !== 2) {
	    var OrigNumber = Number;
	    var binaryRegex = /^0b/i;
	    var octalRegex = /^0o/i;
	    // Note that in IE 8, RegExp.prototype.test doesn't seem to exist: ie, "test" is an own property of regexes. wtf.
	    var isBinary = binaryRegex.test.bind(binaryRegex);
	    var isOctal = octalRegex.test.bind(octalRegex);
	    var toPrimitive = function (O) { // need to replace this with `es-to-primitive/es6`
	      var result;
	      if (typeof O.valueOf === 'function') {
	        result = O.valueOf();
	        if (Type.primitive(result)) {
	          return result;
	        }
	      }
	      if (typeof O.toString === 'function') {
	        result = O.toString();
	        if (Type.primitive(result)) {
	          return result;
	        }
	      }
	      throw new TypeError('No default value');
	    };
	    var NumberShim = (function () {
	      // this is wrapped in an IIFE because of IE 6-8's wacky scoping issues with named function expressions.
	      return function Number(value) {
	        var primValue = Type.primitive(value) ? value : toPrimitive(value, 'number');
	        if (typeof primValue === 'string') {
	          if (isBinary(primValue)) {
	            primValue = parseInt(_strSlice(primValue, 2), 2);
	          } else if (isOctal(primValue)) {
	            primValue = parseInt(_strSlice(primValue, 2), 8);
	          }
	        }
	        if (this instanceof Number) {
	          return new OrigNumber(primValue);
	        }
	        /* jshint newcap: false */
	        return OrigNumber(primValue);
	        /* jshint newcap: true */
	      };
	    }());
	    wrapConstructor(OrigNumber, NumberShim, {});
	    /*globals Number: true */
	    Number = NumberShim;
	    Value.redefine(globals, 'Number', NumberShim);
	    /*globals Number: false */
	  }

	  var maxSafeInteger = Math.pow(2, 53) - 1;
	  defineProperties(Number, {
	    MAX_SAFE_INTEGER: maxSafeInteger,
	    MIN_SAFE_INTEGER: -maxSafeInteger,
	    EPSILON: 2.220446049250313e-16,

	    parseInt: globals.parseInt,
	    parseFloat: globals.parseFloat,

	    isFinite: numberIsFinite,

	    isInteger: function isInteger(value) {
	      return numberIsFinite(value) && ES.ToInteger(value) === value;
	    },

	    isSafeInteger: function isSafeInteger(value) {
	      return Number.isInteger(value) && _abs(value) <= Number.MAX_SAFE_INTEGER;
	    },

	    isNaN: numberIsNaN
	  });
	  // Firefox 37 has a conforming Number.parseInt, but it's not === to the global parseInt (fixed in v40)
	  defineProperty(Number, 'parseInt', globals.parseInt, Number.parseInt !== globals.parseInt);

	  // Work around bugs in Array#find and Array#findIndex -- early
	  // implementations skipped holes in sparse arrays. (Note that the
	  // implementations of find/findIndex indirectly use shimmed
	  // methods of Number, so this test has to happen down here.)
	  /*jshint elision: true */
	  if (![, 1].find(function (item, idx) { return idx === 0; })) {
	    overrideNative(Array.prototype, 'find', ArrayPrototypeShims.find);
	  }
	  if ([, 1].findIndex(function (item, idx) { return idx === 0; }) !== 0) {
	    overrideNative(Array.prototype, 'findIndex', ArrayPrototypeShims.findIndex);
	  }
	  /*jshint elision: false */

	  var isEnumerableOn = Function.bind.call(Function.bind, Object.prototype.propertyIsEnumerable);
	  var sliceArgs = function sliceArgs() {
	    // per https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments
	    // and https://gist.github.com/WebReflection/4327762cb87a8c634a29
	    var initial = Number(this);
	    var len = arguments.length;
	    var desiredArgCount = len - initial;
	    var args = new Array(desiredArgCount < 0 ? 0 : desiredArgCount);
	    for (var i = initial; i < len; ++i) {
	      args[i - initial] = arguments[i];
	    }
	    return args;
	  };
	  var assignTo = function assignTo(source) {
	    return function assignToSource(target, key) {
	      target[key] = source[key];
	      return target;
	    };
	  };
	  var assignReducer = function (target, source) {
	    var keys = Object.keys(Object(source));
	    var symbols;
	    if (ES.IsCallable(Object.getOwnPropertySymbols)) {
	      symbols = _filter(Object.getOwnPropertySymbols(Object(source)), isEnumerableOn(source));
	    }
	    return _reduce(_concat(keys, symbols || []), assignTo(source), target);
	  };

	  var ObjectShims = {
	    // 19.1.3.1
	    assign: function (target, source) {
	      var to = ES.ToObject(target, 'Cannot convert undefined or null to object');
	      return _reduce(_apply(sliceArgs, 1, arguments), assignReducer, to);
	    },

	    // Added in WebKit in https://bugs.webkit.org/show_bug.cgi?id=143865
	    is: function is(a, b) {
	      return ES.SameValue(a, b);
	    }
	  };
	  var assignHasPendingExceptions = Object.assign && Object.preventExtensions && (function () {
	    // Firefox 37 still has "pending exception" logic in its Object.assign implementation,
	    // which is 72% slower than our shim, and Firefox 40's native implementation.
	    var thrower = Object.preventExtensions({ 1: 2 });
	    try {
	      Object.assign(thrower, 'xy');
	    } catch (e) {
	      return thrower[1] === 'y';
	    }
	  }());
	  if (assignHasPendingExceptions) {
	    overrideNative(Object, 'assign', ObjectShims.assign);
	  }
	  defineProperties(Object, ObjectShims);

	  if (supportsDescriptors) {
	    var ES5ObjectShims = {
	      // 19.1.3.9
	      // shim from https://gist.github.com/WebReflection/5593554
	      setPrototypeOf: (function (Object, magic) {
	        var set;

	        var checkArgs = function (O, proto) {
	          if (!ES.TypeIsObject(O)) {
	            throw new TypeError('cannot set prototype on a non-object');
	          }
	          if (!(proto === null || ES.TypeIsObject(proto))) {
	            throw new TypeError('can only set prototype to an object or null' + proto);
	          }
	        };

	        var setPrototypeOf = function (O, proto) {
	          checkArgs(O, proto);
	          _call(set, O, proto);
	          return O;
	        };

	        try {
	          // this works already in Firefox and Safari
	          set = Object.getOwnPropertyDescriptor(Object.prototype, magic).set;
	          _call(set, {}, null);
	        } catch (e) {
	          if (Object.prototype !== {}[magic]) {
	            // IE < 11 cannot be shimmed
	            return;
	          }
	          // probably Chrome or some old Mobile stock browser
	          set = function (proto) {
	            this[magic] = proto;
	          };
	          // please note that this will **not** work
	          // in those browsers that do not inherit
	          // __proto__ by mistake from Object.prototype
	          // in these cases we should probably throw an error
	          // or at least be informed about the issue
	          setPrototypeOf.polyfill = setPrototypeOf(
	            setPrototypeOf({}, null),
	            Object.prototype
	          ) instanceof Object;
	          // setPrototypeOf.polyfill === true means it works as meant
	          // setPrototypeOf.polyfill === false means it's not 100% reliable
	          // setPrototypeOf.polyfill === undefined
	          // or
	          // setPrototypeOf.polyfill ==  null means it's not a polyfill
	          // which means it works as expected
	          // we can even delete Object.prototype.__proto__;
	        }
	        return setPrototypeOf;
	      }(Object, '__proto__'))
	    };

	    defineProperties(Object, ES5ObjectShims);
	  }

	  // Workaround bug in Opera 12 where setPrototypeOf(x, null) doesn't work,
	  // but Object.create(null) does.
	  if (Object.setPrototypeOf && Object.getPrototypeOf &&
	      Object.getPrototypeOf(Object.setPrototypeOf({}, null)) !== null &&
	      Object.getPrototypeOf(Object.create(null)) === null) {
	    (function () {
	      var FAKENULL = Object.create(null);
	      var gpo = Object.getPrototypeOf, spo = Object.setPrototypeOf;
	      Object.getPrototypeOf = function (o) {
	        var result = gpo(o);
	        return result === FAKENULL ? null : result;
	      };
	      Object.setPrototypeOf = function (o, p) {
	        var proto = p === null ? FAKENULL : p;
	        return spo(o, proto);
	      };
	      Object.setPrototypeOf.polyfill = false;
	    }());
	  }

	  var objectKeysAcceptsPrimitives = !throwsError(function () { Object.keys('foo'); });
	  if (!objectKeysAcceptsPrimitives) {
	    var originalObjectKeys = Object.keys;
	    overrideNative(Object, 'keys', function keys(value) {
	      return originalObjectKeys(ES.ToObject(value));
	    });
	  }

	  if (Object.getOwnPropertyNames) {
	    var objectGOPNAcceptsPrimitives = !throwsError(function () { Object.getOwnPropertyNames('foo'); });
	    if (!objectGOPNAcceptsPrimitives) {
	      var cachedWindowNames = typeof window === 'object' ? Object.getOwnPropertyNames(window) : [];
	      var originalObjectGetOwnPropertyNames = Object.getOwnPropertyNames;
	      overrideNative(Object, 'getOwnPropertyNames', function getOwnPropertyNames(value) {
	        var val = ES.ToObject(value);
	        if (_toString(val) === '[object Window]') {
	          try {
	            return originalObjectGetOwnPropertyNames(val);
	          } catch (e) {
	            // IE bug where layout engine calls userland gOPN for cross-domain `window` objects
	            return _concat([], cachedWindowNames);
	          }
	        }
	        return originalObjectGetOwnPropertyNames(val);
	      });
	    }
	  }
	  if (Object.getOwnPropertyDescriptor) {
	    var objectGOPDAcceptsPrimitives = !throwsError(function () { Object.getOwnPropertyDescriptor('foo', 'bar'); });
	    if (!objectGOPDAcceptsPrimitives) {
	      var originalObjectGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	      overrideNative(Object, 'getOwnPropertyDescriptor', function getOwnPropertyDescriptor(value, property) {
	        return originalObjectGetOwnPropertyDescriptor(ES.ToObject(value), property);
	      });
	    }
	  }
	  if (Object.seal) {
	    var objectSealAcceptsPrimitives = !throwsError(function () { Object.seal('foo'); });
	    if (!objectSealAcceptsPrimitives) {
	      var originalObjectSeal = Object.seal;
	      overrideNative(Object, 'seal', function seal(value) {
	        if (!Type.object(value)) { return value; }
	        return originalObjectSeal(value);
	      });
	    }
	  }
	  if (Object.isSealed) {
	    var objectIsSealedAcceptsPrimitives = !throwsError(function () { Object.isSealed('foo'); });
	    if (!objectIsSealedAcceptsPrimitives) {
	      var originalObjectIsSealed = Object.isSealed;
	      overrideNative(Object, 'isSealed', function isSealed(value) {
	        if (!Type.object(value)) { return true; }
	        return originalObjectIsSealed(value);
	      });
	    }
	  }
	  if (Object.freeze) {
	    var objectFreezeAcceptsPrimitives = !throwsError(function () { Object.freeze('foo'); });
	    if (!objectFreezeAcceptsPrimitives) {
	      var originalObjectFreeze = Object.freeze;
	      overrideNative(Object, 'freeze', function freeze(value) {
	        if (!Type.object(value)) { return value; }
	        return originalObjectFreeze(value);
	      });
	    }
	  }
	  if (Object.isFrozen) {
	    var objectIsFrozenAcceptsPrimitives = !throwsError(function () { Object.isFrozen('foo'); });
	    if (!objectIsFrozenAcceptsPrimitives) {
	      var originalObjectIsFrozen = Object.isFrozen;
	      overrideNative(Object, 'isFrozen', function isFrozen(value) {
	        if (!Type.object(value)) { return true; }
	        return originalObjectIsFrozen(value);
	      });
	    }
	  }
	  if (Object.preventExtensions) {
	    var objectPreventExtensionsAcceptsPrimitives = !throwsError(function () { Object.preventExtensions('foo'); });
	    if (!objectPreventExtensionsAcceptsPrimitives) {
	      var originalObjectPreventExtensions = Object.preventExtensions;
	      overrideNative(Object, 'preventExtensions', function preventExtensions(value) {
	        if (!Type.object(value)) { return value; }
	        return originalObjectPreventExtensions(value);
	      });
	    }
	  }
	  if (Object.isExtensible) {
	    var objectIsExtensibleAcceptsPrimitives = !throwsError(function () { Object.isExtensible('foo'); });
	    if (!objectIsExtensibleAcceptsPrimitives) {
	      var originalObjectIsExtensible = Object.isExtensible;
	      overrideNative(Object, 'isExtensible', function isExtensible(value) {
	        if (!Type.object(value)) { return false; }
	        return originalObjectIsExtensible(value);
	      });
	    }
	  }
	  if (Object.getPrototypeOf) {
	    var objectGetProtoAcceptsPrimitives = !throwsError(function () { Object.getPrototypeOf('foo'); });
	    if (!objectGetProtoAcceptsPrimitives) {
	      var originalGetProto = Object.getPrototypeOf;
	      overrideNative(Object, 'getPrototypeOf', function getPrototypeOf(value) {
	        return originalGetProto(ES.ToObject(value));
	      });
	    }
	  }

	  if (!RegExp.prototype.flags && supportsDescriptors) {
	    var regExpFlagsGetter = function flags() {
	      if (!ES.TypeIsObject(this)) {
	        throw new TypeError('Method called on incompatible type: must be an object.');
	      }
	      var result = '';
	      if (this.global) {
	        result += 'g';
	      }
	      if (this.ignoreCase) {
	        result += 'i';
	      }
	      if (this.multiline) {
	        result += 'm';
	      }
	      if (this.unicode) {
	        result += 'u';
	      }
	      if (this.sticky) {
	        result += 'y';
	      }
	      return result;
	    };

	    Value.getter(RegExp.prototype, 'flags', regExpFlagsGetter);
	  }

	  var regExpSupportsFlagsWithRegex = valueOrFalseIfThrows(function () {
	    return String(new RegExp(/a/g, 'i')) === '/a/i';
	  });

	  if (!regExpSupportsFlagsWithRegex && supportsDescriptors) {
	    var OrigRegExp = RegExp;
	    var RegExpShim = function RegExp(pattern, flags) {
	      var calledWithNew = this instanceof RegExp;
	      if (!calledWithNew && (Type.regex(pattern) || (pattern && pattern.constructor === RegExp))) {
	        return pattern;
	      }
	      if (Type.regex(pattern) && Type.string(flags)) {
	        return new RegExp(pattern.source, flags);
	      }
	      return new OrigRegExp(pattern, flags);
	    };
	    wrapConstructor(OrigRegExp, RegExpShim, {
	      $input: true // Chrome < v39 & Opera < 26 have a nonstandard "$input" property
	    });
	    /*globals RegExp: true */
	    RegExp = RegExpShim;
	    Value.redefine(globals, 'RegExp', RegExpShim);
	    /*globals RegExp: false */
	  }

	  if (supportsDescriptors) {
	    var regexGlobals = {
	      input: '$_',
	      lastMatch: '$&',
	      lastParen: '$+',
	      leftContext: '$`',
	      rightContext: '$\''
	    };
	    _forEach(Object.keys(regexGlobals), function (prop) {
	      if (prop in RegExp && !(regexGlobals[prop] in RegExp)) {
	        Value.getter(RegExp, regexGlobals[prop], function get() {
	          return RegExp[prop];
	        });
	      }
	    });
	  }
	  addDefaultSpecies(RegExp);

	  var inverseEpsilon = 1 / Number.EPSILON;
	  var roundTiesToEven = function roundTiesToEven(n) {
	    // Even though this reduces down to `return n`, it takes advantage of built-in rounding.
	    return (n + inverseEpsilon) - inverseEpsilon;
	  };
	  var BINARY_32_EPSILON = Math.pow(2, -23);
	  var BINARY_32_MAX_VALUE = Math.pow(2, 127) * (2 - BINARY_32_EPSILON);
	  var BINARY_32_MIN_VALUE = Math.pow(2, -126);
	  var numberCLZ = Number.prototype.clz;
	  delete Number.prototype.clz; // Safari 8 has Number#clz

	  var MathShims = {
	    acosh: function acosh(value) {
	      var x = Number(value);
	      if (Number.isNaN(x) || value < 1) { return NaN; }
	      if (x === 1) { return 0; }
	      if (x === Infinity) { return x; }
	      return _log(x / Math.E + _sqrt(x + 1) * _sqrt(x - 1) / Math.E) + 1;
	    },

	    asinh: function asinh(value) {
	      var x = Number(value);
	      if (x === 0 || !globalIsFinite(x)) {
	        return x;
	      }
	      return x < 0 ? -Math.asinh(-x) : _log(x + _sqrt(x * x + 1));
	    },

	    atanh: function atanh(value) {
	      var x = Number(value);
	      if (Number.isNaN(x) || x < -1 || x > 1) {
	        return NaN;
	      }
	      if (x === -1) { return -Infinity; }
	      if (x === 1) { return Infinity; }
	      if (x === 0) { return x; }
	      return 0.5 * _log((1 + x) / (1 - x));
	    },

	    cbrt: function cbrt(value) {
	      var x = Number(value);
	      if (x === 0) { return x; }
	      var negate = x < 0, result;
	      if (negate) { x = -x; }
	      if (x === Infinity) {
	        result = Infinity;
	      } else {
	        result = Math.exp(_log(x) / 3);
	        // from http://en.wikipedia.org/wiki/Cube_root#Numerical_methods
	        result = (x / (result * result) + (2 * result)) / 3;
	      }
	      return negate ? -result : result;
	    },

	    clz32: function clz32(value) {
	      // See https://bugs.ecmascript.org/show_bug.cgi?id=2465
	      var x = Number(value);
	      var number = ES.ToUint32(x);
	      if (number === 0) {
	        return 32;
	      }
	      return numberCLZ ? _call(numberCLZ, number) : 31 - _floor(_log(number + 0.5) * Math.LOG2E);
	    },

	    cosh: function cosh(value) {
	      var x = Number(value);
	      if (x === 0) { return 1; } // +0 or -0
	      if (Number.isNaN(x)) { return NaN; }
	      if (!globalIsFinite(x)) { return Infinity; }
	      if (x < 0) { x = -x; }
	      if (x > 21) { return Math.exp(x) / 2; }
	      return (Math.exp(x) + Math.exp(-x)) / 2;
	    },

	    expm1: function expm1(value) {
	      var x = Number(value);
	      if (x === -Infinity) { return -1; }
	      if (!globalIsFinite(x) || x === 0) { return x; }
	      if (_abs(x) > 0.5) {
	        return Math.exp(x) - 1;
	      }
	      // A more precise approximation using Taylor series expansion
	      // from https://github.com/paulmillr/es6-shim/issues/314#issuecomment-70293986
	      var t = x;
	      var sum = 0;
	      var n = 1;
	      while (sum + t !== sum) {
	        sum += t;
	        n += 1;
	        t *= x / n;
	      }
	      return sum;
	    },

	    hypot: function hypot(x, y) {
	      var result = 0;
	      var largest = 0;
	      for (var i = 0; i < arguments.length; ++i) {
	        var value = _abs(Number(arguments[i]));
	        if (largest < value) {
	          result *= (largest / value) * (largest / value);
	          result += 1;
	          largest = value;
	        } else {
	          result += (value > 0 ? (value / largest) * (value / largest) : value);
	        }
	      }
	      return largest === Infinity ? Infinity : largest * _sqrt(result);
	    },

	    log2: function log2(value) {
	      return _log(value) * Math.LOG2E;
	    },

	    log10: function log10(value) {
	      return _log(value) * Math.LOG10E;
	    },

	    log1p: function log1p(value) {
	      var x = Number(value);
	      if (x < -1 || Number.isNaN(x)) { return NaN; }
	      if (x === 0 || x === Infinity) { return x; }
	      if (x === -1) { return -Infinity; }

	      return (1 + x) - 1 === 0 ? x : x * (_log(1 + x) / ((1 + x) - 1));
	    },

	    sign: function sign(value) {
	      var number = Number(value);
	      if (number === 0) { return number; }
	      if (Number.isNaN(number)) { return number; }
	      return number < 0 ? -1 : 1;
	    },

	    sinh: function sinh(value) {
	      var x = Number(value);
	      if (!globalIsFinite(x) || x === 0) { return x; }

	      if (_abs(x) < 1) {
	        return (Math.expm1(x) - Math.expm1(-x)) / 2;
	      }
	      return (Math.exp(x - 1) - Math.exp(-x - 1)) * Math.E / 2;
	    },

	    tanh: function tanh(value) {
	      var x = Number(value);
	      if (Number.isNaN(x) || x === 0) { return x; }
	      if (x === Infinity) { return 1; }
	      if (x === -Infinity) { return -1; }
	      var a = Math.expm1(x);
	      var b = Math.expm1(-x);
	      if (a === Infinity) { return 1; }
	      if (b === Infinity) { return -1; }
	      return (a - b) / (Math.exp(x) + Math.exp(-x));
	    },

	    trunc: function trunc(value) {
	      var x = Number(value);
	      return x < 0 ? -_floor(-x) : _floor(x);
	    },

	    imul: function imul(x, y) {
	      // taken from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul
	      var a = ES.ToUint32(x);
	      var b = ES.ToUint32(y);
	      var ah = (a >>> 16) & 0xffff;
	      var al = a & 0xffff;
	      var bh = (b >>> 16) & 0xffff;
	      var bl = b & 0xffff;
	      // the shift by 0 fixes the sign on the high part
	      // the final |0 converts the unsigned value into a signed value
	      return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0);
	    },

	    fround: function fround(x) {
	      var v = Number(x);
	      if (v === 0 || v === Infinity || v === -Infinity || numberIsNaN(v)) {
	        return v;
	      }
	      var sign = Math.sign(v);
	      var abs = _abs(v);
	      if (abs < BINARY_32_MIN_VALUE) {
	        return sign * roundTiesToEven(abs / BINARY_32_MIN_VALUE / BINARY_32_EPSILON) * BINARY_32_MIN_VALUE * BINARY_32_EPSILON;
	      }
	      // Veltkamp's splitting (?)
	      var a = (1 + BINARY_32_EPSILON / Number.EPSILON) * abs;
	      var result = a - (a - abs);
	      if (result > BINARY_32_MAX_VALUE || numberIsNaN(result)) {
	        return sign * Infinity;
	      }
	      return sign * result;
	    }
	  };
	  defineProperties(Math, MathShims);
	  // IE 11 TP has an imprecise log1p: reports Math.log1p(-1e-17) as 0
	  defineProperty(Math, 'log1p', MathShims.log1p, Math.log1p(-1e-17) !== -1e-17);
	  // IE 11 TP has an imprecise asinh: reports Math.asinh(-1e7) as not exactly equal to -Math.asinh(1e7)
	  defineProperty(Math, 'asinh', MathShims.asinh, Math.asinh(-1e7) !== -Math.asinh(1e7));
	  // Chrome 40 has an imprecise Math.tanh with very small numbers
	  defineProperty(Math, 'tanh', MathShims.tanh, Math.tanh(-2e-17) !== -2e-17);
	  // Chrome 40 loses Math.acosh precision with high numbers
	  defineProperty(Math, 'acosh', MathShims.acosh, Math.acosh(Number.MAX_VALUE) === Infinity);
	  // Firefox 38 on Windows
	  defineProperty(Math, 'cbrt', MathShims.cbrt, Math.abs(1 - Math.cbrt(1e-300) / 1e-100) / Number.EPSILON > 8);
	  // node 0.11 has an imprecise Math.sinh with very small numbers
	  defineProperty(Math, 'sinh', MathShims.sinh, Math.sinh(-2e-17) !== -2e-17);
	  // FF 35 on Linux reports 22025.465794806725 for Math.expm1(10)
	  var expm1OfTen = Math.expm1(10);
	  defineProperty(Math, 'expm1', MathShims.expm1, expm1OfTen > 22025.465794806719 || expm1OfTen < 22025.4657948067165168);

	  var origMathRound = Math.round;
	  // breaks in e.g. Safari 8, Internet Explorer 11, Opera 12
	  var roundHandlesBoundaryConditions = Math.round(0.5 - Number.EPSILON / 4) === 0 && Math.round(-0.5 + Number.EPSILON / 3.99) === 1;

	  // When engines use Math.floor(x + 0.5) internally, Math.round can be buggy for large integers.
	  // This behavior should be governed by "round to nearest, ties to even mode"
	  // see https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-number-type
	  // These are the boundary cases where it breaks.
	  var smallestPositiveNumberWhereRoundBreaks = inverseEpsilon + 1;
	  var largestPositiveNumberWhereRoundBreaks = 2 * inverseEpsilon - 1;
	  var roundDoesNotIncreaseIntegers = [smallestPositiveNumberWhereRoundBreaks, largestPositiveNumberWhereRoundBreaks].every(function (num) {
	    return Math.round(num) === num;
	  });
	  defineProperty(Math, 'round', function round(x) {
	    var floor = _floor(x);
	    var ceil = floor === -1 ? -0 : floor + 1;
	    return x - floor < 0.5 ? floor : ceil;
	  }, !roundHandlesBoundaryConditions || !roundDoesNotIncreaseIntegers);
	  Value.preserveToString(Math.round, origMathRound);

	  var origImul = Math.imul;
	  if (Math.imul(0xffffffff, 5) !== -5) {
	    // Safari 6.1, at least, reports "0" for this value
	    Math.imul = MathShims.imul;
	    Value.preserveToString(Math.imul, origImul);
	  }
	  if (Math.imul.length !== 2) {
	    // Safari 8.0.4 has a length of 1
	    // fixed in https://bugs.webkit.org/show_bug.cgi?id=143658
	    overrideNative(Math, 'imul', function imul(x, y) {
	      return _apply(origImul, Math, arguments);
	    });
	  }

	  // Promises
	  // Simplest possible implementation; use a 3rd-party library if you
	  // want the best possible speed and/or long stack traces.
	  var PromiseShim = (function () {
	    var setTimeout = globals.setTimeout;
	    // some environments don't have setTimeout - no way to shim here.
	    if (typeof setTimeout !== 'function' && typeof setTimeout !== 'object') { return; }

	    ES.IsPromise = function (promise) {
	      if (!ES.TypeIsObject(promise)) {
	        return false;
	      }
	      if (typeof promise._promise === 'undefined') {
	        return false; // uninitialized, or missing our hidden field.
	      }
	      return true;
	    };

	    // "PromiseCapability" in the spec is what most promise implementations
	    // call a "deferred".
	    var PromiseCapability = function (C) {
	      if (!ES.IsConstructor(C)) {
	        throw new TypeError('Bad promise constructor');
	      }
	      var capability = this;
	      var resolver = function (resolve, reject) {
	        if (capability.resolve !== void 0 || capability.reject !== void 0) {
	          throw new TypeError('Bad Promise implementation!');
	        }
	        capability.resolve = resolve;
	        capability.reject = reject;
	      };
	      capability.promise = new C(resolver);
	      if (!(ES.IsCallable(capability.resolve) && ES.IsCallable(capability.reject))) {
	        throw new TypeError('Bad promise constructor');
	      }
	    };

	    // find an appropriate setImmediate-alike
	    var makeZeroTimeout;
	    /*global window */
	    if (typeof window !== 'undefined' && ES.IsCallable(window.postMessage)) {
	      makeZeroTimeout = function () {
	        // from http://dbaron.org/log/20100309-faster-timeouts
	        var timeouts = [];
	        var messageName = 'zero-timeout-message';
	        var setZeroTimeout = function (fn) {
	          _push(timeouts, fn);
	          window.postMessage(messageName, '*');
	        };
	        var handleMessage = function (event) {
	          if (event.source === window && event.data === messageName) {
	            event.stopPropagation();
	            if (timeouts.length === 0) { return; }
	            var fn = _shift(timeouts);
	            fn();
	          }
	        };
	        window.addEventListener('message', handleMessage, true);
	        return setZeroTimeout;
	      };
	    }
	    var makePromiseAsap = function () {
	      // An efficient task-scheduler based on a pre-existing Promise
	      // implementation, which we can use even if we override the
	      // global Promise below (in order to workaround bugs)
	      // https://github.com/Raynos/observ-hash/issues/2#issuecomment-35857671
	      var P = globals.Promise;
	      return P && P.resolve && function (task) {
	        return P.resolve().then(task);
	      };
	    };
	    /*global process */
	    var enqueue = ES.IsCallable(globals.setImmediate) ?
	      globals.setImmediate.bind(globals) :
	      typeof process === 'object' && process.nextTick ? process.nextTick :
	      makePromiseAsap() ||
	      (ES.IsCallable(makeZeroTimeout) ? makeZeroTimeout() :
	      function (task) { setTimeout(task, 0); }); // fallback

	    // Constants for Promise implementation
	    var PROMISE_IDENTITY = 1;
	    var PROMISE_THROWER = 2;
	    var PROMISE_PENDING = 3;
	    var PROMISE_FULFILLED = 4;
	    var PROMISE_REJECTED = 5;

	    var promiseReactionJob = function (reaction, argument) {
	      var promiseCapability = reaction.capabilities;
	      var handler = reaction.handler;
	      var handlerResult, handlerException = false, f;
	      if (handler === PROMISE_IDENTITY) {
	        handlerResult = argument;
	      } else if (handler === PROMISE_THROWER) {
	        handlerResult = argument;
	        handlerException = true;
	      } else {
	        try {
	          handlerResult = handler(argument);
	        } catch (e) {
	          handlerResult = e;
	          handlerException = true;
	        }
	      }
	      f = handlerException ? promiseCapability.reject : promiseCapability.resolve;
	      f(handlerResult);
	    };

	    var triggerPromiseReactions = function (reactions, argument) {
	      _forEach(reactions, function (reaction) {
	        enqueue(function () {
	          promiseReactionJob(reaction, argument);
	        });
	      });
	    };

	    var fulfillPromise = function (promise, value) {
	      var _promise = promise._promise;
	      var reactions = _promise.fulfillReactions;
	      _promise.result = value;
	      _promise.fulfillReactions = void 0;
	      _promise.rejectReactions = void 0;
	      _promise.state = PROMISE_FULFILLED;
	      triggerPromiseReactions(reactions, value);
	    };

	    var rejectPromise = function (promise, reason) {
	      var _promise = promise._promise;
	      var reactions = _promise.rejectReactions;
	      _promise.result = reason;
	      _promise.fulfillReactions = void 0;
	      _promise.rejectReactions = void 0;
	      _promise.state = PROMISE_REJECTED;
	      triggerPromiseReactions(reactions, reason);
	    };

	    var createResolvingFunctions = function (promise) {
	      var alreadyResolved = false;
	      var resolve = function (resolution) {
	        var then;
	        if (alreadyResolved) { return; }
	        alreadyResolved = true;
	        if (resolution === promise) {
	          return rejectPromise(promise, new TypeError('Self resolution'));
	        }
	        if (!ES.TypeIsObject(resolution)) {
	          return fulfillPromise(promise, resolution);
	        }
	        try {
	          then = resolution.then;
	        } catch (e) {
	          return rejectPromise(promise, e);
	        }
	        if (!ES.IsCallable(then)) {
	          return fulfillPromise(promise, resolution);
	        }
	        enqueue(function () {
	          promiseResolveThenableJob(promise, resolution, then);
	        });
	      };
	      var reject = function (reason) {
	        if (alreadyResolved) { return; }
	        alreadyResolved = true;
	        return rejectPromise(promise, reason);
	      };
	      return { resolve: resolve, reject: reject };
	    };

	    var promiseResolveThenableJob = function (promise, thenable, then) {
	      var resolvingFunctions = createResolvingFunctions(promise);
	      var resolve = resolvingFunctions.resolve;
	      var reject = resolvingFunctions.reject;
	      try {
	        _call(then, thenable, resolve, reject);
	      } catch (e) {
	        reject(e);
	      }
	    };

	    // This is a common step in many Promise methods
	    var getPromiseSpecies = function (C) {
	      if (!ES.TypeIsObject(C)) {
	        throw new TypeError('Promise is not object');
	      }
	      var S = C[symbolSpecies];
	      if (S !== void 0 && S !== null) {
	        return S;
	      }
	      return C;
	    };

	    var Promise = function Promise(resolver) {
	      if (!(this instanceof Promise)) {
	        throw new TypeError('Constructor Promise requires "new"');
	      }
	      if (this && this._promise) {
	        throw new TypeError('Bad construction');
	      }
	      // see https://bugs.ecmascript.org/show_bug.cgi?id=2482
	      if (!ES.IsCallable(resolver)) {
	        throw new TypeError('not a valid resolver');
	      }
	      var promise = emulateES6construct(this, Promise, Promise$prototype, {
	        _promise: {
	          result: void 0,
	          state: PROMISE_PENDING,
	          fulfillReactions: [],
	          rejectReactions: []
	        }
	      });
	      var resolvingFunctions = createResolvingFunctions(promise);
	      var reject = resolvingFunctions.reject;
	      try {
	        resolver(resolvingFunctions.resolve, reject);
	      } catch (e) {
	        reject(e);
	      }
	      return promise;
	    };
	    var Promise$prototype = Promise.prototype;

	    var _promiseAllResolver = function (index, values, capability, remaining) {
	      var alreadyCalled = false;
	      return function (x) {
	        if (alreadyCalled) { return; }
	        alreadyCalled = true;
	        values[index] = x;
	        if ((--remaining.count) === 0) {
	          var resolve = capability.resolve;
	          resolve(values); // call w/ this===undefined
	        }
	      };
	    };

	    var performPromiseAll = function (iteratorRecord, C, resultCapability) {
	      var it = iteratorRecord.iterator;
	      var values = [], remaining = { count: 1 }, next, nextValue;
	      var index = 0;
	      while (true) {
	        try {
	          next = ES.IteratorStep(it);
	          if (next === false) {
	            iteratorRecord.done = true;
	            break;
	          }
	          nextValue = next.value;
	        } catch (e) {
	          iteratorRecord.done = true;
	          throw e;
	        }
	        values[index] = void 0;
	        var nextPromise = C.resolve(nextValue);
	        var resolveElement = _promiseAllResolver(
	          index, values, resultCapability, remaining
	        );
	        remaining.count++;
	        nextPromise.then(resolveElement, resultCapability.reject);
	        index += 1;
	      }
	      if ((--remaining.count) === 0) {
	        var resolve = resultCapability.resolve;
	        resolve(values); // call w/ this===undefined
	      }
	      return resultCapability.promise;
	    };

	    var performPromiseRace = function (iteratorRecord, C, resultCapability) {
	      var it = iteratorRecord.iterator, next, nextValue, nextPromise;
	      while (true) {
	        try {
	          next = ES.IteratorStep(it);
	          if (next === false) {
	            // NOTE: If iterable has no items, resulting promise will never
	            // resolve; see:
	            // https://github.com/domenic/promises-unwrapping/issues/75
	            // https://bugs.ecmascript.org/show_bug.cgi?id=2515
	            iteratorRecord.done = true;
	            break;
	          }
	          nextValue = next.value;
	        } catch (e) {
	          iteratorRecord.done = true;
	          throw e;
	        }
	        nextPromise = C.resolve(nextValue);
	        nextPromise.then(resultCapability.resolve, resultCapability.reject);
	      }
	      return resultCapability.promise;
	    };

	    defineProperties(Promise, {
	      all: function all(iterable) {
	        var C = getPromiseSpecies(this);
	        var capability = new PromiseCapability(C);
	        var iterator, iteratorRecord;
	        try {
	          iterator = ES.GetIterator(iterable);
	          iteratorRecord = { iterator: iterator, done: false };
	          return performPromiseAll(iteratorRecord, C, capability);
	        } catch (e) {
	          if (iteratorRecord && !iteratorRecord.done) {
	            try {
	              ES.IteratorClose(iterator, true);
	            } catch (ee) {
	              e = ee;
	            }
	          }
	          var reject = capability.reject;
	          reject(e);
	          return capability.promise;
	        }
	      },

	      race: function race(iterable) {
	        var C = getPromiseSpecies(this);
	        var capability = new PromiseCapability(C);
	        var iterator, iteratorRecord;
	        try {
	          iterator = ES.GetIterator(iterable);
	          iteratorRecord = { iterator: iterator, done: false };
	          return performPromiseRace(iteratorRecord, C, capability);
	        } catch (e) {
	          if (iteratorRecord && !iteratorRecord.done) {
	            try {
	              ES.IteratorClose(iterator, true);
	            } catch (ee) {
	              e = ee;
	            }
	          }
	          var reject = capability.reject;
	          reject(e);
	          return capability.promise;
	        }
	      },

	      reject: function reject(reason) {
	        var C = this;
	        var capability = new PromiseCapability(C);
	        var rejectFunc = capability.reject;
	        rejectFunc(reason); // call with this===undefined
	        return capability.promise;
	      },

	      resolve: function resolve(v) {
	        // See https://esdiscuss.org/topic/fixing-promise-resolve for spec
	        var C = this;
	        if (ES.IsPromise(v)) {
	          var constructor = v.constructor;
	          if (constructor === C) { return v; }
	        }
	        var capability = new PromiseCapability(C);
	        var resolveFunc = capability.resolve;
	        resolveFunc(v); // call with this===undefined
	        return capability.promise;
	      }
	    });

	    defineProperties(Promise$prototype, {
	      'catch': function (onRejected) {
	        return this.then(void 0, onRejected);
	      },

	      then: function then(onFulfilled, onRejected) {
	        var promise = this;
	        if (!ES.IsPromise(promise)) { throw new TypeError('not a promise'); }
	        var C = ES.SpeciesConstructor(promise, Promise);
	        var resultCapability = new PromiseCapability(C);
	        // PerformPromiseThen(promise, onFulfilled, onRejected, resultCapability)
	        if (!ES.IsCallable(onFulfilled)) {
	          onFulfilled = PROMISE_IDENTITY;
	        }
	        if (!ES.IsCallable(onRejected)) {
	          onRejected = PROMISE_THROWER;
	        }
	        var fulfillReaction = { capabilities: resultCapability, handler: onFulfilled };
	        var rejectReaction = { capabilities: resultCapability, handler: onRejected };
	        var _promise = promise._promise, value;
	        if (_promise.state === PROMISE_PENDING) {
	          _push(_promise.fulfillReactions, fulfillReaction);
	          _push(_promise.rejectReactions, rejectReaction);
	        } else if (_promise.state === PROMISE_FULFILLED) {
	          value = _promise.result;
	          enqueue(function () {
	            promiseReactionJob(fulfillReaction, value);
	          });
	        } else if (_promise.state === PROMISE_REJECTED) {
	          value = _promise.result;
	          enqueue(function () {
	            promiseReactionJob(rejectReaction, value);
	          });
	        } else {
	          throw new TypeError('unexpected Promise state');
	        }
	        return resultCapability.promise;
	      }
	    });

	    return Promise;
	  }());

	  // Chrome's native Promise has extra methods that it shouldn't have. Let's remove them.
	  if (globals.Promise) {
	    delete globals.Promise.accept;
	    delete globals.Promise.defer;
	    delete globals.Promise.prototype.chain;
	  }

	  if (typeof PromiseShim === 'function') {
	    // export the Promise constructor.
	    defineProperties(globals, { Promise: PromiseShim });
	    // In Chrome 33 (and thereabouts) Promise is defined, but the
	    // implementation is buggy in a number of ways.  Let's check subclassing
	    // support to see if we have a buggy implementation.
	    var promiseSupportsSubclassing = supportsSubclassing(globals.Promise, function (S) {
	      return S.resolve(42).then(function () {}) instanceof S;
	    });
	    var promiseIgnoresNonFunctionThenCallbacks = !throwsError(function () { globals.Promise.reject(42).then(null, 5).then(null, noop); });
	    var promiseRequiresObjectContext = throwsError(function () { globals.Promise.call(3, noop); });
	    // Promise.resolve() was errata'ed late in the ES6 process.
	    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1170742
	    //      https://code.google.com/p/v8/issues/detail?id=4161
	    // It serves as a proxy for a number of other bugs in early Promise
	    // implementations.
	    var promiseResolveBroken = (function (Promise) {
	      var p = Promise.resolve(5);
	      p.constructor = {};
	      var p2 = Promise.resolve(p);
	      return (p === p2); // This *should* be false!
	    }(globals.Promise));
	    if (!promiseSupportsSubclassing || !promiseIgnoresNonFunctionThenCallbacks ||
	        !promiseRequiresObjectContext || promiseResolveBroken) {
	      /*globals Promise: true */
	      Promise = PromiseShim;
	      /*globals Promise: false */
	      overrideNative(globals, 'Promise', PromiseShim);
	    }
	    addDefaultSpecies(Promise);
	  }

	  // Map and Set require a true ES5 environment
	  // Their fast path also requires that the environment preserve
	  // property insertion order, which is not guaranteed by the spec.
	  var testOrder = function (a) {
	    var b = Object.keys(_reduce(a, function (o, k) {
	      o[k] = true;
	      return o;
	    }, {}));
	    return a.join(':') === b.join(':');
	  };
	  var preservesInsertionOrder = testOrder(['z', 'a', 'bb']);
	  // some engines (eg, Chrome) only preserve insertion order for string keys
	  var preservesNumericInsertionOrder = testOrder(['z', 1, 'a', '3', 2]);

	  if (supportsDescriptors) {

	    var fastkey = function fastkey(key) {
	      if (!preservesInsertionOrder) {
	        return null;
	      }
	      var type = typeof key;
	      if (type === 'undefined' || key === null) {
	        return '^' + String(key);
	      } else if (type === 'string') {
	        return '$' + key;
	      } else if (type === 'number') {
	        // note that -0 will get coerced to "0" when used as a property key
	        if (!preservesNumericInsertionOrder) {
	          return 'n' + key;
	        }
	        return key;
	      } else if (type === 'boolean') {
	        return 'b' + key;
	      }
	      return null;
	    };

	    var emptyObject = function emptyObject() {
	      // accomodate some older not-quite-ES5 browsers
	      return Object.create ? Object.create(null) : {};
	    };

	    var addIterableToMap = function addIterableToMap(MapConstructor, map, iterable) {
	      if (isArray(iterable) || Type.string(iterable)) {
	        _forEach(iterable, function (entry) {
	          map.set(entry[0], entry[1]);
	        });
	      } else if (iterable instanceof MapConstructor) {
	        _call(MapConstructor.prototype.forEach, iterable, function (value, key) {
	          map.set(key, value);
	        });
	      } else {
	        var iter, adder;
	        if (iterable !== null && typeof iterable !== 'undefined') {
	          adder = map.set;
	          if (!ES.IsCallable(adder)) { throw new TypeError('bad map'); }
	          iter = ES.GetIterator(iterable);
	        }
	        if (typeof iter !== 'undefined') {
	          while (true) {
	            var next = ES.IteratorStep(iter);
	            if (next === false) { break; }
	            var nextItem = next.value;
	            try {
	              if (!ES.TypeIsObject(nextItem)) {
	                throw new TypeError('expected iterable of pairs');
	              }
	              _call(adder, map, nextItem[0], nextItem[1]);
	            } catch (e) {
	              ES.IteratorClose(iter, true);
	              throw e;
	            }
	          }
	        }
	      }
	    };
	    var addIterableToSet = function addIterableToSet(SetConstructor, set, iterable) {
	      if (isArray(iterable) || Type.string(iterable)) {
	        _forEach(iterable, function (value) {
	          set.add(value);
	        });
	      } else if (iterable instanceof SetConstructor) {
	        _call(SetConstructor.prototype.forEach, iterable, function (value) {
	          set.add(value);
	        });
	      } else {
	        var iter, adder;
	        if (iterable !== null && typeof iterable !== 'undefined') {
	          adder = set.add;
	          if (!ES.IsCallable(adder)) { throw new TypeError('bad set'); }
	          iter = ES.GetIterator(iterable);
	        }
	        if (typeof iter !== 'undefined') {
	          while (true) {
	            var next = ES.IteratorStep(iter);
	            if (next === false) { break; }
	            var nextValue = next.value;
	            try {
	              _call(adder, set, nextValue);
	            } catch (e) {
	              ES.IteratorClose(iter, true);
	              throw e;
	            }
	          }
	        }
	      }
	    };

	    var collectionShims = {
	      Map: (function () {

	        var empty = {};

	        var MapEntry = function MapEntry(key, value) {
	          this.key = key;
	          this.value = value;
	          this.next = null;
	          this.prev = null;
	        };

	        MapEntry.prototype.isRemoved = function isRemoved() {
	          return this.key === empty;
	        };

	        var isMap = function isMap(map) {
	          return !!map._es6map;
	        };

	        var requireMapSlot = function requireMapSlot(map, method) {
	          if (!ES.TypeIsObject(map) || !isMap(map)) {
	            throw new TypeError('Method Map.prototype.' + method + ' called on incompatible receiver ' + String(map));
	          }
	        };

	        var MapIterator = function MapIterator(map, kind) {
	          requireMapSlot(map, '[[MapIterator]]');
	          this.head = map._head;
	          this.i = this.head;
	          this.kind = kind;
	        };

	        MapIterator.prototype = {
	          next: function next() {
	            var i = this.i, kind = this.kind, head = this.head, result;
	            if (typeof this.i === 'undefined') {
	              return { value: void 0, done: true };
	            }
	            while (i.isRemoved() && i !== head) {
	              // back up off of removed entries
	              i = i.prev;
	            }
	            // advance to next unreturned element.
	            while (i.next !== head) {
	              i = i.next;
	              if (!i.isRemoved()) {
	                if (kind === 'key') {
	                  result = i.key;
	                } else if (kind === 'value') {
	                  result = i.value;
	                } else {
	                  result = [i.key, i.value];
	                }
	                this.i = i;
	                return { value: result, done: false };
	              }
	            }
	            // once the iterator is done, it is done forever.
	            this.i = void 0;
	            return { value: void 0, done: true };
	          }
	        };
	        addIterator(MapIterator.prototype);

	        var MapShim = function Map() {
	          if (!(this instanceof Map)) {
	            throw new TypeError('Constructor Map requires "new"');
	          }
	          if (this && this._es6map) {
	            throw new TypeError('Bad construction');
	          }
	          var map = emulateES6construct(this, Map, Map$prototype, {
	            _es6map: true,
	            _head: null,
	            _storage: emptyObject(),
	            _size: 0
	          });

	          var head = new MapEntry(null, null);
	          // circular doubly-linked list.
	          head.next = head.prev = head;
	          map._head = head;

	          // Optionally initialize map from iterable
	          if (arguments.length > 0) {
	            addIterableToMap(Map, map, arguments[0]);
	          }
	          return map;
	        };
	        var Map$prototype = MapShim.prototype;

	        Value.getter(Map$prototype, 'size', function () {
	          if (typeof this._size === 'undefined') {
	            throw new TypeError('size method called on incompatible Map');
	          }
	          return this._size;
	        });

	        defineProperties(Map$prototype, {
	          get: function get(key) {
	            requireMapSlot(this, 'get');
	            var fkey = fastkey(key);
	            if (fkey !== null) {
	              // fast O(1) path
	              var entry = this._storage[fkey];
	              if (entry) {
	                return entry.value;
	              } else {
	                return;
	              }
	            }
	            var head = this._head, i = head;
	            while ((i = i.next) !== head) {
	              if (ES.SameValueZero(i.key, key)) {
	                return i.value;
	              }
	            }
	          },

	          has: function has(key) {
	            requireMapSlot(this, 'has');
	            var fkey = fastkey(key);
	            if (fkey !== null) {
	              // fast O(1) path
	              return typeof this._storage[fkey] !== 'undefined';
	            }
	            var head = this._head, i = head;
	            while ((i = i.next) !== head) {
	              if (ES.SameValueZero(i.key, key)) {
	                return true;
	              }
	            }
	            return false;
	          },

	          set: function set(key, value) {
	            requireMapSlot(this, 'set');
	            var head = this._head, i = head, entry;
	            var fkey = fastkey(key);
	            if (fkey !== null) {
	              // fast O(1) path
	              if (typeof this._storage[fkey] !== 'undefined') {
	                this._storage[fkey].value = value;
	                return this;
	              } else {
	                entry = this._storage[fkey] = new MapEntry(key, value);
	                i = head.prev;
	                // fall through
	              }
	            }
	            while ((i = i.next) !== head) {
	              if (ES.SameValueZero(i.key, key)) {
	                i.value = value;
	                return this;
	              }
	            }
	            entry = entry || new MapEntry(key, value);
	            if (ES.SameValue(-0, key)) {
	              entry.key = +0; // coerce -0 to +0 in entry
	            }
	            entry.next = this._head;
	            entry.prev = this._head.prev;
	            entry.prev.next = entry;
	            entry.next.prev = entry;
	            this._size += 1;
	            return this;
	          },

	          'delete': function (key) {
	            requireMapSlot(this, 'delete');
	            var head = this._head, i = head;
	            var fkey = fastkey(key);
	            if (fkey !== null) {
	              // fast O(1) path
	              if (typeof this._storage[fkey] === 'undefined') {
	                return false;
	              }
	              i = this._storage[fkey].prev;
	              delete this._storage[fkey];
	              // fall through
	            }
	            while ((i = i.next) !== head) {
	              if (ES.SameValueZero(i.key, key)) {
	                i.key = i.value = empty;
	                i.prev.next = i.next;
	                i.next.prev = i.prev;
	                this._size -= 1;
	                return true;
	              }
	            }
	            return false;
	          },

	          clear: function clear() {
	            requireMapSlot(this, 'clear');
	            this._size = 0;
	            this._storage = emptyObject();
	            var head = this._head, i = head, p = i.next;
	            while ((i = p) !== head) {
	              i.key = i.value = empty;
	              p = i.next;
	              i.next = i.prev = head;
	            }
	            head.next = head.prev = head;
	          },

	          keys: function keys() {
	            requireMapSlot(this, 'keys');
	            return new MapIterator(this, 'key');
	          },

	          values: function values() {
	            requireMapSlot(this, 'values');
	            return new MapIterator(this, 'value');
	          },

	          entries: function entries() {
	            requireMapSlot(this, 'entries');
	            return new MapIterator(this, 'key+value');
	          },

	          forEach: function forEach(callback) {
	            requireMapSlot(this, 'forEach');
	            var context = arguments.length > 1 ? arguments[1] : null;
	            var it = this.entries();
	            for (var entry = it.next(); !entry.done; entry = it.next()) {
	              if (context) {
	                _call(callback, context, entry.value[1], entry.value[0], this);
	              } else {
	                callback(entry.value[1], entry.value[0], this);
	              }
	            }
	          }
	        });
	        addIterator(Map$prototype, Map$prototype.entries);

	        return MapShim;
	      }()),

	      Set: (function () {
	        var isSet = function isSet(set) {
	          return set._es6set && typeof set._storage !== 'undefined';
	        };
	        var requireSetSlot = function requireSetSlot(set, method) {
	          if (!ES.TypeIsObject(set) || !isSet(set)) {
	            // https://github.com/paulmillr/es6-shim/issues/176
	            throw new TypeError('Set.prototype.' + method + ' called on incompatible receiver ' + String(set));
	          }
	        };

	        // Creating a Map is expensive.  To speed up the common case of
	        // Sets containing only string or numeric keys, we use an object
	        // as backing storage and lazily create a full Map only when
	        // required.
	        var SetShim = function Set() {
	          if (!(this instanceof Set)) {
	            throw new TypeError('Constructor Set requires "new"');
	          }
	          if (this && this._es6set) {
	            throw new TypeError('Bad construction');
	          }
	          var set = emulateES6construct(this, Set, Set$prototype, {
	            _es6set: true,
	            '[[SetData]]': null,
	            _storage: emptyObject()
	          });
	          if (!set._es6set) {
	            throw new TypeError('bad set');
	          }

	          // Optionally initialize Set from iterable
	          if (arguments.length > 0) {
	            addIterableToSet(Set, set, arguments[0]);
	          }
	          return set;
	        };
	        var Set$prototype = SetShim.prototype;

	        // Switch from the object backing storage to a full Map.
	        var ensureMap = function ensureMap(set) {
	          if (!set['[[SetData]]']) {
	            var m = set['[[SetData]]'] = new collectionShims.Map();
	            _forEach(Object.keys(set._storage), function (k) {
	              if (k === '^null') {
	                k = null;
	              } else if (k === '^undefined') {
	                k = void 0;
	              } else {
	                var first = k.charAt(0);
	                if (first === '$') {
	                  k = _strSlice(k, 1);
	                } else if (first === 'n') {
	                  k = +_strSlice(k, 1);
	                } else if (first === 'b') {
	                  k = k === 'btrue';
	                } else {
	                  k = +k;
	                }
	              }
	              m.set(k, k);
	            });
	            set._storage = null; // free old backing storage
	          }
	        };

	        Value.getter(SetShim.prototype, 'size', function () {
	          requireSetSlot(this, 'size');
	          ensureMap(this);
	          return this['[[SetData]]'].size;
	        });

	        defineProperties(SetShim.prototype, {
	          has: function has(key) {
	            requireSetSlot(this, 'has');
	            var fkey;
	            if (this._storage && (fkey = fastkey(key)) !== null) {
	              return !!this._storage[fkey];
	            }
	            ensureMap(this);
	            return this['[[SetData]]'].has(key);
	          },

	          add: function add(key) {
	            requireSetSlot(this, 'add');
	            var fkey;
	            if (this._storage && (fkey = fastkey(key)) !== null) {
	              this._storage[fkey] = true;
	              return this;
	            }
	            ensureMap(this);
	            this['[[SetData]]'].set(key, key);
	            return this;
	          },

	          'delete': function (key) {
	            requireSetSlot(this, 'delete');
	            var fkey;
	            if (this._storage && (fkey = fastkey(key)) !== null) {
	              var hasFKey = _hasOwnProperty(this._storage, fkey);
	              return (delete this._storage[fkey]) && hasFKey;
	            }
	            ensureMap(this);
	            return this['[[SetData]]']['delete'](key);
	          },

	          clear: function clear() {
	            requireSetSlot(this, 'clear');
	            if (this._storage) {
	              this._storage = emptyObject();
	            } else {
	              this['[[SetData]]'].clear();
	            }
	          },

	          values: function values() {
	            requireSetSlot(this, 'values');
	            ensureMap(this);
	            return this['[[SetData]]'].values();
	          },

	          entries: function entries() {
	            requireSetSlot(this, 'entries');
	            ensureMap(this);
	            return this['[[SetData]]'].entries();
	          },

	          forEach: function forEach(callback) {
	            requireSetSlot(this, 'forEach');
	            var context = arguments.length > 1 ? arguments[1] : null;
	            var entireSet = this;
	            ensureMap(entireSet);
	            this['[[SetData]]'].forEach(function (value, key) {
	              if (context) {
	                _call(callback, context, key, key, entireSet);
	              } else {
	                callback(key, key, entireSet);
	              }
	            });
	          }
	        });
	        defineProperty(SetShim.prototype, 'keys', SetShim.prototype.values, true);
	        addIterator(SetShim.prototype, SetShim.prototype.values);

	        return SetShim;
	      }())
	    };

	    if (globals.Map || globals.Set) {
	      // Safari 8, for example, doesn't accept an iterable.
	      var mapAcceptsArguments = valueOrFalseIfThrows(function () { return new Map([[1, 2]]).get(1) === 2; });
	      if (!mapAcceptsArguments) {
	        var OrigMapNoArgs = globals.Map;
	        globals.Map = function Map() {
	          if (!(this instanceof Map)) {
	            throw new TypeError('Constructor Map requires "new"');
	          }
	          var m = new OrigMapNoArgs();
	          if (arguments.length > 0) {
	            addIterableToMap(Map, m, arguments[0]);
	          }
	          Object.setPrototypeOf(m, globals.Map.prototype);
	          defineProperty(m, 'constructor', Map, true);
	          return m;
	        };
	        globals.Map.prototype = create(OrigMapNoArgs.prototype);
	        Value.preserveToString(globals.Map, OrigMapNoArgs);
	      }
	      var testMap = new Map();
	      var mapUsesSameValueZero = (function (m) {
	        m['delete'](0);
	        m['delete'](-0);
	        m.set(0, 3);
	        m.get(-0, 4);
	        return m.get(0) === 3 && m.get(-0) === 4;
	      }(testMap));
	      var mapSupportsChaining = testMap.set(1, 2) === testMap;
	      if (!mapUsesSameValueZero || !mapSupportsChaining) {
	        var origMapSet = Map.prototype.set;
	        overrideNative(Map.prototype, 'set', function set(k, v) {
	          _call(origMapSet, this, k === 0 ? 0 : k, v);
	          return this;
	        });
	      }
	      if (!mapUsesSameValueZero) {
	        var origMapGet = Map.prototype.get;
	        var origMapHas = Map.prototype.has;
	        defineProperties(Map.prototype, {
	          get: function get(k) {
	            return _call(origMapGet, this, k === 0 ? 0 : k);
	          },
	          has: function has(k) {
	            return _call(origMapHas, this, k === 0 ? 0 : k);
	          }
	        }, true);
	        Value.preserveToString(Map.prototype.get, origMapGet);
	        Value.preserveToString(Map.prototype.has, origMapHas);
	      }
	      var testSet = new Set();
	      var setUsesSameValueZero = (function (s) {
	        s['delete'](0);
	        s.add(-0);
	        return !s.has(0);
	      }(testSet));
	      var setSupportsChaining = testSet.add(1) === testSet;
	      if (!setUsesSameValueZero || !setSupportsChaining) {
	        var origSetAdd = Set.prototype.add;
	        Set.prototype.add = function add(v) {
	          _call(origSetAdd, this, v === 0 ? 0 : v);
	          return this;
	        };
	        Value.preserveToString(Set.prototype.add, origSetAdd);
	      }
	      if (!setUsesSameValueZero) {
	        var origSetHas = Set.prototype.has;
	        Set.prototype.has = function has(v) {
	          return _call(origSetHas, this, v === 0 ? 0 : v);
	        };
	        Value.preserveToString(Set.prototype.has, origSetHas);
	        var origSetDel = Set.prototype['delete'];
	        Set.prototype['delete'] = function SetDelete(v) {
	          return _call(origSetDel, this, v === 0 ? 0 : v);
	        };
	        Value.preserveToString(Set.prototype['delete'], origSetDel);
	      }
	      var mapSupportsSubclassing = supportsSubclassing(globals.Map, function (M) {
	        var m = new M([]);
	        // Firefox 32 is ok with the instantiating the subclass but will
	        // throw when the map is used.
	        m.set(42, 42);
	        return m instanceof M;
	      });
	      var mapFailsToSupportSubclassing = Object.setPrototypeOf && !mapSupportsSubclassing; // without Object.setPrototypeOf, subclassing is not possible
	      var mapRequiresNew = (function () {
	        try {
	          return !(globals.Map() instanceof globals.Map);
	        } catch (e) {
	          return e instanceof TypeError;
	        }
	      }());
	      if (globals.Map.length !== 0 || mapFailsToSupportSubclassing || !mapRequiresNew) {
	        var OrigMap = globals.Map;
	        globals.Map = function Map() {
	          if (!(this instanceof Map)) {
	            throw new TypeError('Constructor Map requires "new"');
	          }
	          var m = new OrigMap();
	          if (arguments.length > 0) {
	            addIterableToMap(Map, m, arguments[0]);
	          }
	          Object.setPrototypeOf(m, Map.prototype);
	          defineProperty(m, 'constructor', Map, true);
	          return m;
	        };
	        globals.Map.prototype = OrigMap.prototype;
	        Value.preserveToString(globals.Map, OrigMap);
	      }
	      var setSupportsSubclassing = supportsSubclassing(globals.Set, function (S) {
	        var s = new S([]);
	        s.add(42, 42);
	        return s instanceof S;
	      });
	      var setFailsToSupportSubclassing = Object.setPrototypeOf && !setSupportsSubclassing; // without Object.setPrototypeOf, subclassing is not possible
	      var setRequiresNew = (function () {
	        try {
	          return !(globals.Set() instanceof globals.Set);
	        } catch (e) {
	          return e instanceof TypeError;
	        }
	      }());
	      if (globals.Set.length !== 0 || setFailsToSupportSubclassing || !setRequiresNew) {
	        var OrigSet = globals.Set;
	        globals.Set = function Set() {
	          if (!(this instanceof Set)) {
	            throw new TypeError('Constructor Set requires "new"');
	          }
	          var s = new OrigSet();
	          if (arguments.length > 0) {
	            addIterableToSet(Set, s, arguments[0]);
	          }
	          Object.setPrototypeOf(s, Set.prototype);
	          defineProperty(s, 'constructor', Set, true);
	          return s;
	        };
	        globals.Set.prototype = OrigSet.prototype;
	        Value.preserveToString(globals.Set, OrigSet);
	      }
	      var mapIterationThrowsStopIterator = !valueOrFalseIfThrows(function () {
	        return (new Map()).keys().next().done;
	      });
	      /*
	        - In Firefox < 23, Map#size is a function.
	        - In all current Firefox, Set#entries/keys/values & Map#clear do not exist
	        - https://bugzilla.mozilla.org/show_bug.cgi?id=869996
	        - In Firefox 24, Map and Set do not implement forEach
	        - In Firefox 25 at least, Map and Set are callable without "new"
	      */
	      if (
	        typeof globals.Map.prototype.clear !== 'function' ||
	        new globals.Set().size !== 0 ||
	        new globals.Map().size !== 0 ||
	        typeof globals.Map.prototype.keys !== 'function' ||
	        typeof globals.Set.prototype.keys !== 'function' ||
	        typeof globals.Map.prototype.forEach !== 'function' ||
	        typeof globals.Set.prototype.forEach !== 'function' ||
	        isCallableWithoutNew(globals.Map) ||
	        isCallableWithoutNew(globals.Set) ||
	        typeof (new globals.Map().keys().next) !== 'function' || // Safari 8
	        mapIterationThrowsStopIterator || // Firefox 25
	        !mapSupportsSubclassing
	      ) {
	        delete globals.Map; // necessary to overwrite in Safari 8
	        delete globals.Set; // necessary to overwrite in Safari 8
	        defineProperties(globals, {
	          Map: collectionShims.Map,
	          Set: collectionShims.Set
	        }, true);
	      }

	      if (globals.Set.prototype.keys !== globals.Set.prototype.values) {
	        // Fixed in WebKit with https://bugs.webkit.org/show_bug.cgi?id=144190
	        defineProperty(globals.Set.prototype, 'keys', globals.Set.prototype.values, true);
	      }

	      // Shim incomplete iterator implementations.
	      addIterator(Object.getPrototypeOf((new globals.Map()).keys()));
	      addIterator(Object.getPrototypeOf((new globals.Set()).keys()));

	      if (functionsHaveNames && globals.Set.prototype.has.name !== 'has') {
	        // Microsoft Edge v0.11.10074.0 is missing a name on Set#has
	        var anonymousSetHas = globals.Set.prototype.has;
	        overrideNative(globals.Set.prototype, 'has', function has(key) {
	          return _call(anonymousSetHas, this, key);
	        });
	      }
	    }
	    defineProperties(globals, collectionShims);
	    addDefaultSpecies(globals.Map);
	    addDefaultSpecies(globals.Set);
	  }

	  // Reflect
	  if (!globals.Reflect) {
	    defineProperty(globals, 'Reflect', {});
	  }
	  var Reflect = globals.Reflect;

	  var throwUnlessTargetIsObject = function throwUnlessTargetIsObject(target) {
	    if (!ES.TypeIsObject(target)) {
	      throw new TypeError('target must be an object');
	    }
	  };

	  // Some Reflect methods are basically the same as
	  // those on the Object global, except that a TypeError is thrown if
	  // target isn't an object. As well as returning a boolean indicating
	  // the success of the operation.
	  var ReflectShims = {
	    // Apply method in a functional form.
	    apply: function apply() {
	      return _apply(ES.Call, null, arguments);
	    },

	    // New operator in a functional form.
	    construct: function construct(constructor, args) {
	      if (!ES.IsConstructor(constructor)) {
	        throw new TypeError('First argument must be a constructor.');
	      }
	      var newTarget = (arguments.length < 3) ? constructor : arguments[2];
	      if (!ES.IsConstructor(newTarget)) {
	        throw new TypeError('new.target must be a constructor.');
	      }
	      return ES.Construct(constructor, args, newTarget, 'internal');
	    },

	    // When deleting a non-existent or configurable property,
	    // true is returned.
	    // When attempting to delete a non-configurable property,
	    // it will return false.
	    deleteProperty: function deleteProperty(target, key) {
	      throwUnlessTargetIsObject(target);
	      if (supportsDescriptors) {
	        var desc = Object.getOwnPropertyDescriptor(target, key);

	        if (desc && !desc.configurable) {
	          return false;
	        }
	      }

	      // Will return true.
	      return delete target[key];
	    },

	    enumerate: function enumerate(target) {
	      throwUnlessTargetIsObject(target);
	      return new ObjectIterator(target, 'key');
	    },

	    has: function has(target, key) {
	      throwUnlessTargetIsObject(target);
	      return key in target;
	    }
	  };

	  if (Object.getOwnPropertyNames) {
	    Object.assign(ReflectShims, {
	      // Basically the result of calling the internal [[OwnPropertyKeys]].
	      // Concatenating propertyNames and propertySymbols should do the trick.
	      // This should continue to work together with a Symbol shim
	      // which overrides Object.getOwnPropertyNames and implements
	      // Object.getOwnPropertySymbols.
	      ownKeys: function ownKeys(target) {
	        throwUnlessTargetIsObject(target);
	        var keys = Object.getOwnPropertyNames(target);

	        if (ES.IsCallable(Object.getOwnPropertySymbols)) {
	          _pushApply(keys, Object.getOwnPropertySymbols(target));
	        }

	        return keys;
	      }
	    });
	  }

	  var callAndCatchException = function ConvertExceptionToBoolean(func) {
	    return !throwsError(func);
	  };

	  if (Object.preventExtensions) {
	    Object.assign(ReflectShims, {
	      isExtensible: function isExtensible(target) {
	        throwUnlessTargetIsObject(target);
	        return Object.isExtensible(target);
	      },
	      preventExtensions: function preventExtensions(target) {
	        throwUnlessTargetIsObject(target);
	        return callAndCatchException(function () {
	          Object.preventExtensions(target);
	        });
	      }
	    });
	  }

	  if (supportsDescriptors) {
	    var internalGet = function get(target, key, receiver) {
	      var desc = Object.getOwnPropertyDescriptor(target, key);

	      if (!desc) {
	        var parent = Object.getPrototypeOf(target);

	        if (parent === null) {
	          return undefined;
	        }

	        return internalGet(parent, key, receiver);
	      }

	      if ('value' in desc) {
	        return desc.value;
	      }

	      if (desc.get) {
	        return _call(desc.get, receiver);
	      }

	      return undefined;
	    };

	    var internalSet = function set(target, key, value, receiver) {
	      var desc = Object.getOwnPropertyDescriptor(target, key);

	      if (!desc) {
	        var parent = Object.getPrototypeOf(target);

	        if (parent !== null) {
	          return internalSet(parent, key, value, receiver);
	        }

	        desc = {
	          value: void 0,
	          writable: true,
	          enumerable: true,
	          configurable: true
	        };
	      }

	      if ('value' in desc) {
	        if (!desc.writable) {
	          return false;
	        }

	        if (!ES.TypeIsObject(receiver)) {
	          return false;
	        }

	        var existingDesc = Object.getOwnPropertyDescriptor(receiver, key);

	        if (existingDesc) {
	          return Reflect.defineProperty(receiver, key, {
	            value: value
	          });
	        } else {
	          return Reflect.defineProperty(receiver, key, {
	            value: value,
	            writable: true,
	            enumerable: true,
	            configurable: true
	          });
	        }
	      }

	      if (desc.set) {
	        _call(desc.set, receiver, value);
	        return true;
	      }

	      return false;
	    };

	    Object.assign(ReflectShims, {
	      defineProperty: function defineProperty(target, propertyKey, attributes) {
	        throwUnlessTargetIsObject(target);
	        return callAndCatchException(function () {
	          Object.defineProperty(target, propertyKey, attributes);
	        });
	      },

	      getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
	        throwUnlessTargetIsObject(target);
	        return Object.getOwnPropertyDescriptor(target, propertyKey);
	      },

	      // Syntax in a functional form.
	      get: function get(target, key) {
	        throwUnlessTargetIsObject(target);
	        var receiver = arguments.length > 2 ? arguments[2] : target;

	        return internalGet(target, key, receiver);
	      },

	      set: function set(target, key, value) {
	        throwUnlessTargetIsObject(target);
	        var receiver = arguments.length > 3 ? arguments[3] : target;

	        return internalSet(target, key, value, receiver);
	      }
	    });
	  }

	  if (Object.getPrototypeOf) {
	    var objectDotGetPrototypeOf = Object.getPrototypeOf;
	    ReflectShims.getPrototypeOf = function getPrototypeOf(target) {
	      throwUnlessTargetIsObject(target);
	      return objectDotGetPrototypeOf(target);
	    };
	  }

	  if (Object.setPrototypeOf && ReflectShims.getPrototypeOf) {
	    var willCreateCircularPrototype = function (object, proto) {
	      while (proto) {
	        if (object === proto) {
	          return true;
	        }
	        proto = ReflectShims.getPrototypeOf(proto);
	      }
	      return false;
	    };

	    Object.assign(ReflectShims, {
	      // Sets the prototype of the given object.
	      // Returns true on success, otherwise false.
	      setPrototypeOf: function setPrototypeOf(object, proto) {
	        throwUnlessTargetIsObject(object);
	        if (proto !== null && !ES.TypeIsObject(proto)) {
	          throw new TypeError('proto must be an object or null');
	        }

	        // If they already are the same, we're done.
	        if (proto === Reflect.getPrototypeOf(object)) {
	          return true;
	        }

	        // Cannot alter prototype if object not extensible.
	        if (Reflect.isExtensible && !Reflect.isExtensible(object)) {
	          return false;
	        }

	        // Ensure that we do not create a circular prototype chain.
	        if (willCreateCircularPrototype(object, proto)) {
	          return false;
	        }

	        Object.setPrototypeOf(object, proto);

	        return true;
	      }
	    });
	  }
	  var defineOrOverrideReflectProperty = function (key, shim) {
	    if (!ES.IsCallable(globals.Reflect[key])) {
	      defineProperty(globals.Reflect, key, shim);
	    } else {
	      var acceptsPrimitives = valueOrFalseIfThrows(function () {
	        globals.Reflect[key](1);
	        globals.Reflect[key](NaN);
	        globals.Reflect[key](true);
	        return true;
	      });
	      if (acceptsPrimitives) {
	        overrideNative(globals.Reflect, key, shim);
	      }
	    }
	  };
	  Object.keys(ReflectShims).forEach(function (key) {
	    defineOrOverrideReflectProperty(key, ReflectShims[key]);
	  });
	  if (functionsHaveNames && globals.Reflect.getPrototypeOf.name !== 'getPrototypeOf') {
	    var originalReflectGetProto = globals.Reflect.getPrototypeOf;
	    overrideNative(globals.Reflect, 'getPrototypeOf', function getPrototypeOf(target) {
	      return _call(originalReflectGetProto, globals.Reflect, target);
	    });
	  }
	  if (globals.Reflect.setPrototypeOf) {
	    if (valueOrFalseIfThrows(function () {
	      globals.Reflect.setPrototypeOf(1, {});
	      return true;
	    })) {
	      overrideNative(globals.Reflect, 'setPrototypeOf', ReflectShims.setPrototypeOf);
	    }
	  }
	  if (globals.Reflect.defineProperty) {
	    if (!valueOrFalseIfThrows(function () {
	      var basic = !globals.Reflect.defineProperty(1, 'test', { value: 1 });
	      // "extensible" fails on Edge 0.12
	      var extensible = typeof Object.preventExtensions !== 'function' || !globals.Reflect.defineProperty(Object.preventExtensions({}), 'test', {});
	      return basic && extensible;
	    })) {
	      overrideNative(globals.Reflect, 'defineProperty', ReflectShims.defineProperty);
	    }
	  }
	  if (globals.Reflect.construct) {
	    if (!valueOrFalseIfThrows(function () {
	      var F = function F() {};
	      return globals.Reflect.construct(function () {}, [], F) instanceof F;
	    })) {
	      overrideNative(globals.Reflect, 'construct', ReflectShims.construct);
	    }
	  }

	  if (String(new Date(NaN)) !== 'Invalid Date') {
	    var dateToString = Date.prototype.toString;
	    var shimmedDateToString = function toString() {
	      var valueOf = +this;
	      if (valueOf !== valueOf) {
	        return 'Invalid Date';
	      }
	      return _call(dateToString, this);
	    };
	    overrideNative(Date.prototype, 'toString', shimmedDateToString);
	  }

	  // Annex B HTML methods
	  // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-additional-properties-of-the-string.prototype-object
	  var stringHTMLshims = {
	    anchor: function anchor(name) { return ES.CreateHTML(this, 'a', 'name', name); },
	    big: function big() { return ES.CreateHTML(this, 'big', '', ''); },
	    blink: function blink() { return ES.CreateHTML(this, 'blink', '', ''); },
	    bold: function bold() { return ES.CreateHTML(this, 'b', '', ''); },
	    fixed: function fixed() { return ES.CreateHTML(this, 'tt', '', ''); },
	    fontcolor: function fontcolor(color) { return ES.CreateHTML(this, 'font', 'color', color); },
	    fontsize: function fontsize(size) { return ES.CreateHTML(this, 'font', 'size', size); },
	    italics: function italics() { return ES.CreateHTML(this, 'i', '', ''); },
	    link: function link(url) { return ES.CreateHTML(this, 'a', 'href', url); },
	    small: function small() { return ES.CreateHTML(this, 'small', '', ''); },
	    strike: function strike() { return ES.CreateHTML(this, 'strike', '', ''); },
	    sub: function sub() { return ES.CreateHTML(this, 'sub', '', ''); },
	    sup: function sub() { return ES.CreateHTML(this, 'sup', '', ''); }
	  };
	  _forEach(Object.keys(stringHTMLshims), function (key) {
	    var method = String.prototype[key];
	    var shouldOverwrite = false;
	    if (ES.IsCallable(method)) {
	      var output = _call(method, '', ' " ');
	      var quotesCount = _concat([], output.match(/"/g)).length;
	      shouldOverwrite = output !== output.toLowerCase() || quotesCount > 2;
	    } else {
	      shouldOverwrite = true;
	    }
	    if (shouldOverwrite) {
	      overrideNative(String.prototype, key, stringHTMLshims[key]);
	    }
	  });

	  var JSONstringifiesSymbols = (function () {
	    // Microsoft Edge v0.12 stringifies Symbols incorrectly
	    if (!Type.symbol(Symbol.iterator)) { return false; } // Symbols are not supported
	    var stringify = typeof JSON === 'object' && typeof JSON.stringify === 'function' ? JSON.stringify : null;
	    if (!stringify) { return false; } // JSON.stringify is not supported
	    if (typeof stringify(Symbol()) !== 'undefined') { return true; } // Symbols should become `undefined`
	    if (stringify([Symbol()]) !== '[null]') { return true; } // Symbols in arrays should become `null`
	    var obj = { a: Symbol() };
	    obj[Symbol()] = true;
	    if (stringify(obj) !== '{}') { return true; } // Symbol-valued keys *and* Symbol-valued properties should be omitted
	    return false;
	  }());
	  var JSONstringifyAcceptsObjectSymbol = valueOrFalseIfThrows(function () {
	    // Chrome 45 throws on stringifying object symbols
	    if (!Type.symbol(Symbol.iterator)) { return true; } // Symbols are not supported
	    return JSON.stringify(Object(Symbol())) === '{}' && JSON.stringify([Object(Symbol())]) === '[{}]';
	  });
	  if (JSONstringifiesSymbols || !JSONstringifyAcceptsObjectSymbol) {
	    var origStringify = JSON.stringify;
	    overrideNative(JSON, 'stringify', function stringify(value) {
	      if (typeof value === 'symbol') { return; }
	      var replacer;
	      if (arguments.length > 1) {
	        replacer = arguments[1];
	      }
	      var args = [value];
	      if (!isArray(replacer)) {
	        var replaceFn = ES.IsCallable(replacer) ? replacer : null;
	        var wrappedReplacer = function (key, val) {
	          var parsedValue = replacer ? _call(replacer, this, key, val) : val;
	          if (typeof parsedValue !== 'symbol') {
	            if (Type.symbol(parsedValue)) {
	              return assignTo({})(parsedValue);
	            } else {
	              return parsedValue;
	            }
	          }
	        };
	        args.push(wrappedReplacer);
	      } else {
	        // create wrapped replacer that handles an array replacer?
	        args.push(replacer);
	      }
	      if (arguments.length > 2) {
	        args.push(arguments[2]);
	      }
	      return origStringify.apply(this, args);
	    });
	  }

	  return globals;
	}));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(2)))

/***/ },
/* 2 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*! *****************************************************************************
	Copyright (C) Microsoft. All rights reserved.
	Licensed under the Apache License, Version 2.0 (the "License"); you may not use
	this file except in compliance with the License. You may obtain a copy of the
	License at http://www.apache.org/licenses/LICENSE-2.0

	THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
	WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
	MERCHANTABLITY OR NON-INFRINGEMENT.

	See the Apache Version 2.0 License for specific language governing permissions
	and limitations under the License.
	***************************************************************************** */
	"use strict";
	var Reflect;
	(function (Reflect) {
	    // Load global or shim versions of Map, Set, and WeakMap
	    var functionPrototype = Object.getPrototypeOf(Function);
	    var _Map = typeof Map === "function" ? Map : CreateMapPolyfill();
	    var _Set = typeof Set === "function" ? Set : CreateSetPolyfill();
	    var _WeakMap = typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
	    // [[Metadata]] internal slot
	    var __Metadata__ = new _WeakMap();
	    /**
	      * Applies a set of decorators to a property of a target object.
	      * @param decorators An array of decorators.
	      * @param target The target object.
	      * @param targetKey (Optional) The property key to decorate.
	      * @param targetDescriptor (Optional) The property descriptor for the target key
	      * @remarks Decorators are applied in reverse order.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     C = Reflect.decorate(decoratorsArray, C);
	      *
	      *     // property (on constructor)
	      *     Reflect.decorate(decoratorsArray, C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     Reflect.decorate(decoratorsArray, C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     Object.defineProperty(C, "staticMethod",
	      *         Reflect.decorate(decoratorsArray, C, "staticMethod",
	      *             Object.getOwnPropertyDescriptor(C, "staticMethod")));
	      *
	      *     // method (on prototype)
	      *     Object.defineProperty(C.prototype, "method",
	      *         Reflect.decorate(decoratorsArray, C.prototype, "method",
	      *             Object.getOwnPropertyDescriptor(C.prototype, "method")));
	      *
	      */
	    function decorate(decorators, target, targetKey, targetDescriptor) {
	        if (!IsUndefined(targetDescriptor)) {
	            if (!IsArray(decorators)) {
	                throw new TypeError();
	            }
	            else if (!IsObject(target)) {
	                throw new TypeError();
	            }
	            else if (IsUndefined(targetKey)) {
	                throw new TypeError();
	            }
	            else if (!IsObject(targetDescriptor)) {
	                throw new TypeError();
	            }
	            targetKey = ToPropertyKey(targetKey);
	            return DecoratePropertyWithDescriptor(decorators, target, targetKey, targetDescriptor);
	        }
	        else if (!IsUndefined(targetKey)) {
	            if (!IsArray(decorators)) {
	                throw new TypeError();
	            }
	            else if (!IsObject(target)) {
	                throw new TypeError();
	            }
	            targetKey = ToPropertyKey(targetKey);
	            return DecoratePropertyWithoutDescriptor(decorators, target, targetKey);
	        }
	        else {
	            if (!IsArray(decorators)) {
	                throw new TypeError();
	            }
	            else if (!IsConstructor(target)) {
	                throw new TypeError();
	            }
	            return DecorateConstructor(decorators, target);
	        }
	    }
	    Reflect.decorate = decorate;
	    /**
	      * A default metadata decorator factory that can be used on a class, class member, or parameter.
	      * @param metadataKey The key for the metadata entry.
	      * @param metadataValue The value for the metadata entry.
	      * @returns A decorator function.
	      * @remarks
	      * If `metadataKey` is already defined for the target and target key, the
	      * metadataValue for that key will be overwritten.
	      * @example
	      *
	      *     // constructor
	      *     @Reflect.metadata(key, value)
	      *     class C {
	      *     }
	      *
	      *     // property (on constructor, TypeScript only)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         static staticProperty;
	      *     }
	      *
	      *     // property (on prototype, TypeScript only)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         property;
	      *     }
	      *
	      *     // method (on constructor)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         static staticMethod() { }
	      *     }
	      *
	      *     // method (on prototype)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         method() { }
	      *     }
	      *
	      */
	    function metadata(metadataKey, metadataValue) {
	        function decorator(target, targetKey) {
	            if (!IsUndefined(targetKey)) {
	                if (!IsObject(target)) {
	                    throw new TypeError();
	                }
	                targetKey = ToPropertyKey(targetKey);
	                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
	            }
	            else {
	                if (!IsConstructor(target)) {
	                    throw new TypeError();
	                }
	                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, undefined);
	            }
	        }
	        return decorator;
	    }
	    Reflect.metadata = metadata;
	    /**
	      * Define a unique metadata entry on the target.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param metadataValue A value that contains attached metadata.
	      * @param target The target object on which to define metadata.
	      * @param targetKey (Optional) The property key for the target.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     Reflect.defineMetadata("custom:annotation", options, C);
	      *
	      *     // property (on constructor)
	      *     Reflect.defineMetadata("custom:annotation", options, C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     Reflect.defineMetadata("custom:annotation", options, C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     Reflect.defineMetadata("custom:annotation", options, C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     Reflect.defineMetadata("custom:annotation", options, C.prototype, "method");
	      *
	      *     // decorator factory as metadata-producing annotation.
	      *     function MyAnnotation(options): Decorator {
	      *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
	      *     }
	      *
	      */
	    function defineMetadata(metadataKey, metadataValue, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
	    }
	    Reflect.defineMetadata = defineMetadata;
	    /**
	      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.hasMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.hasMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.hasMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.hasMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.hasMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function hasMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryHasMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.hasMetadata = hasMetadata;
	    /**
	      * Gets a value indicating whether the target object has the provided metadata key defined.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function hasOwnMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryHasOwnMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.hasOwnMetadata = hasOwnMetadata;
	    /**
	      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function getMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryGetMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.getMetadata = getMetadata;
	    /**
	      * Gets the metadata value for the provided metadata key on the target object.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getOwnMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function getOwnMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryGetOwnMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.getOwnMetadata = getOwnMetadata;
	    /**
	      * Gets the metadata keys defined on the target object or its prototype chain.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns An array of unique metadata keys.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getMetadataKeys(C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getMetadataKeys(C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getMetadataKeys(C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getMetadataKeys(C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getMetadataKeys(C.prototype, "method");
	      *
	      */
	    function getMetadataKeys(target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryMetadataKeys(target, targetKey);
	    }
	    Reflect.getMetadataKeys = getMetadataKeys;
	    /**
	      * Gets the unique metadata keys defined on the target object.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns An array of unique metadata keys.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getOwnMetadataKeys(C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getOwnMetadataKeys(C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getOwnMetadataKeys(C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getOwnMetadataKeys(C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getOwnMetadataKeys(C.prototype, "method");
	      *
	      */
	    function getOwnMetadataKeys(target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryOwnMetadataKeys(target, targetKey);
	    }
	    Reflect.getOwnMetadataKeys = getOwnMetadataKeys;
	    /**
	      * Deletes the metadata entry from the target object with the provided key.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns `true` if the metadata entry was found and deleted; otherwise, false.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.deleteMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.deleteMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.deleteMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.deleteMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.deleteMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function deleteMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#deletemetadata-metadatakey-p-
	        var metadataMap = GetOrCreateMetadataMap(target, targetKey, false);
	        if (IsUndefined(metadataMap)) {
	            return false;
	        }
	        if (!metadataMap.delete(metadataKey)) {
	            return false;
	        }
	        if (metadataMap.size > 0) {
	            return true;
	        }
	        var targetMetadata = __Metadata__.get(target);
	        targetMetadata.delete(targetKey);
	        if (targetMetadata.size > 0) {
	            return true;
	        }
	        __Metadata__.delete(target);
	        return true;
	    }
	    Reflect.deleteMetadata = deleteMetadata;
	    function DecorateConstructor(decorators, target) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            var decorated = decorator(target);
	            if (!IsUndefined(decorated)) {
	                if (!IsConstructor(decorated)) {
	                    throw new TypeError();
	                }
	                target = decorated;
	            }
	        }
	        return target;
	    }
	    function DecoratePropertyWithDescriptor(decorators, target, propertyKey, descriptor) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            var decorated = decorator(target, propertyKey, descriptor);
	            if (!IsUndefined(decorated)) {
	                if (!IsObject(decorated)) {
	                    throw new TypeError();
	                }
	                descriptor = decorated;
	            }
	        }
	        return descriptor;
	    }
	    function DecoratePropertyWithoutDescriptor(decorators, target, propertyKey) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            decorator(target, propertyKey);
	        }
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#getorcreatemetadatamap--o-p-create-
	    function GetOrCreateMetadataMap(target, targetKey, create) {
	        var targetMetadata = __Metadata__.get(target);
	        if (!targetMetadata) {
	            if (!create) {
	                return undefined;
	            }
	            targetMetadata = new _Map();
	            __Metadata__.set(target, targetMetadata);
	        }
	        var keyMetadata = targetMetadata.get(targetKey);
	        if (!keyMetadata) {
	            if (!create) {
	                return undefined;
	            }
	            keyMetadata = new _Map();
	            targetMetadata.set(targetKey, keyMetadata);
	        }
	        return keyMetadata;
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasmetadata--metadatakey-o-p-
	    function OrdinaryHasMetadata(MetadataKey, O, P) {
	        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
	        if (hasOwn) {
	            return true;
	        }
	        var parent = GetPrototypeOf(O);
	        if (parent !== null) {
	            return OrdinaryHasMetadata(MetadataKey, parent, P);
	        }
	        return false;
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasownmetadata--metadatakey-o-p-
	    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, false);
	        if (metadataMap === undefined) {
	            return false;
	        }
	        return Boolean(metadataMap.has(MetadataKey));
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetmetadata--metadatakey-o-p-
	    function OrdinaryGetMetadata(MetadataKey, O, P) {
	        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
	        if (hasOwn) {
	            return OrdinaryGetOwnMetadata(MetadataKey, O, P);
	        }
	        var parent = GetPrototypeOf(O);
	        if (parent !== null) {
	            return OrdinaryGetMetadata(MetadataKey, parent, P);
	        }
	        return undefined;
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetownmetadata--metadatakey-o-p-
	    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, false);
	        if (metadataMap === undefined) {
	            return undefined;
	        }
	        return metadataMap.get(MetadataKey);
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarydefineownmetadata--metadatakey-metadatavalue-o-p-
	    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, true);
	        metadataMap.set(MetadataKey, MetadataValue);
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarymetadatakeys--o-p-
	    function OrdinaryMetadataKeys(O, P) {
	        var ownKeys = OrdinaryOwnMetadataKeys(O, P);
	        var parent = GetPrototypeOf(O);
	        if (parent === null) {
	            return ownKeys;
	        }
	        var parentKeys = OrdinaryMetadataKeys(parent, P);
	        if (parentKeys.length <= 0) {
	            return ownKeys;
	        }
	        if (ownKeys.length <= 0) {
	            return parentKeys;
	        }
	        var set = new _Set();
	        var keys = [];
	        for (var _i = 0; _i < ownKeys.length; _i++) {
	            var key = ownKeys[_i];
	            var hasKey = set.has(key);
	            if (!hasKey) {
	                set.add(key);
	                keys.push(key);
	            }
	        }
	        for (var _a = 0; _a < parentKeys.length; _a++) {
	            var key = parentKeys[_a];
	            var hasKey = set.has(key);
	            if (!hasKey) {
	                set.add(key);
	                keys.push(key);
	            }
	        }
	        return keys;
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryownmetadatakeys--o-p-
	    function OrdinaryOwnMetadataKeys(target, targetKey) {
	        var metadataMap = GetOrCreateMetadataMap(target, targetKey, false);
	        var keys = [];
	        if (metadataMap) {
	            metadataMap.forEach(function (_, key) { return keys.push(key); });
	        }
	        return keys;
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-undefined-type
	    function IsUndefined(x) {
	        return x === undefined;
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isarray
	    function IsArray(x) {
	        return Array.isArray(x);
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-type
	    function IsObject(x) {
	        return typeof x === "object" ? x !== null : typeof x === "function";
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isconstructor
	    function IsConstructor(x) {
	        return typeof x === "function";
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-symbol-type
	    function IsSymbol(x) {
	        return typeof x === "symbol";
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-topropertykey
	    function ToPropertyKey(value) {
	        if (IsSymbol(value)) {
	            return value;
	        }
	        return String(value);
	    }
	    function GetPrototypeOf(O) {
	        var proto = Object.getPrototypeOf(O);
	        if (typeof O !== "function" || O === functionPrototype) {
	            return proto;
	        }
	        // TypeScript doesn't set __proto__ in ES5, as it's non-standard. 
	        // Try to determine the superclass constructor. Compatible implementations
	        // must either set __proto__ on a subclass constructor to the superclass constructor,
	        // or ensure each class has a valid `constructor` property on its prototype that
	        // points back to the constructor.
	        // If this is not the same as Function.[[Prototype]], then this is definately inherited.
	        // This is the case when in ES6 or when using __proto__ in a compatible browser.
	        if (proto !== functionPrototype) {
	            return proto;
	        }
	        // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
	        var prototype = O.prototype;
	        var prototypeProto = Object.getPrototypeOf(prototype);
	        if (prototypeProto == null || prototypeProto === Object.prototype) {
	            return proto;
	        }
	        // if the constructor was not a function, then we cannot determine the heritage.
	        var constructor = prototypeProto.constructor;
	        if (typeof constructor !== "function") {
	            return proto;
	        }
	        // if we have some kind of self-reference, then we cannot determine the heritage.
	        if (constructor === O) {
	            return proto;
	        }
	        // we have a pretty good guess at the heritage.
	        return constructor;
	    }
	    // naive Map shim
	    function CreateMapPolyfill() {
	        var cacheSentinel = {};
	        function Map() {
	            this._keys = [];
	            this._values = [];
	            this._cache = cacheSentinel;
	        }
	        Map.prototype = {
	            get size() {
	                return this._keys.length;
	            },
	            has: function (key) {
	                if (key === this._cache) {
	                    return true;
	                }
	                if (this._find(key) >= 0) {
	                    this._cache = key;
	                    return true;
	                }
	                return false;
	            },
	            get: function (key) {
	                var index = this._find(key);
	                if (index >= 0) {
	                    this._cache = key;
	                    return this._values[index];
	                }
	                return undefined;
	            },
	            set: function (key, value) {
	                this.delete(key);
	                this._keys.push(key);
	                this._values.push(value);
	                this._cache = key;
	                return this;
	            },
	            delete: function (key) {
	                var index = this._find(key);
	                if (index >= 0) {
	                    this._keys.splice(index, 1);
	                    this._values.splice(index, 1);
	                    this._cache = cacheSentinel;
	                    return true;
	                }
	                return false;
	            },
	            clear: function () {
	                this._keys.length = 0;
	                this._values.length = 0;
	                this._cache = cacheSentinel;
	            },
	            forEach: function (callback, thisArg) {
	                var size = this.size;
	                for (var i = 0; i < size; ++i) {
	                    var key = this._keys[i];
	                    var value = this._values[i];
	                    this._cache = key;
	                    callback.call(this, value, key, this);
	                }
	            },
	            _find: function (key) {
	                var keys = this._keys;
	                var size = keys.length;
	                for (var i = 0; i < size; ++i) {
	                    if (keys[i] === key) {
	                        return i;
	                    }
	                }
	                return -1;
	            }
	        };
	        return Map;
	    }
	    // naive Set shim
	    function CreateSetPolyfill() {
	        var cacheSentinel = {};
	        function Set() {
	            this._map = new _Map();
	        }
	        Set.prototype = {
	            get size() {
	                return this._map.length;
	            },
	            has: function (value) {
	                return this._map.has(value);
	            },
	            add: function (value) {
	                this._map.set(value, value);
	                return this;
	            },
	            delete: function (value) {
	                return this._map.delete(value);
	            },
	            clear: function () {
	                this._map.clear();
	            },
	            forEach: function (callback, thisArg) {
	                this._map.forEach(callback, thisArg);
	            }
	        };
	        return Set;
	    }
	    // naive WeakMap shim
	    function CreateWeakMapPolyfill() {
	        var UUID_SIZE = 16;
	        var isNode = typeof global !== "undefined" && Object.prototype.toString.call(global.process) === '[object process]';
	        var nodeCrypto = isNode && __webpack_require__(4);
	        var hasOwn = Object.prototype.hasOwnProperty;
	        var keys = {};
	        var rootKey = CreateUniqueKey();
	        function WeakMap() {
	            this._key = CreateUniqueKey();
	        }
	        WeakMap.prototype = {
	            has: function (target) {
	                var table = GetOrCreateWeakMapTable(target, false);
	                if (table) {
	                    return this._key in table;
	                }
	                return false;
	            },
	            get: function (target) {
	                var table = GetOrCreateWeakMapTable(target, false);
	                if (table) {
	                    return table[this._key];
	                }
	                return undefined;
	            },
	            set: function (target, value) {
	                var table = GetOrCreateWeakMapTable(target, true);
	                table[this._key] = value;
	                return this;
	            },
	            delete: function (target) {
	                var table = GetOrCreateWeakMapTable(target, false);
	                if (table && this._key in table) {
	                    return delete table[this._key];
	                }
	                return false;
	            },
	            clear: function () {
	                // NOTE: not a real clear, just makes the previous data unreachable
	                this._key = CreateUniqueKey();
	            }
	        };
	        function FillRandomBytes(buffer, size) {
	            for (var i = 0; i < size; ++i) {
	                buffer[i] = Math.random() * 255 | 0;
	            }
	        }
	        function GenRandomBytes(size) {
	            if (nodeCrypto) {
	                var data = nodeCrypto.randomBytes(size);
	                return data;
	            }
	            else if (typeof Uint8Array === "function") {
	                var data = new Uint8Array(size);
	                if (typeof crypto !== "undefined") {
	                    crypto.getRandomValues(data);
	                }
	                else if (typeof msCrypto !== "undefined") {
	                    msCrypto.getRandomValues(data);
	                }
	                else {
	                    FillRandomBytes(data, size);
	                }
	                return data;
	            }
	            else {
	                var data = new Array(size);
	                FillRandomBytes(data, size);
	                return data;
	            }
	        }
	        function CreateUUID() {
	            var data = GenRandomBytes(UUID_SIZE);
	            // mark as random - RFC 4122 Â§ 4.4
	            data[6] = data[6] & 0x4f | 0x40;
	            data[8] = data[8] & 0xbf | 0x80;
	            var result = "";
	            for (var offset = 0; offset < UUID_SIZE; ++offset) {
	                var byte = data[offset];
	                if (offset === 4 || offset === 6 || offset === 8) {
	                    result += "-";
	                }
	                if (byte < 16) {
	                    result += "0";
	                }
	                result += byte.toString(16).toLowerCase();
	            }
	            return result;
	        }
	        function CreateUniqueKey() {
	            var key;
	            do {
	                key = "@@WeakMap@@" + CreateUUID();
	            } while (hasOwn.call(keys, key));
	            keys[key] = true;
	            return key;
	        }
	        function GetOrCreateWeakMapTable(target, create) {
	            if (!hasOwn.call(target, rootKey)) {
	                if (!create) {
	                    return undefined;
	                }
	                Object.defineProperty(target, rootKey, { value: Object.create(null) });
	            }
	            return target[rootKey];
	        }
	        return WeakMap;
	    }
	    // hook global Reflect
	    (function (__global) {
	        if (typeof __global.Reflect !== "undefined") {
	            if (__global.Reflect !== Reflect) {
	                for (var p in Reflect) {
	                    __global.Reflect[p] = Reflect[p];
	                }
	            }
	        }
	        else {
	            __global.Reflect = Reflect;
	        }
	    })(typeof window !== "undefined" ? window :
	        typeof WorkerGlobalScope !== "undefined" ? self :
	            typeof global !== "undefined" ? global :
	                Function("return this;")());
	})(Reflect || (Reflect = {}));
	//# sourceMappingURL=Reflect.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var rng = __webpack_require__(9)

	function error () {
	  var m = [].slice.call(arguments).join(' ')
	  throw new Error([
	    m,
	    'we accept pull requests',
	    'http://github.com/dominictarr/crypto-browserify'
	    ].join('\n'))
	}

	exports.createHash = __webpack_require__(11)

	exports.createHmac = __webpack_require__(23)

	exports.randomBytes = function(size, callback) {
	  if (callback && callback.call) {
	    try {
	      callback.call(this, undefined, new Buffer(rng(size)))
	    } catch (err) { callback(err) }
	  } else {
	    return new Buffer(rng(size))
	  }
	}

	function each(a, f) {
	  for(var i in a)
	    f(a[i], i)
	}

	exports.getHashes = function () {
	  return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160']
	}

	var p = __webpack_require__(24)(exports)
	exports.pbkdf2 = p.pbkdf2
	exports.pbkdf2Sync = p.pbkdf2Sync


	// the least I can do is make error messages for the rest of the node.js/crypto api.
	each(['createCredentials'
	, 'createCipher'
	, 'createCipheriv'
	, 'createDecipher'
	, 'createDecipheriv'
	, 'createSign'
	, 'createVerify'
	, 'createDiffieHellman'
	], function (name) {
	  exports[name] = function () {
	    error('sorry,', name, 'is not implemented yet')
	  }
	})

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	var base64 = __webpack_require__(6)
	var ieee754 = __webpack_require__(7)
	var isArray = __webpack_require__(8)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	Buffer.poolSize = 8192 // not used by this implementation

	var rootParent = {}

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
	 *     on objects.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	function typedArraySupport () {
	  function Bar () {}
	  try {
	    var arr = new Uint8Array(1)
	    arr.foo = function () { return 42 }
	    arr.constructor = Bar
	    return arr.foo() === 42 && // typed array instances can be augmented
	        arr.constructor === Bar && // constructor can be set
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer (arg) {
	  if (!(this instanceof Buffer)) {
	    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
	    if (arguments.length > 1) return new Buffer(arg, arguments[1])
	    return new Buffer(arg)
	  }

	  this.length = 0
	  this.parent = undefined

	  // Common case.
	  if (typeof arg === 'number') {
	    return fromNumber(this, arg)
	  }

	  // Slightly less common case.
	  if (typeof arg === 'string') {
	    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
	  }

	  // Unusual.
	  return fromObject(this, arg)
	}

	function fromNumber (that, length) {
	  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < length; i++) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

	  // Assumption: byteLength() return value is always < kMaxLength.
	  var length = byteLength(string, encoding) | 0
	  that = allocate(that, length)

	  that.write(string, encoding)
	  return that
	}

	function fromObject (that, object) {
	  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

	  if (isArray(object)) return fromArray(that, object)

	  if (object == null) {
	    throw new TypeError('must start with number, buffer, array or string')
	  }

	  if (typeof ArrayBuffer !== 'undefined') {
	    if (object.buffer instanceof ArrayBuffer) {
	      return fromTypedArray(that, object)
	    }
	    if (object instanceof ArrayBuffer) {
	      return fromArrayBuffer(that, object)
	    }
	  }

	  if (object.length) return fromArrayLike(that, object)

	  return fromJsonObject(that, object)
	}

	function fromBuffer (that, buffer) {
	  var length = checked(buffer.length) | 0
	  that = allocate(that, length)
	  buffer.copy(that, 0, 0, length)
	  return that
	}

	function fromArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Duplicate of fromArray() to keep fromArray() monomorphic.
	function fromTypedArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  // Truncating the elements is probably not what people expect from typed
	  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
	  // of the old Buffer constructor.
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    array.byteLength
	    that = Buffer._augment(new Uint8Array(array))
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromTypedArray(that, new Uint8Array(array))
	  }
	  return that
	}

	function fromArrayLike (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
	// Returns a zero-length buffer for inputs that don't conform to the spec.
	function fromJsonObject (that, object) {
	  var array
	  var length = 0

	  if (object.type === 'Buffer' && isArray(object.data)) {
	    array = object.data
	    length = checked(array.length) | 0
	  }
	  that = allocate(that, length)

	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	}

	function allocate (that, length) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = Buffer._augment(new Uint8Array(length))
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that.length = length
	    that._isBuffer = true
	  }

	  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
	  if (fromPool) that.parent = rootParent

	  return that
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (subject, encoding) {
	  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

	  var buf = new Buffer(subject, encoding)
	  delete buf.parent
	  return buf
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  var i = 0
	  var len = Math.min(x, y)
	  while (i < len) {
	    if (a[i] !== b[i]) break

	    ++i
	  }

	  if (i !== len) {
	    x = a[i]
	    y = b[i]
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

	  if (list.length === 0) {
	    return new Buffer(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; i++) {
	      length += list[i].length
	    }
	  }

	  var buf = new Buffer(length)
	  var pos = 0
	  for (i = 0; i < list.length; i++) {
	    var item = list[i]
	    item.copy(buf, pos)
	    pos += item.length
	  }
	  return buf
	}

	function byteLength (string, encoding) {
	  if (typeof string !== 'string') string = '' + string

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'binary':
	      // Deprecated
	      case 'raw':
	      case 'raws':
	        return len
	      case 'utf8':
	      case 'utf-8':
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	// pre-set for values that may exist in the future
	Buffer.prototype.length = undefined
	Buffer.prototype.parent = undefined

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  start = start | 0
	  end = end === undefined || end === Infinity ? this.length : end | 0

	  if (!encoding) encoding = 'utf8'
	  if (start < 0) start = 0
	  if (end > this.length) end = this.length
	  if (end <= start) return ''

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'binary':
	        return binarySlice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return 0
	  return Buffer.compare(this, b)
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
	  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
	  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
	  byteOffset >>= 0

	  if (this.length === 0) return -1
	  if (byteOffset >= this.length) return -1

	  // Negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

	  if (typeof val === 'string') {
	    if (val.length === 0) return -1 // special case: looking for empty string always fails
	    return String.prototype.indexOf.call(this, val, byteOffset)
	  }
	  if (Buffer.isBuffer(val)) {
	    return arrayIndexOf(this, val, byteOffset)
	  }
	  if (typeof val === 'number') {
	    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
	      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
	    }
	    return arrayIndexOf(this, [ val ], byteOffset)
	  }

	  function arrayIndexOf (arr, val, byteOffset) {
	    var foundIndex = -1
	    for (var i = 0; byteOffset + i < arr.length; i++) {
	      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
	      } else {
	        foundIndex = -1
	      }
	    }
	    return -1
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	// `get` is deprecated
	Buffer.prototype.get = function get (offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.')
	  return this.readUInt8(offset)
	}

	// `set` is deprecated
	Buffer.prototype.set = function set (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.')
	  return this.writeUInt8(v, offset)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; i++) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) throw new Error('Invalid hex string')
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    var swap = encoding
	    encoding = offset
	    offset = length | 0
	    length = swap
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'binary':
	        return binaryWrite(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function binarySlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  if (newBuf.length) newBuf.parent = this.parent || this

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	  if (offset < 0) throw new RangeError('index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; i--) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; i++) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    target._set(this.subarray(start, start + len), targetStart)
	  }

	  return len
	}

	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function fill (value, start, end) {
	  if (!value) value = 0
	  if (!start) start = 0
	  if (!end) end = this.length

	  if (end < start) throw new RangeError('end < start')

	  // Fill 0 bytes; we're done
	  if (end === start) return
	  if (this.length === 0) return

	  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
	  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

	  var i
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString())
	    var len = bytes.length
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len]
	    }
	  }

	  return this
	}

	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length)
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i]
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
	  }
	}

	// HELPER FUNCTIONS
	// ================

	var BP = Buffer.prototype

	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function _augment (arr) {
	  arr.constructor = Buffer
	  arr._isBuffer = true

	  // save reference to original Uint8Array set method before overwriting
	  arr._set = arr.set

	  // deprecated
	  arr.get = BP.get
	  arr.set = BP.set

	  arr.write = BP.write
	  arr.toString = BP.toString
	  arr.toLocaleString = BP.toString
	  arr.toJSON = BP.toJSON
	  arr.equals = BP.equals
	  arr.compare = BP.compare
	  arr.indexOf = BP.indexOf
	  arr.copy = BP.copy
	  arr.slice = BP.slice
	  arr.readUIntLE = BP.readUIntLE
	  arr.readUIntBE = BP.readUIntBE
	  arr.readUInt8 = BP.readUInt8
	  arr.readUInt16LE = BP.readUInt16LE
	  arr.readUInt16BE = BP.readUInt16BE
	  arr.readUInt32LE = BP.readUInt32LE
	  arr.readUInt32BE = BP.readUInt32BE
	  arr.readIntLE = BP.readIntLE
	  arr.readIntBE = BP.readIntBE
	  arr.readInt8 = BP.readInt8
	  arr.readInt16LE = BP.readInt16LE
	  arr.readInt16BE = BP.readInt16BE
	  arr.readInt32LE = BP.readInt32LE
	  arr.readInt32BE = BP.readInt32BE
	  arr.readFloatLE = BP.readFloatLE
	  arr.readFloatBE = BP.readFloatBE
	  arr.readDoubleLE = BP.readDoubleLE
	  arr.readDoubleBE = BP.readDoubleBE
	  arr.writeUInt8 = BP.writeUInt8
	  arr.writeUIntLE = BP.writeUIntLE
	  arr.writeUIntBE = BP.writeUIntBE
	  arr.writeUInt16LE = BP.writeUInt16LE
	  arr.writeUInt16BE = BP.writeUInt16BE
	  arr.writeUInt32LE = BP.writeUInt32LE
	  arr.writeUInt32BE = BP.writeUInt32BE
	  arr.writeIntLE = BP.writeIntLE
	  arr.writeIntBE = BP.writeIntBE
	  arr.writeInt8 = BP.writeInt8
	  arr.writeInt16LE = BP.writeInt16LE
	  arr.writeInt16BE = BP.writeInt16BE
	  arr.writeInt32LE = BP.writeInt32LE
	  arr.writeInt32BE = BP.writeInt32BE
	  arr.writeFloatLE = BP.writeFloatLE
	  arr.writeFloatBE = BP.writeFloatBE
	  arr.writeDoubleLE = BP.writeDoubleLE
	  arr.writeDoubleBE = BP.writeDoubleBE
	  arr.fill = BP.fill
	  arr.inspect = BP.inspect
	  arr.toArrayBuffer = BP.toArrayBuffer

	  return arr
	}

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; i++) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer, (function() { return this; }())))

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	;(function (exports) {
		'use strict';

	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array

		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
		var PLUS_URL_SAFE = '-'.charCodeAt(0)
		var SLASH_URL_SAFE = '_'.charCodeAt(0)

		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS ||
			    code === PLUS_URL_SAFE)
				return 62 // '+'
			if (code === SLASH ||
			    code === SLASH_URL_SAFE)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}

		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr

			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}

			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)

			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length

			var L = 0

			function push (v) {
				arr[L++] = v
			}

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}

			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}

			return arr
		}

		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length

			function encode (num) {
				return lookup.charAt(num)
			}

			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}

			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}

			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}

			return output
		}

		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}( false ? (this.base64js = {}) : exports))


/***/ },
/* 7 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 8 */
/***/ function(module, exports) {

	
	/**
	 * isArray
	 */

	var isArray = Array.isArray;

	/**
	 * toString
	 */

	var str = Object.prototype.toString;

	/**
	 * Whether or not the given `val`
	 * is an array.
	 *
	 * example:
	 *
	 *        isArray([]);
	 *        // > true
	 *        isArray(arguments);
	 *        // > false
	 *        isArray('');
	 *        // > false
	 *
	 * @param {mixed} val
	 * @return {bool}
	 */

	module.exports = isArray || function (val) {
	  return !! val && '[object Array]' == str.call(val);
	};


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, Buffer) {(function() {
	  var g = ('undefined' === typeof window ? global : window) || {}
	  _crypto = (
	    g.crypto || g.msCrypto || __webpack_require__(10)
	  )
	  module.exports = function(size) {
	    // Modern Browsers
	    if(_crypto.getRandomValues) {
	      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
	      /* This will not work in older browsers.
	       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
	       */
	    
	      _crypto.getRandomValues(bytes);
	      return bytes;
	    }
	    else if (_crypto.randomBytes) {
	      return _crypto.randomBytes(size)
	    }
	    else
	      throw new Error(
	        'secure random number generation not supported by this browser\n'+
	        'use chrome, FireFox or Internet Explorer 11'
	      )
	  }
	}())

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(5).Buffer))

/***/ },
/* 10 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(12)

	var md5 = toConstructor(__webpack_require__(20))
	var rmd160 = toConstructor(__webpack_require__(22))

	function toConstructor (fn) {
	  return function () {
	    var buffers = []
	    var m= {
	      update: function (data, enc) {
	        if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)
	        buffers.push(data)
	        return this
	      },
	      digest: function (enc) {
	        var buf = Buffer.concat(buffers)
	        var r = fn(buf)
	        buffers = null
	        return enc ? r.toString(enc) : r
	      }
	    }
	    return m
	  }
	}

	module.exports = function (alg) {
	  if('md5' === alg) return new md5()
	  if('rmd160' === alg) return new rmd160()
	  return createHash(alg)
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var exports = module.exports = function (alg) {
	  var Alg = exports[alg]
	  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')
	  return new Alg()
	}

	var Buffer = __webpack_require__(5).Buffer
	var Hash   = __webpack_require__(13)(Buffer)

	exports.sha1 = __webpack_require__(14)(Buffer, Hash)
	exports.sha256 = __webpack_require__(18)(Buffer, Hash)
	exports.sha512 = __webpack_require__(19)(Buffer, Hash)


/***/ },
/* 13 */
/***/ function(module, exports) {

	module.exports = function (Buffer) {

	  //prototype class for hash functions
	  function Hash (blockSize, finalSize) {
	    this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)
	    this._finalSize = finalSize
	    this._blockSize = blockSize
	    this._len = 0
	    this._s = 0
	  }

	  Hash.prototype.init = function () {
	    this._s = 0
	    this._len = 0
	  }

	  Hash.prototype.update = function (data, enc) {
	    if ("string" === typeof data) {
	      enc = enc || "utf8"
	      data = new Buffer(data, enc)
	    }

	    var l = this._len += data.length
	    var s = this._s = (this._s || 0)
	    var f = 0
	    var buffer = this._block

	    while (s < l) {
	      var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
	      var ch = (t - f)

	      for (var i = 0; i < ch; i++) {
	        buffer[(s % this._blockSize) + i] = data[i + f]
	      }

	      s += ch
	      f += ch

	      if ((s % this._blockSize) === 0) {
	        this._update(buffer)
	      }
	    }
	    this._s = s

	    return this
	  }

	  Hash.prototype.digest = function (enc) {
	    // Suppose the length of the message M, in bits, is l
	    var l = this._len * 8

	    // Append the bit 1 to the end of the message
	    this._block[this._len % this._blockSize] = 0x80

	    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
	    this._block.fill(0, this._len % this._blockSize + 1)

	    if (l % (this._blockSize * 8) >= this._finalSize * 8) {
	      this._update(this._block)
	      this._block.fill(0)
	    }

	    // to this append the block which is equal to the number l written in binary
	    // TODO: handle case where l is > Math.pow(2, 29)
	    this._block.writeInt32BE(l, this._blockSize - 4)

	    var hash = this._update(this._block) || this._hash()

	    return enc ? hash.toString(enc) : hash
	  }

	  Hash.prototype._update = function () {
	    throw new Error('_update must be implemented by subclass')
	  }

	  return Hash
	}


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */

	var inherits = __webpack_require__(15).inherits

	module.exports = function (Buffer, Hash) {

	  var A = 0|0
	  var B = 4|0
	  var C = 8|0
	  var D = 12|0
	  var E = 16|0

	  var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80)

	  var POOL = []

	  function Sha1 () {
	    if(POOL.length)
	      return POOL.pop().init()

	    if(!(this instanceof Sha1)) return new Sha1()
	    this._w = W
	    Hash.call(this, 16*4, 14*4)

	    this._h = null
	    this.init()
	  }

	  inherits(Sha1, Hash)

	  Sha1.prototype.init = function () {
	    this._a = 0x67452301
	    this._b = 0xefcdab89
	    this._c = 0x98badcfe
	    this._d = 0x10325476
	    this._e = 0xc3d2e1f0

	    Hash.prototype.init.call(this)
	    return this
	  }

	  Sha1.prototype._POOL = POOL
	  Sha1.prototype._update = function (X) {

	    var a, b, c, d, e, _a, _b, _c, _d, _e

	    a = _a = this._a
	    b = _b = this._b
	    c = _c = this._c
	    d = _d = this._d
	    e = _e = this._e

	    var w = this._w

	    for(var j = 0; j < 80; j++) {
	      var W = w[j] = j < 16 ? X.readInt32BE(j*4)
	        : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)

	      var t = add(
	        add(rol(a, 5), sha1_ft(j, b, c, d)),
	        add(add(e, W), sha1_kt(j))
	      )

	      e = d
	      d = c
	      c = rol(b, 30)
	      b = a
	      a = t
	    }

	    this._a = add(a, _a)
	    this._b = add(b, _b)
	    this._c = add(c, _c)
	    this._d = add(d, _d)
	    this._e = add(e, _e)
	  }

	  Sha1.prototype._hash = function () {
	    if(POOL.length < 100) POOL.push(this)
	    var H = new Buffer(20)
	    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
	    H.writeInt32BE(this._a|0, A)
	    H.writeInt32BE(this._b|0, B)
	    H.writeInt32BE(this._c|0, C)
	    H.writeInt32BE(this._d|0, D)
	    H.writeInt32BE(this._e|0, E)
	    return H
	  }

	  /*
	   * Perform the appropriate triplet combination function for the current
	   * iteration
	   */
	  function sha1_ft(t, b, c, d) {
	    if(t < 20) return (b & c) | ((~b) & d);
	    if(t < 40) return b ^ c ^ d;
	    if(t < 60) return (b & c) | (b & d) | (c & d);
	    return b ^ c ^ d;
	  }

	  /*
	   * Determine the appropriate additive constant for the current iteration
	   */
	  function sha1_kt(t) {
	    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
	           (t < 60) ? -1894007588 : -899497514;
	  }

	  /*
	   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	   * to work around bugs in some JS interpreters.
	   * //dominictarr: this is 10 years old, so maybe this can be dropped?)
	   *
	   */
	  function add(x, y) {
	    return (x + y ) | 0
	  //lets see how this goes on testling.
	  //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  //  return (msw << 16) | (lsw & 0xFFFF);
	  }

	  /*
	   * Bitwise rotate a 32-bit number to the left.
	   */
	  function rol(num, cnt) {
	    return (num << cnt) | (num >>> (32 - cnt));
	  }

	  return Sha1
	}


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(16);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(17);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(2)))

/***/ },
/* 16 */
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 17 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */

	var inherits = __webpack_require__(15).inherits

	module.exports = function (Buffer, Hash) {

	  var K = [
	      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
	      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
	      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
	      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
	      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
	      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
	      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
	      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
	      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
	      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
	      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
	      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
	      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
	      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
	      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
	      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
	    ]

	  var W = new Array(64)

	  function Sha256() {
	    this.init()

	    this._w = W //new Array(64)

	    Hash.call(this, 16*4, 14*4)
	  }

	  inherits(Sha256, Hash)

	  Sha256.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, n) {
	    return (X >>> n) | (X << (32 - n));
	  }

	  function R (X, n) {
	    return (X >>> n);
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  function Sigma0256 (x) {
	    return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
	  }

	  function Sigma1256 (x) {
	    return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
	  }

	  function Gamma0256 (x) {
	    return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
	  }

	  function Gamma1256 (x) {
	    return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
	  }

	  Sha256.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var T1, T2

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    for (var j = 0; j < 64; j++) {
	      var w = W[j] = j < 16
	        ? M.readInt32BE(j * 4)
	        : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]

	      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w

	      T2 = Sigma0256(a) + Maj(a, b, c);
	      h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;
	    }

	    this._a = (a + this._a) | 0
	    this._b = (b + this._b) | 0
	    this._c = (c + this._c) | 0
	    this._d = (d + this._d) | 0
	    this._e = (e + this._e) | 0
	    this._f = (f + this._f) | 0
	    this._g = (g + this._g) | 0
	    this._h = (h + this._h) | 0

	  };

	  Sha256.prototype._hash = function () {
	    var H = new Buffer(32)

	    H.writeInt32BE(this._a,  0)
	    H.writeInt32BE(this._b,  4)
	    H.writeInt32BE(this._c,  8)
	    H.writeInt32BE(this._d, 12)
	    H.writeInt32BE(this._e, 16)
	    H.writeInt32BE(this._f, 20)
	    H.writeInt32BE(this._g, 24)
	    H.writeInt32BE(this._h, 28)

	    return H
	  }

	  return Sha256

	}


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(15).inherits

	module.exports = function (Buffer, Hash) {
	  var K = [
	    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	  ]

	  var W = new Array(160)

	  function Sha512() {
	    this.init()
	    this._w = W

	    Hash.call(this, 128, 112)
	  }

	  inherits(Sha512, Hash)

	  Sha512.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._al = 0xf3bcc908|0
	    this._bl = 0x84caa73b|0
	    this._cl = 0xfe94f82b|0
	    this._dl = 0x5f1d36f1|0
	    this._el = 0xade682d1|0
	    this._fl = 0x2b3e6c1f|0
	    this._gl = 0xfb41bd6b|0
	    this._hl = 0x137e2179|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, Xl, n) {
	    return (X >>> n) | (Xl << (32 - n))
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  Sha512.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var al, bl, cl, dl, el, fl, gl, hl

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    al = this._al | 0
	    bl = this._bl | 0
	    cl = this._cl | 0
	    dl = this._dl | 0
	    el = this._el | 0
	    fl = this._fl | 0
	    gl = this._gl | 0
	    hl = this._hl | 0

	    for (var i = 0; i < 80; i++) {
	      var j = i * 2

	      var Wi, Wil

	      if (i < 16) {
	        Wi = W[j] = M.readInt32BE(j * 4)
	        Wil = W[j + 1] = M.readInt32BE(j * 4 + 4)

	      } else {
	        var x  = W[j - 15*2]
	        var xl = W[j - 15*2 + 1]
	        var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)
	        var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)

	        x  = W[j - 2*2]
	        xl = W[j - 2*2 + 1]
	        var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)
	        var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)

	        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	        var Wi7  = W[j - 7*2]
	        var Wi7l = W[j - 7*2 + 1]

	        var Wi16  = W[j - 16*2]
	        var Wi16l = W[j - 16*2 + 1]

	        Wil = gamma0l + Wi7l
	        Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
	        Wil = Wil + gamma1l
	        Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
	        Wil = Wil + Wi16l
	        Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)

	        W[j] = Wi
	        W[j + 1] = Wil
	      }

	      var maj = Maj(a, b, c)
	      var majl = Maj(al, bl, cl)

	      var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)
	      var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)
	      var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)
	      var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)

	      // t1 = h + sigma1 + ch + K[i] + W[i]
	      var Ki = K[j]
	      var Kil = K[j + 1]

	      var ch = Ch(e, f, g)
	      var chl = Ch(el, fl, gl)

	      var t1l = hl + sigma1l
	      var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
	      t1l = t1l + chl
	      t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
	      t1l = t1l + Kil
	      t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
	      t1l = t1l + Wil
	      t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

	      // t2 = sigma0 + maj
	      var t2l = sigma0l + majl
	      var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

	      h  = g
	      hl = gl
	      g  = f
	      gl = fl
	      f  = e
	      fl = el
	      el = (dl + t1l) | 0
	      e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	      d  = c
	      dl = cl
	      c  = b
	      cl = bl
	      b  = a
	      bl = al
	      al = (t1l + t2l) | 0
	      a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0
	    }

	    this._al = (this._al + al) | 0
	    this._bl = (this._bl + bl) | 0
	    this._cl = (this._cl + cl) | 0
	    this._dl = (this._dl + dl) | 0
	    this._el = (this._el + el) | 0
	    this._fl = (this._fl + fl) | 0
	    this._gl = (this._gl + gl) | 0
	    this._hl = (this._hl + hl) | 0

	    this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
	    this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
	    this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
	    this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	    this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
	    this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
	    this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
	    this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
	  }

	  Sha512.prototype._hash = function () {
	    var H = new Buffer(64)

	    function writeInt64BE(h, l, offset) {
	      H.writeInt32BE(h, offset)
	      H.writeInt32BE(l, offset + 4)
	    }

	    writeInt64BE(this._a, this._al, 0)
	    writeInt64BE(this._b, this._bl, 8)
	    writeInt64BE(this._c, this._cl, 16)
	    writeInt64BE(this._d, this._dl, 24)
	    writeInt64BE(this._e, this._el, 32)
	    writeInt64BE(this._f, this._fl, 40)
	    writeInt64BE(this._g, this._gl, 48)
	    writeInt64BE(this._h, this._hl, 56)

	    return H
	  }

	  return Sha512

	}


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
	 * Digest Algorithm, as defined in RFC 1321.
	 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for more info.
	 */

	var helpers = __webpack_require__(21);

	/*
	 * Calculate the MD5 of an array of little-endian words, and a bit length
	 */
	function core_md5(x, len)
	{
	  /* append padding */
	  x[len >> 5] |= 0x80 << ((len) % 32);
	  x[(((len + 64) >>> 9) << 4) + 14] = len;

	  var a =  1732584193;
	  var b = -271733879;
	  var c = -1732584194;
	  var d =  271733878;

	  for(var i = 0; i < x.length; i += 16)
	  {
	    var olda = a;
	    var oldb = b;
	    var oldc = c;
	    var oldd = d;

	    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
	    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
	    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
	    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
	    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
	    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
	    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
	    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
	    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
	    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
	    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
	    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
	    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
	    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
	    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
	    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

	    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
	    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
	    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
	    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
	    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
	    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
	    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
	    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
	    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
	    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
	    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
	    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
	    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
	    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
	    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
	    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

	    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
	    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
	    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
	    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
	    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
	    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
	    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
	    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
	    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
	    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
	    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
	    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
	    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
	    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
	    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
	    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

	    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
	    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
	    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
	    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
	    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
	    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
	    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
	    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
	    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
	    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
	    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
	    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
	    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
	    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
	    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
	    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

	    a = safe_add(a, olda);
	    b = safe_add(b, oldb);
	    c = safe_add(c, oldc);
	    d = safe_add(d, oldd);
	  }
	  return Array(a, b, c, d);

	}

	/*
	 * These functions implement the four basic operations the algorithm uses.
	 */
	function md5_cmn(q, a, b, x, s, t)
	{
	  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
	}
	function md5_ff(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}
	function md5_gg(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}
	function md5_hh(a, b, c, d, x, s, t)
	{
	  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function md5_ii(a, b, c, d, x, s, t)
	{
	  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
	}

	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */
	function safe_add(x, y)
	{
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return (msw << 16) | (lsw & 0xFFFF);
	}

	/*
	 * Bitwise rotate a 32-bit number to the left.
	 */
	function bit_rol(num, cnt)
	{
	  return (num << cnt) | (num >>> (32 - cnt));
	}

	module.exports = function md5(buf) {
	  return helpers.hash(buf, core_md5, 16);
	};


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var intSize = 4;
	var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
	var chrsz = 8;

	function toArray(buf, bigEndian) {
	  if ((buf.length % intSize) !== 0) {
	    var len = buf.length + (intSize - (buf.length % intSize));
	    buf = Buffer.concat([buf, zeroBuffer], len);
	  }

	  var arr = [];
	  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
	  for (var i = 0; i < buf.length; i += intSize) {
	    arr.push(fn.call(buf, i));
	  }
	  return arr;
	}

	function toBuffer(arr, size, bigEndian) {
	  var buf = new Buffer(size);
	  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
	  for (var i = 0; i < arr.length; i++) {
	    fn.call(buf, arr[i], i * 4, true);
	  }
	  return buf;
	}

	function hash(buf, fn, hashSize, bigEndian) {
	  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
	  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
	  return toBuffer(arr, hashSize, bigEndian);
	}

	module.exports = { hash: hash };

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = ripemd160



	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	/** @preserve
	(c) 2012 by CÃ©dric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	// Constants table
	var zl = [
	    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
	    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
	    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
	    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];
	var zr = [
	    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
	    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
	    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
	    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
	    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];
	var sl = [
	     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
	    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
	    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
	      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
	    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];
	var sr = [
	    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
	    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
	    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
	    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
	    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];

	var hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
	var hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];

	var bytesToWords = function (bytes) {
	  var words = [];
	  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
	    words[b >>> 5] |= bytes[i] << (24 - b % 32);
	  }
	  return words;
	};

	var wordsToBytes = function (words) {
	  var bytes = [];
	  for (var b = 0; b < words.length * 32; b += 8) {
	    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
	  }
	  return bytes;
	};

	var processBlock = function (H, M, offset) {

	  // Swap endian
	  for (var i = 0; i < 16; i++) {
	    var offset_i = offset + i;
	    var M_offset_i = M[offset_i];

	    // Swap
	    M[offset_i] = (
	        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	    );
	  }

	  // Working variables
	  var al, bl, cl, dl, el;
	  var ar, br, cr, dr, er;

	  ar = al = H[0];
	  br = bl = H[1];
	  cr = cl = H[2];
	  dr = dl = H[3];
	  er = el = H[4];
	  // Computation
	  var t;
	  for (var i = 0; i < 80; i += 1) {
	    t = (al +  M[offset+zl[i]])|0;
	    if (i<16){
	        t +=  f1(bl,cl,dl) + hl[0];
	    } else if (i<32) {
	        t +=  f2(bl,cl,dl) + hl[1];
	    } else if (i<48) {
	        t +=  f3(bl,cl,dl) + hl[2];
	    } else if (i<64) {
	        t +=  f4(bl,cl,dl) + hl[3];
	    } else {// if (i<80) {
	        t +=  f5(bl,cl,dl) + hl[4];
	    }
	    t = t|0;
	    t =  rotl(t,sl[i]);
	    t = (t+el)|0;
	    al = el;
	    el = dl;
	    dl = rotl(cl, 10);
	    cl = bl;
	    bl = t;

	    t = (ar + M[offset+zr[i]])|0;
	    if (i<16){
	        t +=  f5(br,cr,dr) + hr[0];
	    } else if (i<32) {
	        t +=  f4(br,cr,dr) + hr[1];
	    } else if (i<48) {
	        t +=  f3(br,cr,dr) + hr[2];
	    } else if (i<64) {
	        t +=  f2(br,cr,dr) + hr[3];
	    } else {// if (i<80) {
	        t +=  f1(br,cr,dr) + hr[4];
	    }
	    t = t|0;
	    t =  rotl(t,sr[i]) ;
	    t = (t+er)|0;
	    ar = er;
	    er = dr;
	    dr = rotl(cr, 10);
	    cr = br;
	    br = t;
	  }
	  // Intermediate hash value
	  t    = (H[1] + cl + dr)|0;
	  H[1] = (H[2] + dl + er)|0;
	  H[2] = (H[3] + el + ar)|0;
	  H[3] = (H[4] + al + br)|0;
	  H[4] = (H[0] + bl + cr)|0;
	  H[0] =  t;
	};

	function f1(x, y, z) {
	  return ((x) ^ (y) ^ (z));
	}

	function f2(x, y, z) {
	  return (((x)&(y)) | ((~x)&(z)));
	}

	function f3(x, y, z) {
	  return (((x) | (~(y))) ^ (z));
	}

	function f4(x, y, z) {
	  return (((x) & (z)) | ((y)&(~(z))));
	}

	function f5(x, y, z) {
	  return ((x) ^ ((y) |(~(z))));
	}

	function rotl(x,n) {
	  return (x<<n) | (x>>>(32-n));
	}

	function ripemd160(message) {
	  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];

	  if (typeof message == 'string')
	    message = new Buffer(message, 'utf8');

	  var m = bytesToWords(message);

	  var nBitsLeft = message.length * 8;
	  var nBitsTotal = message.length * 8;

	  // Add padding
	  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
	  );

	  for (var i=0 ; i<m.length; i += 16) {
	    processBlock(H, m, i);
	  }

	  // Swap endian
	  for (var i = 0; i < 5; i++) {
	      // Shortcut
	    var H_i = H[i];

	    // Swap
	    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	  }

	  var digestbytes = wordsToBytes(H);
	  return new Buffer(digestbytes);
	}



	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(11)

	var zeroBuffer = new Buffer(128)
	zeroBuffer.fill(0)

	module.exports = Hmac

	function Hmac (alg, key) {
	  if(!(this instanceof Hmac)) return new Hmac(alg, key)
	  this._opad = opad
	  this._alg = alg

	  var blocksize = (alg === 'sha512') ? 128 : 64

	  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key

	  if(key.length > blocksize) {
	    key = createHash(alg).update(key).digest()
	  } else if(key.length < blocksize) {
	    key = Buffer.concat([key, zeroBuffer], blocksize)
	  }

	  var ipad = this._ipad = new Buffer(blocksize)
	  var opad = this._opad = new Buffer(blocksize)

	  for(var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36
	    opad[i] = key[i] ^ 0x5C
	  }

	  this._hash = createHash(alg).update(ipad)
	}

	Hmac.prototype.update = function (data, enc) {
	  this._hash.update(data, enc)
	  return this
	}

	Hmac.prototype.digest = function (enc) {
	  var h = this._hash.digest()
	  return createHash(this._alg).update(this._opad).update(h).digest(enc)
	}


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	var pbkdf2Export = __webpack_require__(25)

	module.exports = function (crypto, exports) {
	  exports = exports || {}

	  var exported = pbkdf2Export(crypto)

	  exports.pbkdf2 = exported.pbkdf2
	  exports.pbkdf2Sync = exported.pbkdf2Sync

	  return exports
	}


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function(crypto) {
	  function pbkdf2(password, salt, iterations, keylen, digest, callback) {
	    if ('function' === typeof digest) {
	      callback = digest
	      digest = undefined
	    }

	    if ('function' !== typeof callback)
	      throw new Error('No callback provided to pbkdf2')

	    setTimeout(function() {
	      var result

	      try {
	        result = pbkdf2Sync(password, salt, iterations, keylen, digest)
	      } catch (e) {
	        return callback(e)
	      }

	      callback(undefined, result)
	    })
	  }

	  function pbkdf2Sync(password, salt, iterations, keylen, digest) {
	    if ('number' !== typeof iterations)
	      throw new TypeError('Iterations not a number')

	    if (iterations < 0)
	      throw new TypeError('Bad iterations')

	    if ('number' !== typeof keylen)
	      throw new TypeError('Key length not a number')

	    if (keylen < 0)
	      throw new TypeError('Bad key length')

	    digest = digest || 'sha1'

	    if (!Buffer.isBuffer(password)) password = new Buffer(password)
	    if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)

	    var hLen, l = 1, r, T
	    var DK = new Buffer(keylen)
	    var block1 = new Buffer(salt.length + 4)
	    salt.copy(block1, 0, 0, salt.length)

	    for (var i = 1; i <= l; i++) {
	      block1.writeUInt32BE(i, salt.length)

	      var U = crypto.createHmac(digest, password).update(block1).digest()

	      if (!hLen) {
	        hLen = U.length
	        T = new Buffer(hLen)
	        l = Math.ceil(keylen / hLen)
	        r = keylen - (l - 1) * hLen

	        if (keylen > (Math.pow(2, 32) - 1) * hLen)
	          throw new TypeError('keylen exceeds maximum length')
	      }

	      U.copy(T, 0, 0, hLen)

	      for (var j = 1; j < iterations; j++) {
	        U = crypto.createHmac(digest, password).update(U).digest()

	        for (var k = 0; k < hLen; k++) {
	          T[k] ^= U[k]
	        }
	      }

	      var destPos = (i - 1) * hLen
	      var len = (i == l ? r : hLen)
	      T.copy(DK, destPos, 0, len)
	    }

	    return DK
	  }

	  return {
	    pbkdf2: pbkdf2,
	    pbkdf2Sync: pbkdf2Sync
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5).Buffer))

/***/ },
/* 26 */
/***/ function(module, exports) {

	// Copyright 2014 Google Inc. All rights reserved.
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	//     You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	//     See the License for the specific language governing permissions and
	// limitations under the License.

	!function(a,b){b["true"]=a,function(){if(document.documentElement.animate){var a=document.documentElement.animate([],0),b=!0;if(a&&(b=!1,"play|currentTime|pause|reverse|playbackRate|cancel|finish|startTime|playState".split("|").forEach(function(c){void 0===a[c]&&(b=!0)})),!b)return}var c={},d={},e={},f=null;!function(a,b){function c(a){if("number"==typeof a)return a;var b={};for(var c in a)b[c]=a[c];return b}function d(){this._delay=0,this._endDelay=0,this._fill="none",this._iterationStart=0,this._iterations=1,this._duration=0,this._playbackRate=1,this._direction="normal",this._easing="linear"}function e(a,b,c){var e=new d;return b&&(e.fill="both",e.duration="auto"),"number"!=typeof a||isNaN(a)?void 0!==a&&Object.getOwnPropertyNames(a).forEach(function(b){if("auto"!=a[b]){if(("number"==typeof e[b]||"duration"==b)&&("number"!=typeof a[b]||isNaN(a[b])))return;if("fill"==b&&-1==t.indexOf(a[b]))return;if("direction"==b&&-1==u.indexOf(a[b]))return;e[b]=a[b]}}):e.duration=a,e}function f(a){return"number"==typeof a&&(a=isNaN(a)?{duration:0}:{duration:a}),a}function g(b,c){b=a.numericTimingToObject(b);var d=e(b,c);return d._easing=j(d.easing),d}function h(a,b,c,d){return 0>a||a>1||0>c||c>1?C:function(e){function f(a,b,c){return 3*a*(1-c)*(1-c)*c+3*b*(1-c)*c*c+c*c*c}if(0==e||1==e)return e;for(var g=0,h=1;;){var i=(g+h)/2,j=f(a,c,i);if(Math.abs(e-j)<.001)return f(b,d,i);e>j?g=i:h=i}}}function i(a,b){return function(c){if(c>=1)return 1;var d=1/a;return c+=b*d,c-c%d}}function j(a){var b=A.exec(a);if(b)return h.apply(this,b.slice(1).map(Number));var c=B.exec(a);if(c)return i(Number(c[1]),{start:v,middle:w,end:x}[c[2]]);var d=y[a];return d?d:C}function k(a){return Math.abs(l(a)/a.playbackRate)}function l(a){return a.duration*a.iterations}function m(a,b,c){return null==b?D:b<c.delay?E:b>=c.delay+a?F:G}function n(a,b,c,d,e){switch(d){case E:return"backwards"==b||"both"==b?0:null;case G:return c-e;case F:return"forwards"==b||"both"==b?a:null;case D:return null}}function o(a,b,c,d){return(d.playbackRate<0?b-a:b)*d.playbackRate+c}function p(a,b,c,d,e){return c===1/0||c===-(1/0)||c-d==b&&e.iterations&&(e.iterations+e.iterationStart)%1==0?a:c%a}function q(a,b,c,d){return 0===c?0:b==a?d.iterationStart+d.iterations-1:Math.floor(c/a)}function r(a,b,c,d){var e=a%2>=1,f="normal"==d.direction||d.direction==(e?"alternate-reverse":"alternate"),g=f?c:b-c,h=g/b;return b*d.easing(h)}function s(a,b,c){var d=m(a,b,c),e=n(a,c.fill,b,d,c.delay);if(null===e)return null;if(0===a)return d===E?0:1;var f=c.iterationStart*c.duration,g=o(a,e,f,c),h=p(c.duration,l(c),g,f,c),i=q(c.duration,h,g,c);return r(i,c.duration,h,c)/c.duration}var t="backwards|forwards|both|none".split("|"),u="reverse|alternate|alternate-reverse".split("|");d.prototype={_setMember:function(b,c){this["_"+b]=c,this._effect&&(this._effect._timingInput[b]=c,this._effect._timing=a.normalizeTimingInput(a.normalizeTimingInput(this._effect._timingInput)),this._effect.activeDuration=a.calculateActiveDuration(this._effect._timing),this._effect._animation&&this._effect._animation._rebuildUnderlyingAnimation())},get playbackRate(){return this._playbackRate},set delay(a){this._setMember("delay",a)},get delay(){return this._delay},set endDelay(a){this._setMember("endDelay",a)},get endDelay(){return this._endDelay},set fill(a){this._setMember("fill",a)},get fill(){return this._fill},set iterationStart(a){this._setMember("iterationStart",a)},get iterationStart(){return this._iterationStart},set duration(a){this._setMember("duration",a)},get duration(){return this._duration},set direction(a){this._setMember("direction",a)},get direction(){return this._direction},set easing(a){this._setMember("easing",a)},get easing(){return this._easing},set iterations(a){this._setMember("iterations",a)},get iterations(){return this._iterations}};var v=1,w=.5,x=0,y={ease:h(.25,.1,.25,1),"ease-in":h(.42,0,1,1),"ease-out":h(0,0,.58,1),"ease-in-out":h(.42,0,.58,1),"step-start":i(1,v),"step-middle":i(1,w),"step-end":i(1,x)},z="\\s*(-?\\d+\\.?\\d*|-?\\.\\d+)\\s*",A=new RegExp("cubic-bezier\\("+z+","+z+","+z+","+z+"\\)"),B=/steps\(\s*(\d+)\s*,\s*(start|middle|end)\s*\)/,C=function(a){return a},D=0,E=1,F=2,G=3;a.cloneTimingInput=c,a.makeTiming=e,a.numericTimingToObject=f,a.normalizeTimingInput=g,a.calculateActiveDuration=k,a.calculateTimeFraction=s,a.calculatePhase=m,a.toTimingFunction=j}(c,f),function(a,b){function c(a,b){return a in i?i[a][b]||b:b}function d(a,b,d){var e=f[a];if(e){g.style[a]=b;for(var h in e){var i=e[h],j=g.style[i];d[i]=c(i,j)}}else d[a]=c(a,b)}function e(b){function c(){var a=e.length;null==e[a-1].offset&&(e[a-1].offset=1),a>1&&null==e[0].offset&&(e[0].offset=0);for(var b=0,c=e[0].offset,d=1;a>d;d++){var f=e[d].offset;if(null!=f){for(var g=1;d-b>g;g++)e[b+g].offset=c+(f-c)*g/(d-b);b=d,c=f}}}if(!Array.isArray(b)&&null!==b)throw new TypeError("Keyframes must be null or an array of keyframes");if(null==b)return[];for(var e=b.map(function(b){var c={};for(var e in b){var f=b[e];if("offset"==e){if(null!=f&&(f=Number(f),!isFinite(f)))throw new TypeError("keyframe offsets must be numbers.")}else{if("composite"==e)throw{type:DOMException.NOT_SUPPORTED_ERR,name:"NotSupportedError",message:"add compositing is not supported"};f="easing"==e?a.toTimingFunction(f):""+f}d(e,f,c)}return void 0==c.offset&&(c.offset=null),void 0==c.easing&&(c.easing=a.toTimingFunction("linear")),c}),f=!0,g=-(1/0),h=0;h<e.length;h++){var i=e[h].offset;if(null!=i){if(g>i)throw{code:DOMException.INVALID_MODIFICATION_ERR,name:"InvalidModificationError",message:"Keyframes are not loosely sorted by offset. Sort or specify offsets."};g=i}else f=!1}return e=e.filter(function(a){return a.offset>=0&&a.offset<=1}),f||c(),e}var f={background:["backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","backgroundAttachment","backgroundOrigin","backgroundClip","backgroundColor"],border:["borderTopColor","borderTopStyle","borderTopWidth","borderRightColor","borderRightStyle","borderRightWidth","borderBottomColor","borderBottomStyle","borderBottomWidth","borderLeftColor","borderLeftStyle","borderLeftWidth"],borderBottom:["borderBottomWidth","borderBottomStyle","borderBottomColor"],borderColor:["borderTopColor","borderRightColor","borderBottomColor","borderLeftColor"],borderLeft:["borderLeftWidth","borderLeftStyle","borderLeftColor"],borderRadius:["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],borderRight:["borderRightWidth","borderRightStyle","borderRightColor"],borderTop:["borderTopWidth","borderTopStyle","borderTopColor"],borderWidth:["borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth"],flex:["flexGrow","flexShrink","flexBasis"],font:["fontFamily","fontSize","fontStyle","fontVariant","fontWeight","lineHeight"],margin:["marginTop","marginRight","marginBottom","marginLeft"],outline:["outlineColor","outlineStyle","outlineWidth"],padding:["paddingTop","paddingRight","paddingBottom","paddingLeft"]},g=document.createElementNS("http://www.w3.org/1999/xhtml","div"),h={thin:"1px",medium:"3px",thick:"5px"},i={borderBottomWidth:h,borderLeftWidth:h,borderRightWidth:h,borderTopWidth:h,fontSize:{"xx-small":"60%","x-small":"75%",small:"89%",medium:"100%",large:"120%","x-large":"150%","xx-large":"200%"},fontWeight:{normal:"400",bold:"700"},outlineWidth:h,textShadow:{none:"0px 0px 0px transparent"},boxShadow:{none:"0px 0px 0px 0px transparent"}};a.normalizeKeyframes=e}(c,f),function(a,b,c){function d(a){for(var b={},c=0;c<a.length;c++)for(var d in a[c])if("offset"!=d&&"easing"!=d&&"composite"!=d){var e={offset:a[c].offset,easing:a[c].easing,value:a[c][d]};b[d]=b[d]||[],b[d].push(e)}for(var f in b){var g=b[f];if(0!=g[0].offset||1!=g[g.length-1].offset)throw{type:DOMException.NOT_SUPPORTED_ERR,name:"NotSupportedError",message:"Partial keyframes are not supported"}}return b}function e(a){var c=[];for(var d in a)for(var e=a[d],f=0;f<e.length-1;f++){var g=e[f].offset,h=e[f+1].offset,i=e[f].value,j=e[f+1].value;g==h&&(1==h?i=j:j=i),c.push({startTime:g,endTime:h,easing:e[f].easing,property:d,interpolation:b.propertyInterpolation(d,i,j)})}return c.sort(function(a,b){return a.startTime-b.startTime}),c}b.convertEffectInput=function(c){var f=a.normalizeKeyframes(c),g=d(f),h=e(g);return function(a,c){null!=c&&h.filter(function(a){return 0>=c&&0==a.startTime||c>=1&&1==a.endTime||c>=a.startTime&&c<=a.endTime}).forEach(function(d){var e=c-d.startTime,f=d.endTime-d.startTime,g=0==f?0:d.easing(e/f);b.apply(a,d.property,d.interpolation(g))})}}}(c,d,f),function(a,b){function c(a,b,c){f[c]=f[c]||[],f[c].push([a,b])}function d(a,b,d){for(var e=0;e<d.length;e++){var f=d[e];c(a,b,f),/-/.test(f)&&c(a,b,f.replace(/-(.)/g,function(a,b){return b.toUpperCase()}))}}function e(b,c,d){if("initial"==c||"initial"==d){var e=b.replace(/-(.)/g,function(a,b){return b.toUpperCase()});"initial"==c&&(c=g[e]),"initial"==d&&(d=g[e])}for(var h=c==d?[]:f[b],i=0;h&&i<h.length;i++){var j=h[i][0](c),k=h[i][0](d);if(void 0!==j&&void 0!==k){var l=h[i][1](j,k);if(l){var m=a.Interpolation.apply(null,l);return function(a){return 0==a?c:1==a?d:m(a)}}}}return a.Interpolation(!1,!0,function(a){return a?d:c})}var f={};a.addPropertiesHandler=d;var g={backgroundColor:"transparent",backgroundPosition:"0% 0%",borderBottomColor:"currentColor",borderBottomLeftRadius:"0px",borderBottomRightRadius:"0px",borderBottomWidth:"3px",borderLeftColor:"currentColor",borderLeftWidth:"3px",borderRightColor:"currentColor",borderRightWidth:"3px",borderSpacing:"2px",borderTopColor:"currentColor",borderTopLeftRadius:"0px",borderTopRightRadius:"0px",borderTopWidth:"3px",bottom:"auto",clip:"rect(0px, 0px, 0px, 0px)",color:"black",fontSize:"100%",fontWeight:"400",height:"auto",left:"auto",letterSpacing:"normal",lineHeight:"120%",marginBottom:"0px",marginLeft:"0px",marginRight:"0px",marginTop:"0px",maxHeight:"none",maxWidth:"none",minHeight:"0px",minWidth:"0px",opacity:"1.0",outlineColor:"invert",outlineOffset:"0px",outlineWidth:"3px",paddingBottom:"0px",paddingLeft:"0px",paddingRight:"0px",paddingTop:"0px",right:"auto",textIndent:"0px",textShadow:"0px 0px 0px transparent",top:"auto",transform:"",verticalAlign:"0px",visibility:"visible",width:"auto",wordSpacing:"normal",zIndex:"auto"};a.propertyInterpolation=e}(d,f),function(a,b,c){function d(b){var c=a.calculateActiveDuration(b),d=function(d){return a.calculateTimeFraction(c,d,b)};return d._totalDuration=b.delay+c+b.endDelay,d._isCurrent=function(d){var e=a.calculatePhase(c,d,b);return e===PhaseActive||e===PhaseBefore},d}b.KeyframeEffect=function(c,e,f){var g,h=d(a.normalizeTimingInput(f)),i=b.convertEffectInput(e),j=function(){i(c,g)};return j._update=function(a){return g=h(a),null!==g},j._clear=function(){i(c,null)},j._hasSameTarget=function(a){return c===a},j._isCurrent=h._isCurrent,j._totalDuration=h._totalDuration,j},b.NullEffect=function(a){var b=function(){a&&(a(),a=null)};return b._update=function(){return null},b._totalDuration=0,b._isCurrent=function(){return!1},b._hasSameTarget=function(){return!1},b}}(c,d,f),function(a,b){a.apply=function(b,c,d){b.style[a.propertyName(c)]=d},a.clear=function(b,c){b.style[a.propertyName(c)]=""}}(d,f),function(a){window.Element.prototype.animate=function(b,c){return a.timeline._play(a.KeyframeEffect(this,b,c))}}(d),function(a,b){function c(a,b,d){if("number"==typeof a&&"number"==typeof b)return a*(1-d)+b*d;if("boolean"==typeof a&&"boolean"==typeof b)return.5>d?a:b;if(a.length==b.length){for(var e=[],f=0;f<a.length;f++)e.push(c(a[f],b[f],d));return e}throw"Mismatched interpolation arguments "+a+":"+b}a.Interpolation=function(a,b,d){return function(e){return d(c(a,b,e))}}}(d,f),function(a,b,c){a.sequenceNumber=0;var d=function(a,b,c){this.target=a,this.currentTime=b,this.timelineTime=c,this.type="finish",this.bubbles=!1,this.cancelable=!1,this.currentTarget=a,this.defaultPrevented=!1,this.eventPhase=Event.AT_TARGET,this.timeStamp=Date.now()};b.Animation=function(b){this._sequenceNumber=a.sequenceNumber++,this._currentTime=0,this._startTime=null,this._paused=!1,this._playbackRate=1,this._inTimeline=!0,this._finishedFlag=!1,this.onfinish=null,this._finishHandlers=[],this._effect=b,this._inEffect=this._effect._update(0),this._idle=!0,this._currentTimePending=!1},b.Animation.prototype={_ensureAlive:function(){this.playbackRate<0&&0===this.currentTime?this._inEffect=this._effect._update(-1):this._inEffect=this._effect._update(this.currentTime),this._inTimeline||!this._inEffect&&this._finishedFlag||(this._inTimeline=!0,b.timeline._animations.push(this))},_tickCurrentTime:function(a,b){a!=this._currentTime&&(this._currentTime=a,this._isFinished&&!b&&(this._currentTime=this._playbackRate>0?this._totalDuration:0),this._ensureAlive())},get currentTime(){return this._idle||this._currentTimePending?null:this._currentTime},set currentTime(a){a=+a,isNaN(a)||(b.restart(),this._paused||null==this._startTime||(this._startTime=this._timeline.currentTime-a/this._playbackRate),this._currentTimePending=!1,this._currentTime!=a&&(this._tickCurrentTime(a,!0),b.invalidateEffects()))},get startTime(){return this._startTime},set startTime(a){a=+a,isNaN(a)||this._paused||this._idle||(this._startTime=a,this._tickCurrentTime((this._timeline.currentTime-this._startTime)*this.playbackRate),b.invalidateEffects())},get playbackRate(){return this._playbackRate},set playbackRate(a){if(a!=this._playbackRate){var b=this.currentTime;this._playbackRate=a,this._startTime=null,"paused"!=this.playState&&"idle"!=this.playState&&this.play(),null!=b&&(this.currentTime=b)}},get _isFinished(){return!this._idle&&(this._playbackRate>0&&this._currentTime>=this._totalDuration||this._playbackRate<0&&this._currentTime<=0)},get _totalDuration(){return this._effect._totalDuration},get playState(){return this._idle?"idle":null==this._startTime&&!this._paused&&0!=this.playbackRate||this._currentTimePending?"pending":this._paused?"paused":this._isFinished?"finished":"running"},play:function(){this._paused=!1,(this._isFinished||this._idle)&&(this._currentTime=this._playbackRate>0?0:this._totalDuration,this._startTime=null,b.invalidateEffects()),this._finishedFlag=!1,b.restart(),this._idle=!1,this._ensureAlive()},pause:function(){this._isFinished||this._paused||this._idle||(this._currentTimePending=!0),this._startTime=null,this._paused=!0},finish:function(){this._idle||(this.currentTime=this._playbackRate>0?this._totalDuration:0,this._startTime=this._totalDuration-this.currentTime,this._currentTimePending=!1)},cancel:function(){this._inEffect&&(this._inEffect=!1,this._idle=!0,this.currentTime=0,this._startTime=null,this._effect._update(null),b.invalidateEffects(),b.restart())},reverse:function(){this.playbackRate*=-1,this.play()},addEventListener:function(a,b){"function"==typeof b&&"finish"==a&&this._finishHandlers.push(b)},removeEventListener:function(a,b){if("finish"==a){var c=this._finishHandlers.indexOf(b);c>=0&&this._finishHandlers.splice(c,1)}},_fireEvents:function(a){var b=this._isFinished;if((b||this._idle)&&!this._finishedFlag){var c=new d(this,this._currentTime,a),e=this._finishHandlers.concat(this.onfinish?[this.onfinish]:[]);e.forEach(function(a){a.call(c.target,c)})}this._finishedFlag=b},_tick:function(a){return this._idle||this._paused||(null==this._startTime?this.startTime=a-this._currentTime/this.playbackRate:this._isFinished||this._tickCurrentTime((a-this._startTime)*this.playbackRate)),this._currentTimePending=!1,this._fireEvents(a),!this._idle&&(this._inEffect||!this._finishedFlag)}}}(c,d,f),function(a,b,c){function d(a){a||(a=Date.now());var b=j;j=[],a<t.currentTime&&(a=t.currentTime),h(a),b.forEach(function(b){b[1](a)}),p&&h(a),g(),m=void 0}function e(a,b){return a._sequenceNumber-b._sequenceNumber}function f(){this._animations=[],this.currentTime=window.performance&&performance.now?performance.now():0}function g(){q.forEach(function(a){a()}),q.length=0}function h(a){o=!1;var c=b.timeline;c.currentTime=a,c._animations.sort(e),n=!1;var d=c._animations;c._animations=[];var f=[],g=[];d=d.filter(function(b){return b._inTimeline=b._tick(a),b._inEffect?g.push(b._effect):f.push(b._effect),b._isFinished||b._paused||b._idle||(n=!0),b._inTimeline}),q.push.apply(q,f),q.push.apply(q,g),c._animations.push.apply(c._animations,d),p=!1,n&&requestAnimationFrame(function(){})}var i=window.requestAnimationFrame,j=[],k=0;window.requestAnimationFrame=function(a){var b=k++;return 0==j.length&&i(d),j.push([b,a]),b},window.cancelAnimationFrame=function(a){j.forEach(function(b){b[0]==a&&(b[1]=function(){})})},f.prototype={_play:function(c){c._timing=a.normalizeTimingInput(c.timing);var d=new b.Animation(c);return d._idle=!1,d._timeline=this,this._animations.push(d),b.restart(),b.invalidateEffects(),d}};var l,m=void 0,l=function(){return void 0==m&&(m=performance.now()),m},n=!1,o=!1;b.restart=function(){return n||(n=!0,requestAnimationFrame(function(){}),o=!0),o};var p=!1;b.invalidateEffects=function(){p=!0};var q=[],r=1e3/60,s=window.getComputedStyle;Object.defineProperty(window,"getComputedStyle",{configurable:!0,enumerable:!0,value:function(){if(p){var a=l();a-t.currentTime>0&&(t.currentTime+=r*(Math.floor((a-t.currentTime)/r)+1)),h(t.currentTime)}return g(),s.apply(this,arguments)}});var t=new f;b.timeline=t}(c,d,f),function(a){function b(a,b){var c=a.exec(b);return c?(c=a.ignoreCase?c[0].toLowerCase():c[0],[c,b.substr(c.length)]):void 0}function c(a,b){b=b.replace(/^\s*/,"");var c=a(b);return c?[c[0],c[1].replace(/^\s*/,"")]:void 0}function d(a,d,e){a=c.bind(null,a);for(var f=[];;){var g=a(e);if(!g)return[f,e];if(f.push(g[0]),e=g[1],g=b(d,e),!g||""==g[1])return[f,e];e=g[1]}}function e(a,b){for(var c=0,d=0;d<b.length&&(!/\s|,/.test(b[d])||0!=c);d++)if("("==b[d])c++;else if(")"==b[d]&&(c--,0==c&&d++,0>=c))break;var e=a(b.substr(0,d));return void 0==e?void 0:[e,b.substr(d)]}function f(a,b){for(var c=a,d=b;c&&d;)c>d?c%=d:d%=c;return c=a*b/(c+d)}function g(a){return function(b){var c=a(b);return c&&(c[0]=void 0),c}}function h(a,b){return function(c){var d=a(c);return d?d:[b,c]}}function i(b,c){for(var d=[],e=0;e<b.length;e++){var f=a.consumeTrimmed(b[e],c);if(!f||""==f[0])return;void 0!==f[0]&&d.push(f[0]),c=f[1]}return""==c?d:void 0}function j(a,b,c,d,e){for(var g=[],h=[],i=[],j=f(d.length,e.length),k=0;j>k;k++){var l=b(d[k%d.length],e[k%e.length]);if(!l)return;g.push(l[0]),h.push(l[1]),i.push(l[2])}return[g,h,function(b){var d=b.map(function(a,b){return i[b](a)}).join(c);return a?a(d):d}]}function k(a,b,c){for(var d=[],e=[],f=[],g=0,h=0;h<c.length;h++)if("function"==typeof c[h]){var i=c[h](a[g],b[g++]);d.push(i[0]),e.push(i[1]),f.push(i[2])}else!function(a){d.push(!1),e.push(!1),f.push(function(){return c[a]})}(h);return[d,e,function(a){for(var b="",c=0;c<a.length;c++)b+=f[c](a[c]);return b}]}a.consumeToken=b,a.consumeTrimmed=c,a.consumeRepeated=d,a.consumeParenthesised=e,a.ignore=g,a.optional=h,a.consumeList=i,a.mergeNestedRepeated=j.bind(null,null),a.mergeWrappedNestedRepeated=j,a.mergeList=k}(d),function(a){function b(b){function c(b){var c=a.consumeToken(/^inset/i,b);if(c)return d.inset=!0,c;var c=a.consumeLengthOrPercent(b);if(c)return d.lengths.push(c[0]),c;var c=a.consumeColor(b);return c?(d.color=c[0],c):void 0}var d={inset:!1,lengths:[],color:null},e=a.consumeRepeated(c,/^/,b);return e&&e[0].length?[d,e[1]]:void 0}function c(c){var d=a.consumeRepeated(b,/^,/,c);return d&&""==d[1]?d[0]:void 0}function d(b,c){for(;b.lengths.length<Math.max(b.lengths.length,c.lengths.length);)b.lengths.push({px:0});for(;c.lengths.length<Math.max(b.lengths.length,c.lengths.length);)c.lengths.push({px:0});if(b.inset==c.inset&&!!b.color==!!c.color){for(var d,e=[],f=[[],0],g=[[],0],h=0;h<b.lengths.length;h++){var i=a.mergeDimensions(b.lengths[h],c.lengths[h],2==h);f[0].push(i[0]),g[0].push(i[1]),e.push(i[2])}if(b.color&&c.color){var j=a.mergeColors(b.color,c.color);f[1]=j[0],g[1]=j[1],d=j[2]}return[f,g,function(a){for(var c=b.inset?"inset ":" ",f=0;f<e.length;f++)c+=e[f](a[0][f])+" ";return d&&(c+=d(a[1])),c}]}}function e(b,c,d,e){function f(a){return{inset:a,color:[0,0,0,0],lengths:[{px:0},{px:0},{px:0},{px:0}]}}for(var g=[],h=[],i=0;i<d.length||i<e.length;i++){var j=d[i]||f(e[i].inset),k=e[i]||f(d[i].inset);g.push(j),h.push(k)}return a.mergeNestedRepeated(b,c,g,h)}var f=e.bind(null,d,", ");a.addPropertiesHandler(c,f,["box-shadow","text-shadow"])}(d),function(a,b){function c(a){return a.toFixed(3).replace(".000","")}function d(a,b,c){return Math.min(b,Math.max(a,c))}function e(a){return/^\s*[-+]?(\d*\.)?\d+\s*$/.test(a)?Number(a):void 0}function f(a,b){return[a,b,c]}function g(a,b){return 0!=a?i(0,1/0)(a,b):void 0}function h(a,b){return[a,b,function(a){return Math.round(d(1,1/0,a))}]}function i(a,b){return function(e,f){return[e,f,function(e){return c(d(a,b,e))}]}}function j(a,b){return[a,b,Math.round]}a.clamp=d,a.addPropertiesHandler(e,i(0,1/0),["border-image-width","line-height"]),a.addPropertiesHandler(e,i(0,1),["opacity","shape-image-threshold"]),a.addPropertiesHandler(e,g,["flex-grow","flex-shrink"]),a.addPropertiesHandler(e,h,["orphans","widows"]),a.addPropertiesHandler(e,j,["z-index"]),a.parseNumber=e,a.mergeNumbers=f,a.numberToString=c}(d,f),function(a,b){function c(a,b){return"visible"==a||"visible"==b?[0,1,function(c){return 0>=c?a:c>=1?b:"visible"}]:void 0}a.addPropertiesHandler(String,c,["visibility"])}(d),function(a,b){function c(a){a=a.trim(),f.fillStyle="#000",f.fillStyle=a;var b=f.fillStyle;if(f.fillStyle="#fff",f.fillStyle=a,b==f.fillStyle){f.fillRect(0,0,1,1);var c=f.getImageData(0,0,1,1).data;f.clearRect(0,0,1,1);var d=c[3]/255;return[c[0]*d,c[1]*d,c[2]*d,d]}}function d(b,c){return[b,c,function(b){function c(a){return Math.max(0,Math.min(255,a))}if(b[3])for(var d=0;3>d;d++)b[d]=Math.round(c(b[d]/b[3]));return b[3]=a.numberToString(a.clamp(0,1,b[3])),"rgba("+b.join(",")+")"}]}var e=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");e.width=e.height=1;var f=e.getContext("2d");a.addPropertiesHandler(c,d,["background-color","border-bottom-color","border-left-color","border-right-color","border-top-color","color","outline-color","text-decoration-color"]),a.consumeColor=a.consumeParenthesised.bind(null,c),a.mergeColors=d}(d,f),function(a,b){function c(a,b){if(b=b.trim().toLowerCase(),"0"==b&&"px".search(a)>=0)return{px:0};if(/^[^(]*$|^calc/.test(b)){b=b.replace(/calc\(/g,"(");var c={};b=b.replace(a,function(a){return c[a]=null,"U"+a});for(var d="U("+a.source+")",e=b.replace(/[-+]?(\d*\.)?\d+/g,"N").replace(new RegExp("N"+d,"g"),"D").replace(/\s[+-]\s/g,"O").replace(/\s/g,""),f=[/N\*(D)/g,/(N|D)[*/]N/g,/(N|D)O\1/g,/\((N|D)\)/g],g=0;g<f.length;)f[g].test(e)?(e=e.replace(f[g],"$1"),g=0):g++;if("D"==e){for(var h in c){var i=eval(b.replace(new RegExp("U"+h,"g"),"").replace(new RegExp(d,"g"),"*0"));if(!isFinite(i))return;c[h]=i}return c}}}function d(a,b){return e(a,b,!0)}function e(b,c,d){var e,f=[];for(e in b)f.push(e);for(e in c)f.indexOf(e)<0&&f.push(e);return b=f.map(function(a){return b[a]||0}),c=f.map(function(a){return c[a]||0}),[b,c,function(b){var c=b.map(function(c,e){return 1==b.length&&d&&(c=Math.max(c,0)),a.numberToString(c)+f[e]}).join(" + ");return b.length>1?"calc("+c+")":c}]}var f="px|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc",g=c.bind(null,new RegExp(f,"g")),h=c.bind(null,new RegExp(f+"|%","g")),i=c.bind(null,/deg|rad|grad|turn/g);a.parseLength=g,a.parseLengthOrPercent=h,a.consumeLengthOrPercent=a.consumeParenthesised.bind(null,h),a.parseAngle=i,a.mergeDimensions=e;var j=a.consumeParenthesised.bind(null,g),k=a.consumeRepeated.bind(void 0,j,/^/),l=a.consumeRepeated.bind(void 0,k,/^,/);a.consumeSizePairList=l;var m=function(a){var b=l(a);return b&&""==b[1]?b[0]:void 0},n=a.mergeNestedRepeated.bind(void 0,d," "),o=a.mergeNestedRepeated.bind(void 0,n,",");a.mergeNonNegativeSizePair=n,a.addPropertiesHandler(m,o,["background-size"]),a.addPropertiesHandler(h,d,["border-bottom-width","border-image-width","border-left-width","border-right-width","border-top-width","flex-basis","font-size","height","line-height","max-height","max-width","outline-width","width"]),a.addPropertiesHandler(h,e,["border-bottom-left-radius","border-bottom-right-radius","border-top-left-radius","border-top-right-radius","bottom","left","letter-spacing","margin-bottom","margin-left","margin-right","margin-top","min-height","min-width","outline-offset","padding-bottom","padding-left","padding-right","padding-top","perspective","right","shape-margin","text-indent","top","vertical-align","word-spacing"])}(d,f),function(a,b){function c(b){return a.consumeLengthOrPercent(b)||a.consumeToken(/^auto/,b)}function d(b){var d=a.consumeList([a.ignore(a.consumeToken.bind(null,/^rect/)),a.ignore(a.consumeToken.bind(null,/^\(/)),a.consumeRepeated.bind(null,c,/^,/),a.ignore(a.consumeToken.bind(null,/^\)/))],b);return d&&4==d[0].length?d[0]:void 0}function e(b,c){return"auto"==b||"auto"==c?[!0,!1,function(d){var e=d?b:c;if("auto"==e)return"auto";var f=a.mergeDimensions(e,e);return f[2](f[0])}]:a.mergeDimensions(b,c)}function f(a){return"rect("+a+")"}var g=a.mergeWrappedNestedRepeated.bind(null,f,e,", ");a.parseBox=d,a.mergeBoxes=g,a.addPropertiesHandler(d,g,["clip"])}(d,f),function(a,b){function c(a){return function(b){var c=0;return a.map(function(a){return a===k?b[c++]:a})}}function d(a){return a}function e(b){if(b=b.toLowerCase().trim(),"none"==b)return[];for(var c,d=/\s*(\w+)\(([^)]*)\)/g,e=[],f=0;c=d.exec(b);){if(c.index!=f)return;f=c.index+c[0].length;var g=c[1],h=n[g];if(!h)return;var i=c[2].split(","),j=h[0];if(j.length<i.length)return;for(var k=[],o=0;o<j.length;o++){var p,q=i[o],r=j[o];if(p=q?{A:function(b){return"0"==b.trim()?m:a.parseAngle(b)},N:a.parseNumber,T:a.parseLengthOrPercent,L:a.parseLength}[r.toUpperCase()](q):{a:m,n:k[0],t:l}[r],void 0===p)return;k.push(p)}if(e.push({t:g,d:k}),d.lastIndex==b.length)return e}}function f(a){return a.toFixed(6).replace(".000000","")}function g(b,c){if(b.decompositionPair!==c){b.decompositionPair=c;var d=a.makeMatrixDecomposition(b)}if(c.decompositionPair!==b){c.decompositionPair=b;var e=a.makeMatrixDecomposition(c)}return null==d[0]||null==e[0]?[[!1],[!0],function(a){return a?c[0].d:b[0].d}]:(d[0].push(0),e[0].push(1),[d,e,function(b){var c=a.quat(d[0][3],e[0][3],b[5]),g=a.composeMatrix(b[0],b[1],b[2],c,b[4]),h=g.map(f).join(",");return h}])}function h(a){return a.replace(/[xy]/,"")}function i(a){return a.replace(/(x|y|z|3d)?$/,"3d")}function j(b,c){var d=a.makeMatrixDecomposition&&!0,e=!1;if(!b.length||!c.length){b.length||(e=!0,b=c,c=[]);for(var f=0;f<b.length;f++){var j=b[f].t,k=b[f].d,l="scale"==j.substr(0,5)?1:0;c.push({t:j,d:k.map(function(a){if("number"==typeof a)return l;var b={};for(var c in a)b[c]=l;return b})})}}var m=function(a,b){return"perspective"==a&&"perspective"==b||("matrix"==a||"matrix3d"==a)&&("matrix"==b||"matrix3d"==b)},o=[],p=[],q=[];if(b.length!=c.length){if(!d)return;var r=g(b,c);o=[r[0]],p=[r[1]],q=[["matrix",[r[2]]]]}else for(var f=0;f<b.length;f++){var j,s=b[f].t,t=c[f].t,u=b[f].d,v=c[f].d,w=n[s],x=n[t];if(m(s,t)){if(!d)return;var r=g([b[f]],[c[f]]);o.push(r[0]),p.push(r[1]),q.push(["matrix",[r[2]]])}else{if(s==t)j=s;else if(w[2]&&x[2]&&h(s)==h(t))j=h(s),u=w[2](u),v=x[2](v);else{if(!w[1]||!x[1]||i(s)!=i(t)){if(!d)return;var r=g(b,c);o=[r[0]],p=[r[1]],q=[["matrix",[r[2]]]];break}j=i(s),u=w[1](u),v=x[1](v)}for(var y=[],z=[],A=[],B=0;B<u.length;B++){var C="number"==typeof u[B]?a.mergeNumbers:a.mergeDimensions,r=C(u[B],v[B]);y[B]=r[0],z[B]=r[1],A.push(r[2])}o.push(y),p.push(z),q.push([j,A])}}if(e){var D=o;o=p,p=D}return[o,p,function(a){return a.map(function(a,b){var c=a.map(function(a,c){return q[b][1][c](a)}).join(",");return"matrix"==q[b][0]&&16==c.split(",").length&&(q[b][0]="matrix3d"),q[b][0]+"("+c+")"}).join(" ")}]}var k=null,l={px:0},m={deg:0},n={matrix:["NNNNNN",[k,k,0,0,k,k,0,0,0,0,1,0,k,k,0,1],d],matrix3d:["NNNNNNNNNNNNNNNN",d],rotate:["A"],rotatex:["A"],rotatey:["A"],rotatez:["A"],rotate3d:["NNNA"],perspective:["L"],scale:["Nn",c([k,k,1]),d],scalex:["N",c([k,1,1]),c([k,1])],scaley:["N",c([1,k,1]),c([1,k])],scalez:["N",c([1,1,k])],scale3d:["NNN",d],skew:["Aa",null,d],skewx:["A",null,c([k,m])],skewy:["A",null,c([m,k])],translate:["Tt",c([k,k,l]),d],translatex:["T",c([k,l,l]),c([k,l])],translatey:["T",c([l,k,l]),c([l,k])],translatez:["L",c([l,l,k])],translate3d:["TTL",d]};a.addPropertiesHandler(e,j,["transform"])}(d,f),function(a,b){function c(a,b){b.concat([a]).forEach(function(b){b in document.documentElement.style&&(d[a]=b)})}var d={};c("transform",["webkitTransform","msTransform"]),c("transformOrigin",["webkitTransformOrigin"]),c("perspective",["webkitPerspective"]),c("perspectiveOrigin",["webkitPerspectiveOrigin"]),a.propertyName=function(a){return d[a]||a}}(d,f)}()}({},function(){return this}());
	//# sourceMappingURL=web-animations.min.js.map

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var core = __webpack_require__(28);
	var browserPatch = __webpack_require__(32);

	global.zone = new core.Zone();

	module.exports = {
	  Zone: core.Zone,
	  zone: global.zone
	};

	browserPatch.apply();


	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var keys = __webpack_require__(29);

	function Zone(parentZone, data) {
	  var zone = (arguments.length) ? Object.create(parentZone) : this;

	  zone.parent = parentZone || null;

	  Object.keys(data || {}).forEach(function(property) {

	    var _property = property.substr(1);

	    // augment the new zone with a hook decorates the parent's hook
	    if (property[0] === '$') {
	      zone[_property] = data[property](parentZone[_property] || function () {});

	    // augment the new zone with a hook that runs after the parent's hook
	    } else if (property[0] === '+') {
	      if (parentZone[_property]) {
	        zone[_property] = function () {
	          var result = parentZone[_property].apply(this, arguments);
	          data[property].apply(this, arguments);
	          return result;
	        };
	      } else {
	        zone[_property] = data[property];
	      }

	    // augment the new zone with a hook that runs before the parent's hook
	    } else if (property[0] === '-') {
	      if (parentZone[_property]) {
	        zone[_property] = function () {
	          data[property].apply(this, arguments);
	          return parentZone[_property].apply(this, arguments);
	        };
	      } else {
	        zone[_property] = data[property];
	      }

	    // set the new zone's hook (replacing the parent zone's)
	    } else {
	      zone[property] = (typeof data[property] === 'object') ?
	                        JSON.parse(JSON.stringify(data[property])) :
	                        data[property];
	    }
	  });

	  zone.$id = Zone.nextId++;

	  return zone;
	}

	Zone.prototype = {
	  constructor: Zone,

	  fork: function (locals) {
	    this.onZoneCreated();
	    return new Zone(this, locals);
	  },

	  bind: function (fn, skipEnqueue) {
	    if (typeof fn !== 'function') {
	      throw new Error('Expecting function got: ' + fn);
	    }
	    skipEnqueue || this.enqueueTask(fn);
	    var zone = this.isRootZone() ? this : this.fork();
	    return function zoneBoundFn() {
	      return zone.run(fn, this, arguments);
	    };
	  },

	  bindOnce: function (fn) {
	    var boundZone = this;
	    return this.bind(function () {
	      var result = fn.apply(this, arguments);
	      boundZone.dequeueTask(fn);
	      return result;
	    });
	  },

	  isRootZone: function() {
	    return this.parent === null;
	  },

	  run: function run (fn, applyTo, applyWith) {
	    applyWith = applyWith || [];

	    var oldZone = global.zone;

	    // MAKE THIS ZONE THE CURRENT ZONE
	    global.zone = this;

	    try {
	      this.beforeTask();
	      return fn.apply(applyTo, applyWith);
	    } catch (e) {
	      if (this.onError) {
	        this.onError(e);
	      } else {
	        throw e;
	      }
	    } finally {
	      this.afterTask();
	      // REVERT THE CURRENT ZONE BACK TO THE ORIGINAL ZONE
	      global.zone = oldZone;
	    }
	  },

	  // onError is used to override error handling.
	  // When a custom error handler is provided, it should most probably rethrow the exception
	  // not to break the expected control flow:
	  //
	  // `promise.then(fnThatThrows).catch(fn);`
	  //
	  // When this code is executed in a zone with a custom onError handler that doesn't rethrow, the
	  // `.catch()` branch will not be taken as the `fnThatThrows` exception will be swallowed by the
	  // handler.
	  onError: null,
	  beforeTask: function () {},
	  onZoneCreated: function () {},
	  afterTask: function () {},
	  enqueueTask: function () {},
	  dequeueTask: function () {},
	  addEventListener: function () {
	    return this[keys.common.addEventListener].apply(this, arguments);
	  },
	  removeEventListener: function () {
	    return this[keys.common.removeEventListener].apply(this, arguments);
	  }
	};

	// Root zone ID === 1
	Zone.nextId = 1;

	Zone.bindPromiseFn = __webpack_require__(30).bindPromiseFn;

	module.exports = {
	  Zone: Zone
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 29 */
/***/ function(module, exports) {

	/**
	 * Creates keys for `private` properties on exposed objects to minimize interactions with other codebases.
	 * The key will be a Symbol if the host supports it; otherwise a prefixed string.
	 */
	if (typeof Symbol !== 'undefined') {
	  function create(name) {
	    return Symbol(name);
	  } 
	} else {
	  function create(name) {
	    return '_zone$' + name;
	  }
	}

	var commonKeys = {
	  addEventListener: create('addEventListener'),
	  removeEventListener: create('removeEventListener')
	};

	module.exports = {
	  create: create,
	  common: commonKeys
	};

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var utils = __webpack_require__(31);

	/*
	 * Patches a function that returns a Promise-like instance.
	 *
	 * This function must be used when either:
	 * - Native Promises are not available,
	 * - The function returns a Promise-like object.
	 *
	 * This is required because zones rely on a Promise monkey patch that could not be applied when
	 * Promise is not natively available or when the returned object is not an instance of Promise.
	 *
	 * Note that calling `bindPromiseFn` on a function that returns a native Promise will also work
	 * with minimal overhead.
	 *
	 * ```
	 * var boundFunction = bindPromiseFn(FunctionReturningAPromise);
	 *
	 * boundFunction.then(successHandler, errorHandler);
	 * ```
	 */
	var bindPromiseFn;

	if (global.Promise) {
	  bindPromiseFn = function (delegate) {
	    return function() {
	      var delegatePromise = delegate.apply(this, arguments);

	      // if the delegate returned an instance of Promise, forward it.
	      if (delegatePromise instanceof Promise) {
	        return delegatePromise;
	      }

	      // Otherwise wrap the Promise-like in a global Promise
	      return new Promise(function(resolve, reject) {
	        delegatePromise.then(resolve, reject);
	      });
	    };
	  };
	} else {
	  bindPromiseFn = function (delegate) {
	    return function () {
	      return _patchThenable(delegate.apply(this, arguments));
	    };
	  };
	}


	function _patchPromiseFnsOnObject(objectPath, fnNames) {
	  var obj = global;

	  var exists = objectPath.every(function (segment) {
	    obj = obj[segment];
	    return obj;
	  });

	  if (!exists) {
	    return;
	  }

	  fnNames.forEach(function (name) {
	    var fn = obj[name];
	    if (fn) {
	      obj[name] = bindPromiseFn(fn);
	    }
	  });
	}

	function _patchThenable(thenable) {
	  var then = thenable.then;
	  thenable.then = function () {
	    var args = utils.bindArguments(arguments);
	    var nextThenable = then.apply(thenable, args);
	    return _patchThenable(nextThenable);
	  };

	  var ocatch = thenable.catch;
	  thenable.catch = function () {
	    var args = utils.bindArguments(arguments);
	    var nextThenable = ocatch.apply(thenable, args);
	    return _patchThenable(nextThenable);
	  };

	  return thenable;
	}


	function apply() {
	  // Patch .then() and .catch() on native Promises to execute callbacks in the zone where
	  // those functions are called.
	  if (global.Promise) {
	    utils.patchPrototype(Promise.prototype, [
	      'then',
	      'catch'
	    ]);

	    // Patch browser APIs that return a Promise
	    var patchFns = [
	      // fetch
	      [[], ['fetch']],
	      [['Response', 'prototype'], ['arrayBuffer', 'blob', 'json', 'text']]
	    ];

	    patchFns.forEach(function(objPathAndFns) {
	      _patchPromiseFnsOnObject(objPathAndFns[0], objPathAndFns[1]);
	    });
	  }
	}

	module.exports = {
	  apply: apply,
	  bindPromiseFn: bindPromiseFn
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var keys = __webpack_require__(29);

	function bindArguments(args) {
	  for (var i = args.length - 1; i >= 0; i--) {
	    if (typeof args[i] === 'function') {
	      args[i] = global.zone.bind(args[i]);
	    }
	  }
	  return args;
	};

	function bindArgumentsOnce(args) {
	  for (var i = args.length - 1; i >= 0; i--) {
	    if (typeof args[i] === 'function') {
	      args[i] = global.zone.bindOnce(args[i]);
	    }
	  }
	  return args;
	};

	function patchPrototype(obj, fnNames) {
	  fnNames.forEach(function (name) {
	    var delegate = obj[name];
	    if (delegate) {
	      obj[name] = function () {
	        return delegate.apply(this, bindArguments(arguments));
	      };
	    }
	  });
	};

	function isWebWorker() {
	  return (typeof document === "undefined");
	}

	function patchProperty(obj, prop) {
	  var desc = Object.getOwnPropertyDescriptor(obj, prop) || {
	    enumerable: true,
	    configurable: true
	  };

	  // A property descriptor cannot have getter/setter and be writable
	  // deleting the writable and value properties avoids this error:
	  //
	  // TypeError: property descriptors must not specify a value or be writable when a
	  // getter or setter has been specified
	  delete desc.writable;
	  delete desc.value;

	  // substr(2) cuz 'onclick' -> 'click', etc
	  var eventName = prop.substr(2);
	  var _prop = '_' + prop;

	  desc.set = function (fn) {
	    if (this[_prop]) {
	      this.removeEventListener(eventName, this[_prop]);
	    }

	    if (typeof fn === 'function') {
	      this[_prop] = fn;
	      this.addEventListener(eventName, fn, false);
	    } else {
	      this[_prop] = null;
	    }
	  };

	  desc.get = function () {
	    return this[_prop];
	  };

	  Object.defineProperty(obj, prop, desc);
	};

	function patchProperties(obj, properties) {
	  (properties || (function () {
	      var props = [];
	      for (var prop in obj) {
	        props.push(prop);
	      }
	      return props;
	    }()).
	    filter(function (propertyName) {
	      return propertyName.substr(0,2) === 'on';
	    })).
	    forEach(function (eventName) {
	      patchProperty(obj, eventName);
	    });
	};

	var originalFnKey = keys.create('originalFn');
	var boundFnsKey = keys.create('boundFns');

	function patchEventTargetMethods(obj) {
	  // This is required for the addEventListener hook on the root zone.
	  obj[keys.common.addEventListener] = obj.addEventListener;
	  obj.addEventListener = function (eventName, handler, useCapturing) {
	    var eventType = eventName + (useCapturing ? '$capturing' : '$bubbling');
	    var fn;
	    //Ignore special listeners of IE11 & Edge dev tools, see https://github.com/angular/zone.js/issues/150
	    if (handler.toString() !== "[object FunctionWrapper]") {
	      if (handler.handleEvent) {
	        // Have to pass in 'handler' reference as an argument here, otherwise it gets clobbered in
	        // IE9 by the arguments[1] assignment at end of this function.
	        fn = (function(handler) {
	          return function() {
	            handler.handleEvent.apply(handler, arguments);
	          };
	        })(handler);
	      } else {
	        fn = handler;
	      }

	      handler[originalFnKey] = fn;
	      handler[boundFnsKey] = handler[boundFnsKey] || {};
	      handler[boundFnsKey][eventType] = handler[boundFnsKey][eventType] || zone.bind(fn);
	      arguments[1] = handler[boundFnsKey][eventType];
	    }

	    // - Inside a Web Worker, `this` is undefined, the context is `global` (= `self`)
	    // - When `addEventListener` is called on the global context in strict mode, `this` is undefined
	    // see https://github.com/angular/zone.js/issues/190
	    var target = this || global;

	    return global.zone.addEventListener.apply(target, arguments);
	  };

	  // This is required for the removeEventListener hook on the root zone.
	  obj[keys.common.removeEventListener] = obj.removeEventListener;
	  obj.removeEventListener = function (eventName, handler, useCapturing) {
	    var eventType = eventName + (useCapturing ? '$capturing' : '$bubbling');
	    if (handler[boundFnsKey] && handler[boundFnsKey][eventType]) {
	      var _bound = handler[boundFnsKey];
	      arguments[1] = _bound[eventType];
	      delete _bound[eventType];
	    }

	    // - Inside a Web Worker, `this` is undefined, the context is `global`
	    // - When `addEventListener` is called on the global context in strict mode, `this` is undefined
	    // see https://github.com/angular/zone.js/issues/190
	    var target = this || global;

	    var result = global.zone.removeEventListener.apply(target, arguments);
	    global.zone.dequeueTask(handler[originalFnKey]);
	    return result;
	  };
	};

	var originalInstanceKey = keys.create('originalInstance');

	// wrap some native API on `window`
	function patchClass(className) {
	  var OriginalClass = global[className];
	  if (!OriginalClass) return;

	  global[className] = function () {
	    var a = bindArguments(arguments);
	    switch (a.length) {
	      case 0: this[originalInstanceKey] = new OriginalClass(); break;
	      case 1: this[originalInstanceKey] = new OriginalClass(a[0]); break;
	      case 2: this[originalInstanceKey] = new OriginalClass(a[0], a[1]); break;
	      case 3: this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]); break;
	      case 4: this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]); break;
	      default: throw new Error('what are you even doing?');
	    }
	  };

	  var instance = new OriginalClass();

	  var prop;
	  for (prop in instance) {
	    (function (prop) {
	      if (typeof instance[prop] === 'function') {
	        global[className].prototype[prop] = function () {
	          return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);
	        };
	      } else {
	        Object.defineProperty(global[className].prototype, prop, {
	          set: function (fn) {
	            if (typeof fn === 'function') {
	              this[originalInstanceKey][prop] = global.zone.bind(fn);
	            } else {
	              this[originalInstanceKey][prop] = fn;
	            }
	          },
	          get: function () {
	            return this[originalInstanceKey][prop];
	          }
	        });
	      }
	    }(prop));
	  }

	  for (prop in OriginalClass) {
	    if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {
	      global[className][prop] = OriginalClass[prop];
	    }
	  }
	};

	module.exports = {
	  bindArguments: bindArguments,
	  bindArgumentsOnce: bindArgumentsOnce,
	  patchPrototype: patchPrototype,
	  patchProperty: patchProperty,
	  patchProperties: patchProperties,
	  patchEventTargetMethods: patchEventTargetMethods,
	  patchClass: patchClass,
	  isWebWorker: isWebWorker
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var fnPatch = __webpack_require__(33);
	var promisePatch = __webpack_require__(30);
	var mutationObserverPatch = __webpack_require__(34);
	var definePropertyPatch = __webpack_require__(35);
	var registerElementPatch = __webpack_require__(36);
	var webSocketPatch = __webpack_require__(37);
	var eventTargetPatch = __webpack_require__(38);
	var propertyDescriptorPatch = __webpack_require__(39);
	var geolocationPatch = __webpack_require__(40);
	var fileReaderPatch = __webpack_require__(41);

	function apply() {
	  fnPatch.patchSetClearFunction(global, [
	    'timeout',
	    'interval',
	    'immediate'
	  ]);

	  fnPatch.patchRequestAnimationFrame(global, [
	    'requestAnimationFrame',
	    'mozRequestAnimationFrame',
	    'webkitRequestAnimationFrame'
	  ]);

	  fnPatch.patchFunction(global, [
	    'alert',
	    'prompt'
	  ]);

	  eventTargetPatch.apply();

	  propertyDescriptorPatch.apply();

	  promisePatch.apply();

	  mutationObserverPatch.patchClass('MutationObserver');
	  mutationObserverPatch.patchClass('WebKitMutationObserver');

	  definePropertyPatch.apply();

	  registerElementPatch.apply();

	  geolocationPatch.apply();

	  fileReaderPatch.apply();
	}

	module.exports = {
	  apply: apply
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var utils = __webpack_require__(31);

	function patchSetClearFunction(obj, fnNames) {
	  fnNames.map(function (name) {
	    return name[0].toUpperCase() + name.substr(1);
	  }).forEach(function (name) {
	    var setName = 'set' + name;
	    var delegate = obj[setName];

	    if (delegate) {
	      var clearName = 'clear' + name;
	      var ids = {};

	      var bindArgs = setName === 'setInterval' ? utils.bindArguments : utils.bindArgumentsOnce;

	      global.zone[setName] = function (fn) {
	        var id, fnRef = fn;
	        arguments[0] = function () {
	          delete ids[id];
	          return fnRef.apply(this, arguments);
	        };
	        var args = bindArgs(arguments);
	        id = delegate.apply(obj, args);
	        ids[id] = true;
	        return id;
	      };

	      obj[setName] = function () {
	        return global.zone[setName].apply(this, arguments);
	      };

	      var clearDelegate = obj[clearName];

	      global.zone[clearName] = function (id) {
	        if (ids[id]) {
	          delete ids[id];
	          global.zone.dequeueTask();
	        }
	        return clearDelegate.apply(this, arguments);
	      };

	      obj[clearName] = function () {
	        return global.zone[clearName].apply(this, arguments);
	      };
	    }
	  });
	};


	/**
	 * requestAnimationFrame is typically recursively called from within the callback function
	 * that it executes.  To handle this case, only fork a zone if this is executed
	 * within the root zone.
	 */
	function patchRequestAnimationFrame(obj, fnNames) {
	  fnNames.forEach(function (name) {
	    var delegate = obj[name];
	    if (delegate) {
	      global.zone[name] = function (fn) {
	        var callZone = global.zone.isRootZone() ? global.zone.fork() : global.zone;
	        if (fn) {
	          arguments[0] = function () {
	            return callZone.run(fn, this, arguments);
	          };
	        }
	        return delegate.apply(obj, arguments);
	      };

	      obj[name] = function () {
	        return global.zone[name].apply(this, arguments);
	      };
	    }
	  });
	};

	function patchSetFunction(obj, fnNames) {
	  fnNames.forEach(function (name) {
	    var delegate = obj[name];

	    if (delegate) {
	      global.zone[name] = function (fn) {
	        arguments[0] = function () {
	          return fn.apply(this, arguments);
	        };
	        var args = utils.bindArgumentsOnce(arguments);
	        return delegate.apply(obj, args);
	      };

	      obj[name] = function () {
	        return zone[name].apply(this, arguments);
	      };
	    }
	  });
	};

	function patchFunction(obj, fnNames) {
	  fnNames.forEach(function (name) {
	    var delegate = obj[name];
	    global.zone[name] = function () {
	      return delegate.apply(obj, arguments);
	    };

	    obj[name] = function () {
	      return global.zone[name].apply(this, arguments);
	    };
	  });
	};


	module.exports = {
	  patchSetClearFunction: patchSetClearFunction,
	  patchSetFunction: patchSetFunction,
	  patchRequestAnimationFrame: patchRequestAnimationFrame,
	  patchFunction: patchFunction
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var keys = __webpack_require__(29);

	var originalInstanceKey = keys.create('originalInstance');
	var creationZoneKey = keys.create('creationZone');
	var isActiveKey = keys.create('isActive');

	// wrap some native API on `window`
	function patchClass(className) {
	  var OriginalClass = global[className];
	  if (!OriginalClass) return;

	  global[className] = function (fn) {
	    this[originalInstanceKey] = new OriginalClass(global.zone.bind(fn, true));
	    // Remember where the class was instantiate to execute the enqueueTask and dequeueTask hooks
	    this[creationZoneKey] = global.zone;
	  };

	  var instance = new OriginalClass(function () {});

	  global[className].prototype.disconnect = function () {
	    var result = this[originalInstanceKey].disconnect.apply(this[originalInstanceKey], arguments);
	    if (this[isActiveKey]) {
	      this[creationZoneKey].dequeueTask();
	      this[isActiveKey] = false;
	    }
	    return result;
	  };

	  global[className].prototype.observe = function () {
	    if (!this[isActiveKey]) {
	      this[creationZoneKey].enqueueTask();
	      this[isActiveKey] = true;
	    }
	    return this[originalInstanceKey].observe.apply(this[originalInstanceKey], arguments);
	  };

	  var prop;
	  for (prop in instance) {
	    (function (prop) {
	      if (typeof global[className].prototype !== undefined) {
	        return;
	      }
	      if (typeof instance[prop] === 'function') {
	        global[className].prototype[prop] = function () {
	          return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);
	        };
	      } else {
	        Object.defineProperty(global[className].prototype, prop, {
	          set: function (fn) {
	            if (typeof fn === 'function') {
	              this[originalInstanceKey][prop] = global.zone.bind(fn);
	            } else {
	              this[originalInstanceKey][prop] = fn;
	            }
	          },
	          get: function () {
	            return this[originalInstanceKey][prop];
	          }
	        });
	      }
	    }(prop));
	  }
	};

	module.exports = {
	  patchClass: patchClass
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var keys = __webpack_require__(29);

	// might need similar for object.freeze
	// i regret nothing

	var _defineProperty = Object.defineProperty;
	var _getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	var _create = Object.create;
	var unconfigurablesKey = keys.create('unconfigurables');

	function apply() {
	  Object.defineProperty = function (obj, prop, desc) {
	    if (isUnconfigurable(obj, prop)) {
	      throw new TypeError('Cannot assign to read only property \'' + prop + '\' of ' + obj);
	    }
	    if (prop !== 'prototype') {
	      desc = rewriteDescriptor(obj, prop, desc);
	    }
	    return _defineProperty(obj, prop, desc);
	  };

	  Object.defineProperties = function (obj, props) {
	    Object.keys(props).forEach(function (prop) {
	      Object.defineProperty(obj, prop, props[prop]);
	    });
	    return obj;
	  };

	  Object.create = function (obj, proto) {
	    if (typeof proto === 'object') {
	      Object.keys(proto).forEach(function (prop) {
	        proto[prop] = rewriteDescriptor(obj, prop, proto[prop]);
	      });
	    }
	    return _create(obj, proto);
	  };

	  Object.getOwnPropertyDescriptor = function (obj, prop) {
	    var desc = _getOwnPropertyDescriptor(obj, prop);
	    if (isUnconfigurable(obj, prop)) {
	      desc.configurable = false;
	    }
	    return desc;
	  };
	};

	function _redefineProperty(obj, prop, desc) {
	  desc = rewriteDescriptor(obj, prop, desc);
	  return _defineProperty(obj, prop, desc);
	};

	function isUnconfigurable (obj, prop) {
	  return obj && obj[unconfigurablesKey] && obj[unconfigurablesKey][prop];
	}

	function rewriteDescriptor (obj, prop, desc) {
	  desc.configurable = true;
	  if (!desc.configurable) {
	    if (!obj[unconfigurablesKey]) {
	      _defineProperty(obj, unconfigurablesKey, { writable: true, value: {} });
	    }
	    obj[unconfigurablesKey][prop] = true;
	  }
	  return desc;
	}

	module.exports = {
	  apply: apply,
	  _redefineProperty: _redefineProperty
	};




/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var _redefineProperty = __webpack_require__(35)._redefineProperty;
	var utils = __webpack_require__(31);

	function apply() {
	  if (utils.isWebWorker() || !('registerElement' in global.document)) {
	    return;
	  }

	  var _registerElement = document.registerElement;
	  var callbacks = [
	    'createdCallback',
	    'attachedCallback',
	    'detachedCallback',
	    'attributeChangedCallback'
	  ];

	  document.registerElement = function (name, opts) {
	    if (opts && opts.prototype) {
	      callbacks.forEach(function (callback) {
	        if (opts.prototype.hasOwnProperty(callback)) {
	          var descriptor = Object.getOwnPropertyDescriptor(opts.prototype, callback);
	          if (descriptor && descriptor.value) {
	            descriptor.value = global.zone.bind(descriptor.value);
	            _redefineProperty(opts.prototype, callback, descriptor);
	          } else {
	            opts.prototype[callback] = global.zone.bind(opts.prototype[callback]);
	          }
	        } else if (opts.prototype[callback]) {
	          opts.prototype[callback] = global.zone.bind(opts.prototype[callback]);
	        }
	      });
	    }

	    return _registerElement.apply(document, [name, opts]);
	  };
	}

	module.exports = {
	  apply: apply
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var utils = __webpack_require__(31);

	// we have to patch the instance since the proto is non-configurable
	function apply() {
	  var WS = global.WebSocket;
	  utils.patchEventTargetMethods(WS.prototype);
	  global.WebSocket = function(a, b) {
	    var socket = arguments.length > 1 ? new WS(a, b) : new WS(a);
	    var proxySocket;

	    // Safari 7.0 has non-configurable own 'onmessage' and friends properties on the socket instance
	    var onmessageDesc = Object.getOwnPropertyDescriptor(socket, 'onmessage');
	    if (onmessageDesc && onmessageDesc.configurable === false) {
	      proxySocket = Object.create(socket);
	      ['addEventListener', 'removeEventListener', 'send', 'close'].forEach(function(propName) {
	        proxySocket[propName] = function() {
	          return socket[propName].apply(socket, arguments);
	        };
	      });
	    } else {
	      // we can patch the real socket
	      proxySocket = socket;
	    }

	    utils.patchProperties(proxySocket, ['onclose', 'onerror', 'onmessage', 'onopen']);

	    return proxySocket;
	  };
	}

	module.exports = {
	  apply: apply
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var utils = __webpack_require__(31);

	function apply() {
	  // patched properties depend on addEventListener, so this needs to come first
	  if (global.EventTarget) {
	    utils.patchEventTargetMethods(global.EventTarget.prototype);

	  // Note: EventTarget is not available in all browsers,
	  // if it's not available, we instead patch the APIs in the IDL that inherit from EventTarget
	  } else {
	    var apis = [
	      'ApplicationCache',
	      'EventSource',
	      'FileReader',
	      'InputMethodContext',
	      'MediaController',
	      'MessagePort',
	      'Node',
	      'Performance',
	      'SVGElementInstance',
	      'SharedWorker',
	      'TextTrack',
	      'TextTrackCue',
	      'TextTrackList',
	      'WebKitNamedFlow',
	      'Worker',
	      'WorkerGlobalScope',
	      'XMLHttpRequest',
	      'XMLHttpRequestEventTarget',
	      'XMLHttpRequestUpload'
	    ];

	    apis.forEach(function(api) {
	      var proto = global[api] && global[api].prototype;

	      // Some browsers e.g. Android 4.3's don't actually implement
	      // the EventTarget methods for all of these e.g. FileReader.
	      // In this case, there is nothing to patch.
	      if (proto && proto.addEventListener) {
	        utils.patchEventTargetMethods(proto);
	      }
	    });

	    // Patch the methods on `window` instead of `Window.prototype`
	    // `Window` is not accessible on Android 4.3
	    if (typeof(window) !== 'undefined') {
	      utils.patchEventTargetMethods(window);
	    }
	  }
	}

	module.exports = {
	  apply: apply
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var webSocketPatch = __webpack_require__(37);
	var utils = __webpack_require__(31);
	var keys = __webpack_require__(29);

	var eventNames = 'copy cut paste abort blur focus canplay canplaythrough change click contextmenu dblclick drag dragend dragenter dragleave dragover dragstart drop durationchange emptied ended input invalid keydown keypress keyup load loadeddata loadedmetadata loadstart message mousedown mouseenter mouseleave mousemove mouseout mouseover mouseup pause play playing progress ratechange reset scroll seeked seeking select show stalled submit suspend timeupdate volumechange waiting mozfullscreenchange mozfullscreenerror mozpointerlockchange mozpointerlockerror error webglcontextrestored webglcontextlost webglcontextcreationerror'.split(' ');

	function apply() {
	  if (utils.isWebWorker()){
	    // on WebWorker so don't apply patch
	    return;
	  }

	  var supportsWebSocket = typeof WebSocket !== 'undefined';
	  if (canPatchViaPropertyDescriptor()) {
	    // for browsers that we can patch the descriptor:  Chrome & Firefox
	    var onEventNames = eventNames.map(function (property) {
	      return 'on' + property;
	    });
	    utils.patchProperties(HTMLElement.prototype, onEventNames);
	    utils.patchProperties(XMLHttpRequest.prototype);
	    if (supportsWebSocket) {
	      utils.patchProperties(WebSocket.prototype);
	    }
	  } else {
	    // Safari, Android browsers (Jelly Bean)
	    patchViaCapturingAllTheEvents();
	    utils.patchClass('XMLHttpRequest');
	    if (supportsWebSocket) {
	      webSocketPatch.apply();
	    }
	  }
	}

	function canPatchViaPropertyDescriptor() {
	  if (!Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'onclick') && typeof Element !== 'undefined') {
	    // WebKit https://bugs.webkit.org/show_bug.cgi?id=134364
	    // IDL interface attributes are not configurable
	    var desc = Object.getOwnPropertyDescriptor(Element.prototype, 'onclick');
	    if (desc && !desc.configurable) return false;
	  }

	  Object.defineProperty(HTMLElement.prototype, 'onclick', {
	    get: function () {
	      return true;
	    }
	  });
	  var elt = document.createElement('div');
	  var result = !!elt.onclick;
	  Object.defineProperty(HTMLElement.prototype, 'onclick', {});
	  return result;
	};

	var unboundKey = keys.create('unbound');

	// Whenever any event fires, we check the event target and all parents
	// for `onwhatever` properties and replace them with zone-bound functions
	// - Chrome (for now)
	function patchViaCapturingAllTheEvents() {
	  eventNames.forEach(function (property) {
	    var onproperty = 'on' + property;
	    document.addEventListener(property, function (event) {
	      var elt = event.target, bound;
	      while (elt) {
	        if (elt[onproperty] && !elt[onproperty][unboundKey]) {
	          bound = global.zone.bind(elt[onproperty]);
	          bound[unboundKey] = elt[onproperty];
	          elt[onproperty] = bound;
	        }
	        elt = elt.parentElement;
	      }
	    }, true);
	  });
	};

	module.exports = {
	  apply: apply
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var utils = __webpack_require__(31);

	function apply() {
	  if (global.navigator && global.navigator.geolocation) {
	    utils.patchPrototype(global.navigator.geolocation, [
	      'getCurrentPosition',
	      'watchPosition'
	    ]);
	  }
	}

	module.exports = {
	  apply: apply
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(31);

	function apply() {
	  utils.patchClass('FileReader');
	}

	module.exports = {
	  apply: apply
	};

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var ionic_1 = __webpack_require__(43);
	var page1_1 = __webpack_require__(515);
	var page2_1 = __webpack_require__(516);
	var page3_1 = __webpack_require__(517);
	__webpack_require__(518);
	var MyApp = (function () {
	    function MyApp(platform) {
	        // this tells the tabs component which Pages
	        // should be each tab's root Page
	        this.tab1Root = page1_1.Page1;
	        this.tab2Root = page2_1.Page2;
	        this.tab3Root = page3_1.Page3;
	        platform.ready().then(function () {
	            // Do any necessary cordova or native calls here now that the platform is ready
	        });
	    }
	    MyApp = __decorate([
	        ionic_1.App({
	            templateUrl: 'app/app.html'
	        }), 
	        __metadata('design:paramtypes', [(typeof ionic_1.Platform !== 'undefined' && ionic_1.Platform) || Object])
	    ], MyApp);
	    return MyApp;
	})();
	exports.MyApp = MyApp;
	//# sourceMappingURL=app.js.map

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopExportWildcard(obj, defaults) { var newObj = defaults({}, obj); delete newObj['default']; return newObj; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	var _configBootstrap = __webpack_require__(44);

	_defaults(exports, _interopExportWildcard(_configBootstrap, _defaults));

	var _configConfig = __webpack_require__(437);

	_defaults(exports, _interopExportWildcard(_configConfig, _defaults));

	var _configModes = __webpack_require__(457);

	_defaults(exports, _interopExportWildcard(_configModes, _defaults));

	var _configDecorators = __webpack_require__(458);

	_defaults(exports, _interopExportWildcard(_configDecorators, _defaults));

	var _configDirectives = __webpack_require__(459);

	_defaults(exports, _interopExportWildcard(_configDirectives, _defaults));

	var _components = __webpack_require__(504);

	_defaults(exports, _interopExportWildcard(_components, _defaults));

	var _platformPlatform = __webpack_require__(438);

	_defaults(exports, _interopExportWildcard(_platformPlatform, _defaults));

	var _platformRegistry = __webpack_require__(506);

	_defaults(exports, _interopExportWildcard(_platformRegistry, _defaults));

	var _platformStorage = __webpack_require__(507);

	_defaults(exports, _interopExportWildcard(_platformStorage, _defaults));

	var _utilClickBlock = __webpack_require__(436);

	_defaults(exports, _interopExportWildcard(_utilClickBlock, _defaults));

	var _utilEvents = __webpack_require__(450);

	_defaults(exports, _interopExportWildcard(_utilEvents, _defaults));

	var _animationsAnimation = __webpack_require__(441);

	_defaults(exports, _interopExportWildcard(_animationsAnimation, _defaults));

	var _animationsBuiltins = __webpack_require__(511);

	_defaults(exports, _interopExportWildcard(_animationsBuiltins, _defaults));

	var _transitionsTransition = __webpack_require__(472);

	_defaults(exports, _interopExportWildcard(_transitionsTransition, _defaults));

	var _transitionsIosTransition = __webpack_require__(512);

	_defaults(exports, _interopExportWildcard(_transitionsIosTransition, _defaults));

	var _transitionsMdTransition = __webpack_require__(513);

	_defaults(exports, _interopExportWildcard(_transitionsMdTransition, _defaults));

	var _translationTranslate = __webpack_require__(452);

	_defaults(exports, _interopExportWildcard(_translationTranslate, _defaults));

	var _translationTranslate_pipe = __webpack_require__(514);

	_defaults(exports, _interopExportWildcard(_translationTranslate_pipe, _defaults));

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});
	exports.ionicProviders = ionicProviders;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	var _angular2Angular2 = __webpack_require__(45);

	var _angular2Router = __webpack_require__(396);

	var _angular2Http = __webpack_require__(418);

	var _componentsAppApp = __webpack_require__(434);

	var _config = __webpack_require__(437);

	var _platformPlatform = __webpack_require__(438);

	var _componentsOverlayOverlayController = __webpack_require__(440);

	var _utilForm = __webpack_require__(443);

	var _utilKeyboard = __webpack_require__(444);

	var _componentsActionSheetActionSheet = __webpack_require__(445);

	var _componentsModalModal = __webpack_require__(447);

	var _componentsPopupPopup = __webpack_require__(448);

	var _utilEvents = __webpack_require__(450);

	var _componentsNavNavRegistry = __webpack_require__(451);

	var _translationTranslate = __webpack_require__(452);

	var _utilFeatureDetect = __webpack_require__(453);

	var _componentsTapClickTapClick = __webpack_require__(454);

	var _utilDom = __webpack_require__(435);

	var dom = _interopRequireWildcard(_utilDom);

	function ionicProviders() {
	    var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var platform = new _platformPlatform.Platform();
	    var navRegistry = new _componentsNavNavRegistry.NavRegistry(args.pages);
	    var config = args.config;
	    if (!(config instanceof _config.Config)) {
	        config = new _config.Config(config);
	    }
	    platform.url(window.location.href);
	    platform.userAgent(window.navigator.userAgent);
	    platform.navigatorPlatform(window.navigator.platform);
	    platform.load();
	    config.setPlatform(platform);
	    var app = new _componentsAppApp.IonicApp(config);
	    var events = new _utilEvents.Events();
	    (0, _componentsTapClickTapClick.initTapClick)(window, document, app, config);
	    var featureDetect = new _utilFeatureDetect.FeatureDetect();
	    setupDom(window, document, config, platform, featureDetect);
	    bindEvents(window, document, platform, events);
	    // prepare the ready promise to fire....when ready
	    platform.prepareReady(config);
	    return [(0, _angular2Angular2.provide)(_componentsAppApp.IonicApp, { useValue: app }), (0, _angular2Angular2.provide)(_config.Config, { useValue: config }), (0, _angular2Angular2.provide)(_platformPlatform.Platform, { useValue: platform }), (0, _angular2Angular2.provide)(_utilFeatureDetect.FeatureDetect, { useValue: featureDetect }), (0, _angular2Angular2.provide)(_utilEvents.Events, { useValue: events }), (0, _angular2Angular2.provide)(_componentsNavNavRegistry.NavRegistry, { useValue: navRegistry }), _utilForm.Form, _utilKeyboard.Keyboard, _componentsOverlayOverlayController.OverlayController, _componentsActionSheetActionSheet.ActionSheet, _componentsModalModal.Modal, _componentsPopupPopup.Popup, _translationTranslate.Translate, _angular2Router.ROUTER_PROVIDERS, (0, _angular2Angular2.provide)(_angular2Router.LocationStrategy, { useClass: _angular2Router.HashLocationStrategy }), _angular2Http.HTTP_PROVIDERS];
	}

	function setupDom(window, document, config, platform, featureDetect) {
	    var bodyEle = document.body;
	    if (!bodyEle) {
	        return dom.ready(function () {
	            applyBodyCss(document, config, platform);
	        });
	    }
	    var versions = platform.versions();
	    platform.platforms().forEach(function (platformName) {
	        // platform-ios
	        var platformClass = 'platform-' + platformName;
	        bodyEle.classList.add(platformClass);
	        var platformVersion = versions[platformName];
	        if (platformVersion) {
	            // platform-ios9
	            platformClass += platformVersion.major;
	            bodyEle.classList.add(platformClass);
	            // platform-ios9_3
	            bodyEle.classList.add(platformClass + '_' + platformVersion.minor);
	        }
	    });
	    // set the mode class name
	    // ios/md
	    bodyEle.classList.add(config.get('mode'));
	    // touch devices should not use :hover CSS pseudo
	    // enable :hover CSS when the "hoverCSS" setting is not false
	    if (config.get('hoverCSS') !== false) {
	        bodyEle.classList.add('enable-hover');
	    }
	    // run feature detection tests
	    featureDetect.run(window, document);
	}
	/**
	 * Bind some global events and publish on the 'app' channel
	 */
	function bindEvents(window, document, platform, events) {
	    window.addEventListener('online', function (ev) {
	        events.publish('app:online', ev);
	    }, false);
	    window.addEventListener('offline', function (ev) {
	        events.publish('app:offline', ev);
	    }, false);
	    window.addEventListener('orientationchange', function (ev) {
	        events.publish('app:rotated', ev);
	    });
	    // When that status taps, we respond
	    window.addEventListener('statusTap', function (ev) {
	        // TODO: Make this more better
	        var el = document.elementFromPoint(platform.width() / 2, platform.height() / 2);
	        if (!el) {
	            return;
	        }
	        var content = dom.closest(el, 'scroll-content');
	        if (content) {
	            var scrollTo = new ScrollTo(content);
	            scrollTo.start(0, 0, 300, 0);
	        }
	    });
	    // start listening for resizes XXms after the app starts
	    setTimeout(function () {
	        window.addEventListener('resize', function () {
	            platform.windowResize();
	        });
	    }, 2000);
	}

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(46));
	__export(__webpack_require__(334));
	__export(__webpack_require__(385));
	__export(__webpack_require__(386));
	__export(__webpack_require__(387));
	__export(__webpack_require__(388));
	//# sourceMappingURL=angular2.js.map

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(47));
	__export(__webpack_require__(255));
	__export(__webpack_require__(310));
	__export(__webpack_require__(333));
	//# sourceMappingURL=common.js.map

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * @module
	 * @description
	 * This module provides a set of common Pipes.
	 */
	var async_pipe_1 = __webpack_require__(48);
	var uppercase_pipe_1 = __webpack_require__(248);
	var lowercase_pipe_1 = __webpack_require__(249);
	var json_pipe_1 = __webpack_require__(250);
	var slice_pipe_1 = __webpack_require__(251);
	var date_pipe_1 = __webpack_require__(252);
	var number_pipe_1 = __webpack_require__(254);
	var lang_1 = __webpack_require__(49);
	var async_pipe_2 = __webpack_require__(48);
	exports.AsyncPipe = async_pipe_2.AsyncPipe;
	var date_pipe_2 = __webpack_require__(252);
	exports.DatePipe = date_pipe_2.DatePipe;
	var json_pipe_2 = __webpack_require__(250);
	exports.JsonPipe = json_pipe_2.JsonPipe;
	var slice_pipe_2 = __webpack_require__(251);
	exports.SlicePipe = slice_pipe_2.SlicePipe;
	var lowercase_pipe_2 = __webpack_require__(249);
	exports.LowerCasePipe = lowercase_pipe_2.LowerCasePipe;
	var number_pipe_2 = __webpack_require__(254);
	exports.NumberPipe = number_pipe_2.NumberPipe;
	exports.DecimalPipe = number_pipe_2.DecimalPipe;
	exports.PercentPipe = number_pipe_2.PercentPipe;
	exports.CurrencyPipe = number_pipe_2.CurrencyPipe;
	var uppercase_pipe_2 = __webpack_require__(248);
	exports.UpperCasePipe = uppercase_pipe_2.UpperCasePipe;
	exports.COMMON_PIPES = lang_1.CONST_EXPR([
	    async_pipe_1.AsyncPipe,
	    uppercase_pipe_1.UpperCasePipe,
	    lowercase_pipe_1.LowerCasePipe,
	    json_pipe_1.JsonPipe,
	    slice_pipe_1.SlicePipe,
	    number_pipe_1.DecimalPipe,
	    number_pipe_1.PercentPipe,
	    number_pipe_1.CurrencyPipe,
	    date_pipe_1.DatePipe
	]);
	//# sourceMappingURL=pipes.js.map

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(49);
	var async_1 = __webpack_require__(50);
	var metadata_1 = __webpack_require__(194);
	var di_1 = __webpack_require__(196);
	var change_detection_1 = __webpack_require__(214);
	var invalid_pipe_argument_exception_1 = __webpack_require__(247);
	var ObservableStrategy = (function () {
	    function ObservableStrategy() {
	    }
	    ObservableStrategy.prototype.createSubscription = function (async, updateLatestValue) {
	        return async_1.ObservableWrapper.subscribe(async, updateLatestValue, function (e) { throw e; });
	    };
	    ObservableStrategy.prototype.dispose = function (subscription) { async_1.ObservableWrapper.dispose(subscription); };
	    ObservableStrategy.prototype.onDestroy = function (subscription) { async_1.ObservableWrapper.dispose(subscription); };
	    return ObservableStrategy;
	})();
	var PromiseStrategy = (function () {
	    function PromiseStrategy() {
	    }
	    PromiseStrategy.prototype.createSubscription = function (async, updateLatestValue) {
	        return async.then(updateLatestValue);
	    };
	    PromiseStrategy.prototype.dispose = function (subscription) { };
	    PromiseStrategy.prototype.onDestroy = function (subscription) { };
	    return PromiseStrategy;
	})();
	var _promiseStrategy = new PromiseStrategy();
	var _observableStrategy = new ObservableStrategy();
	/**
	 * The `async` pipe subscribes to an Observable or Promise and returns the latest value it has
	 * emitted.
	 * When a new value is emitted, the `async` pipe marks the component to be checked for changes.
	 *
	 * ### Example
	 * The example below binds the `time` Observable to the view. Every 500ms, the `time` Observable
	 * updates the view with the current time.
	 *
	 * ```
	 * import {Observable} from 'angular2/core';
	 * @Component({
	 *   selector: "task-cmp",
	 *   template: "Time: {{ time | async }}"
	 * })
	 * class Task {
	 *   time = new Observable<number>(observer => {
	 *     setInterval(_ =>
	 *       observer.next(new Date().getTime()), 500);
	 *   });
	 * }
	 * ```
	 */
	var AsyncPipe = (function () {
	    function AsyncPipe(_ref) {
	        /** @internal */
	        this._latestValue = null;
	        /** @internal */
	        this._latestReturnedValue = null;
	        /** @internal */
	        this._subscription = null;
	        /** @internal */
	        this._obj = null;
	        this._strategy = null;
	        this._ref = _ref;
	    }
	    AsyncPipe.prototype.onDestroy = function () {
	        if (lang_1.isPresent(this._subscription)) {
	            this._dispose();
	        }
	    };
	    AsyncPipe.prototype.transform = function (obj, args) {
	        if (lang_1.isBlank(this._obj)) {
	            if (lang_1.isPresent(obj)) {
	                this._subscribe(obj);
	            }
	            return null;
	        }
	        if (obj !== this._obj) {
	            this._dispose();
	            return this.transform(obj);
	        }
	        if (this._latestValue === this._latestReturnedValue) {
	            return this._latestReturnedValue;
	        }
	        else {
	            this._latestReturnedValue = this._latestValue;
	            return change_detection_1.WrappedValue.wrap(this._latestValue);
	        }
	    };
	    /** @internal */
	    AsyncPipe.prototype._subscribe = function (obj) {
	        var _this = this;
	        this._obj = obj;
	        this._strategy = this._selectStrategy(obj);
	        this._subscription =
	            this._strategy.createSubscription(obj, function (value) { return _this._updateLatestValue(obj, value); });
	    };
	    /** @internal */
	    AsyncPipe.prototype._selectStrategy = function (obj) {
	        if (lang_1.isPromise(obj)) {
	            return _promiseStrategy;
	        }
	        else if (async_1.ObservableWrapper.isObservable(obj)) {
	            return _observableStrategy;
	        }
	        else {
	            throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(AsyncPipe, obj);
	        }
	    };
	    /** @internal */
	    AsyncPipe.prototype._dispose = function () {
	        this._strategy.dispose(this._subscription);
	        this._latestValue = null;
	        this._latestReturnedValue = null;
	        this._subscription = null;
	        this._obj = null;
	    };
	    /** @internal */
	    AsyncPipe.prototype._updateLatestValue = function (async, value) {
	        if (async === this._obj) {
	            this._latestValue = value;
	            this._ref.markForCheck();
	        }
	    };
	    AsyncPipe = __decorate([
	        metadata_1.Pipe({ name: 'async', pure: false }),
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [change_detection_1.ChangeDetectorRef])
	    ], AsyncPipe);
	    return AsyncPipe;
	})();
	exports.AsyncPipe = AsyncPipe;
	//# sourceMappingURL=async_pipe.js.map

/***/ },
/* 49 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var globalScope;
	if (typeof window === 'undefined') {
	    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
	        // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
	        globalScope = self;
	    }
	    else {
	        globalScope = global;
	    }
	}
	else {
	    globalScope = window;
	}
	;
	exports.IS_DART = false;
	// Need to declare a new variable for global here since TypeScript
	// exports the original value of the symbol.
	var _global = globalScope;
	exports.global = _global;
	exports.Type = Function;
	function getTypeNameForDebugging(type) {
	    return type['name'];
	}
	exports.getTypeNameForDebugging = getTypeNameForDebugging;
	exports.Math = _global.Math;
	exports.Date = _global.Date;
	var _devMode = !!_global.angularDevMode;
	var _devModeLocked = false;
	function lockDevMode() {
	    _devModeLocked = true;
	}
	exports.lockDevMode = lockDevMode;
	/**
	 * Enable Angular's development mode, which turns on assertions and other
	 * checks within the framework.
	 *
	 * One important assertion this enables verifies that a change detection pass
	 * does not result in additional changes to any bindings (also known as
	 * unidirectional data flow).
	 *
	 * {@example core/ts/dev_mode/dev_mode_example.ts region='enableDevMode'}
	 */
	function enableDevMode() {
	    // TODO(alxhub): Refactor out of facade/lang as per issue #5157.
	    if (_devModeLocked) {
	        // Cannot use BaseException as that ends up importing from facade/lang.
	        throw 'Cannot enable dev mode after platform setup.';
	    }
	    _devMode = true;
	}
	exports.enableDevMode = enableDevMode;
	function assertionsEnabled() {
	    return _devMode;
	}
	exports.assertionsEnabled = assertionsEnabled;
	// TODO: remove calls to assert in production environment
	// Note: Can't just export this and import in in other files
	// as `assert` is a reserved keyword in Dart
	_global.assert = function assert(condition) {
	    // TODO: to be fixed properly via #2830, noop for now
	};
	// This function is needed only to properly support Dart's const expressions
	// see https://github.com/angular/ts2dart/pull/151 for more info
	function CONST_EXPR(expr) {
	    return expr;
	}
	exports.CONST_EXPR = CONST_EXPR;
	function CONST() {
	    return function (target) { return target; };
	}
	exports.CONST = CONST;
	function isPresent(obj) {
	    return obj !== undefined && obj !== null;
	}
	exports.isPresent = isPresent;
	function isBlank(obj) {
	    return obj === undefined || obj === null;
	}
	exports.isBlank = isBlank;
	function isString(obj) {
	    return typeof obj === "string";
	}
	exports.isString = isString;
	function isFunction(obj) {
	    return typeof obj === "function";
	}
	exports.isFunction = isFunction;
	function isType(obj) {
	    return isFunction(obj);
	}
	exports.isType = isType;
	function isStringMap(obj) {
	    return typeof obj === 'object' && obj !== null;
	}
	exports.isStringMap = isStringMap;
	function isPromise(obj) {
	    return obj instanceof _global.Promise;
	}
	exports.isPromise = isPromise;
	function isArray(obj) {
	    return Array.isArray(obj);
	}
	exports.isArray = isArray;
	function isNumber(obj) {
	    return typeof obj === 'number';
	}
	exports.isNumber = isNumber;
	function isDate(obj) {
	    return obj instanceof exports.Date && !isNaN(obj.valueOf());
	}
	exports.isDate = isDate;
	function stringify(token) {
	    if (typeof token === 'string') {
	        return token;
	    }
	    if (token === undefined || token === null) {
	        return '' + token;
	    }
	    if (token.name) {
	        return token.name;
	    }
	    var res = token.toString();
	    var newLineIndex = res.indexOf("\n");
	    return (newLineIndex === -1) ? res : res.substring(0, newLineIndex);
	}
	exports.stringify = stringify;
	// serialize / deserialize enum exist only for consistency with dart API
	// enums in typescript don't need to be serialized
	function serializeEnum(val) {
	    return val;
	}
	exports.serializeEnum = serializeEnum;
	function deserializeEnum(val, values) {
	    return val;
	}
	exports.deserializeEnum = deserializeEnum;
	var StringWrapper = (function () {
	    function StringWrapper() {
	    }
	    StringWrapper.fromCharCode = function (code) { return String.fromCharCode(code); };
	    StringWrapper.charCodeAt = function (s, index) { return s.charCodeAt(index); };
	    StringWrapper.split = function (s, regExp) { return s.split(regExp); };
	    StringWrapper.equals = function (s, s2) { return s === s2; };
	    StringWrapper.replace = function (s, from, replace) {
	        return s.replace(from, replace);
	    };
	    StringWrapper.replaceAll = function (s, from, replace) {
	        return s.replace(from, replace);
	    };
	    StringWrapper.slice = function (s, from, to) {
	        if (from === void 0) { from = 0; }
	        if (to === void 0) { to = null; }
	        return s.slice(from, to === null ? undefined : to);
	    };
	    StringWrapper.replaceAllMapped = function (s, from, cb) {
	        return s.replace(from, function () {
	            var matches = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                matches[_i - 0] = arguments[_i];
	            }
	            // Remove offset & string from the result array
	            matches.splice(-2, 2);
	            // The callback receives match, p1, ..., pn
	            return cb(matches);
	        });
	    };
	    StringWrapper.contains = function (s, substr) { return s.indexOf(substr) != -1; };
	    StringWrapper.compare = function (a, b) {
	        if (a < b) {
	            return -1;
	        }
	        else if (a > b) {
	            return 1;
	        }
	        else {
	            return 0;
	        }
	    };
	    return StringWrapper;
	})();
	exports.StringWrapper = StringWrapper;
	var StringJoiner = (function () {
	    function StringJoiner(parts) {
	        if (parts === void 0) { parts = []; }
	        this.parts = parts;
	    }
	    StringJoiner.prototype.add = function (part) { this.parts.push(part); };
	    StringJoiner.prototype.toString = function () { return this.parts.join(""); };
	    return StringJoiner;
	})();
	exports.StringJoiner = StringJoiner;
	var NumberParseError = (function (_super) {
	    __extends(NumberParseError, _super);
	    function NumberParseError(message) {
	        _super.call(this);
	        this.message = message;
	    }
	    NumberParseError.prototype.toString = function () { return this.message; };
	    return NumberParseError;
	})(Error);
	exports.NumberParseError = NumberParseError;
	var NumberWrapper = (function () {
	    function NumberWrapper() {
	    }
	    NumberWrapper.toFixed = function (n, fractionDigits) { return n.toFixed(fractionDigits); };
	    NumberWrapper.equal = function (a, b) { return a === b; };
	    NumberWrapper.parseIntAutoRadix = function (text) {
	        var result = parseInt(text);
	        if (isNaN(result)) {
	            throw new NumberParseError("Invalid integer literal when parsing " + text);
	        }
	        return result;
	    };
	    NumberWrapper.parseInt = function (text, radix) {
	        if (radix == 10) {
	            if (/^(\-|\+)?[0-9]+$/.test(text)) {
	                return parseInt(text, radix);
	            }
	        }
	        else if (radix == 16) {
	            if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
	                return parseInt(text, radix);
	            }
	        }
	        else {
	            var result = parseInt(text, radix);
	            if (!isNaN(result)) {
	                return result;
	            }
	        }
	        throw new NumberParseError("Invalid integer literal when parsing " + text + " in base " +
	            radix);
	    };
	    // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.
	    NumberWrapper.parseFloat = function (text) { return parseFloat(text); };
	    Object.defineProperty(NumberWrapper, "NaN", {
	        get: function () { return NaN; },
	        enumerable: true,
	        configurable: true
	    });
	    NumberWrapper.isNaN = function (value) { return isNaN(value); };
	    NumberWrapper.isInteger = function (value) { return Number.isInteger(value); };
	    return NumberWrapper;
	})();
	exports.NumberWrapper = NumberWrapper;
	exports.RegExp = _global.RegExp;
	var RegExpWrapper = (function () {
	    function RegExpWrapper() {
	    }
	    RegExpWrapper.create = function (regExpStr, flags) {
	        if (flags === void 0) { flags = ''; }
	        flags = flags.replace(/g/g, '');
	        return new _global.RegExp(regExpStr, flags + 'g');
	    };
	    RegExpWrapper.firstMatch = function (regExp, input) {
	        // Reset multimatch regex state
	        regExp.lastIndex = 0;
	        return regExp.exec(input);
	    };
	    RegExpWrapper.test = function (regExp, input) {
	        regExp.lastIndex = 0;
	        return regExp.test(input);
	    };
	    RegExpWrapper.matcher = function (regExp, input) {
	        // Reset regex state for the case
	        // someone did not loop over all matches
	        // last time.
	        regExp.lastIndex = 0;
	        return { re: regExp, input: input };
	    };
	    return RegExpWrapper;
	})();
	exports.RegExpWrapper = RegExpWrapper;
	var RegExpMatcherWrapper = (function () {
	    function RegExpMatcherWrapper() {
	    }
	    RegExpMatcherWrapper.next = function (matcher) {
	        return matcher.re.exec(matcher.input);
	    };
	    return RegExpMatcherWrapper;
	})();
	exports.RegExpMatcherWrapper = RegExpMatcherWrapper;
	var FunctionWrapper = (function () {
	    function FunctionWrapper() {
	    }
	    FunctionWrapper.apply = function (fn, posArgs) { return fn.apply(null, posArgs); };
	    return FunctionWrapper;
	})();
	exports.FunctionWrapper = FunctionWrapper;
	// JS has NaN !== NaN
	function looseIdentical(a, b) {
	    return a === b || typeof a === "number" && typeof b === "number" && isNaN(a) && isNaN(b);
	}
	exports.looseIdentical = looseIdentical;
	// JS considers NaN is the same as NaN for map Key (while NaN !== NaN otherwise)
	// see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
	function getMapKey(value) {
	    return value;
	}
	exports.getMapKey = getMapKey;
	function normalizeBlank(obj) {
	    return isBlank(obj) ? null : obj;
	}
	exports.normalizeBlank = normalizeBlank;
	function normalizeBool(obj) {
	    return isBlank(obj) ? false : obj;
	}
	exports.normalizeBool = normalizeBool;
	function isJsObject(o) {
	    return o !== null && (typeof o === "function" || typeof o === "object");
	}
	exports.isJsObject = isJsObject;
	function print(obj) {
	    console.log(obj);
	}
	exports.print = print;
	// Can't be all uppercase as our transpiler would think it is a special directive...
	var Json = (function () {
	    function Json() {
	    }
	    Json.parse = function (s) { return _global.JSON.parse(s); };
	    Json.stringify = function (data) {
	        // Dart doesn't take 3 arguments
	        return _global.JSON.stringify(data, null, 2);
	    };
	    return Json;
	})();
	exports.Json = Json;
	var DateWrapper = (function () {
	    function DateWrapper() {
	    }
	    DateWrapper.create = function (year, month, day, hour, minutes, seconds, milliseconds) {
	        if (month === void 0) { month = 1; }
	        if (day === void 0) { day = 1; }
	        if (hour === void 0) { hour = 0; }
	        if (minutes === void 0) { minutes = 0; }
	        if (seconds === void 0) { seconds = 0; }
	        if (milliseconds === void 0) { milliseconds = 0; }
	        return new exports.Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
	    };
	    DateWrapper.fromISOString = function (str) { return new exports.Date(str); };
	    DateWrapper.fromMillis = function (ms) { return new exports.Date(ms); };
	    DateWrapper.toMillis = function (date) { return date.getTime(); };
	    DateWrapper.now = function () { return new exports.Date(); };
	    DateWrapper.toJson = function (date) { return date.toJSON(); };
	    return DateWrapper;
	})();
	exports.DateWrapper = DateWrapper;
	function setValueOnPath(global, path, value) {
	    var parts = path.split('.');
	    var obj = global;
	    while (parts.length > 1) {
	        var name = parts.shift();
	        if (obj.hasOwnProperty(name)) {
	            obj = obj[name];
	        }
	        else {
	            obj = obj[name] = {};
	        }
	    }
	    if (obj === undefined || obj === null) {
	        obj = {};
	    }
	    obj[parts.shift()] = value;
	}
	exports.setValueOnPath = setValueOnPath;
	var _symbolIterator = null;
	function getSymbolIterator() {
	    if (isBlank(_symbolIterator)) {
	        if (isPresent(Symbol) && isPresent(Symbol.iterator)) {
	            _symbolIterator = Symbol.iterator;
	        }
	        else {
	            // es6-shim specific logic
	            var keys = Object.getOwnPropertyNames(Map.prototype);
	            for (var i = 0; i < keys.length; ++i) {
	                var key = keys[i];
	                if (key !== 'entries' && key !== 'size' &&
	                    Map.prototype[key] === Map.prototype['entries']) {
	                    _symbolIterator = key;
	                }
	            }
	        }
	    }
	    return _symbolIterator;
	}
	exports.getSymbolIterator = getSymbolIterator;
	//# sourceMappingURL=lang.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var lang_1 = __webpack_require__(49);
	var promise_1 = __webpack_require__(51);
	exports.PromiseWrapper = promise_1.PromiseWrapper;
	exports.Promise = promise_1.Promise;
	var Rx_1 = __webpack_require__(52);
	var Rx_2 = __webpack_require__(52);
	exports.Subject = Rx_2.Subject;
	var TimerWrapper = (function () {
	    function TimerWrapper() {
	    }
	    TimerWrapper.setTimeout = function (fn, millis) {
	        return lang_1.global.setTimeout(fn, millis);
	    };
	    TimerWrapper.clearTimeout = function (id) { lang_1.global.clearTimeout(id); };
	    TimerWrapper.setInterval = function (fn, millis) {
	        return lang_1.global.setInterval(fn, millis);
	    };
	    TimerWrapper.clearInterval = function (id) { lang_1.global.clearInterval(id); };
	    return TimerWrapper;
	})();
	exports.TimerWrapper = TimerWrapper;
	var ObservableWrapper = (function () {
	    function ObservableWrapper() {
	    }
	    // TODO(vsavkin): when we use rxnext, try inferring the generic type from the first arg
	    ObservableWrapper.subscribe = function (emitter, onNext, onError, onComplete) {
	        if (onComplete === void 0) { onComplete = function () { }; }
	        return emitter.subscribe({ next: onNext, error: onError, complete: onComplete });
	    };
	    ObservableWrapper.isObservable = function (obs) { return obs instanceof Rx_1.Observable; };
	    /**
	     * Returns whether `obs` has any subscribers listening to events.
	     */
	    ObservableWrapper.hasSubscribers = function (obs) { return obs.observers.length > 0; };
	    ObservableWrapper.dispose = function (subscription) { subscription.unsubscribe(); };
	    ObservableWrapper.callNext = function (emitter, value) { emitter.next(value); };
	    ObservableWrapper.callError = function (emitter, error) { emitter.error(error); };
	    ObservableWrapper.callComplete = function (emitter) { emitter.complete(); };
	    ObservableWrapper.fromPromise = function (promise) {
	        return Rx_1.Observable.fromPromise(promise);
	    };
	    ObservableWrapper.toPromise = function (obj) { return obj.toPromise(); };
	    return ObservableWrapper;
	})();
	exports.ObservableWrapper = ObservableWrapper;
	/**
	 * Use by directives and components to emit custom Events.
	 *
	 * ### Examples
	 *
	 * In the following example, `Zippy` alternatively emits `open` and `close` events when its
	 * title gets clicked:
	 *
	 * ```
	 * @Component({
	 *   selector: 'zippy',
	 *   template: `
	 *   <div class="zippy">
	 *     <div (click)="toggle()">Toggle</div>
	 *     <div [hidden]="!visible">
	 *       <ng-content></ng-content>
	 *     </div>
	 *  </div>`})
	 * export class Zippy {
	 *   visible: boolean = true;
	 *   @Output() open: EventEmitter = new EventEmitter();
	 *   @Output() close: EventEmitter = new EventEmitter();
	 *
	 *   toggle() {
	 *     this.visible = !this.visible;
	 *     if (this.visible) {
	 *       this.open.next(null);
	 *     } else {
	 *       this.close.next(null);
	 *     }
	 *   }
	 * }
	 * ```
	 *
	 * Use Rx.Observable but provides an adapter to make it work as specified here:
	 * https://github.com/jhusain/observable-spec
	 *
	 * Once a reference implementation of the spec is available, switch to it.
	 */
	var EventEmitter = (function (_super) {
	    __extends(EventEmitter, _super);
	    /**
	     * Creates an instance of [EventEmitter], which depending on [isAsync],
	     * delivers events synchronously or asynchronously.
	     */
	    function EventEmitter(isAsync) {
	        if (isAsync === void 0) { isAsync = true; }
	        _super.call(this);
	        this._isAsync = isAsync;
	    }
	    EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
	        if (generatorOrNext && typeof generatorOrNext === 'object') {
	            var schedulerFn = this._isAsync ?
	                function (value) { setTimeout(function () { return generatorOrNext.next(value); }); } :
	                function (value) { generatorOrNext.next(value); };
	            return _super.prototype.subscribe.call(this, schedulerFn, function (err) { return generatorOrNext.error ? generatorOrNext.error(err) : null; }, function () { return generatorOrNext.complete ? generatorOrNext.complete() : null; });
	        }
	        else {
	            var schedulerFn = this._isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :
	                function (value) { generatorOrNext(value); };
	            return _super.prototype.subscribe.call(this, schedulerFn, function (err) { return error ? error(err) : null; }, function () { return complete ? complete() : null; });
	        }
	    };
	    return EventEmitter;
	})(Rx_1.Subject);
	exports.EventEmitter = EventEmitter;
	// todo(robwormald): ts2dart should handle this properly
	var Observable = (function (_super) {
	    __extends(Observable, _super);
	    function Observable() {
	        _super.apply(this, arguments);
	    }
	    Observable.prototype.lift = function (operator) {
	        var observable = new Observable();
	        observable.source = this;
	        observable.operator = operator;
	        return observable;
	    };
	    return Observable;
	})(Rx_1.Observable);
	exports.Observable = Observable;
	//# sourceMappingURL=async.js.map

/***/ },
/* 51 */
/***/ function(module, exports) {

	'use strict';// Promises are put into their own facade file so that they can be used without
	// introducing a dependency on rxjs. They are re-exported through facade/async.
	var PromiseWrapper = (function () {
	    function PromiseWrapper() {
	    }
	    PromiseWrapper.resolve = function (obj) { return Promise.resolve(obj); };
	    PromiseWrapper.reject = function (obj, _) { return Promise.reject(obj); };
	    // Note: We can't rename this method into `catch`, as this is not a valid
	    // method name in Dart.
	    PromiseWrapper.catchError = function (promise, onError) {
	        return promise.catch(onError);
	    };
	    PromiseWrapper.all = function (promises) {
	        if (promises.length == 0)
	            return Promise.resolve([]);
	        return Promise.all(promises);
	    };
	    PromiseWrapper.then = function (promise, success, rejection) {
	        return promise.then(success, rejection);
	    };
	    PromiseWrapper.wrap = function (computation) {
	        return new Promise(function (res, rej) {
	            try {
	                res(computation());
	            }
	            catch (e) {
	                rej(e);
	            }
	        });
	    };
	    PromiseWrapper.scheduleMicrotask = function (computation) {
	        PromiseWrapper.then(PromiseWrapper.resolve(null), computation, function (_) { });
	    };
	    PromiseWrapper.isPromise = function (obj) { return obj instanceof Promise; };
	    PromiseWrapper.completer = function () {
	        var resolve;
	        var reject;
	        var p = new Promise(function (res, rej) {
	            resolve = res;
	            reject = rej;
	        });
	        return { promise: p, resolve: resolve, reject: reject };
	    };
	    return PromiseWrapper;
	})();
	exports.PromiseWrapper = PromiseWrapper;
	//# sourceMappingURL=promise.js.map

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _Observable = __webpack_require__(53);

	var _Observable2 = _interopRequireDefault(_Observable);

	var _operatorsCombineLatestStatic = __webpack_require__(62);

	var _operatorsCombineLatestStatic2 = _interopRequireDefault(_operatorsCombineLatestStatic);

	var _operatorsConcatStatic = __webpack_require__(74);

	var _operatorsConcatStatic2 = _interopRequireDefault(_operatorsConcatStatic);

	var _observablesDeferObservable = __webpack_require__(79);

	var _observablesDeferObservable2 = _interopRequireDefault(_observablesDeferObservable);

	var _observablesEmptyObservable = __webpack_require__(68);

	var _observablesEmptyObservable2 = _interopRequireDefault(_observablesEmptyObservable);

	var _observablesForkJoinObservable = __webpack_require__(80);

	var _observablesForkJoinObservable2 = _interopRequireDefault(_observablesForkJoinObservable);

	var _observablesFromObservable = __webpack_require__(81);

	var _observablesFromObservable2 = _interopRequireDefault(_observablesFromObservable);

	var _observablesArrayObservable = __webpack_require__(63);

	var _observablesArrayObservable2 = _interopRequireDefault(_observablesArrayObservable);

	var _observablesFromEventObservable = __webpack_require__(86);

	var _observablesFromEventObservable2 = _interopRequireDefault(_observablesFromEventObservable);

	var _observablesFromEventPatternObservable = __webpack_require__(87);

	var _observablesFromEventPatternObservable2 = _interopRequireDefault(_observablesFromEventPatternObservable);

	var _observablesPromiseObservable = __webpack_require__(82);

	var _observablesPromiseObservable2 = _interopRequireDefault(_observablesPromiseObservable);

	var _observablesIntervalObservable = __webpack_require__(88);

	var _observablesIntervalObservable2 = _interopRequireDefault(_observablesIntervalObservable);

	var _operatorsMergeStatic = __webpack_require__(95);

	var _operatorsMergeStatic2 = _interopRequireDefault(_operatorsMergeStatic);

	var _observablesInfiniteObservable = __webpack_require__(97);

	var _observablesInfiniteObservable2 = _interopRequireDefault(_observablesInfiniteObservable);

	var _observablesRangeObservable = __webpack_require__(98);

	var _observablesRangeObservable2 = _interopRequireDefault(_observablesRangeObservable);

	var _observablesErrorObservable = __webpack_require__(67);

	var _observablesErrorObservable2 = _interopRequireDefault(_observablesErrorObservable);

	var _observablesTimerObservable = __webpack_require__(99);

	var _observablesTimerObservable2 = _interopRequireDefault(_observablesTimerObservable);

	var _operatorsZipStatic = __webpack_require__(100);

	var _operatorsZipStatic2 = _interopRequireDefault(_operatorsZipStatic);

	var _operatorsBuffer = __webpack_require__(102);

	var _operatorsBuffer2 = _interopRequireDefault(_operatorsBuffer);

	var _operatorsBufferCount = __webpack_require__(103);

	var _operatorsBufferCount2 = _interopRequireDefault(_operatorsBufferCount);

	var _operatorsBufferTime = __webpack_require__(104);

	var _operatorsBufferTime2 = _interopRequireDefault(_operatorsBufferTime);

	var _operatorsBufferToggle = __webpack_require__(105);

	var _operatorsBufferToggle2 = _interopRequireDefault(_operatorsBufferToggle);

	var _operatorsBufferWhen = __webpack_require__(106);

	var _operatorsBufferWhen2 = _interopRequireDefault(_operatorsBufferWhen);

	var _operatorsCatch = __webpack_require__(107);

	var _operatorsCatch2 = _interopRequireDefault(_operatorsCatch);

	var _operatorsCombineAll = __webpack_require__(108);

	var _operatorsCombineAll2 = _interopRequireDefault(_operatorsCombineAll);

	var _operatorsCombineLatest = __webpack_require__(109);

	var _operatorsCombineLatest2 = _interopRequireDefault(_operatorsCombineLatest);

	var _operatorsConcat = __webpack_require__(110);

	var _operatorsConcat2 = _interopRequireDefault(_operatorsConcat);

	var _operatorsConcatAll = __webpack_require__(111);

	var _operatorsConcatAll2 = _interopRequireDefault(_operatorsConcatAll);

	var _operatorsConcatMap = __webpack_require__(112);

	var _operatorsConcatMap2 = _interopRequireDefault(_operatorsConcatMap);

	var _operatorsConcatMapTo = __webpack_require__(114);

	var _operatorsConcatMapTo2 = _interopRequireDefault(_operatorsConcatMapTo);

	var _operatorsCount = __webpack_require__(116);

	var _operatorsCount2 = _interopRequireDefault(_operatorsCount);

	var _operatorsDematerialize = __webpack_require__(118);

	var _operatorsDematerialize2 = _interopRequireDefault(_operatorsDematerialize);

	var _operatorsDebounce = __webpack_require__(119);

	var _operatorsDebounce2 = _interopRequireDefault(_operatorsDebounce);

	var _operatorsDebounceTime = __webpack_require__(120);

	var _operatorsDebounceTime2 = _interopRequireDefault(_operatorsDebounceTime);

	var _operatorsDefaultIfEmpty = __webpack_require__(121);

	var _operatorsDefaultIfEmpty2 = _interopRequireDefault(_operatorsDefaultIfEmpty);

	var _operatorsDelay = __webpack_require__(122);

	var _operatorsDelay2 = _interopRequireDefault(_operatorsDelay);

	var _operatorsDistinctUntilChanged = __webpack_require__(124);

	var _operatorsDistinctUntilChanged2 = _interopRequireDefault(_operatorsDistinctUntilChanged);

	var _operatorsDo = __webpack_require__(125);

	var _operatorsDo2 = _interopRequireDefault(_operatorsDo);

	var _operatorsExpand = __webpack_require__(126);

	var _operatorsExpand2 = _interopRequireDefault(_operatorsExpand);

	var _operatorsFilter = __webpack_require__(128);

	var _operatorsFilter2 = _interopRequireDefault(_operatorsFilter);

	var _operatorsFinally = __webpack_require__(129);

	var _operatorsFinally2 = _interopRequireDefault(_operatorsFinally);

	var _operatorsFirst = __webpack_require__(130);

	var _operatorsFirst2 = _interopRequireDefault(_operatorsFirst);

	var _operatorsGroupBy = __webpack_require__(132);

	var _operatorsIgnoreElements = __webpack_require__(138);

	var _operatorsIgnoreElements2 = _interopRequireDefault(_operatorsIgnoreElements);

	var _operatorsEvery = __webpack_require__(139);

	var _operatorsEvery2 = _interopRequireDefault(_operatorsEvery);

	var _operatorsLast = __webpack_require__(140);

	var _operatorsLast2 = _interopRequireDefault(_operatorsLast);

	var _operatorsMap = __webpack_require__(141);

	var _operatorsMap2 = _interopRequireDefault(_operatorsMap);

	var _operatorsMapTo = __webpack_require__(142);

	var _operatorsMapTo2 = _interopRequireDefault(_operatorsMapTo);

	var _operatorsMaterialize = __webpack_require__(143);

	var _operatorsMaterialize2 = _interopRequireDefault(_operatorsMaterialize);

	var _operatorsMerge = __webpack_require__(144);

	var _operatorsMerge2 = _interopRequireDefault(_operatorsMerge);

	var _operatorsMergeAll = __webpack_require__(145);

	var _operatorsMergeAll2 = _interopRequireDefault(_operatorsMergeAll);

	var _operatorsMergeMap = __webpack_require__(146);

	var _operatorsMergeMap2 = _interopRequireDefault(_operatorsMergeMap);

	var _operatorsMergeMapTo = __webpack_require__(147);

	var _operatorsMergeMapTo2 = _interopRequireDefault(_operatorsMergeMapTo);

	var _operatorsMulticast = __webpack_require__(148);

	var _operatorsMulticast2 = _interopRequireDefault(_operatorsMulticast);

	var _operatorsObserveOn = __webpack_require__(150);

	var _operatorsObserveOn2 = _interopRequireDefault(_operatorsObserveOn);

	var _operatorsPartition = __webpack_require__(151);

	var _operatorsPartition2 = _interopRequireDefault(_operatorsPartition);

	var _operatorsPublish = __webpack_require__(153);

	var _operatorsPublish2 = _interopRequireDefault(_operatorsPublish);

	var _operatorsPublishBehavior = __webpack_require__(154);

	var _operatorsPublishBehavior2 = _interopRequireDefault(_operatorsPublishBehavior);

	var _operatorsPublishReplay = __webpack_require__(156);

	var _operatorsPublishReplay2 = _interopRequireDefault(_operatorsPublishReplay);

	var _operatorsReduce = __webpack_require__(158);

	var _operatorsReduce2 = _interopRequireDefault(_operatorsReduce);

	var _operatorsRepeat = __webpack_require__(160);

	var _operatorsRepeat2 = _interopRequireDefault(_operatorsRepeat);

	var _operatorsRetry = __webpack_require__(161);

	var _operatorsRetry2 = _interopRequireDefault(_operatorsRetry);

	var _operatorsRetryWhen = __webpack_require__(162);

	var _operatorsRetryWhen2 = _interopRequireDefault(_operatorsRetryWhen);

	var _operatorsSample = __webpack_require__(163);

	var _operatorsSample2 = _interopRequireDefault(_operatorsSample);

	var _operatorsSampleTime = __webpack_require__(164);

	var _operatorsSampleTime2 = _interopRequireDefault(_operatorsSampleTime);

	var _operatorsScan = __webpack_require__(165);

	var _operatorsScan2 = _interopRequireDefault(_operatorsScan);

	var _operatorsShare = __webpack_require__(166);

	var _operatorsShare2 = _interopRequireDefault(_operatorsShare);

	var _operatorsShareBehavior = __webpack_require__(167);

	var _operatorsShareBehavior2 = _interopRequireDefault(_operatorsShareBehavior);

	var _operatorsShareReplay = __webpack_require__(168);

	var _operatorsShareReplay2 = _interopRequireDefault(_operatorsShareReplay);

	var _operatorsSingle = __webpack_require__(169);

	var _operatorsSingle2 = _interopRequireDefault(_operatorsSingle);

	var _operatorsSkip = __webpack_require__(170);

	var _operatorsSkip2 = _interopRequireDefault(_operatorsSkip);

	var _operatorsSkipUntil = __webpack_require__(171);

	var _operatorsSkipUntil2 = _interopRequireDefault(_operatorsSkipUntil);

	var _operatorsStartWith = __webpack_require__(172);

	var _operatorsStartWith2 = _interopRequireDefault(_operatorsStartWith);

	var _operatorsSubscribeOn = __webpack_require__(173);

	var _operatorsSubscribeOn2 = _interopRequireDefault(_operatorsSubscribeOn);

	var _operatorsSwitch = __webpack_require__(175);

	var _operatorsSwitch2 = _interopRequireDefault(_operatorsSwitch);

	var _operatorsSwitchMap = __webpack_require__(176);

	var _operatorsSwitchMap2 = _interopRequireDefault(_operatorsSwitchMap);

	var _operatorsSwitchMapTo = __webpack_require__(177);

	var _operatorsSwitchMapTo2 = _interopRequireDefault(_operatorsSwitchMapTo);

	var _operatorsTake = __webpack_require__(178);

	var _operatorsTake2 = _interopRequireDefault(_operatorsTake);

	var _operatorsTakeUntil = __webpack_require__(179);

	var _operatorsTakeUntil2 = _interopRequireDefault(_operatorsTakeUntil);

	var _operatorsThrottle = __webpack_require__(180);

	var _operatorsThrottle2 = _interopRequireDefault(_operatorsThrottle);

	var _operatorsTimeout = __webpack_require__(181);

	var _operatorsTimeout2 = _interopRequireDefault(_operatorsTimeout);

	var _operatorsTimeoutWith = __webpack_require__(182);

	var _operatorsTimeoutWith2 = _interopRequireDefault(_operatorsTimeoutWith);

	var _operatorsToArray = __webpack_require__(183);

	var _operatorsToArray2 = _interopRequireDefault(_operatorsToArray);

	var _operatorsToPromise = __webpack_require__(184);

	var _operatorsToPromise2 = _interopRequireDefault(_operatorsToPromise);

	var _operatorsWindow = __webpack_require__(185);

	var _operatorsWindow2 = _interopRequireDefault(_operatorsWindow);

	var _operatorsWindowCount = __webpack_require__(186);

	var _operatorsWindowCount2 = _interopRequireDefault(_operatorsWindowCount);

	var _operatorsWindowTime = __webpack_require__(187);

	var _operatorsWindowTime2 = _interopRequireDefault(_operatorsWindowTime);

	var _operatorsWindowToggle = __webpack_require__(188);

	var _operatorsWindowToggle2 = _interopRequireDefault(_operatorsWindowToggle);

	var _operatorsWindowWhen = __webpack_require__(189);

	var _operatorsWindowWhen2 = _interopRequireDefault(_operatorsWindowWhen);

	var _operatorsWithLatestFrom = __webpack_require__(190);

	var _operatorsWithLatestFrom2 = _interopRequireDefault(_operatorsWithLatestFrom);

	var _operatorsZip = __webpack_require__(191);

	var _operatorsZip2 = _interopRequireDefault(_operatorsZip);

	var _operatorsZipAll = __webpack_require__(192);

	var _operatorsZipAll2 = _interopRequireDefault(_operatorsZipAll);

	var _Subject = __webpack_require__(133);

	var _Subject2 = _interopRequireDefault(_Subject);

	var _Subscription = __webpack_require__(58);

	var _Subscription2 = _interopRequireDefault(_Subscription);

	var _Subscriber = __webpack_require__(54);

	var _Subscriber2 = _interopRequireDefault(_Subscriber);

	var _subjectsReplaySubject = __webpack_require__(157);

	var _subjectsReplaySubject2 = _interopRequireDefault(_subjectsReplaySubject);

	var _subjectsBehaviorSubject = __webpack_require__(155);

	var _subjectsBehaviorSubject2 = _interopRequireDefault(_subjectsBehaviorSubject);

	var _observablesConnectableObservable = __webpack_require__(149);

	var _observablesConnectableObservable2 = _interopRequireDefault(_observablesConnectableObservable);

	var _Notification = __webpack_require__(85);

	var _Notification2 = _interopRequireDefault(_Notification);

	var _utilEmptyError = __webpack_require__(131);

	var _utilEmptyError2 = _interopRequireDefault(_utilEmptyError);

	var _utilArgumentOutOfRangeError = __webpack_require__(193);

	var _utilArgumentOutOfRangeError2 = _interopRequireDefault(_utilArgumentOutOfRangeError);

	var _schedulersNextTick = __webpack_require__(90);

	var _schedulersNextTick2 = _interopRequireDefault(_schedulersNextTick);

	var _schedulersImmediate = __webpack_require__(75);

	var _schedulersImmediate2 = _interopRequireDefault(_schedulersImmediate);

	_Observable2['default'].combineLatest = _operatorsCombineLatestStatic2['default'];

	_Observable2['default'].concat = _operatorsConcatStatic2['default'];

	_Observable2['default'].defer = _observablesDeferObservable2['default'].create;

	_Observable2['default'].empty = _observablesEmptyObservable2['default'].create;

	_Observable2['default'].forkJoin = _observablesForkJoinObservable2['default'].create;

	_Observable2['default'].from = _observablesFromObservable2['default'].create;

	_Observable2['default'].fromArray = _observablesArrayObservable2['default'].create;

	_Observable2['default'].fromEvent = _observablesFromEventObservable2['default'].create;

	_Observable2['default'].fromEventPattern = _observablesFromEventPatternObservable2['default'].create;

	_Observable2['default'].fromPromise = _observablesPromiseObservable2['default'].create;

	_Observable2['default'].interval = _observablesIntervalObservable2['default'].create;

	_Observable2['default'].merge = _operatorsMergeStatic2['default'];

	_Observable2['default'].never = _observablesInfiniteObservable2['default'].create;
	_Observable2['default'].of = _observablesArrayObservable2['default'].of;

	_Observable2['default'].range = _observablesRangeObservable2['default'].create;

	_Observable2['default']['throw'] = _observablesErrorObservable2['default'].create;

	_Observable2['default'].timer = _observablesTimerObservable2['default'].create;

	_Observable2['default'].zip = _operatorsZipStatic2['default'];
	var observableProto = _Observable2['default'].prototype;

	observableProto.buffer = _operatorsBuffer2['default'];

	observableProto.bufferCount = _operatorsBufferCount2['default'];

	observableProto.bufferTime = _operatorsBufferTime2['default'];

	observableProto.bufferToggle = _operatorsBufferToggle2['default'];

	observableProto.bufferWhen = _operatorsBufferWhen2['default'];

	observableProto['catch'] = _operatorsCatch2['default'];

	observableProto.combineAll = _operatorsCombineAll2['default'];

	observableProto.combineLatest = _operatorsCombineLatest2['default'];

	observableProto.concat = _operatorsConcat2['default'];

	observableProto.concatAll = _operatorsConcatAll2['default'];

	observableProto.concatMap = _operatorsConcatMap2['default'];

	observableProto.concatMapTo = _operatorsConcatMapTo2['default'];

	observableProto.count = _operatorsCount2['default'];

	observableProto.dematerialize = _operatorsDematerialize2['default'];

	observableProto.debounce = _operatorsDebounce2['default'];

	observableProto.debounceTime = _operatorsDebounceTime2['default'];

	observableProto.defaultIfEmpty = _operatorsDefaultIfEmpty2['default'];

	observableProto.delay = _operatorsDelay2['default'];

	observableProto.distinctUntilChanged = _operatorsDistinctUntilChanged2['default'];

	observableProto['do'] = _operatorsDo2['default'];

	observableProto.expand = _operatorsExpand2['default'];

	observableProto.filter = _operatorsFilter2['default'];

	observableProto['finally'] = _operatorsFinally2['default'];

	observableProto.first = _operatorsFirst2['default'];

	observableProto.groupBy = _operatorsGroupBy.groupBy;

	observableProto.ignoreElements = _operatorsIgnoreElements2['default'];

	observableProto.every = _operatorsEvery2['default'];

	observableProto.last = _operatorsLast2['default'];

	observableProto.map = _operatorsMap2['default'];

	observableProto.mapTo = _operatorsMapTo2['default'];

	observableProto.materialize = _operatorsMaterialize2['default'];

	observableProto.merge = _operatorsMerge2['default'];

	observableProto.mergeAll = _operatorsMergeAll2['default'];

	observableProto.mergeMap = _operatorsMergeMap2['default'];
	observableProto.flatMap = _operatorsMergeMap2['default'];

	observableProto.mergeMapTo = _operatorsMergeMapTo2['default'];
	observableProto.flatMapTo = _operatorsMergeMapTo2['default'];

	observableProto.multicast = _operatorsMulticast2['default'];

	observableProto.observeOn = _operatorsObserveOn2['default'];

	observableProto.partition = _operatorsPartition2['default'];

	observableProto.publish = _operatorsPublish2['default'];

	observableProto.publishBehavior = _operatorsPublishBehavior2['default'];

	observableProto.publishReplay = _operatorsPublishReplay2['default'];

	observableProto.reduce = _operatorsReduce2['default'];

	observableProto.repeat = _operatorsRepeat2['default'];

	observableProto.retry = _operatorsRetry2['default'];

	observableProto.retryWhen = _operatorsRetryWhen2['default'];

	observableProto.sample = _operatorsSample2['default'];

	observableProto.sampleTime = _operatorsSampleTime2['default'];

	observableProto.scan = _operatorsScan2['default'];

	observableProto.share = _operatorsShare2['default'];

	observableProto.shareBehavior = _operatorsShareBehavior2['default'];

	observableProto.shareReplay = _operatorsShareReplay2['default'];

	observableProto.single = _operatorsSingle2['default'];

	observableProto.skip = _operatorsSkip2['default'];

	observableProto.skipUntil = _operatorsSkipUntil2['default'];

	observableProto.startWith = _operatorsStartWith2['default'];

	observableProto.subscribeOn = _operatorsSubscribeOn2['default'];

	observableProto['switch'] = _operatorsSwitch2['default'];

	observableProto.switchMap = _operatorsSwitchMap2['default'];

	observableProto.switchMapTo = _operatorsSwitchMapTo2['default'];

	observableProto.take = _operatorsTake2['default'];

	observableProto.takeUntil = _operatorsTakeUntil2['default'];

	observableProto.throttle = _operatorsThrottle2['default'];

	observableProto.timeout = _operatorsTimeout2['default'];

	observableProto.timeoutWith = _operatorsTimeoutWith2['default'];

	observableProto.toArray = _operatorsToArray2['default'];

	observableProto.toPromise = _operatorsToPromise2['default'];

	observableProto.window = _operatorsWindow2['default'];

	observableProto.windowCount = _operatorsWindowCount2['default'];

	observableProto.windowTime = _operatorsWindowTime2['default'];

	observableProto.windowToggle = _operatorsWindowToggle2['default'];

	observableProto.windowWhen = _operatorsWindowWhen2['default'];

	observableProto.withLatestFrom = _operatorsWithLatestFrom2['default'];

	observableProto.zip = _operatorsZip2['default'];

	observableProto.zipAll = _operatorsZipAll2['default'];

	var Scheduler = {
	    nextTick: _schedulersNextTick2['default'],
	    immediate: _schedulersImmediate2['default']
	};
	exports.Subject = _Subject2['default'];
	exports.Scheduler = Scheduler;
	exports.Observable = _Observable2['default'];
	exports.Subscriber = _Subscriber2['default'];
	exports.Subscription = _Subscription2['default'];
	exports.ReplaySubject = _subjectsReplaySubject2['default'];
	exports.BehaviorSubject = _subjectsBehaviorSubject2['default'];
	exports.ConnectableObservable = _observablesConnectableObservable2['default'];
	exports.Notification = _Notification2['default'];
	exports.EmptyError = _utilEmptyError2['default'];
	exports.ArgumentOutOfRangeError = _utilArgumentOutOfRangeError2['default'];

	//# sourceMappingURL=Rx.js.map
	//# sourceMappingURL=Rx.js.map

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber = __webpack_require__(54);

	var _Subscriber2 = _interopRequireDefault(_Subscriber);

	var _utilRoot = __webpack_require__(59);

	var _utilSymbol_observable = __webpack_require__(61);

	var _utilSymbol_observable2 = _interopRequireDefault(_utilSymbol_observable);

	/**
	 * A representation of any set of values over any amount of time. This the most basic building block
	 * of RxJS.
	 *
	 * @class Observable<T>
	 */

	var Observable = (function () {
	    /**
	     * @constructor
	     * @param {Function} subscribe the function that is
	     * called when the Observable is initially subscribed to. This function is given a Subscriber, to which new values
	     * can be `next`ed, or an `error` method can be called to raise an error, or `complete` can be called to notify
	     * of a successful completion.
	     */

	    function Observable(subscribe) {
	        _classCallCheck(this, Observable);

	        this._isScalar = false;
	        if (subscribe) {
	            this._subscribe = subscribe;
	        }
	    }

	    // HACK: Since TypeScript inherits static properties too, we have to
	    // fight against TypeScript here so Subject can have a different static create signature
	    /**
	     * @static
	     * @method create
	     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
	     * @returns {Observable} a new cold observable
	     * @description creates a new cold Observable by calling the Observable constructor
	     */

	    /**
	     * @method lift
	     * @param {Operator} operator the operator defining the operation to take on the observable
	     * @returns {Observable} a new observable with the Operator applied
	     * @description creates a new Observable, with this Observable as the source, and the passed
	     * operator defined as the new observable's operator.
	     */

	    Observable.prototype.lift = function lift(operator) {
	        var observable = new Observable();
	        observable.source = this;
	        observable.operator = operator;
	        return observable;
	    };

	    /**
	     * @method Symbol.observable
	     * @returns {Observable} this instance of the observable
	     * @description an interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
	     */

	    Observable.prototype[_utilSymbol_observable2['default']] = function () {
	        return this;
	    };

	    /**
	     * @method subscribe
	     * @param {Observer|Function} observerOrNext (optional) either an observer defining all functions to be called,
	     *  or the first of three possible handlers, which is the handler for each value emitted from the observable.
	     * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,
	     *  the error will be thrown as unhandled
	     * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.
	     * @returns {Subscription} a subscription reference to the registered handlers
	     * @description registers handlers for handling emitted values, error and completions from the observable, and
	     *  executes the observable's subscriber function, which will take action to set up the underlying data stream
	     */

	    Observable.prototype.subscribe = function subscribe(observerOrNext, error, complete) {
	        var subscriber = undefined;
	        if (observerOrNext && typeof observerOrNext === "object") {
	            if (observerOrNext instanceof _Subscriber2['default']) {
	                subscriber = observerOrNext;
	            } else {
	                subscriber = new _Subscriber2['default'](observerOrNext);
	            }
	        } else {
	            var next = observerOrNext;
	            subscriber = _Subscriber2['default'].create(next, error, complete);
	        }
	        subscriber.add(this._subscribe(subscriber));
	        return subscriber;
	    };

	    /**
	     * @method forEach
	     * @param {Function} next a handler for each value emitted by the observable
	     * @param {PromiseConstructor} PromiseCtor? a constructor function used to instantiate the Promise
	     * @returns {Promise} a promise that either resolves on observable completion or
	     *  rejects with the handled error
	     */

	    Observable.prototype.forEach = function forEach(next, PromiseCtor) {
	        var _this = this;

	        if (!PromiseCtor) {
	            if (_utilRoot.root.Rx && _utilRoot.root.Rx.config && _utilRoot.root.Rx.config.Promise) {
	                PromiseCtor = _utilRoot.root.Rx.config.Promise;
	            } else if (_utilRoot.root.Promise) {
	                PromiseCtor = _utilRoot.root.Promise;
	            }
	        }
	        if (!PromiseCtor) {
	            throw new Error('no Promise impl found');
	        }
	        return new PromiseCtor(function (resolve, reject) {
	            _this.subscribe(next, reject, resolve);
	        });
	    };

	    Observable.prototype._subscribe = function _subscribe(subscriber) {
	        return this.source._subscribe(this.operator.call(subscriber));
	    };

	    return Observable;
	})();

	exports['default'] = Observable;
	Observable.create = function (subscribe) {
	    return new Observable(subscribe);
	};
	//# sourceMappingURL=Observable.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=Observable.js.map

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _utilNoop = __webpack_require__(55);

	var _utilNoop2 = _interopRequireDefault(_utilNoop);

	var _utilThrowError = __webpack_require__(56);

	var _utilThrowError2 = _interopRequireDefault(_utilThrowError);

	var _utilTryOrOnError = __webpack_require__(57);

	var _utilTryOrOnError2 = _interopRequireDefault(_utilTryOrOnError);

	var _Subscription2 = __webpack_require__(58);

	var _Subscription3 = _interopRequireDefault(_Subscription2);

	var Subscriber = (function (_Subscription) {
	    _inherits(Subscriber, _Subscription);

	    function Subscriber(destination) {
	        _classCallCheck(this, Subscriber);

	        _Subscription.call(this);
	        this.destination = destination;
	        this._isUnsubscribed = false;
	        if (!this.destination) {
	            return;
	        }
	        var subscription = destination._subscription;
	        if (subscription) {
	            this._subscription = subscription;
	        } else if (destination instanceof Subscriber) {
	            this._subscription = destination;
	        }
	    }

	    //# sourceMappingURL=Subscriber.js.map

	    Subscriber.create = function create(next, error, complete) {
	        var subscriber = new Subscriber();
	        subscriber._next = typeof next === "function" && _utilTryOrOnError2['default'](next) || _utilNoop2['default'];
	        subscriber._error = typeof error === "function" && error || _utilThrowError2['default'];
	        subscriber._complete = typeof complete === "function" && complete || _utilNoop2['default'];
	        return subscriber;
	    };

	    Subscriber.prototype.add = function add(sub) {
	        // route add to the shared Subscription if it exists
	        var _subscription = this._subscription;
	        if (_subscription) {
	            _subscription.add(sub);
	        } else {
	            _Subscription.prototype.add.call(this, sub);
	        }
	    };

	    Subscriber.prototype.remove = function remove(sub) {
	        // route remove to the shared Subscription if it exists
	        if (this._subscription) {
	            this._subscription.remove(sub);
	        } else {
	            _Subscription.prototype.remove.call(this, sub);
	        }
	    };

	    Subscriber.prototype.unsubscribe = function unsubscribe() {
	        if (this._isUnsubscribed) {
	            return;
	        } else if (this._subscription) {
	            this._isUnsubscribed = true;
	        } else {
	            _Subscription.prototype.unsubscribe.call(this);
	        }
	    };

	    Subscriber.prototype._next = function _next(value) {
	        this.destination.next(value);
	    };

	    Subscriber.prototype._error = function _error(err) {
	        this.destination.error(err);
	    };

	    Subscriber.prototype._complete = function _complete() {
	        this.destination.complete();
	    };

	    Subscriber.prototype.next = function next(value) {
	        if (!this.isUnsubscribed) {
	            this._next(value);
	        }
	    };

	    Subscriber.prototype.error = function error(_error2) {
	        if (!this.isUnsubscribed) {
	            this._error(_error2);
	            this.unsubscribe();
	        }
	    };

	    Subscriber.prototype.complete = function complete() {
	        if (!this.isUnsubscribed) {
	            this._complete();
	            this.unsubscribe();
	        }
	    };

	    _createClass(Subscriber, [{
	        key: 'isUnsubscribed',
	        get: function get() {
	            var subscription = this._subscription;
	            if (subscription) {
	                // route to the shared Subscription if it exists
	                return this._isUnsubscribed || subscription.isUnsubscribed;
	            } else {
	                return this._isUnsubscribed;
	            }
	        },
	        set: function set(value) {
	            var subscription = this._subscription;
	            if (subscription) {
	                // route to the shared Subscription if it exists
	                subscription.isUnsubscribed = Boolean(value);
	            } else {
	                this._isUnsubscribed = Boolean(value);
	            }
	        }
	    }]);

	    return Subscriber;
	})(_Subscription3['default']);

	exports['default'] = Subscriber;
	module.exports = exports['default'];
	//# sourceMappingURL=Subscriber.js.map

/***/ },
/* 55 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = noop;

	function noop() {}

	//# sourceMappingURL=noop.js.map
	module.exports = exports["default"];
	//# sourceMappingURL=noop.js.map

/***/ },
/* 56 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = throwError;

	function throwError(e) {
	  throw e;
	}

	//# sourceMappingURL=throwError.js.map
	module.exports = exports["default"];
	//# sourceMappingURL=throwError.js.map

/***/ },
/* 57 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = tryOrOnError;

	function tryOrOnError(target) {
	    function tryCatcher() {
	        try {
	            tryCatcher.target.apply(this, arguments);
	        } catch (e) {
	            this.error(e);
	        }
	    }
	    tryCatcher.target = target;
	    return tryCatcher;
	}

	//# sourceMappingURL=tryOrOnError.js.map
	module.exports = exports["default"];
	//# sourceMappingURL=tryOrOnError.js.map

/***/ },
/* 58 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Subscription = (function () {
	    function Subscription(_unsubscribe) {
	        _classCallCheck(this, Subscription);

	        this.isUnsubscribed = false;
	        if (_unsubscribe) {
	            this._unsubscribe = _unsubscribe;
	        }
	    }

	    Subscription.prototype._unsubscribe = function _unsubscribe() {};

	    Subscription.prototype.unsubscribe = function unsubscribe() {
	        if (this.isUnsubscribed) {
	            return;
	        }
	        this.isUnsubscribed = true;
	        var unsubscribe = this._unsubscribe;
	        var subscriptions = this._subscriptions;
	        this._subscriptions = void 0;
	        if (unsubscribe) {
	            unsubscribe.call(this);
	        }
	        if (subscriptions != null) {
	            var index = -1;
	            var len = subscriptions.length;
	            while (++index < len) {
	                subscriptions[index].unsubscribe();
	            }
	        }
	    };

	    Subscription.prototype.add = function add(subscription) {
	        // return early if:
	        //  1. the subscription is null
	        //  2. we're attempting to add our this
	        //  3. we're attempting to add the static `empty` Subscription
	        if (!subscription || subscription === this || subscription === Subscription.EMPTY) {
	            return;
	        }
	        var sub = subscription;
	        switch (typeof subscription) {
	            case "function":
	                sub = new Subscription(subscription);
	            case "object":
	                if (sub.isUnsubscribed || typeof sub.unsubscribe !== "function") {
	                    break;
	                } else if (this.isUnsubscribed) {
	                    sub.unsubscribe();
	                } else {
	                    var subscriptions = this._subscriptions || (this._subscriptions = []);
	                    subscriptions.push(sub);
	                }
	                break;
	            default:
	                throw new Error('Unrecognized subscription ' + subscription + ' added to Subscription.');
	        }
	    };

	    Subscription.prototype.remove = function remove(subscription) {
	        // return early if:
	        //  1. the subscription is null
	        //  2. we're attempting to remove ourthis
	        //  3. we're attempting to remove the static `empty` Subscription
	        if (subscription == null || subscription === this || subscription === Subscription.EMPTY) {
	            return;
	        }
	        var subscriptions = this._subscriptions;
	        if (subscriptions) {
	            var subscriptionIndex = subscriptions.indexOf(subscription);
	            if (subscriptionIndex !== -1) {
	                subscriptions.splice(subscriptionIndex, 1);
	            }
	        }
	    };

	    return Subscription;
	})();

	exports["default"] = Subscription;

	Subscription.EMPTY = (function (empty) {
	    empty.isUnsubscribed = true;
	    return empty;
	})(new Subscription());
	//# sourceMappingURL=Subscription.js.map
	module.exports = exports["default"];
	//# sourceMappingURL=Subscription.js.map

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module, global) {'use strict';

	exports.__esModule = true;
	var objectTypes = {
	    'boolean': false,
	    'function': true,
	    'object': true,
	    'number': false,
	    'string': false,
	    'undefined': false
	};
	var root = objectTypes[typeof self] && self || objectTypes[typeof window] && window;
	exports.root = root;
	var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;
	var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;
	var freeGlobal = objectTypes[typeof global] && global;
	if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
	    exports.root = root = freeGlobal;
	}
	//# sourceMappingURL=root.js.map
	//# sourceMappingURL=root.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(60)(module), (function() { return this; }())))

/***/ },
/* 60 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _root = __webpack_require__(59);

	if (!_root.root.Symbol) {
	    _root.root.Symbol = {};
	}
	if (!_root.root.Symbol.observable) {
	    if (typeof _root.root.Symbol['for'] === 'function') {
	        _root.root.Symbol.observable = _root.root.Symbol['for']('observable');
	    } else {
	        _root.root.Symbol.observable = '@@observable';
	    }
	}
	exports['default'] = _root.root.Symbol.observable;

	//# sourceMappingURL=Symbol_observable.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=Symbol_observable.js.map

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = combineLatest;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _observablesArrayObservable = __webpack_require__(63);

	var _observablesArrayObservable2 = _interopRequireDefault(_observablesArrayObservable);

	var _combineLatestSupport = __webpack_require__(69);

	/**
	 * Combines the values from observables passed as arguments. This is done by subscribing
	 * to each observable, in order, and collecting an array of each of the most recent values any time any of the observables
	 * emits, then either taking that array and passing it as arguments to an option `project` function and emitting the return
	 * value of that, or just emitting the array of recent values directly if there is no `project` function.
	 * @param {...Observable} observables the observables to combine
	 * @param {function} [project] an optional function to project the values from the combined recent values into a new value for emission.
	 * @returns {Observable} an observable of other projected values from the most recent values from each observable, or an array of each of
	 * the most recent values from each observable.
	 */

	function combineLatest() {
	    var project = undefined,
	        scheduler = undefined;

	    for (var _len = arguments.length, observables = Array(_len), _key = 0; _key < _len; _key++) {
	        observables[_key] = arguments[_key];
	    }

	    if (typeof observables[observables.length - 1].schedule === 'function') {
	        scheduler = observables.pop();
	    }
	    if (typeof observables[observables.length - 1] === 'function') {
	        project = observables.pop();
	    }
	    return new _observablesArrayObservable2['default'](observables, scheduler).lift(new _combineLatestSupport.CombineLatestOperator(project));
	}

	//# sourceMappingURL=combineLatest-static.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=combineLatest-static.js.map

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _Observable2 = __webpack_require__(53);

	var _Observable3 = _interopRequireDefault(_Observable2);

	var _ScalarObservable = __webpack_require__(64);

	var _ScalarObservable2 = _interopRequireDefault(_ScalarObservable);

	var _EmptyObservable = __webpack_require__(68);

	var _EmptyObservable2 = _interopRequireDefault(_EmptyObservable);

	var ArrayObservable = (function (_Observable) {
	    _inherits(ArrayObservable, _Observable);

	    function ArrayObservable(array, scheduler) {
	        _classCallCheck(this, ArrayObservable);

	        _Observable.call(this);
	        this.array = array;
	        this.scheduler = scheduler;
	        if (!scheduler && array.length === 1) {
	            this._isScalar = true;
	            this.value = array[0];
	        }
	    }

	    //# sourceMappingURL=ArrayObservable.js.map

	    ArrayObservable.create = function create(array, scheduler) {
	        return new ArrayObservable(array, scheduler);
	    };

	    ArrayObservable.of = function of() {
	        for (var _len = arguments.length, array = Array(_len), _key = 0; _key < _len; _key++) {
	            array[_key] = arguments[_key];
	        }

	        var scheduler = array[array.length - 1];
	        if (scheduler && typeof scheduler.schedule === 'function') {
	            array.pop();
	        } else {
	            scheduler = void 0;
	        }
	        var len = array.length;
	        if (len > 1) {
	            return new ArrayObservable(array, scheduler);
	        } else if (len === 1) {
	            return new _ScalarObservable2['default'](array[0], scheduler);
	        } else {
	            return new _EmptyObservable2['default'](scheduler);
	        }
	    };

	    ArrayObservable.dispatch = function dispatch(state) {
	        var array = state.array;
	        var index = state.index;
	        var count = state.count;
	        var subscriber = state.subscriber;

	        if (index >= count) {
	            subscriber.complete();
	            return;
	        }
	        subscriber.next(array[index]);
	        if (subscriber.isUnsubscribed) {
	            return;
	        }
	        state.index = index + 1;
	        this.schedule(state);
	    };

	    ArrayObservable.prototype._subscribe = function _subscribe(subscriber) {
	        var index = 0;
	        var array = this.array;
	        var count = array.length;
	        var scheduler = this.scheduler;
	        if (scheduler) {
	            subscriber.add(scheduler.schedule(ArrayObservable.dispatch, 0, {
	                array: array, index: index, count: count, subscriber: subscriber
	            }));
	        } else {
	            for (var i = 0; i < count && !subscriber.isUnsubscribed; i++) {
	                subscriber.next(array[i]);
	            }
	            subscriber.complete();
	        }
	    };

	    return ArrayObservable;
	})(_Observable3['default']);

	exports['default'] = ArrayObservable;
	module.exports = exports['default'];
	//# sourceMappingURL=ArrayObservable.js.map

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _Observable2 = __webpack_require__(53);

	var _Observable3 = _interopRequireDefault(_Observable2);

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	var _ErrorObservable = __webpack_require__(67);

	var _ErrorObservable2 = _interopRequireDefault(_ErrorObservable);

	var _EmptyObservable = __webpack_require__(68);

	var _EmptyObservable2 = _interopRequireDefault(_EmptyObservable);

	var ScalarObservable = (function (_Observable) {
	    _inherits(ScalarObservable, _Observable);

	    function ScalarObservable(value, scheduler) {
	        _classCallCheck(this, ScalarObservable);

	        _Observable.call(this);
	        this.value = value;
	        this.scheduler = scheduler;
	        this._isScalar = true;
	    }

	    // TypeScript is weird about class prototype member functions and instance properties touching on it's plate.

	    ScalarObservable.create = function create(value, scheduler) {
	        return new ScalarObservable(value, scheduler);
	    };

	    ScalarObservable.dispatch = function dispatch(state) {
	        var done = state.done;
	        var value = state.value;
	        var subscriber = state.subscriber;

	        if (done) {
	            subscriber.complete();
	            return;
	        }
	        subscriber.next(value);
	        if (subscriber.isUnsubscribed) {
	            return;
	        }
	        state.done = true;
	        this.schedule(state);
	    };

	    ScalarObservable.prototype._subscribe = function _subscribe(subscriber) {
	        var value = this.value;
	        var scheduler = this.scheduler;
	        if (scheduler) {
	            subscriber.add(scheduler.schedule(ScalarObservable.dispatch, 0, {
	                done: false, value: value, subscriber: subscriber
	            }));
	        } else {
	            subscriber.next(value);
	            if (!subscriber.isUnsubscribed) {
	                subscriber.complete();
	            }
	        }
	    };

	    return ScalarObservable;
	})(_Observable3['default']);

	exports['default'] = ScalarObservable;
	var proto = ScalarObservable.prototype;
	proto.map = function (project, thisArg) {
	    var result = _utilTryCatch2['default'](project).call(thisArg || this, this.value, 0);
	    if (result === _utilErrorObject.errorObject) {
	        return new _ErrorObservable2['default'](_utilErrorObject.errorObject.e);
	    } else {
	        return new ScalarObservable(project.call(thisArg || this, this.value, 0));
	    }
	};
	proto.filter = function (select, thisArg) {
	    var result = _utilTryCatch2['default'](select).call(thisArg || this, this.value, 0);
	    if (result === _utilErrorObject.errorObject) {
	        return new _ErrorObservable2['default'](_utilErrorObject.errorObject.e);
	    } else if (result) {
	        return this;
	    } else {
	        return new _EmptyObservable2['default']();
	    }
	};
	proto.reduce = function (project, acc) {
	    if (typeof acc === 'undefined') {
	        return this;
	    }
	    var result = _utilTryCatch2['default'](project)(acc, this.value);
	    if (result === _utilErrorObject.errorObject) {
	        return new _ErrorObservable2['default'](_utilErrorObject.errorObject.e);
	    } else {
	        return new ScalarObservable(result);
	    }
	};
	proto.scan = function (project, acc) {
	    return this.reduce(project, acc);
	};
	proto.count = function (predicate, thisArg) {
	    if (!predicate) {
	        return new ScalarObservable(1);
	    } else {
	        var result = _utilTryCatch2['default'](predicate).call(thisArg || this, this.value, 0, this);
	        if (result === _utilErrorObject.errorObject) {
	            return new _ErrorObservable2['default'](_utilErrorObject.errorObject.e);
	        } else {
	            return new ScalarObservable(result ? 1 : 0);
	        }
	    }
	};
	proto.skip = function (count) {
	    if (count > 0) {
	        return new _EmptyObservable2['default']();
	    }
	    return this;
	};
	proto.take = function (count) {
	    if (count > 0) {
	        return this;
	    }
	    return new _EmptyObservable2['default']();
	};
	//# sourceMappingURL=ScalarObservable.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=ScalarObservable.js.map

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = tryCatch;

	var _errorObject = __webpack_require__(66);

	var tryCatchTarget = undefined;
	function tryCatcher() {
	    try {
	        return tryCatchTarget.apply(this, arguments);
	    } catch (e) {
	        _errorObject.errorObject.e = e;
	        return _errorObject.errorObject;
	    }
	}

	function tryCatch(fn) {
	    tryCatchTarget = fn;
	    return tryCatcher;
	}

	;
	//# sourceMappingURL=tryCatch.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=tryCatch.js.map

/***/ },
/* 66 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	var errorObject = { e: {} };
	exports.errorObject = errorObject;
	//# sourceMappingURL=errorObject.js.map
	//# sourceMappingURL=errorObject.js.map

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _Observable2 = __webpack_require__(53);

	var _Observable3 = _interopRequireDefault(_Observable2);

	var ErrorObservable = (function (_Observable) {
	    _inherits(ErrorObservable, _Observable);

	    function ErrorObservable(error, scheduler) {
	        _classCallCheck(this, ErrorObservable);

	        _Observable.call(this);
	        this.error = error;
	        this.scheduler = scheduler;
	    }

	    //# sourceMappingURL=ErrorObservable.js.map

	    ErrorObservable.create = function create(error, scheduler) {
	        return new ErrorObservable(error, scheduler);
	    };

	    ErrorObservable.dispatch = function dispatch(_ref) {
	        var error = _ref.error;
	        var subscriber = _ref.subscriber;

	        subscriber.error(error);
	    };

	    ErrorObservable.prototype._subscribe = function _subscribe(subscriber) {
	        var error = this.error;
	        var scheduler = this.scheduler;
	        if (scheduler) {
	            subscriber.add(scheduler.schedule(ErrorObservable.dispatch, 0, {
	                error: error, subscriber: subscriber
	            }));
	        } else {
	            subscriber.error(error);
	        }
	    };

	    return ErrorObservable;
	})(_Observable3['default']);

	exports['default'] = ErrorObservable;
	module.exports = exports['default'];
	//# sourceMappingURL=ErrorObservable.js.map

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _Observable2 = __webpack_require__(53);

	var _Observable3 = _interopRequireDefault(_Observable2);

	var EmptyObservable = (function (_Observable) {
	    _inherits(EmptyObservable, _Observable);

	    function EmptyObservable(scheduler) {
	        _classCallCheck(this, EmptyObservable);

	        _Observable.call(this);
	        this.scheduler = scheduler;
	    }

	    //# sourceMappingURL=EmptyObservable.js.map

	    EmptyObservable.create = function create(scheduler) {
	        return new EmptyObservable(scheduler);
	    };

	    EmptyObservable.dispatch = function dispatch(_ref) {
	        var subscriber = _ref.subscriber;

	        subscriber.complete();
	    };

	    EmptyObservable.prototype._subscribe = function _subscribe(subscriber) {
	        var scheduler = this.scheduler;
	        if (scheduler) {
	            subscriber.add(scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber }));
	        } else {
	            subscriber.complete();
	        }
	    };

	    return EmptyObservable;
	})(_Observable3['default']);

	exports['default'] = EmptyObservable;
	module.exports = exports['default'];
	//# sourceMappingURL=EmptyObservable.js.map

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	var _OuterSubscriber2 = __webpack_require__(70);

	var _OuterSubscriber3 = _interopRequireDefault(_OuterSubscriber2);

	var _utilSubscribeToResult = __webpack_require__(71);

	var _utilSubscribeToResult2 = _interopRequireDefault(_utilSubscribeToResult);

	var CombineLatestOperator = (function () {
	    function CombineLatestOperator(project) {
	        _classCallCheck(this, CombineLatestOperator);

	        this.project = project;
	    }

	    CombineLatestOperator.prototype.call = function call(subscriber) {
	        return new CombineLatestSubscriber(subscriber, this.project);
	    };

	    return CombineLatestOperator;
	})();

	exports.CombineLatestOperator = CombineLatestOperator;

	var CombineLatestSubscriber = (function (_OuterSubscriber) {
	    _inherits(CombineLatestSubscriber, _OuterSubscriber);

	    function CombineLatestSubscriber(destination, project) {
	        _classCallCheck(this, CombineLatestSubscriber);

	        _OuterSubscriber.call(this, destination);
	        this.project = project;
	        this.active = 0;
	        this.values = [];
	        this.observables = [];
	        this.toRespond = [];
	    }

	    //# sourceMappingURL=combineLatest-support.js.map

	    CombineLatestSubscriber.prototype._next = function _next(observable) {
	        var toRespond = this.toRespond;
	        toRespond.push(toRespond.length);
	        this.observables.push(observable);
	    };

	    CombineLatestSubscriber.prototype._complete = function _complete() {
	        var observables = this.observables;
	        var len = observables.length;
	        if (len === 0) {
	            this.destination.complete();
	        } else {
	            this.active = len;
	            for (var i = 0; i < len; i++) {
	                var observable = observables[i];
	                this.add(_utilSubscribeToResult2['default'](this, observable, observable, i));
	            }
	        }
	    };

	    CombineLatestSubscriber.prototype.notifyComplete = function notifyComplete(innerSubscriber) {
	        if ((this.active -= 1) === 0) {
	            this.destination.complete();
	        }
	    };

	    CombineLatestSubscriber.prototype.notifyNext = function notifyNext(observable, value, outerIndex, innerIndex) {
	        var values = this.values;
	        values[outerIndex] = value;
	        var toRespond = this.toRespond;
	        if (toRespond.length > 0) {
	            var found = toRespond.indexOf(outerIndex);
	            if (found !== -1) {
	                toRespond.splice(found, 1);
	            }
	        }
	        if (toRespond.length === 0) {
	            var project = this.project;
	            var destination = this.destination;
	            if (project) {
	                var result = _utilTryCatch2['default'](project).apply(this, values);
	                if (result === _utilErrorObject.errorObject) {
	                    destination.error(_utilErrorObject.errorObject.e);
	                } else {
	                    destination.next(result);
	                }
	            } else {
	                destination.next(values);
	            }
	        }
	    };

	    return CombineLatestSubscriber;
	})(_OuterSubscriber3['default']);

	exports.CombineLatestSubscriber = CombineLatestSubscriber;
	//# sourceMappingURL=combineLatest-support.js.map

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	var OuterSubscriber = (function (_Subscriber) {
	    _inherits(OuterSubscriber, _Subscriber);

	    function OuterSubscriber() {
	        _classCallCheck(this, OuterSubscriber);

	        _Subscriber.apply(this, arguments);
	    }

	    //# sourceMappingURL=OuterSubscriber.js.map

	    OuterSubscriber.prototype.notifyComplete = function notifyComplete(inner) {
	        this.destination.complete();
	    };

	    OuterSubscriber.prototype.notifyNext = function notifyNext(outerValue, innerValue, outerIndex, innerIndex) {
	        this.destination.next(innerValue);
	    };

	    OuterSubscriber.prototype.notifyError = function notifyError(error, inner) {
	        this.destination.error(error);
	    };

	    return OuterSubscriber;
	})(_Subscriber3['default']);

	exports['default'] = OuterSubscriber;
	module.exports = exports['default'];
	//# sourceMappingURL=OuterSubscriber.js.map

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = subscribeToResult;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _Observable = __webpack_require__(53);

	var _Observable2 = _interopRequireDefault(_Observable);

	var _utilSymbol_iterator = __webpack_require__(72);

	var _utilSymbol_iterator2 = _interopRequireDefault(_utilSymbol_iterator);

	var _utilSymbol_observable = __webpack_require__(61);

	var _utilSymbol_observable2 = _interopRequireDefault(_utilSymbol_observable);

	var _InnerSubscriber = __webpack_require__(73);

	var _InnerSubscriber2 = _interopRequireDefault(_InnerSubscriber);

	var isArray = Array.isArray;

	function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
	    var destination = new _InnerSubscriber2['default'](outerSubscriber, outerValue, outerIndex);
	    if (destination.isUnsubscribed) {
	        return;
	    }
	    if (result instanceof _Observable2['default']) {
	        if (result._isScalar) {
	            destination.next(result.value);
	            destination.complete();
	            return;
	        } else {
	            return result.subscribe(destination);
	        }
	    }
	    if (isArray(result)) {
	        for (var i = 0, len = result.length; i < len && !destination.isUnsubscribed; i++) {
	            destination.next(result[i]);
	        }
	        if (!destination.isUnsubscribed) {
	            destination.complete();
	        }
	    } else if (typeof result.then === 'function') {
	        result.then(function (x) {
	            if (!destination.isUnsubscribed) {
	                destination.next(x);
	                destination.complete();
	            }
	        }, function (err) {
	            return destination.error(err);
	        }).then(null, function (err) {
	            // Escaping the Promise trap: globally throw unhandled errors
	            setTimeout(function () {
	                throw err;
	            });
	        });
	        return destination;
	    } else if (typeof result[_utilSymbol_iterator2['default']] === 'function') {
	        for (var _iterator = result, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
	            var _ref;

	            if (_isArray) {
	                if (_i >= _iterator.length) break;
	                _ref = _iterator[_i++];
	            } else {
	                _i = _iterator.next();
	                if (_i.done) break;
	                _ref = _i.value;
	            }

	            var item = _ref;

	            destination.next(item);
	            if (destination.isUnsubscribed) {
	                break;
	            }
	        }
	        if (!destination.isUnsubscribed) {
	            destination.complete();
	        }
	    } else if (typeof result[_utilSymbol_observable2['default']] === 'function') {
	        var obs = result[_utilSymbol_observable2['default']]();
	        if (typeof obs.subscribe !== 'function') {
	            destination.error('invalid observable');
	        } else {
	            return obs.subscribe(new _InnerSubscriber2['default'](outerSubscriber, outerValue, outerIndex));
	        }
	    } else {
	        destination.error(new TypeError('unknown type returned'));
	    }
	}

	//# sourceMappingURL=subscribeToResult.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=subscribeToResult.js.map

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _root = __webpack_require__(59);

	if (!_root.root.Symbol) {
	    _root.root.Symbol = {};
	}
	if (!_root.root.Symbol.iterator) {
	    if (typeof _root.root.Symbol['for'] === 'function') {
	        _root.root.Symbol.iterator = _root.root.Symbol['for']('iterator');
	    } else if (_root.root.Set && typeof new _root.root.Set()['@@iterator'] === 'function') {
	        // Bug for mozilla version
	        _root.root.Symbol.iterator = '@@iterator';
	    } else {
	        _root.root.Symbol.iterator = '_es6shim_iterator_';
	    }
	}
	exports['default'] = _root.root.Symbol.iterator;

	// // Shim in iterator support
	// export var $iterator$ = (typeof Symbol === 'function' && Symbol.iterator) || '_es6shim_iterator_';
	// // Bug for mozilla version
	// if (root.Set && typeof new root.Set()['@@iterator'] === 'function') {
	//     $iterator$ = '@@iterator';
	// }
	//# sourceMappingURL=Symbol_iterator.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=Symbol_iterator.js.map

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	var InnerSubscriber = (function (_Subscriber) {
	    _inherits(InnerSubscriber, _Subscriber);

	    function InnerSubscriber(parent, outerValue, outerIndex) {
	        _classCallCheck(this, InnerSubscriber);

	        _Subscriber.call(this);
	        this.parent = parent;
	        this.outerValue = outerValue;
	        this.outerIndex = outerIndex;
	        this.index = 0;
	    }

	    //# sourceMappingURL=InnerSubscriber.js.map

	    InnerSubscriber.prototype._next = function _next(value) {
	        var index = this.index++;
	        this.parent.notifyNext(this.outerValue, value, this.outerIndex, index);
	    };

	    InnerSubscriber.prototype._error = function _error(error) {
	        this.parent.notifyError(error, this);
	    };

	    InnerSubscriber.prototype._complete = function _complete() {
	        this.parent.notifyComplete(this);
	    };

	    return InnerSubscriber;
	})(_Subscriber3['default']);

	exports['default'] = InnerSubscriber;
	module.exports = exports['default'];
	//# sourceMappingURL=InnerSubscriber.js.map

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = concat;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _Observable = __webpack_require__(53);

	var _Observable2 = _interopRequireDefault(_Observable);

	var _schedulersImmediate = __webpack_require__(75);

	var _schedulersImmediate2 = _interopRequireDefault(_schedulersImmediate);

	/**
	 * Joins multiple observables together by subscribing to them one at a time and merging their results
	 * into the returned observable. Will wait for each observable to complete before moving on to the next.
	 * @params {...Observable} the observables to concatenate
	 * @params {Scheduler} [scheduler] an optional scheduler to schedule each observable subscription on.
	 * @returns {Observable} All values of each passed observable merged into a single observable, in order, in serial fashion.
	 */

	function concat() {
	    var scheduler = _schedulersImmediate2['default'];

	    for (var _len = arguments.length, observables = Array(_len), _key = 0; _key < _len; _key++) {
	        observables[_key] = arguments[_key];
	    }

	    var args = observables;
	    if (typeof args[observables.length - 1].schedule === 'function') {
	        scheduler = args.pop();
	        args.push(1, scheduler);
	    }
	    return _Observable2['default'].fromArray(observables).mergeAll(1);
	}

	//# sourceMappingURL=concat-static.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=concat-static.js.map

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _ImmediateScheduler = __webpack_require__(76);

	var _ImmediateScheduler2 = _interopRequireDefault(_ImmediateScheduler);

	exports['default'] = new _ImmediateScheduler2['default']();

	//# sourceMappingURL=immediate.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=immediate.js.map

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _ImmediateAction = __webpack_require__(77);

	var _ImmediateAction2 = _interopRequireDefault(_ImmediateAction);

	var _FutureAction = __webpack_require__(78);

	var _FutureAction2 = _interopRequireDefault(_FutureAction);

	var ImmediateScheduler = (function () {
	    function ImmediateScheduler() {
	        _classCallCheck(this, ImmediateScheduler);

	        this.actions = [];
	        this.active = false;
	        this.scheduled = false;
	    }

	    //# sourceMappingURL=ImmediateScheduler.js.map

	    ImmediateScheduler.prototype.now = function now() {
	        return Date.now();
	    };

	    ImmediateScheduler.prototype.flush = function flush() {
	        if (this.active || this.scheduled) {
	            return;
	        }
	        this.active = true;
	        var actions = this.actions;
	        for (var action = undefined; action = actions.shift();) {
	            action.execute();
	        }
	        this.active = false;
	    };

	    ImmediateScheduler.prototype.schedule = function schedule(work, delay, state) {
	        if (delay === undefined) delay = 0;

	        return delay <= 0 ? this.scheduleNow(work, state) : this.scheduleLater(work, delay, state);
	    };

	    ImmediateScheduler.prototype.scheduleNow = function scheduleNow(work, state) {
	        return new _ImmediateAction2['default'](this, work).schedule(state);
	    };

	    ImmediateScheduler.prototype.scheduleLater = function scheduleLater(work, delay, state) {
	        return new _FutureAction2['default'](this, work).schedule(state, delay);
	    };

	    return ImmediateScheduler;
	})();

	exports['default'] = ImmediateScheduler;
	module.exports = exports['default'];
	//# sourceMappingURL=ImmediateScheduler.js.map

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _Subscription2 = __webpack_require__(58);

	var _Subscription3 = _interopRequireDefault(_Subscription2);

	var ImmediateAction = (function (_Subscription) {
	    _inherits(ImmediateAction, _Subscription);

	    function ImmediateAction(scheduler, work) {
	        _classCallCheck(this, ImmediateAction);

	        _Subscription.call(this);
	        this.scheduler = scheduler;
	        this.work = work;
	    }

	    //# sourceMappingURL=ImmediateAction.js.map

	    ImmediateAction.prototype.schedule = function schedule(state) {
	        if (this.isUnsubscribed) {
	            return this;
	        }
	        this.state = state;
	        var scheduler = this.scheduler;
	        scheduler.actions.push(this);
	        scheduler.flush();
	        return this;
	    };

	    ImmediateAction.prototype.execute = function execute() {
	        if (this.isUnsubscribed) {
	            throw new Error('How did did we execute a canceled Action?');
	        }
	        this.work(this.state);
	    };

	    ImmediateAction.prototype.unsubscribe = function unsubscribe() {
	        var scheduler = this.scheduler;
	        var actions = scheduler.actions;
	        var index = actions.indexOf(this);
	        this.work = void 0;
	        this.state = void 0;
	        this.scheduler = void 0;
	        if (index !== -1) {
	            actions.splice(index, 1);
	        }
	        _Subscription.prototype.unsubscribe.call(this);
	    };

	    return ImmediateAction;
	})(_Subscription3['default']);

	exports['default'] = ImmediateAction;
	module.exports = exports['default'];
	//# sourceMappingURL=ImmediateAction.js.map

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _ImmediateAction2 = __webpack_require__(77);

	var _ImmediateAction3 = _interopRequireDefault(_ImmediateAction2);

	var FutureAction = (function (_ImmediateAction) {
	    _inherits(FutureAction, _ImmediateAction);

	    function FutureAction(scheduler, work) {
	        _classCallCheck(this, FutureAction);

	        _ImmediateAction.call(this, scheduler, work);
	        this.scheduler = scheduler;
	        this.work = work;
	    }

	    //# sourceMappingURL=FutureAction.js.map

	    FutureAction.prototype.schedule = function schedule(state) {
	        var _this = this;

	        var delay = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

	        if (this.isUnsubscribed) {
	            return this;
	        }
	        this.delay = delay;
	        this.state = state;
	        var id = this.id;
	        if (id != null) {
	            this.id = undefined;
	            clearTimeout(id);
	        }
	        var scheduler = this.scheduler;
	        this.id = setTimeout(function () {
	            _this.id = void 0;
	            scheduler.actions.push(_this);
	            scheduler.flush();
	        }, this.delay);
	        return this;
	    };

	    FutureAction.prototype.unsubscribe = function unsubscribe() {
	        var id = this.id;
	        if (id != null) {
	            this.id = void 0;
	            clearTimeout(id);
	        }
	        _ImmediateAction.prototype.unsubscribe.call(this);
	    };

	    return FutureAction;
	})(_ImmediateAction3['default']);

	exports['default'] = FutureAction;
	module.exports = exports['default'];
	//# sourceMappingURL=FutureAction.js.map

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _Observable2 = __webpack_require__(53);

	var _Observable3 = _interopRequireDefault(_Observable2);

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	var DeferObservable = (function (_Observable) {
	    _inherits(DeferObservable, _Observable);

	    function DeferObservable(observableFactory) {
	        _classCallCheck(this, DeferObservable);

	        _Observable.call(this);
	        this.observableFactory = observableFactory;
	    }

	    //# sourceMappingURL=DeferObservable.js.map

	    DeferObservable.create = function create(observableFactory) {
	        return new DeferObservable(observableFactory);
	    };

	    DeferObservable.prototype._subscribe = function _subscribe(subscriber) {
	        var result = _utilTryCatch2['default'](this.observableFactory)();
	        if (result === _utilErrorObject.errorObject) {
	            subscriber.error(_utilErrorObject.errorObject.e);
	        } else {
	            result.subscribe(subscriber);
	        }
	    };

	    return DeferObservable;
	})(_Observable3['default']);

	exports['default'] = DeferObservable;
	module.exports = exports['default'];
	//# sourceMappingURL=DeferObservable.js.map

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _Observable2 = __webpack_require__(53);

	var _Observable3 = _interopRequireDefault(_Observable2);

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	var ForkJoinObservable = (function (_Observable) {
	    _inherits(ForkJoinObservable, _Observable);

	    function ForkJoinObservable(observables) {
	        _classCallCheck(this, ForkJoinObservable);

	        _Observable.call(this);
	        this.observables = observables;
	    }

	    ForkJoinObservable.create = function create() {
	        for (var _len = arguments.length, observables = Array(_len), _key = 0; _key < _len; _key++) {
	            observables[_key] = arguments[_key];
	        }

	        return new ForkJoinObservable(observables);
	    };

	    ForkJoinObservable.prototype._subscribe = function _subscribe(subscriber) {
	        var observables = this.observables;
	        var len = observables.length;
	        var context = { complete: 0, total: len, values: emptyArray(len) };
	        for (var i = 0; i < len; i++) {
	            observables[i].subscribe(new AllSubscriber(subscriber, this, i, context));
	        }
	    };

	    return ForkJoinObservable;
	})(_Observable3['default']);

	exports['default'] = ForkJoinObservable;

	var AllSubscriber = (function (_Subscriber) {
	    _inherits(AllSubscriber, _Subscriber);

	    function AllSubscriber(destination, parent, index, context) {
	        _classCallCheck(this, AllSubscriber);

	        _Subscriber.call(this, destination);
	        this.parent = parent;
	        this.index = index;
	        this.context = context;
	    }

	    AllSubscriber.prototype._next = function _next(value) {
	        this._value = value;
	    };

	    AllSubscriber.prototype._complete = function _complete() {
	        var context = this.context;
	        context.values[this.index] = this._value;
	        if (context.values.every(hasValue)) {
	            this.destination.next(context.values);
	            this.destination.complete();
	        }
	    };

	    return AllSubscriber;
	})(_Subscriber3['default']);

	function hasValue(x) {
	    return x !== null;
	}
	function emptyArray(len) {
	    var arr = [];
	    for (var i = 0; i < len; i++) {
	        arr.push(null);
	    }
	    return arr;
	}
	//# sourceMappingURL=ForkJoinObservable.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=ForkJoinObservable.js.map

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _PromiseObservable = __webpack_require__(82);

	var _PromiseObservable2 = _interopRequireDefault(_PromiseObservable);

	var _IteratorObservable = __webpack_require__(83);

	var _IteratorObservable2 = _interopRequireDefault(_IteratorObservable);

	var _ArrayObservable = __webpack_require__(63);

	var _ArrayObservable2 = _interopRequireDefault(_ArrayObservable);

	var _utilSymbol_observable = __webpack_require__(61);

	var _utilSymbol_observable2 = _interopRequireDefault(_utilSymbol_observable);

	var _utilSymbol_iterator = __webpack_require__(72);

	var _utilSymbol_iterator2 = _interopRequireDefault(_utilSymbol_iterator);

	var _Observable2 = __webpack_require__(53);

	var _Observable3 = _interopRequireDefault(_Observable2);

	var _operatorsObserveOnSupport = __webpack_require__(84);

	var _schedulersImmediate = __webpack_require__(75);

	var _schedulersImmediate2 = _interopRequireDefault(_schedulersImmediate);

	var isArray = Array.isArray;

	var FromObservable = (function (_Observable) {
	    _inherits(FromObservable, _Observable);

	    function FromObservable(ish, scheduler) {
	        _classCallCheck(this, FromObservable);

	        _Observable.call(this, null);
	        this.ish = ish;
	        this.scheduler = scheduler;
	    }

	    //# sourceMappingURL=FromObservable.js.map

	    FromObservable.create = function create(ish) {
	        var scheduler = arguments.length <= 1 || arguments[1] === undefined ? _schedulersImmediate2['default'] : arguments[1];

	        if (ish) {
	            if (isArray(ish)) {
	                return new _ArrayObservable2['default'](ish, scheduler);
	            } else if (typeof ish.then === 'function') {
	                return new _PromiseObservable2['default'](ish, scheduler);
	            } else if (typeof ish[_utilSymbol_observable2['default']] === 'function') {
	                if (ish instanceof _Observable3['default']) {
	                    return ish;
	                }
	                return new FromObservable(ish, scheduler);
	            } else if (typeof ish[_utilSymbol_iterator2['default']] === 'function') {
	                return new _IteratorObservable2['default'](ish, null, null, scheduler);
	            }
	        }
	        throw new TypeError(typeof ish + ' is not observable');
	    };

	    FromObservable.prototype._subscribe = function _subscribe(subscriber) {
	        var ish = this.ish;
	        var scheduler = this.scheduler;
	        if (scheduler === _schedulersImmediate2['default']) {
	            return ish[_utilSymbol_observable2['default']]().subscribe(subscriber);
	        } else {
	            return ish[_utilSymbol_observable2['default']]().subscribe(new _operatorsObserveOnSupport.ObserveOnSubscriber(subscriber, scheduler, 0));
	        }
	    };

	    return FromObservable;
	})(_Observable3['default']);

	exports['default'] = FromObservable;
	module.exports = exports['default'];
	//# sourceMappingURL=FromObservable.js.map

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _Observable2 = __webpack_require__(53);

	var _Observable3 = _interopRequireDefault(_Observable2);

	var _Subscription = __webpack_require__(58);

	var _Subscription2 = _interopRequireDefault(_Subscription);

	var _schedulersImmediate = __webpack_require__(75);

	var _schedulersImmediate2 = _interopRequireDefault(_schedulersImmediate);

	var PromiseObservable = (function (_Observable) {
	    _inherits(PromiseObservable, _Observable);

	    function PromiseObservable(promise, scheduler) {
	        _classCallCheck(this, PromiseObservable);

	        _Observable.call(this);
	        this.promise = promise;
	        this.scheduler = scheduler;
	        this._isScalar = false;
	    }

	    PromiseObservable.create = function create(promise) {
	        var scheduler = arguments.length <= 1 || arguments[1] === undefined ? _schedulersImmediate2['default'] : arguments[1];

	        return new PromiseObservable(promise, scheduler);
	    };

	    PromiseObservable.prototype._subscribe = function _subscribe(subscriber) {
	        var _this = this;

	        var scheduler = this.scheduler;
	        var promise = this.promise;
	        if (scheduler === _schedulersImmediate2['default']) {
	            if (this._isScalar) {
	                subscriber.next(this.value);
	                subscriber.complete();
	            } else {
	                promise.then(function (value) {
	                    _this._isScalar = true;
	                    _this.value = value;
	                    subscriber.next(value);
	                    subscriber.complete();
	                }, function (err) {
	                    return subscriber.error(err);
	                }).then(null, function (err) {
	                    // escape the promise trap, throw unhandled errors
	                    setTimeout(function () {
	                        throw err;
	                    });
	                });
	            }
	        } else {
	            var _ret = (function () {
	                var subscription = new _Subscription2['default']();
	                if (_this._isScalar) {
	                    var value = _this.value;
	                    subscription.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));
	                } else {
	                    promise.then(function (value) {
	                        _this._isScalar = true;
	                        _this.value = value;
	                        subscription.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));
	                    }, function (err) {
	                        return subscription.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));
	                    }).then(null, function (err) {
	                        // escape the promise trap, throw unhandled errors
	                        scheduler.schedule(function () {
	                            throw err;
	                        });
	                    });
	                }
	                return {
	                    v: subscription
	                };
	            })();

	            if (typeof _ret === 'object') return _ret.v;
	        }
	    };

	    return PromiseObservable;
	})(_Observable3['default']);

	exports['default'] = PromiseObservable;

	function dispatchNext(_ref) {
	    var value = _ref.value;
	    var subscriber = _ref.subscriber;

	    subscriber.next(value);
	    subscriber.complete();
	}
	function dispatchError(_ref2) {
	    var err = _ref2.err;
	    var subscriber = _ref2.subscriber;

	    subscriber.error(err);
	}
	//# sourceMappingURL=PromiseObservable.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=PromiseObservable.js.map

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _Observable2 = __webpack_require__(53);

	var _Observable3 = _interopRequireDefault(_Observable2);

	var _utilRoot = __webpack_require__(59);

	var _utilSymbol_iterator = __webpack_require__(72);

	var _utilSymbol_iterator2 = _interopRequireDefault(_utilSymbol_iterator);

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	var IteratorObservable = (function (_Observable) {
	    _inherits(IteratorObservable, _Observable);

	    function IteratorObservable(iterator, project, thisArg, scheduler) {
	        _classCallCheck(this, IteratorObservable);

	        _Observable.call(this);
	        this.iterator = iterator;
	        this.project = project;
	        this.thisArg = thisArg;
	        this.scheduler = scheduler;
	    }

	    IteratorObservable.create = function create(iterator, project, thisArg, scheduler) {
	        if (iterator == null) {
	            throw new Error('iterator cannot be null.');
	        }
	        if (project && typeof project !== 'function') {
	            throw new Error('When provided, `project` must be a function.');
	        }
	        return new IteratorObservable(iterator, project, thisArg, scheduler);
	    };

	    IteratorObservable.dispatch = function dispatch(state) {
	        var index = state.index;
	        var hasError = state.hasError;
	        var thisArg = state.thisArg;
	        var project = state.project;
	        var iterator = state.iterator;
	        var subscriber = state.subscriber;

	        if (hasError) {
	            subscriber.error(state.error);
	            return;
	        }
	        var result = iterator.next();
	        if (result.done) {
	            subscriber.complete();
	            return;
	        }
	        if (project) {
	            result = _utilTryCatch2['default'](project).call(thisArg, result.value, index);
	            if (result === _utilErrorObject.errorObject) {
	                state.error = _utilErrorObject.errorObject.e;
	                state.hasError = true;
	            } else {
	                subscriber.next(result);
	                state.index = index + 1;
	            }
	        } else {
	            subscriber.next(result.value);
	            state.index = index + 1;
	        }
	        if (subscriber.isUnsubscribed) {
	            return;
	        }
	        this.schedule(state);
	    };

	    IteratorObservable.prototype._subscribe = function _subscribe(subscriber) {
	        var index = 0;
	        var project = this.project;
	        var thisArg = this.thisArg;
	        var iterator = getIterator(Object(this.iterator));
	        var scheduler = this.scheduler;
	        if (scheduler) {
	            subscriber.add(scheduler.schedule(IteratorObservable.dispatch, 0, {
	                index: index, thisArg: thisArg, project: project, iterator: iterator, subscriber: subscriber
	            }));
	        } else {
	            do {
	                var result = iterator.next();
	                if (result.done) {
	                    subscriber.complete();
	                    break;
	                } else if (project) {
	                    result = _utilTryCatch2['default'](project).call(thisArg, result.value, index++);
	                    if (result === _utilErrorObject.errorObject) {
	                        subscriber.error(_utilErrorObject.errorObject.e);
	                        break;
	                    }
	                    subscriber.next(result);
	                } else {
	                    subscriber.next(result.value);
	                }
	                if (subscriber.isUnsubscribed) {
	                    break;
	                }
	            } while (true);
	        }
	    };

	    return IteratorObservable;
	})(_Observable3['default']);

	exports['default'] = IteratorObservable;

	var maxSafeInteger = Math.pow(2, 53) - 1;

	var StringIterator = (function () {
	    function StringIterator(str) {
	        var idx = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
	        var len = arguments.length <= 2 || arguments[2] === undefined ? str.length : arguments[2];
	        return (function () {
	            _classCallCheck(this, StringIterator);

	            this.str = str;
	            this.idx = idx;
	            this.len = len;
	        }).apply(this, arguments);
	    }

	    StringIterator.prototype[_utilSymbol_iterator2['default']] = function () {
	        return this;
	    };

	    StringIterator.prototype.next = function next() {
	        return this.idx < this.len ? {
	            done: false,
	            value: this.str.charAt(this.idx++)
	        } : {
	            done: true,
	            value: undefined
	        };
	    };

	    return StringIterator;
	})();

	var ArrayIterator = (function () {
	    function ArrayIterator(arr) {
	        var idx = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
	        var len = arguments.length <= 2 || arguments[2] === undefined ? toLength(arr) : arguments[2];
	        return (function () {
	            _classCallCheck(this, ArrayIterator);

	            this.arr = arr;
	            this.idx = idx;
	            this.len = len;
	        }).apply(this, arguments);
	    }

	    ArrayIterator.prototype[_utilSymbol_iterator2['default']] = function () {
	        return this;
	    };

	    ArrayIterator.prototype.next = function next() {
	        return this.idx < this.len ? {
	            done: false,
	            value: this.arr[this.idx++]
	        } : {
	            done: true,
	            value: undefined
	        };
	    };

	    return ArrayIterator;
	})();

	function getIterator(o) {
	    var i = o[_utilSymbol_iterator2['default']];
	    if (!i && typeof o === 'string') {
	        return new StringIterator(o);
	    }
	    if (!i && o.length !== undefined) {
	        return new ArrayIterator(o);
	    }
	    if (!i) {
	        throw new TypeError('Object is not iterable');
	    }
	    return o[_utilSymbol_iterator2['default']]();
	}
	function toLength(o) {
	    var len = +o.length;
	    if (isNaN(len)) {
	        return 0;
	    }
	    if (len === 0 || !numberIsFinite(len)) {
	        return len;
	    }
	    len = sign(len) * Math.floor(Math.abs(len));
	    if (len <= 0) {
	        return 0;
	    }
	    if (len > maxSafeInteger) {
	        return maxSafeInteger;
	    }
	    return len;
	}
	function numberIsFinite(value) {
	    return typeof value === 'number' && _utilRoot.root.isFinite(value);
	}
	function sign(value) {
	    var valueAsNumber = +value;
	    if (valueAsNumber === 0) {
	        return valueAsNumber;
	    }
	    if (isNaN(valueAsNumber)) {
	        return valueAsNumber;
	    }
	    return valueAsNumber < 0 ? -1 : 1;
	}
	//# sourceMappingURL=IteratorObservable.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=IteratorObservable.js.map

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	var _Notification = __webpack_require__(85);

	var _Notification2 = _interopRequireDefault(_Notification);

	var ObserveOnOperator = (function () {
	    function ObserveOnOperator(scheduler) {
	        var delay = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

	        _classCallCheck(this, ObserveOnOperator);

	        this.delay = delay;
	        this.scheduler = scheduler;
	    }

	    ObserveOnOperator.prototype.call = function call(subscriber) {
	        return new ObserveOnSubscriber(subscriber, this.scheduler, this.delay);
	    };

	    return ObserveOnOperator;
	})();

	exports.ObserveOnOperator = ObserveOnOperator;

	var ObserveOnSubscriber = (function (_Subscriber) {
	    _inherits(ObserveOnSubscriber, _Subscriber);

	    function ObserveOnSubscriber(destination, scheduler) {
	        var delay = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];

	        _classCallCheck(this, ObserveOnSubscriber);

	        _Subscriber.call(this, destination);
	        this.delay = delay;
	        this.scheduler = scheduler;
	    }

	    ObserveOnSubscriber.dispatch = function dispatch(_ref) {
	        var notification = _ref.notification;
	        var destination = _ref.destination;

	        notification.observe(destination);
	    };

	    ObserveOnSubscriber.prototype._next = function _next(x) {
	        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(_Notification2['default'].createNext(x), this.destination)));
	    };

	    ObserveOnSubscriber.prototype._error = function _error(e) {
	        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(_Notification2['default'].createError(e), this.destination)));
	    };

	    ObserveOnSubscriber.prototype._complete = function _complete() {
	        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(_Notification2['default'].createComplete(), this.destination)));
	    };

	    return ObserveOnSubscriber;
	})(_Subscriber3['default']);

	exports.ObserveOnSubscriber = ObserveOnSubscriber;

	var ObserveOnMessage = function ObserveOnMessage(notification, destination) {
	    _classCallCheck(this, ObserveOnMessage);

	    this.notification = notification;
	    this.destination = destination;
	}
	//# sourceMappingURL=observeOn-support.js.map
	;
	//# sourceMappingURL=observeOn-support.js.map

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Observable = __webpack_require__(53);

	var _Observable2 = _interopRequireDefault(_Observable);

	var Notification = (function () {
	    function Notification(kind, value, exception) {
	        _classCallCheck(this, Notification);

	        this.kind = kind;
	        this.value = value;
	        this.exception = exception;
	        this.hasValue = kind === 'N';
	    }

	    Notification.prototype.observe = function observe(observer) {
	        switch (this.kind) {
	            case 'N':
	                return observer.next(this.value);
	            case 'E':
	                return observer.error(this.exception);
	            case 'C':
	                return observer.complete();
	        }
	    };

	    Notification.prototype['do'] = function _do(next, error, complete) {
	        var kind = this.kind;
	        switch (kind) {
	            case 'N':
	                return next(this.value);
	            case 'E':
	                return error(this.exception);
	            case 'C':
	                return complete();
	        }
	    };

	    Notification.prototype.accept = function accept(nextOrObserver, error, complete) {
	        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
	            return this.observe(nextOrObserver);
	        } else {
	            return this['do'](nextOrObserver, error, complete);
	        }
	    };

	    Notification.prototype.toObservable = function toObservable() {
	        var kind = this.kind;
	        var value = this.value;
	        switch (kind) {
	            case 'N':
	                return _Observable2['default'].of(value);
	            case 'E':
	                return _Observable2['default']['throw'](value);
	            case 'C':
	                return _Observable2['default'].empty();
	        }
	    };

	    Notification.createNext = function createNext(value) {
	        if (typeof value !== 'undefined') {
	            return new Notification('N', value);
	        }
	        return this.undefinedValueNotification;
	    };

	    Notification.createError = function createError(err) {
	        return new Notification('E', undefined, err);
	    };

	    Notification.createComplete = function createComplete() {
	        return this.completeNotification;
	    };

	    return Notification;
	})();

	exports['default'] = Notification;

	Notification.completeNotification = new Notification('C');
	Notification.undefinedValueNotification = new Notification('N', undefined);
	//# sourceMappingURL=Notification.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=Notification.js.map

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _Observable2 = __webpack_require__(53);

	var _Observable3 = _interopRequireDefault(_Observable2);

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	var _Subscription = __webpack_require__(58);

	var _Subscription2 = _interopRequireDefault(_Subscription);

	var FromEventObservable = (function (_Observable) {
	    _inherits(FromEventObservable, _Observable);

	    function FromEventObservable(sourceObj, eventName, selector) {
	        _classCallCheck(this, FromEventObservable);

	        _Observable.call(this);
	        this.sourceObj = sourceObj;
	        this.eventName = eventName;
	        this.selector = selector;
	    }

	    //# sourceMappingURL=FromEventObservable.js.map

	    FromEventObservable.create = function create(sourceObj, eventName, selector) {
	        return new FromEventObservable(sourceObj, eventName, selector);
	    };

	    FromEventObservable.setupSubscription = function setupSubscription(sourceObj, eventName, handler, subscriber) {
	        var unsubscribe = undefined;
	        var tag = sourceObj.toString();
	        if (tag === '[object NodeList]' || tag === '[object HTMLCollection]') {
	            for (var i = 0, len = sourceObj.length; i < len; i++) {
	                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber);
	            }
	        } else if (typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function') {
	            sourceObj.addEventListener(eventName, handler);
	            unsubscribe = function () {
	                return sourceObj.removeEventListener(eventName, handler);
	            };
	        } else if (typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function') {
	            sourceObj.on(eventName, handler);
	            unsubscribe = function () {
	                return sourceObj.off(eventName, handler);
	            };
	        } else if (typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function') {
	            sourceObj.addListener(eventName, handler);
	            unsubscribe = function () {
	                return sourceObj.removeListener(eventName, handler);
	            };
	        }
	        subscriber.add(new _Subscription2['default'](unsubscribe));
	    };

	    FromEventObservable.prototype._subscribe = function _subscribe(subscriber) {
	        var sourceObj = this.sourceObj;
	        var eventName = this.eventName;
	        var selector = this.selector;
	        var handler = selector ? function (e) {
	            var result = _utilTryCatch2['default'](selector)(e);
	            if (result === _utilErrorObject.errorObject) {
	                subscriber.error(result.e);
	            } else {
	                subscriber.next(result);
	            }
	        } : function (e) {
	            return subscriber.next(e);
	        };
	        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber);
	    };

	    return FromEventObservable;
	})(_Observable3['default']);

	exports['default'] = FromEventObservable;
	module.exports = exports['default'];
	//# sourceMappingURL=FromEventObservable.js.map

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _Observable2 = __webpack_require__(53);

	var _Observable3 = _interopRequireDefault(_Observable2);

	var _Subscription = __webpack_require__(58);

	var _Subscription2 = _interopRequireDefault(_Subscription);

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	var FromEventPatternObservable = (function (_Observable) {
	    _inherits(FromEventPatternObservable, _Observable);

	    function FromEventPatternObservable(addHandler, removeHandler, selector) {
	        _classCallCheck(this, FromEventPatternObservable);

	        _Observable.call(this);
	        this.addHandler = addHandler;
	        this.removeHandler = removeHandler;
	        this.selector = selector;
	    }

	    //# sourceMappingURL=FromEventPatternObservable.js.map

	    FromEventPatternObservable.create = function create(addHandler, removeHandler, selector) {
	        return new FromEventPatternObservable(addHandler, removeHandler, selector);
	    };

	    FromEventPatternObservable.prototype._subscribe = function _subscribe(subscriber) {
	        var addHandler = this.addHandler;
	        var removeHandler = this.removeHandler;
	        var selector = this.selector;
	        var handler = selector ? function (e) {
	            var result = _utilTryCatch2['default'](selector).apply(null, arguments);
	            if (result === _utilErrorObject.errorObject) {
	                subscriber.error(result.e);
	            } else {
	                subscriber.next(result);
	            }
	        } : function (e) {
	            subscriber.next(e);
	        };
	        var result = _utilTryCatch2['default'](addHandler)(handler);
	        if (result === _utilErrorObject.errorObject) {
	            subscriber.error(result.e);
	        }
	        subscriber.add(new _Subscription2['default'](function () {
	            //TODO: determine whether or not to forward to error handler
	            removeHandler(handler);
	        }));
	    };

	    return FromEventPatternObservable;
	})(_Observable3['default']);

	exports['default'] = FromEventPatternObservable;
	module.exports = exports['default'];
	//# sourceMappingURL=FromEventPatternObservable.js.map

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _utilIsNumeric = __webpack_require__(89);

	var _utilIsNumeric2 = _interopRequireDefault(_utilIsNumeric);

	var _Observable2 = __webpack_require__(53);

	var _Observable3 = _interopRequireDefault(_Observable2);

	var _schedulersNextTick = __webpack_require__(90);

	var _schedulersNextTick2 = _interopRequireDefault(_schedulersNextTick);

	var IntervalObservable = (function (_Observable) {
	    _inherits(IntervalObservable, _Observable);

	    function IntervalObservable() {
	        var period = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
	        var scheduler = arguments.length <= 1 || arguments[1] === undefined ? _schedulersNextTick2['default'] : arguments[1];

	        _classCallCheck(this, IntervalObservable);

	        _Observable.call(this);
	        this.period = period;
	        this.scheduler = scheduler;
	        if (!_utilIsNumeric2['default'](period) || period < 0) {
	            this.period = 0;
	        }
	        if (!scheduler || typeof scheduler.schedule !== 'function') {
	            this.scheduler = _schedulersNextTick2['default'];
	        }
	    }

	    //# sourceMappingURL=IntervalObservable.js.map

	    IntervalObservable.create = function create() {
	        var period = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
	        var scheduler = arguments.length <= 1 || arguments[1] === undefined ? _schedulersNextTick2['default'] : arguments[1];

	        return new IntervalObservable(period, scheduler);
	    };

	    IntervalObservable.dispatch = function dispatch(state) {
	        var index = state.index;
	        var subscriber = state.subscriber;
	        var period = state.period;

	        subscriber.next(index);
	        if (subscriber.isUnsubscribed) {
	            return;
	        }
	        state.index += 1;
	        this.schedule(state, period);
	    };

	    IntervalObservable.prototype._subscribe = function _subscribe(subscriber) {
	        var index = 0;
	        var period = this.period;
	        var scheduler = this.scheduler;
	        subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {
	            index: index, subscriber: subscriber, period: period
	        }));
	    };

	    return IntervalObservable;
	})(_Observable3['default']);

	exports['default'] = IntervalObservable;
	module.exports = exports['default'];
	//# sourceMappingURL=IntervalObservable.js.map

/***/ },
/* 89 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = isNumeric;
	var is_array = Array.isArray;

	function isNumeric(val) {
	    // parseFloat NaNs numeric-cast false positives (null|true|false|"")
	    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
	    // subtraction forces infinities to NaN
	    // adding 1 corrects loss of precision from parseFloat (#15100)
	    return !is_array(val) && val - parseFloat(val) + 1 >= 0;
	}

	;
	//# sourceMappingURL=isNumeric.js.map
	module.exports = exports["default"];
	//# sourceMappingURL=isNumeric.js.map

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _NextTickScheduler = __webpack_require__(91);

	var _NextTickScheduler2 = _interopRequireDefault(_NextTickScheduler);

	exports['default'] = new _NextTickScheduler2['default']();

	//# sourceMappingURL=nextTick.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=nextTick.js.map

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _ImmediateScheduler2 = __webpack_require__(76);

	var _ImmediateScheduler3 = _interopRequireDefault(_ImmediateScheduler2);

	var _NextTickAction = __webpack_require__(92);

	var _NextTickAction2 = _interopRequireDefault(_NextTickAction);

	var _ImmediateAction = __webpack_require__(77);

	var _ImmediateAction2 = _interopRequireDefault(_ImmediateAction);

	var NextTickScheduler = (function (_ImmediateScheduler) {
	    _inherits(NextTickScheduler, _ImmediateScheduler);

	    function NextTickScheduler() {
	        _classCallCheck(this, NextTickScheduler);

	        _ImmediateScheduler.apply(this, arguments);
	    }

	    //# sourceMappingURL=NextTickScheduler.js.map

	    NextTickScheduler.prototype.scheduleNow = function scheduleNow(work, state) {
	        return (this.scheduled ? new _ImmediateAction2['default'](this, work) : new _NextTickAction2['default'](this, work)).schedule(state);
	    };

	    return NextTickScheduler;
	})(_ImmediateScheduler3['default']);

	exports['default'] = NextTickScheduler;
	module.exports = exports['default'];
	//# sourceMappingURL=NextTickScheduler.js.map

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _utilImmediate = __webpack_require__(93);

	var _ImmediateAction2 = __webpack_require__(77);

	var _ImmediateAction3 = _interopRequireDefault(_ImmediateAction2);

	var NextTickAction = (function (_ImmediateAction) {
	    _inherits(NextTickAction, _ImmediateAction);

	    function NextTickAction() {
	        _classCallCheck(this, NextTickAction);

	        _ImmediateAction.apply(this, arguments);
	    }

	    //# sourceMappingURL=NextTickAction.js.map

	    NextTickAction.prototype.schedule = function schedule(state) {
	        var _this = this;

	        if (this.isUnsubscribed) {
	            return this;
	        }
	        this.state = state;
	        var scheduler = this.scheduler;
	        scheduler.actions.push(this);
	        if (!scheduler.scheduled) {
	            scheduler.scheduled = true;
	            this.id = _utilImmediate.Immediate.setImmediate(function () {
	                _this.id = null;
	                _this.scheduler.scheduled = false;
	                _this.scheduler.flush();
	            });
	        }
	        return this;
	    };

	    NextTickAction.prototype.unsubscribe = function unsubscribe() {
	        var id = this.id;
	        var scheduler = this.scheduler;
	        _ImmediateAction.prototype.unsubscribe.call(this);
	        if (scheduler.actions.length === 0) {
	            scheduler.active = false;
	            scheduler.scheduled = false;
	        }
	        if (id) {
	            this.id = null;
	            _utilImmediate.Immediate.clearImmediate(id);
	        }
	    };

	    return NextTickAction;
	})(_ImmediateAction3['default']);

	exports['default'] = NextTickAction;
	module.exports = exports['default'];
	//# sourceMappingURL=NextTickAction.js.map

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(clearImmediate) {/**
	All credit for this helper goes to http://github.com/YuzuJS/setImmediate
	*/
	'use strict';

	exports.__esModule = true;

	var _root = __webpack_require__(59);

	var Immediate = {
	    setImmediate: function setImmediate(x) {
	        return 0;
	    },
	    clearImmediate: function clearImmediate(id) {}
	};
	exports.Immediate = Immediate;
	if (_root.root && _root.root.setImmediate) {
	    Immediate.setImmediate = _root.root.setImmediate;
	    Immediate.clearImmediate = _root.root.clearImmediate;
	} else {
	    exports.Immediate = Immediate = (function (global, Immediate) {
	        var nextHandle = 1,
	            // Spec says greater than zero
	        tasksByHandle = {},
	            currentlyRunningATask = false,
	            doc = global.document,
	            setImmediate = undefined;
	        // Don't get fooled by e.g. browserify environments.
	        if (({}).toString.call(global.process) === '[object process]') {
	            // For Node.js before 0.9
	            setImmediate = installNextTickImplementation();
	        } else if (canUsePostMessage()) {
	            // For non-IE10 modern browsers
	            setImmediate = installPostMessageImplementation();
	        } else if (global.MessageChannel) {
	            // For web workers, where supported
	            setImmediate = installMessageChannelImplementation();
	        } else if (doc && 'onreadystatechange' in doc.createElement('script')) {
	            // For IE 6â€“8
	            setImmediate = installReadyStateChangeImplementation();
	        } else {
	            // For older browsers
	            setImmediate = installSetTimeoutImplementation();
	        }
	        Immediate.setImmediate = setImmediate;
	        Immediate.clearImmediate = clearImmediate;
	        return Immediate;
	        function clearImmediate(handle) {
	            delete tasksByHandle[handle];
	        }
	        function addFromSetImmediateArguments(args) {
	            tasksByHandle[nextHandle] = partiallyApplied.apply(undefined, args);
	            return nextHandle++;
	        }
	        // This function accepts the same arguments as setImmediate, but
	        // returns a function that requires no arguments.
	        function partiallyApplied(handler) {
	            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	                args[_key - 1] = arguments[_key];
	            }

	            return function () {
	                if (typeof handler === 'function') {
	                    handler.apply(undefined, args);
	                } else {
	                    new Function('' + handler)();
	                }
	            };
	        }
	        function runIfPresent(handle) {
	            // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'
	            // So if we're currently running a task, we'll need to delay this invocation.
	            if (currentlyRunningATask) {
	                // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
	                // 'too much recursion' error.
	                setTimeout(partiallyApplied(runIfPresent, handle), 0);
	            } else {
	                var task = tasksByHandle[handle];
	                if (task) {
	                    currentlyRunningATask = true;
	                    try {
	                        task();
	                    } finally {
	                        clearImmediate(handle);
	                        currentlyRunningATask = false;
	                    }
	                }
	            }
	        }
	        function installNextTickImplementation() {
	            return function setImmediate() {
	                var handle = addFromSetImmediateArguments(arguments);
	                global.process.nextTick(partiallyApplied(runIfPresent, handle));
	                return handle;
	            };
	        }
	        function canUsePostMessage() {
	            // The test against `importScripts` prevents this implementation from being installed inside a web worker,
	            // where `global.postMessage` means something completely different and can't be used for this purpose.
	            if (global.postMessage && !global.importScripts) {
	                var postMessageIsAsynchronous = true;
	                var oldOnMessage = global.onmessage;
	                global.onmessage = function () {
	                    postMessageIsAsynchronous = false;
	                };
	                global.postMessage('', '*');
	                global.onmessage = oldOnMessage;
	                return postMessageIsAsynchronous;
	            }
	        }
	        function installPostMessageImplementation() {
	            // Installs an event handler on `global` for the `message` event: see
	            // * https://developer.mozilla.org/en/DOM/window.postMessage
	            // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
	            var messagePrefix = 'setImmediate$' + Math.random() + '$';
	            var onGlobalMessage = function onGlobalMessage(event) {
	                if (event.source === global && typeof event.data === 'string' && event.data.indexOf(messagePrefix) === 0) {
	                    runIfPresent(+event.data.slice(messagePrefix.length));
	                }
	            };
	            if (global.addEventListener) {
	                global.addEventListener('message', onGlobalMessage, false);
	            } else {
	                global.attachEvent('onmessage', onGlobalMessage);
	            }
	            return function setImmediate() {
	                var handle = addFromSetImmediateArguments(arguments);
	                global.postMessage(messagePrefix + handle, '*');
	                return handle;
	            };
	        }
	        function installMessageChannelImplementation() {
	            var channel = new MessageChannel();
	            channel.port1.onmessage = function (event) {
	                var handle = event.data;
	                runIfPresent(handle);
	            };
	            return function setImmediate() {
	                var handle = addFromSetImmediateArguments(arguments);
	                channel.port2.postMessage(handle);
	                return handle;
	            };
	        }
	        function installReadyStateChangeImplementation() {
	            var html = doc.documentElement;
	            return function setImmediate() {
	                var handle = addFromSetImmediateArguments(arguments);
	                // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
	                // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
	                var script = doc.createElement('script');
	                script.onreadystatechange = function () {
	                    runIfPresent(handle);
	                    script.onreadystatechange = null;
	                    html.removeChild(script);
	                    script = null;
	                };
	                html.appendChild(script);
	                return handle;
	            };
	        }
	        function installSetTimeoutImplementation() {
	            return function setImmediate() {
	                var handle = addFromSetImmediateArguments(arguments);
	                setTimeout(partiallyApplied(runIfPresent, handle), 0);
	                return handle;
	            };
	        }
	    })(_root.root, Immediate);
	}
	//# sourceMappingURL=Immediate.js.map
	//# sourceMappingURL=Immediate.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(94).clearImmediate))

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(2).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;

	// DOM APIs, for completeness

	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };

	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};

	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};

	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};

	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);

	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};

	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

	  immediateIds[id] = true;

	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });

	  return id;
	};

	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(94).setImmediate, __webpack_require__(94).clearImmediate))

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = merge;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _observablesArrayObservable = __webpack_require__(63);

	var _observablesArrayObservable2 = _interopRequireDefault(_observablesArrayObservable);

	var _mergeAllSupport = __webpack_require__(96);

	var _schedulersImmediate = __webpack_require__(75);

	var _schedulersImmediate2 = _interopRequireDefault(_schedulersImmediate);

	function merge() {
	    var concurrent = Number.POSITIVE_INFINITY;
	    var scheduler = _schedulersImmediate2['default'];

	    for (var _len = arguments.length, observables = Array(_len), _key = 0; _key < _len; _key++) {
	        observables[_key] = arguments[_key];
	    }

	    var last = observables[observables.length - 1];
	    if (typeof last.schedule === 'function') {
	        scheduler = observables.pop();
	        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
	            concurrent = observables.pop();
	        }
	    } else if (typeof last === 'number') {
	        concurrent = observables.pop();
	    }
	    if (observables.length === 1) {
	        return observables[0];
	    }
	    return new _observablesArrayObservable2['default'](observables, scheduler).lift(new _mergeAllSupport.MergeAllOperator(concurrent));
	}

	//# sourceMappingURL=merge-static.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=merge-static.js.map

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _OuterSubscriber2 = __webpack_require__(70);

	var _OuterSubscriber3 = _interopRequireDefault(_OuterSubscriber2);

	var _utilSubscribeToResult = __webpack_require__(71);

	var _utilSubscribeToResult2 = _interopRequireDefault(_utilSubscribeToResult);

	var MergeAllOperator = (function () {
	    function MergeAllOperator(concurrent) {
	        _classCallCheck(this, MergeAllOperator);

	        this.concurrent = concurrent;
	    }

	    MergeAllOperator.prototype.call = function call(observer) {
	        return new MergeAllSubscriber(observer, this.concurrent);
	    };

	    return MergeAllOperator;
	})();

	exports.MergeAllOperator = MergeAllOperator;

	var MergeAllSubscriber = (function (_OuterSubscriber) {
	    _inherits(MergeAllSubscriber, _OuterSubscriber);

	    function MergeAllSubscriber(destination, concurrent) {
	        _classCallCheck(this, MergeAllSubscriber);

	        _OuterSubscriber.call(this, destination);
	        this.concurrent = concurrent;
	        this.hasCompleted = false;
	        this.buffer = [];
	        this.active = 0;
	    }

	    //# sourceMappingURL=mergeAll-support.js.map

	    MergeAllSubscriber.prototype._next = function _next(observable) {
	        if (this.active < this.concurrent) {
	            if (observable._isScalar) {
	                this.destination.next(observable.value);
	            } else {
	                this.active++;
	                this.add(_utilSubscribeToResult2['default'](this, observable));
	            }
	        } else {
	            this.buffer.push(observable);
	        }
	    };

	    MergeAllSubscriber.prototype._complete = function _complete() {
	        this.hasCompleted = true;
	        if (this.active === 0 && this.buffer.length === 0) {
	            this.destination.complete();
	        }
	    };

	    MergeAllSubscriber.prototype.notifyComplete = function notifyComplete(innerSub) {
	        var buffer = this.buffer;
	        this.remove(innerSub);
	        this.active--;
	        if (buffer.length > 0) {
	            this._next(buffer.shift());
	        } else if (this.active === 0 && this.hasCompleted) {
	            this.destination.complete();
	        }
	    };

	    return MergeAllSubscriber;
	})(_OuterSubscriber3['default']);

	exports.MergeAllSubscriber = MergeAllSubscriber;
	//# sourceMappingURL=mergeAll-support.js.map

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _Observable2 = __webpack_require__(53);

	var _Observable3 = _interopRequireDefault(_Observable2);

	var InfiniteObservable = (function (_Observable) {
	    _inherits(InfiniteObservable, _Observable);

	    function InfiniteObservable() {
	        _classCallCheck(this, InfiniteObservable);

	        _Observable.call(this);
	    }

	    //# sourceMappingURL=InfiniteObservable.js.map

	    InfiniteObservable.create = function create() {
	        return new InfiniteObservable();
	    };

	    InfiniteObservable.prototype._subscribe = function _subscribe(subscriber) {};

	    return InfiniteObservable;
	})(_Observable3['default']);

	exports['default'] = InfiniteObservable;
	module.exports = exports['default'];
	//# sourceMappingURL=InfiniteObservable.js.map

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _Observable2 = __webpack_require__(53);

	var _Observable3 = _interopRequireDefault(_Observable2);

	var RangeObservable = (function (_Observable) {
	    _inherits(RangeObservable, _Observable);

	    function RangeObservable(start, end, scheduler) {
	        _classCallCheck(this, RangeObservable);

	        _Observable.call(this);
	        this.start = start;
	        this.end = end;
	        this.scheduler = scheduler;
	    }

	    //# sourceMappingURL=RangeObservable.js.map

	    RangeObservable.create = function create(start, end, scheduler) {
	        if (start === undefined) start = 0;
	        if (end === undefined) end = 0;

	        return new RangeObservable(start, end, scheduler);
	    };

	    RangeObservable.dispatch = function dispatch(state) {
	        var start = state.start;
	        var index = state.index;
	        var end = state.end;
	        var subscriber = state.subscriber;

	        if (index >= end) {
	            subscriber.complete();
	            return;
	        }
	        subscriber.next(start);
	        if (subscriber.isUnsubscribed) {
	            return;
	        }
	        state.index = index + 1;
	        state.start = start + 1;
	        this.schedule(state);
	    };

	    RangeObservable.prototype._subscribe = function _subscribe(subscriber) {
	        var index = 0;
	        var start = this.start;
	        var end = this.end;
	        var scheduler = this.scheduler;
	        if (scheduler) {
	            subscriber.add(scheduler.schedule(RangeObservable.dispatch, 0, {
	                index: index, end: end, start: start, subscriber: subscriber
	            }));
	        } else {
	            do {
	                if (index++ >= end) {
	                    subscriber.complete();
	                    break;
	                }
	                subscriber.next(start++);
	                if (subscriber.isUnsubscribed) {
	                    break;
	                }
	            } while (true);
	        }
	    };

	    return RangeObservable;
	})(_Observable3['default']);

	exports['default'] = RangeObservable;
	module.exports = exports['default'];
	//# sourceMappingURL=RangeObservable.js.map

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _utilIsNumeric = __webpack_require__(89);

	var _utilIsNumeric2 = _interopRequireDefault(_utilIsNumeric);

	var _Observable2 = __webpack_require__(53);

	var _Observable3 = _interopRequireDefault(_Observable2);

	var _schedulersNextTick = __webpack_require__(90);

	var _schedulersNextTick2 = _interopRequireDefault(_schedulersNextTick);

	var TimerObservable = (function (_Observable) {
	    _inherits(TimerObservable, _Observable);

	    function TimerObservable(dueTime, period, scheduler) {
	        if (dueTime === undefined) dueTime = 0;

	        _classCallCheck(this, TimerObservable);

	        _Observable.call(this);
	        this.dueTime = dueTime;
	        this.period = period;
	        this.scheduler = scheduler;
	        if (_utilIsNumeric2['default'](period)) {
	            this._period = Number(period) < 1 && 1 || Number(period);
	        } else if (period && typeof period.schedule === 'function') {
	            scheduler = period;
	        }
	        if (!scheduler || typeof scheduler.schedule !== 'function') {
	            scheduler = _schedulersNextTick2['default'];
	        }
	        this.scheduler = scheduler;
	    }

	    //# sourceMappingURL=TimerObservable.js.map

	    TimerObservable.create = function create(dueTime, period, scheduler) {
	        if (dueTime === undefined) dueTime = 0;

	        return new TimerObservable(dueTime, period, scheduler);
	    };

	    TimerObservable.dispatch = function dispatch(state) {
	        var index = state.index;
	        var period = state.period;
	        var subscriber = state.subscriber;

	        var action = this;
	        subscriber.next(index);
	        if (typeof period === 'undefined') {
	            subscriber.complete();
	            return;
	        } else if (subscriber.isUnsubscribed) {
	            return;
	        }
	        if (typeof action.delay === 'undefined') {
	            action.add(action.scheduler.schedule(TimerObservable.dispatch, period, {
	                index: index + 1, period: period, subscriber: subscriber
	            }));
	        } else {
	            state.index = index + 1;
	            action.schedule(state, period);
	        }
	    };

	    TimerObservable.prototype._subscribe = function _subscribe(subscriber) {
	        var index = 0;
	        var period = this._period;
	        var dueTime = this.dueTime;
	        var scheduler = this.scheduler;
	        subscriber.add(scheduler.schedule(TimerObservable.dispatch, dueTime, { index: index, period: period, subscriber: subscriber }));
	    };

	    return TimerObservable;
	})(_Observable3['default']);

	exports['default'] = TimerObservable;
	module.exports = exports['default'];
	//# sourceMappingURL=TimerObservable.js.map

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = zip;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _observablesArrayObservable = __webpack_require__(63);

	var _observablesArrayObservable2 = _interopRequireDefault(_observablesArrayObservable);

	var _zipSupport = __webpack_require__(101);

	function zip() {
	    for (var _len = arguments.length, observables = Array(_len), _key = 0; _key < _len; _key++) {
	        observables[_key] = arguments[_key];
	    }

	    var project = observables[observables.length - 1];
	    if (typeof project === 'function') {
	        observables.pop();
	    }
	    return new _observablesArrayObservable2['default'](observables).lift(new _zipSupport.ZipOperator(project));
	}

	//# sourceMappingURL=zip-static.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=zip-static.js.map

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	var _OuterSubscriber2 = __webpack_require__(70);

	var _OuterSubscriber3 = _interopRequireDefault(_OuterSubscriber2);

	var _utilSubscribeToResult = __webpack_require__(71);

	var _utilSubscribeToResult2 = _interopRequireDefault(_utilSubscribeToResult);

	var _utilSymbol_iterator = __webpack_require__(72);

	var _utilSymbol_iterator2 = _interopRequireDefault(_utilSymbol_iterator);

	var isArray = Array.isArray;

	var ZipOperator = (function () {
	    function ZipOperator(project) {
	        _classCallCheck(this, ZipOperator);

	        this.project = project;
	    }

	    ZipOperator.prototype.call = function call(subscriber) {
	        return new ZipSubscriber(subscriber, this.project);
	    };

	    return ZipOperator;
	})();

	exports.ZipOperator = ZipOperator;

	var ZipSubscriber = (function (_Subscriber) {
	    _inherits(ZipSubscriber, _Subscriber);

	    function ZipSubscriber(destination, project) {
	        var values = arguments.length <= 2 || arguments[2] === undefined ? Object.create(null) : arguments[2];

	        _classCallCheck(this, ZipSubscriber);

	        _Subscriber.call(this, destination);
	        this.index = 0;
	        this.iterators = [];
	        this.active = 0;
	        this.project = typeof project === 'function' ? project : null;
	        this.values = values;
	    }

	    ZipSubscriber.prototype._next = function _next(value) {
	        var iterators = this.iterators;
	        var index = this.index++;
	        if (isArray(value)) {
	            iterators.push(new StaticArrayIterator(value));
	        } else if (typeof value[_utilSymbol_iterator2['default']] === 'function') {
	            iterators.push(new StaticIterator(value[_utilSymbol_iterator2['default']]()));
	        } else {
	            iterators.push(new ZipBufferIterator(this.destination, this, value, index));
	        }
	    };

	    ZipSubscriber.prototype._complete = function _complete() {
	        var iterators = this.iterators;
	        var len = iterators.length;
	        this.active = len;
	        for (var i = 0; i < len; i++) {
	            var iterator = iterators[i];
	            if (iterator.stillUnsubscribed) {
	                iterator.subscribe(iterator, i);
	            } else {
	                this.active--; // not an observable
	            }
	        }
	    };

	    ZipSubscriber.prototype.notifyInactive = function notifyInactive() {
	        this.active--;
	        if (this.active === 0) {
	            this.destination.complete();
	        }
	    };

	    ZipSubscriber.prototype.checkIterators = function checkIterators() {
	        var iterators = this.iterators;
	        var len = iterators.length;
	        var destination = this.destination;
	        // abort if not all of them have values
	        for (var i = 0; i < len; i++) {
	            var iterator = iterators[i];
	            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {
	                return;
	            }
	        }
	        var shouldComplete = false;
	        var args = [];
	        for (var i = 0; i < len; i++) {
	            var iterator = iterators[i];
	            var result = iterator.next();
	            // check to see if it's completed now that you've gotten
	            // the next value.
	            if (iterator.hasCompleted()) {
	                shouldComplete = true;
	            }
	            if (result.done) {
	                destination.complete();
	                return;
	            }
	            args.push(result.value);
	        }
	        var project = this.project;
	        if (project) {
	            var result = _utilTryCatch2['default'](project).apply(this, args);
	            if (result === _utilErrorObject.errorObject) {
	                destination.error(_utilErrorObject.errorObject.e);
	            } else {
	                destination.next(result);
	            }
	        } else {
	            destination.next(args);
	        }
	        if (shouldComplete) {
	            destination.complete();
	        }
	    };

	    return ZipSubscriber;
	})(_Subscriber3['default']);

	exports.ZipSubscriber = ZipSubscriber;

	var StaticIterator = (function () {
	    function StaticIterator(iterator) {
	        _classCallCheck(this, StaticIterator);

	        this.iterator = iterator;
	        this.nextResult = iterator.next();
	    }

	    StaticIterator.prototype.hasValue = function hasValue() {
	        return true;
	    };

	    StaticIterator.prototype.next = function next() {
	        var result = this.nextResult;
	        this.nextResult = this.iterator.next();
	        return result;
	    };

	    StaticIterator.prototype.hasCompleted = function hasCompleted() {
	        var nextResult = this.nextResult;
	        return nextResult && nextResult.done;
	    };

	    return StaticIterator;
	})();

	var StaticArrayIterator = (function () {
	    function StaticArrayIterator(array) {
	        _classCallCheck(this, StaticArrayIterator);

	        this.array = array;
	        this.index = 0;
	        this.length = 0;
	        this.length = array.length;
	    }

	    StaticArrayIterator.prototype[_utilSymbol_iterator2['default']] = function () {
	        return this;
	    };

	    StaticArrayIterator.prototype.next = function next(value) {
	        var i = this.index++;
	        var array = this.array;
	        return i < this.length ? { value: array[i], done: false } : { done: true };
	    };

	    StaticArrayIterator.prototype.hasValue = function hasValue() {
	        return this.array.length > this.index;
	    };

	    StaticArrayIterator.prototype.hasCompleted = function hasCompleted() {
	        return this.array.length === this.index;
	    };

	    return StaticArrayIterator;
	})();

	var ZipBufferIterator = (function (_OuterSubscriber) {
	    _inherits(ZipBufferIterator, _OuterSubscriber);

	    function ZipBufferIterator(destination, parent, observable, index) {
	        _classCallCheck(this, ZipBufferIterator);

	        _OuterSubscriber.call(this, destination);
	        this.parent = parent;
	        this.observable = observable;
	        this.index = index;
	        this.stillUnsubscribed = true;
	        this.buffer = [];
	        this.isComplete = false;
	    }

	    //# sourceMappingURL=zip-support.js.map

	    ZipBufferIterator.prototype[_utilSymbol_iterator2['default']] = function () {
	        return this;
	    };

	    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next
	    //    this is legit because `next()` will never be called by a subscription in this case.

	    ZipBufferIterator.prototype.next = function next() {
	        var buffer = this.buffer;
	        if (buffer.length === 0 && this.isComplete) {
	            return { done: true };
	        } else {
	            return { value: buffer.shift(), done: false };
	        }
	    };

	    ZipBufferIterator.prototype.hasValue = function hasValue() {
	        return this.buffer.length > 0;
	    };

	    ZipBufferIterator.prototype.hasCompleted = function hasCompleted() {
	        return this.buffer.length === 0 && this.isComplete;
	    };

	    ZipBufferIterator.prototype.notifyComplete = function notifyComplete() {
	        if (this.buffer.length > 0) {
	            this.isComplete = true;
	            this.parent.notifyInactive();
	        } else {
	            this.destination.complete();
	        }
	    };

	    ZipBufferIterator.prototype.notifyNext = function notifyNext(outerValue, innerValue, outerIndex, innerIndex) {
	        this.buffer.push(innerValue);
	        this.parent.checkIterators();
	    };

	    ZipBufferIterator.prototype.subscribe = function subscribe(value, index) {
	        this.add(_utilSubscribeToResult2['default'](this, this.observable, this, index));
	    };

	    return ZipBufferIterator;
	})(_OuterSubscriber3['default']);
	//# sourceMappingURL=zip-support.js.map

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = buffer;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber3 = __webpack_require__(54);

	var _Subscriber4 = _interopRequireDefault(_Subscriber3);

	/**
	 * buffers the incoming observable values until the passed `closingNotifier` emits a value, at which point
	 * it emits the buffer on the returned observable and starts a new buffer internally, awaiting the
	 * next time `closingNotifier` emits
	 *
	 * @param {Observable<any>} closingNotifier an observable, that signals the buffer to be emitted from the returned observable
	 * @returns {Observable<T[]>} an observable of buffers, which are arrays of values
	 */

	function buffer(closingNotifier) {
	    return this.lift(new BufferOperator(closingNotifier));
	}

	var BufferOperator = (function () {
	    function BufferOperator(closingNotifier) {
	        _classCallCheck(this, BufferOperator);

	        this.closingNotifier = closingNotifier;
	    }

	    BufferOperator.prototype.call = function call(subscriber) {
	        return new BufferSubscriber(subscriber, this.closingNotifier);
	    };

	    return BufferOperator;
	})();

	var BufferSubscriber = (function (_Subscriber) {
	    _inherits(BufferSubscriber, _Subscriber);

	    function BufferSubscriber(destination, closingNotifier) {
	        _classCallCheck(this, BufferSubscriber);

	        _Subscriber.call(this, destination);
	        this.buffer = [];
	        this.notifierSubscriber = null;
	        this.notifierSubscriber = new BufferClosingNotifierSubscriber(this);
	        this.add(closingNotifier._subscribe(this.notifierSubscriber));
	    }

	    BufferSubscriber.prototype._next = function _next(value) {
	        this.buffer.push(value);
	    };

	    BufferSubscriber.prototype._error = function _error(err) {
	        this.destination.error(err);
	    };

	    BufferSubscriber.prototype._complete = function _complete() {
	        this.destination.complete();
	    };

	    BufferSubscriber.prototype.flushBuffer = function flushBuffer() {
	        var buffer = this.buffer;
	        this.buffer = [];
	        this.destination.next(buffer);
	        if (this.isUnsubscribed) {
	            this.notifierSubscriber.unsubscribe();
	        }
	    };

	    return BufferSubscriber;
	})(_Subscriber4['default']);

	var BufferClosingNotifierSubscriber = (function (_Subscriber2) {
	    _inherits(BufferClosingNotifierSubscriber, _Subscriber2);

	    function BufferClosingNotifierSubscriber(parent) {
	        _classCallCheck(this, BufferClosingNotifierSubscriber);

	        _Subscriber2.call(this, null);
	        this.parent = parent;
	    }

	    //# sourceMappingURL=buffer.js.map

	    BufferClosingNotifierSubscriber.prototype._next = function _next(value) {
	        this.parent.flushBuffer();
	    };

	    BufferClosingNotifierSubscriber.prototype._error = function _error(err) {
	        this.parent.error(err);
	    };

	    BufferClosingNotifierSubscriber.prototype._complete = function _complete() {
	        this.parent.complete();
	    };

	    return BufferClosingNotifierSubscriber;
	})(_Subscriber4['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=buffer.js.map

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = bufferCount;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	/**
	 * buffers a number of values from the source observable by `bufferSize` then emits the buffer and clears it, and starts a
	 * new buffer each `startBufferEvery` values. If `startBufferEvery` is not provided or is `null`, then new buffers are
	 * started immediately at the start of the source and when each buffer closes and is emitted.
	 * @param {number} bufferSize the maximum size of the buffer emitted.
	 * @param {number} [startBufferEvery] optional interval at which to start a new buffer. (e.g. if `startBufferEvery` is `2`,asdf then a
	 *   new buffer will be started on every other value from the source.) A new buffer is started at the beginning of the source by default.
	 * @returns {Observable<T[]>} an observable of arrays of buffered values.
	 */

	function bufferCount(bufferSize) {
	    var startBufferEvery = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];

	    return this.lift(new BufferCountOperator(bufferSize, startBufferEvery));
	}

	var BufferCountOperator = (function () {
	    function BufferCountOperator(bufferSize, startBufferEvery) {
	        _classCallCheck(this, BufferCountOperator);

	        this.bufferSize = bufferSize;
	        this.startBufferEvery = startBufferEvery;
	    }

	    BufferCountOperator.prototype.call = function call(subscriber) {
	        return new BufferCountSubscriber(subscriber, this.bufferSize, this.startBufferEvery);
	    };

	    return BufferCountOperator;
	})();

	var BufferCountSubscriber = (function (_Subscriber) {
	    _inherits(BufferCountSubscriber, _Subscriber);

	    function BufferCountSubscriber(destination, bufferSize, startBufferEvery) {
	        _classCallCheck(this, BufferCountSubscriber);

	        _Subscriber.call(this, destination);
	        this.bufferSize = bufferSize;
	        this.startBufferEvery = startBufferEvery;
	        this.buffers = [[]];
	        this.count = 0;
	    }

	    //# sourceMappingURL=bufferCount.js.map

	    BufferCountSubscriber.prototype._next = function _next(value) {
	        var count = this.count += 1;
	        var destination = this.destination;
	        var bufferSize = this.bufferSize;
	        var startBufferEvery = this.startBufferEvery == null ? bufferSize : this.startBufferEvery;
	        var buffers = this.buffers;
	        var len = buffers.length;
	        var remove = -1;
	        if (count % startBufferEvery === 0) {
	            buffers.push([]);
	        }
	        for (var i = 0; i < len; i++) {
	            var buffer = buffers[i];
	            buffer.push(value);
	            if (buffer.length === bufferSize) {
	                remove = i;
	                destination.next(buffer);
	            }
	        }
	        if (remove !== -1) {
	            buffers.splice(remove, 1);
	        }
	    };

	    BufferCountSubscriber.prototype._error = function _error(err) {
	        this.destination.error(err);
	    };

	    BufferCountSubscriber.prototype._complete = function _complete() {
	        var destination = this.destination;
	        var buffers = this.buffers;
	        while (buffers.length > 0) {
	            var buffer = buffers.shift();
	            if (buffer.length > 0) {
	                destination.next(buffer);
	            }
	        }
	        destination.complete();
	    };

	    return BufferCountSubscriber;
	})(_Subscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=bufferCount.js.map

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = bufferTime;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	var _schedulersNextTick = __webpack_require__(90);

	var _schedulersNextTick2 = _interopRequireDefault(_schedulersNextTick);

	/**
	 * buffers values from the source for a specific time period. Optionally allows new buffers to be set up at an interval.
	 * @param {number} the amount of time to fill each buffer for before emitting them and clearing them.
	 * @param {number} [bufferCreationInterval] the interval at which to start new buffers.
	 * @param {Scheduler} [scheduler] (optional, defaults to `nextTick` scheduler) The scheduler on which to schedule the
	 *  intervals that determine buffer boundaries.
	 * @returns {Observable<T[]>} an observable of arrays of buffered values.
	 */

	function bufferTime(bufferTimeSpan) {
	    var bufferCreationInterval = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
	    var scheduler = arguments.length <= 2 || arguments[2] === undefined ? _schedulersNextTick2['default'] : arguments[2];

	    return this.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, scheduler));
	}

	var BufferTimeOperator = (function () {
	    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, scheduler) {
	        _classCallCheck(this, BufferTimeOperator);

	        this.bufferTimeSpan = bufferTimeSpan;
	        this.bufferCreationInterval = bufferCreationInterval;
	        this.scheduler = scheduler;
	    }

	    BufferTimeOperator.prototype.call = function call(subscriber) {
	        return new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.scheduler);
	    };

	    return BufferTimeOperator;
	})();

	var BufferTimeSubscriber = (function (_Subscriber) {
	    _inherits(BufferTimeSubscriber, _Subscriber);

	    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, scheduler) {
	        _classCallCheck(this, BufferTimeSubscriber);

	        _Subscriber.call(this, destination);
	        this.bufferTimeSpan = bufferTimeSpan;
	        this.bufferCreationInterval = bufferCreationInterval;
	        this.scheduler = scheduler;
	        this.buffers = [];
	        var buffer = this.openBuffer();
	        if (bufferCreationInterval !== null && bufferCreationInterval >= 0) {
	            var closeState = { subscriber: this, buffer: buffer };
	            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: this, scheduler: scheduler };
	            this.add(scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
	            this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
	        } else {
	            var timeSpanOnlyState = { subscriber: this, buffer: buffer, bufferTimeSpan: bufferTimeSpan };
	            this.add(scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
	        }
	    }

	    BufferTimeSubscriber.prototype._next = function _next(value) {
	        var buffers = this.buffers;
	        var len = buffers.length;
	        for (var i = 0; i < len; i++) {
	            buffers[i].push(value);
	        }
	    };

	    BufferTimeSubscriber.prototype._error = function _error(err) {
	        this.buffers.length = 0;
	        this.destination.error(err);
	    };

	    BufferTimeSubscriber.prototype._complete = function _complete() {
	        var buffers = this.buffers;
	        while (buffers.length > 0) {
	            this.destination.next(buffers.shift());
	        }
	        this.destination.complete();
	    };

	    BufferTimeSubscriber.prototype.openBuffer = function openBuffer() {
	        var buffer = [];
	        this.buffers.push(buffer);
	        return buffer;
	    };

	    BufferTimeSubscriber.prototype.closeBuffer = function closeBuffer(buffer) {
	        this.destination.next(buffer);
	        var buffers = this.buffers;
	        buffers.splice(buffers.indexOf(buffer), 1);
	    };

	    return BufferTimeSubscriber;
	})(_Subscriber3['default']);

	function dispatchBufferTimeSpanOnly(state) {
	    var subscriber = state.subscriber;
	    var prevBuffer = state.buffer;
	    if (prevBuffer) {
	        subscriber.closeBuffer(prevBuffer);
	    }
	    state.buffer = subscriber.openBuffer();
	    if (!subscriber.isUnsubscribed) {
	        this.schedule(state, state.bufferTimeSpan);
	    }
	}
	function dispatchBufferCreation(state) {
	    var bufferCreationInterval = state.bufferCreationInterval;
	    var bufferTimeSpan = state.bufferTimeSpan;
	    var subscriber = state.subscriber;
	    var scheduler = state.scheduler;

	    var buffer = subscriber.openBuffer();
	    var action = this;
	    if (!subscriber.isUnsubscribed) {
	        action.add(scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, buffer: buffer }));
	        action.schedule(state, bufferCreationInterval);
	    }
	}
	function dispatchBufferClose(_ref) {
	    var subscriber = _ref.subscriber;
	    var buffer = _ref.buffer;

	    subscriber.closeBuffer(buffer);
	}
	//# sourceMappingURL=bufferTime.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=bufferTime.js.map

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = bufferToggle;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber4 = __webpack_require__(54);

	var _Subscriber5 = _interopRequireDefault(_Subscriber4);

	var _Subscription = __webpack_require__(58);

	var _Subscription2 = _interopRequireDefault(_Subscription);

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	/**
	 * buffers values from the source by opening the buffer via signals from an observable provided to `openings`, and closing
	 * and sending the buffers when an observable returned by the `closingSelector` emits.
	 * @param {Observable<O>} openings An observable of notifications to start new buffers
	 * @param {Function} an function, that takes the value emitted by the `openings` observable and returns an Observable, which,
	 *  when it emits, signals that the associated buffer should be emitted and cleared.
	 * @returns {Observable<T[]>} an observable of arrays of buffered values.
	 */

	function bufferToggle(openings, closingSelector) {
	    return this.lift(new BufferToggleOperator(openings, closingSelector));
	}

	var BufferToggleOperator = (function () {
	    function BufferToggleOperator(openings, closingSelector) {
	        _classCallCheck(this, BufferToggleOperator);

	        this.openings = openings;
	        this.closingSelector = closingSelector;
	    }

	    BufferToggleOperator.prototype.call = function call(subscriber) {
	        return new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector);
	    };

	    return BufferToggleOperator;
	})();

	var BufferToggleSubscriber = (function (_Subscriber) {
	    _inherits(BufferToggleSubscriber, _Subscriber);

	    function BufferToggleSubscriber(destination, openings, closingSelector) {
	        _classCallCheck(this, BufferToggleSubscriber);

	        _Subscriber.call(this, destination);
	        this.openings = openings;
	        this.closingSelector = closingSelector;
	        this.contexts = [];
	        this.add(this.openings._subscribe(new BufferToggleOpeningsSubscriber(this)));
	    }

	    BufferToggleSubscriber.prototype._next = function _next(value) {
	        var contexts = this.contexts;
	        var len = contexts.length;
	        for (var i = 0; i < len; i++) {
	            contexts[i].buffer.push(value);
	        }
	    };

	    BufferToggleSubscriber.prototype._error = function _error(err) {
	        this.contexts = null;
	        this.destination.error(err);
	    };

	    BufferToggleSubscriber.prototype._complete = function _complete() {
	        var contexts = this.contexts;
	        while (contexts.length > 0) {
	            var context = contexts.shift();
	            this.destination.next(context.buffer);
	            context.subscription.unsubscribe();
	            context.buffer = null;
	        }
	        this.destination.complete();
	    };

	    BufferToggleSubscriber.prototype.openBuffer = function openBuffer(value) {
	        var closingSelector = this.closingSelector;
	        var contexts = this.contexts;
	        var closingNotifier = _utilTryCatch2['default'](closingSelector)(value);
	        if (closingNotifier === _utilErrorObject.errorObject) {
	            var err = closingNotifier.e;
	            this.contexts = null;
	            this.destination.error(err);
	        } else {
	            var context = {
	                buffer: [],
	                subscription: new _Subscription2['default']()
	            };
	            contexts.push(context);
	            var subscriber = new BufferClosingNotifierSubscriber(this, context);
	            var subscription = closingNotifier._subscribe(subscriber);
	            this.add(context.subscription.add(subscription));
	        }
	    };

	    BufferToggleSubscriber.prototype.closeBuffer = function closeBuffer(context) {
	        var contexts = this.contexts;
	        if (contexts === null) {
	            return;
	        }
	        var buffer = context.buffer;
	        var subscription = context.subscription;

	        this.destination.next(buffer);
	        contexts.splice(contexts.indexOf(context), 1);
	        this.remove(subscription);
	        subscription.unsubscribe();
	    };

	    return BufferToggleSubscriber;
	})(_Subscriber5['default']);

	var BufferClosingNotifierSubscriber = (function (_Subscriber2) {
	    _inherits(BufferClosingNotifierSubscriber, _Subscriber2);

	    function BufferClosingNotifierSubscriber(parent, context) {
	        _classCallCheck(this, BufferClosingNotifierSubscriber);

	        _Subscriber2.call(this, null);
	        this.parent = parent;
	        this.context = context;
	    }

	    BufferClosingNotifierSubscriber.prototype._next = function _next() {
	        this.parent.closeBuffer(this.context);
	    };

	    BufferClosingNotifierSubscriber.prototype._error = function _error(err) {
	        this.parent.error(err);
	    };

	    BufferClosingNotifierSubscriber.prototype._complete = function _complete() {
	        this.parent.closeBuffer(this.context);
	    };

	    return BufferClosingNotifierSubscriber;
	})(_Subscriber5['default']);

	var BufferToggleOpeningsSubscriber = (function (_Subscriber3) {
	    _inherits(BufferToggleOpeningsSubscriber, _Subscriber3);

	    function BufferToggleOpeningsSubscriber(parent) {
	        _classCallCheck(this, BufferToggleOpeningsSubscriber);

	        _Subscriber3.call(this, null);
	        this.parent = parent;
	    }

	    //# sourceMappingURL=bufferToggle.js.map

	    BufferToggleOpeningsSubscriber.prototype._next = function _next(value) {
	        this.parent.openBuffer(value);
	    };

	    BufferToggleOpeningsSubscriber.prototype._error = function _error(err) {
	        this.parent.error(err);
	    };

	    BufferToggleOpeningsSubscriber.prototype._complete = function _complete() {
	        // noop
	    };

	    return BufferToggleOpeningsSubscriber;
	})(_Subscriber5['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=bufferToggle.js.map

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = bufferWhen;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber3 = __webpack_require__(54);

	var _Subscriber4 = _interopRequireDefault(_Subscriber3);

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	/**
	 * Opens a buffer immediately, then closes the buffer when the observable returned by calling `closingSelector` emits a value.
	 * It that immediately opens a new buffer and repeats the process
	 * @param {function} a function that takes no arguments and returns an Observable that signals buffer closure
	 * @returns {Observable<T[]>} an observable of arrays of buffered values.
	 */

	function bufferWhen(closingSelector) {
	    return this.lift(new BufferWhenOperator(closingSelector));
	}

	var BufferWhenOperator = (function () {
	    function BufferWhenOperator(closingSelector) {
	        _classCallCheck(this, BufferWhenOperator);

	        this.closingSelector = closingSelector;
	    }

	    BufferWhenOperator.prototype.call = function call(subscriber) {
	        return new BufferWhenSubscriber(subscriber, this.closingSelector);
	    };

	    return BufferWhenOperator;
	})();

	var BufferWhenSubscriber = (function (_Subscriber) {
	    _inherits(BufferWhenSubscriber, _Subscriber);

	    function BufferWhenSubscriber(destination, closingSelector) {
	        _classCallCheck(this, BufferWhenSubscriber);

	        _Subscriber.call(this, destination);
	        this.closingSelector = closingSelector;
	        this.openBuffer();
	    }

	    BufferWhenSubscriber.prototype._next = function _next(value) {
	        this.buffer.push(value);
	    };

	    BufferWhenSubscriber.prototype._error = function _error(err) {
	        this.buffer = null;
	        this.destination.error(err);
	    };

	    BufferWhenSubscriber.prototype._complete = function _complete() {
	        var buffer = this.buffer;
	        this.destination.next(buffer);
	        this.buffer = null;
	        this.destination.complete();
	    };

	    BufferWhenSubscriber.prototype.openBuffer = function openBuffer() {
	        var prevClosingNotification = this.closingNotification;
	        if (prevClosingNotification) {
	            this.remove(prevClosingNotification);
	            prevClosingNotification.unsubscribe();
	        }
	        var buffer = this.buffer;
	        if (buffer) {
	            this.destination.next(buffer);
	        }
	        this.buffer = [];
	        var closingNotifier = _utilTryCatch2['default'](this.closingSelector)();
	        if (closingNotifier === _utilErrorObject.errorObject) {
	            var err = closingNotifier.e;
	            this.buffer = null;
	            this.destination.error(err);
	        } else {
	            this.add(this.closingNotification = closingNotifier._subscribe(new BufferClosingNotifierSubscriber(this)));
	        }
	    };

	    return BufferWhenSubscriber;
	})(_Subscriber4['default']);

	var BufferClosingNotifierSubscriber = (function (_Subscriber2) {
	    _inherits(BufferClosingNotifierSubscriber, _Subscriber2);

	    function BufferClosingNotifierSubscriber(parent) {
	        _classCallCheck(this, BufferClosingNotifierSubscriber);

	        _Subscriber2.call(this, null);
	        this.parent = parent;
	    }

	    //# sourceMappingURL=bufferWhen.js.map

	    BufferClosingNotifierSubscriber.prototype._next = function _next() {
	        this.parent.openBuffer();
	    };

	    BufferClosingNotifierSubscriber.prototype._error = function _error(err) {
	        this.parent.error(err);
	    };

	    BufferClosingNotifierSubscriber.prototype._complete = function _complete() {
	        this.parent.openBuffer();
	    };

	    return BufferClosingNotifierSubscriber;
	})(_Subscriber4['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=bufferWhen.js.map

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = _catch;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	/**
	 * Catches errors on the observable to be handled by returning a new observable or throwing an error.
	 * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which
	 *  is the source observable, in case you'd like to "retry" that observable by returning it again. Whatever observable
	 *  is returned by the `selector` will be used to continue the observable chain.
	 * @return {Observable} an observable that originates from either the source or the observable returned by the
	 *  catch `selector` function.
	 */

	function _catch(selector) {
	    var catchOperator = new CatchOperator(selector);
	    var caught = this.lift(catchOperator);
	    catchOperator.caught = caught;
	    return caught;
	}

	var CatchOperator = (function () {
	    function CatchOperator(selector) {
	        _classCallCheck(this, CatchOperator);

	        this.selector = selector;
	    }

	    CatchOperator.prototype.call = function call(subscriber) {
	        return new CatchSubscriber(subscriber, this.selector, this.caught);
	    };

	    return CatchOperator;
	})();

	var CatchSubscriber = (function (_Subscriber) {
	    _inherits(CatchSubscriber, _Subscriber);

	    function CatchSubscriber(destination, selector, caught) {
	        _classCallCheck(this, CatchSubscriber);

	        _Subscriber.call(this, destination);
	        this.selector = selector;
	        this.caught = caught;
	    }

	    //# sourceMappingURL=catch.js.map

	    CatchSubscriber.prototype._error = function _error(err) {
	        var result = _utilTryCatch2['default'](this.selector)(err, this.caught);
	        if (result === _utilErrorObject.errorObject) {
	            this.destination.error(_utilErrorObject.errorObject.e);
	        } else {
	            this.add(result.subscribe(this.destination));
	        }
	    };

	    return CatchSubscriber;
	})(_Subscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=catch.js.map

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = combineAll;

	var _combineLatestSupport = __webpack_require__(69);

	/**
	 * Takes an Observable of Observables, and collects all observables from it. Once the outer observable
	 * completes, it subscribes to all collected observables and "combines" their values, such that:
	 *  - every time an observable emits, the returned observable emits
	 *  - when the returned observable emits, it emits all of the most recent values by:
	 *    - if a `project` function is provided, it is called with each recent value from each observable in whatever order they arrived,
	 *      and the result of the `project` function is what is emitted by the returned observable
	 *    - if there is no `project` function, an array of all of the most recent values is emitted by the returned observable.
	 * @param {function} [project] an optional function to map the most recent values from each observable into a new result. Takes each of the
	 *   most recent values from each collected observable as arguments, in order.
	 * @returns {Observable} an observable of projected results or arrays of recent values.
	 */

	function combineAll(project) {
	  return this.lift(new _combineLatestSupport.CombineLatestOperator(project));
	}

	//# sourceMappingURL=combineAll.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=combineAll.js.map

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = combineLatest;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _observablesArrayObservable = __webpack_require__(63);

	var _observablesArrayObservable2 = _interopRequireDefault(_observablesArrayObservable);

	var _combineLatestSupport = __webpack_require__(69);

	/**
	 * Combines the values from this observable with values from observables passed as arguments. This is done by subscribing
	 * to each observable, in order, and collecting an array of each of the most recent values any time any of the observables
	 * emits, then either taking that array and passing it as arguments to an option `project` function and emitting the return
	 * value of that, or just emitting the array of recent values directly if there is no `project` function.
	 * @param {...Observable} observables the observables to combine the source with
	 * @param {function} [project] an optional function to project the values from the combined recent values into a new value for emission.
	 * @returns {Observable} an observable of other projected values from the most recent values from each observable, or an array of each of
	 * the most recent values from each observable.
	 */

	function combineLatest() {
	    for (var _len = arguments.length, observables = Array(_len), _key = 0; _key < _len; _key++) {
	        observables[_key] = arguments[_key];
	    }

	    observables.unshift(this);
	    var project = undefined;
	    if (typeof observables[observables.length - 1] === 'function') {
	        project = observables.pop();
	    }
	    return new _observablesArrayObservable2['default'](observables).lift(new _combineLatestSupport.CombineLatestOperator(project));
	}

	//# sourceMappingURL=combineLatest.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=combineLatest.js.map

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = concat;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _Observable = __webpack_require__(53);

	var _Observable2 = _interopRequireDefault(_Observable);

	/**
	 * Joins this observable with multiple other observables by subscribing to them one at a time, starting with the source,
	 * and merging their results into the returned observable. Will wait for each observable to complete before moving
	 * on to the next.
	 * @params {...Observable} the observables to concatenate
	 * @params {Scheduler} [scheduler] an optional scheduler to schedule each observable subscription on.
	 * @returns {Observable} All values of each passed observable merged into a single observable, in order, in serial fashion.
	 */

	function concat() {
	    for (var _len = arguments.length, observables = Array(_len), _key = 0; _key < _len; _key++) {
	        observables[_key] = arguments[_key];
	    }

	    var args = observables;
	    args.unshift(this);
	    if (args.length > 1 && typeof args[args.length - 1].schedule === 'function') {
	        args.splice(args.length - 2, 0, 1);
	    }
	    return _Observable2['default'].fromArray(args).mergeAll(1);
	}

	//# sourceMappingURL=concat.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=concat.js.map

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = concatAll;

	var _mergeAllSupport = __webpack_require__(96);

	/**
	 * Joins every Observable emitted by the source (an Observable of Observables), in a serial
	 * fashion. Subscribing to each one only when the previous one has completed, and merging
	 * all of their values into the returned observable.
	 *
	 * __Warning:__ If the source Observable emits Observables quickly and endlessly, and the
	 * Observables it emits generally complete slower than the source emits, you can run into
	 * memory issues as the incoming observables collect in an unbounded buffer.
	 *
	 * @returns {Observable} an observable of values merged from the incoming observables.
	 */

	function concatAll() {
	  return this.lift(new _mergeAllSupport.MergeAllOperator(1));
	}

	//# sourceMappingURL=concatAll.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=concatAll.js.map

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = concatMap;

	var _mergeMapSupport = __webpack_require__(113);

	/**
	 * Maps values from the source observable into new Observables, then merges them in a serialized fashion,
	 * waiting for each one to complete before merging the next.
	 *
	 * __Warning:__ if incoming values arrive endlessly and faster than the observables they're being mapped
	 * to can complete, it will result in memory issues as created observables amass in an unbounded buffer
	 * waiting for their turn to be subscribed to.
	 *
	 * @param {function} project a function to map incoming values into Observables to be concatenated. accepts
	 * the `value` and the `index` as arguments.
	 * @param {function} [projectResult] an optional result selector that is applied to values before they're
	 * merged into the returned observable. The arguments passed to this function are:
	 * - `outerValue`: the value that came from the source
	 * - `innerValue`: the value that came from the projected Observable
	 * - `outerIndex`: the "index" of the value that came from the source
	 * - `innerIndex`: the "index" of the value from the projected Observable
	 * @returns {Observable} an observable of values merged from the projected Observables as they were subscribed to,
	 * one at a time. Optionally, these values may have been projected from a passed `projectResult` argument.
	 */

	function concatMap(project, projectResult) {
	  return this.lift(new _mergeMapSupport.MergeMapOperator(project, projectResult, 1));
	}

	//# sourceMappingURL=concatMap.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=concatMap.js.map

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	var _utilSubscribeToResult = __webpack_require__(71);

	var _utilSubscribeToResult2 = _interopRequireDefault(_utilSubscribeToResult);

	var _OuterSubscriber2 = __webpack_require__(70);

	var _OuterSubscriber3 = _interopRequireDefault(_OuterSubscriber2);

	var MergeMapOperator = (function () {
	    function MergeMapOperator(project, resultSelector) {
	        var concurrent = arguments.length <= 2 || arguments[2] === undefined ? Number.POSITIVE_INFINITY : arguments[2];

	        _classCallCheck(this, MergeMapOperator);

	        this.project = project;
	        this.resultSelector = resultSelector;
	        this.concurrent = concurrent;
	    }

	    MergeMapOperator.prototype.call = function call(observer) {
	        return new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent);
	    };

	    return MergeMapOperator;
	})();

	exports.MergeMapOperator = MergeMapOperator;

	var MergeMapSubscriber = (function (_OuterSubscriber) {
	    _inherits(MergeMapSubscriber, _OuterSubscriber);

	    function MergeMapSubscriber(destination, project, resultSelector) {
	        var concurrent = arguments.length <= 3 || arguments[3] === undefined ? Number.POSITIVE_INFINITY : arguments[3];

	        _classCallCheck(this, MergeMapSubscriber);

	        _OuterSubscriber.call(this, destination);
	        this.project = project;
	        this.resultSelector = resultSelector;
	        this.concurrent = concurrent;
	        this.hasCompleted = false;
	        this.buffer = [];
	        this.active = 0;
	        this.index = 0;
	    }

	    //# sourceMappingURL=mergeMap-support.js.map

	    MergeMapSubscriber.prototype._next = function _next(value) {
	        if (this.active < this.concurrent) {
	            var index = this.index++;
	            var ish = _utilTryCatch2['default'](this.project)(value, index);
	            var destination = this.destination;
	            if (ish === _utilErrorObject.errorObject) {
	                destination.error(ish.e);
	            } else {
	                this.active++;
	                this._innerSub(ish, value, index);
	            }
	        } else {
	            this.buffer.push(value);
	        }
	    };

	    MergeMapSubscriber.prototype._innerSub = function _innerSub(ish, value, index) {
	        this.add(_utilSubscribeToResult2['default'](this, ish, value, index));
	    };

	    MergeMapSubscriber.prototype._complete = function _complete() {
	        this.hasCompleted = true;
	        if (this.active === 0 && this.buffer.length === 0) {
	            this.destination.complete();
	        }
	    };

	    MergeMapSubscriber.prototype.notifyNext = function notifyNext(outerValue, innerValue, outerIndex, innerIndex) {
	        var destination = this.destination;
	        var resultSelector = this.resultSelector;

	        if (resultSelector) {
	            var result = _utilTryCatch2['default'](resultSelector)(outerValue, innerValue, outerIndex, innerIndex);
	            if (result === _utilErrorObject.errorObject) {
	                destination.error(_utilErrorObject.errorObject.e);
	            } else {
	                destination.next(result);
	            }
	        } else {
	            destination.next(innerValue);
	        }
	    };

	    MergeMapSubscriber.prototype.notifyComplete = function notifyComplete(innerSub) {
	        var buffer = this.buffer;
	        this.remove(innerSub);
	        this.active--;
	        if (buffer.length > 0) {
	            this._next(buffer.shift());
	        } else if (this.active === 0 && this.hasCompleted) {
	            this.destination.complete();
	        }
	    };

	    return MergeMapSubscriber;
	})(_OuterSubscriber3['default']);

	exports.MergeMapSubscriber = MergeMapSubscriber;
	//# sourceMappingURL=mergeMap-support.js.map

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = concatMapTo;

	var _mergeMapToSupport = __webpack_require__(115);

	/**
	 * Maps values from the source to a specific observable, and merges them together in a serialized fashion.
	 *
	 * @param {Observable} observable the observable to map each source value to
	 * @param {function} [projectResult] an optional result selector that is applied to values before they're
	 * merged into the returned observable. The arguments passed to this function are:
	 * - `outerValue`: the value that came from the source
	 * - `innerValue`: the value that came from the projected Observable
	 * - `outerIndex`: the "index" of the value that came from the source
	 * - `innerIndex`: the "index" of the value from the projected Observable
	 * @returns {Observable} an observable of values merged together by joining the passed observable
	 * with itself, one after the other, for each value emitted from the source.
	 */

	function concatMapTo(observable, projectResult) {
	  return this.lift(new _mergeMapToSupport.MergeMapToOperator(observable, projectResult, 1));
	}

	//# sourceMappingURL=concatMapTo.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=concatMapTo.js.map

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	var _OuterSubscriber2 = __webpack_require__(70);

	var _OuterSubscriber3 = _interopRequireDefault(_OuterSubscriber2);

	var _utilSubscribeToResult = __webpack_require__(71);

	var _utilSubscribeToResult2 = _interopRequireDefault(_utilSubscribeToResult);

	var MergeMapToOperator = (function () {
	    function MergeMapToOperator(ish, resultSelector) {
	        var concurrent = arguments.length <= 2 || arguments[2] === undefined ? Number.POSITIVE_INFINITY : arguments[2];

	        _classCallCheck(this, MergeMapToOperator);

	        this.ish = ish;
	        this.resultSelector = resultSelector;
	        this.concurrent = concurrent;
	    }

	    MergeMapToOperator.prototype.call = function call(observer) {
	        return new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent);
	    };

	    return MergeMapToOperator;
	})();

	exports.MergeMapToOperator = MergeMapToOperator;

	var MergeMapToSubscriber = (function (_OuterSubscriber) {
	    _inherits(MergeMapToSubscriber, _OuterSubscriber);

	    function MergeMapToSubscriber(destination, ish, resultSelector) {
	        var concurrent = arguments.length <= 3 || arguments[3] === undefined ? Number.POSITIVE_INFINITY : arguments[3];

	        _classCallCheck(this, MergeMapToSubscriber);

	        _OuterSubscriber.call(this, destination);
	        this.ish = ish;
	        this.resultSelector = resultSelector;
	        this.concurrent = concurrent;
	        this.hasCompleted = false;
	        this.buffer = [];
	        this.active = 0;
	        this.index = 0;
	    }

	    //# sourceMappingURL=mergeMapTo-support.js.map

	    MergeMapToSubscriber.prototype._next = function _next(value) {
	        if (this.active < this.concurrent) {
	            var resultSelector = this.resultSelector;
	            var index = this.index++;
	            var ish = this.ish;
	            var destination = this.destination;
	            if (ish === _utilErrorObject.errorObject) {
	                destination.error(ish.e);
	            } else {
	                this.active++;
	                this._innerSub(ish, destination, resultSelector, value, index);
	            }
	        } else {
	            this.buffer.push(value);
	        }
	    };

	    MergeMapToSubscriber.prototype._innerSub = function _innerSub(ish, destination, resultSelector, value, index) {
	        this.add(_utilSubscribeToResult2['default'](this, ish, value, index));
	    };

	    MergeMapToSubscriber.prototype._complete = function _complete() {
	        this.hasCompleted = true;
	        if (this.active === 0 && this.buffer.length === 0) {
	            this.destination.complete();
	        }
	    };

	    MergeMapToSubscriber.prototype.notifyNext = function notifyNext(outerValue, innerValue, outerIndex, innerIndex) {
	        var resultSelector = this.resultSelector;
	        var destination = this.destination;

	        if (resultSelector) {
	            var result = _utilTryCatch2['default'](resultSelector)(outerValue, innerValue, outerIndex, innerIndex);
	            if (result === _utilErrorObject.errorObject) {
	                destination.error(_utilErrorObject.errorObject.e);
	            } else {
	                destination.next(result);
	            }
	        } else {
	            destination.next(innerValue);
	        }
	    };

	    MergeMapToSubscriber.prototype.notifyError = function notifyError(err) {
	        this.destination.error(err);
	    };

	    MergeMapToSubscriber.prototype.notifyComplete = function notifyComplete(innerSub) {
	        var buffer = this.buffer;
	        this.remove(innerSub);
	        this.active--;
	        if (buffer.length > 0) {
	            this._next(buffer.shift());
	        } else if (this.active === 0 && this.hasCompleted) {
	            this.destination.complete();
	        }
	    };

	    return MergeMapToSubscriber;
	})(_OuterSubscriber3['default']);

	exports.MergeMapToSubscriber = MergeMapToSubscriber;
	//# sourceMappingURL=mergeMapTo-support.js.map

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = count;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	var _utilBindCallback = __webpack_require__(117);

	var _utilBindCallback2 = _interopRequireDefault(_utilBindCallback);

	/**
	 * Returns an observable of a single number that represents the number of items that either:
	 * Match a provided predicate function, _or_ if a predicate is not provided, the number
	 * represents the total count of all items in the source observable. The count is emitted
	 * by the returned observable when the source observable completes.
	 * @param {function} [predicate] a boolean function to select what values are to be counted.
	 * it is provided with arguments of:
	 *   - `value`: the value from the source observable
	 *   - `index`: the "index" of the value from the source observable
	 *   - `source`: the source observable instance itself.
	 * @param {any} [thisArg] the optional `this` context to use in the `predicate` function
	 * @returns {Observable} an observable of one number that represents the count as described
	 * above
	 */

	function count(predicate, thisArg) {
	    return this.lift(new CountOperator(predicate, thisArg, this));
	}

	var CountOperator = (function () {
	    function CountOperator(predicate, thisArg, source) {
	        _classCallCheck(this, CountOperator);

	        this.predicate = predicate;
	        this.thisArg = thisArg;
	        this.source = source;
	    }

	    CountOperator.prototype.call = function call(subscriber) {
	        return new CountSubscriber(subscriber, this.predicate, this.thisArg, this.source);
	    };

	    return CountOperator;
	})();

	var CountSubscriber = (function (_Subscriber) {
	    _inherits(CountSubscriber, _Subscriber);

	    function CountSubscriber(destination, predicate, thisArg, source) {
	        _classCallCheck(this, CountSubscriber);

	        _Subscriber.call(this, destination);
	        this.thisArg = thisArg;
	        this.source = source;
	        this.count = 0;
	        this.index = 0;
	        if (typeof predicate === 'function') {
	            this.predicate = _utilBindCallback2['default'](predicate, thisArg, 3);
	        }
	    }

	    //# sourceMappingURL=count.js.map

	    CountSubscriber.prototype._next = function _next(value) {
	        var predicate = this.predicate;
	        var passed = true;
	        if (predicate) {
	            passed = _utilTryCatch2['default'](predicate)(value, this.index++, this.source);
	            if (passed === _utilErrorObject.errorObject) {
	                this.destination.error(passed.e);
	                return;
	            }
	        }
	        if (passed) {
	            this.count += 1;
	        }
	    };

	    CountSubscriber.prototype._complete = function _complete() {
	        this.destination.next(this.count);
	        this.destination.complete();
	    };

	    return CountSubscriber;
	})(_Subscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=count.js.map

/***/ },
/* 117 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = bindCallback;

	function bindCallback(func, thisArg, argCount) {
	    if (typeof thisArg === 'undefined') {
	        return func;
	    }
	    switch (argCount) {
	        case 0:
	            return function () {
	                return func.call(thisArg);
	            };
	        case 1:
	            return function (arg) {
	                return func.call(thisArg, arg);
	            };
	        case 2:
	            return function (value, index) {
	                return func.call(thisArg, value, index);
	            };
	        case 3:
	            return function (value, index, collection) {
	                return func.call(thisArg, value, index, collection);
	            };
	    }
	    return function () {
	        return func.apply(thisArg, arguments);
	    };
	}

	;
	//# sourceMappingURL=bindCallback.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=bindCallback.js.map

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = dematerialize;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	function dematerialize() {
	    return this.lift(new DeMaterializeOperator());
	}

	var DeMaterializeOperator = (function () {
	    function DeMaterializeOperator() {
	        _classCallCheck(this, DeMaterializeOperator);
	    }

	    DeMaterializeOperator.prototype.call = function call(subscriber) {
	        return new DeMaterializeSubscriber(subscriber);
	    };

	    return DeMaterializeOperator;
	})();

	var DeMaterializeSubscriber = (function (_Subscriber) {
	    _inherits(DeMaterializeSubscriber, _Subscriber);

	    function DeMaterializeSubscriber(destination) {
	        _classCallCheck(this, DeMaterializeSubscriber);

	        _Subscriber.call(this, destination);
	    }

	    //# sourceMappingURL=dematerialize.js.map

	    DeMaterializeSubscriber.prototype._next = function _next(value) {
	        value.observe(this.destination);
	    };

	    return DeMaterializeSubscriber;
	})(_Subscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=dematerialize.js.map

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	exports['default'] = debounce;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _observablesPromiseObservable = __webpack_require__(82);

	var _observablesPromiseObservable2 = _interopRequireDefault(_observablesPromiseObservable);

	var _Subscriber3 = __webpack_require__(54);

	var _Subscriber4 = _interopRequireDefault(_Subscriber3);

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	function debounce(durationSelector) {
	    return this.lift(new DebounceOperator(durationSelector));
	}

	var DebounceOperator = (function () {
	    function DebounceOperator(durationSelector) {
	        _classCallCheck(this, DebounceOperator);

	        this.durationSelector = durationSelector;
	    }

	    DebounceOperator.prototype.call = function call(observer) {
	        return new DebounceSubscriber(observer, this.durationSelector);
	    };

	    return DebounceOperator;
	})();

	var DebounceSubscriber = (function (_Subscriber) {
	    _inherits(DebounceSubscriber, _Subscriber);

	    function DebounceSubscriber(destination, durationSelector) {
	        _classCallCheck(this, DebounceSubscriber);

	        _Subscriber.call(this, destination);
	        this.durationSelector = durationSelector;
	        this.debouncedSubscription = null;
	        this.lastValue = null;
	        this._index = 0;
	    }

	    DebounceSubscriber.prototype._next = function _next(value) {
	        var destination = this.destination;
	        var currentIndex = ++this._index;
	        var debounce = _utilTryCatch2['default'](this.durationSelector)(value);
	        if (debounce === _utilErrorObject.errorObject) {
	            destination.error(_utilErrorObject.errorObject.e);
	        } else {
	            if (typeof debounce.subscribe !== 'function' && typeof debounce.then === 'function') {
	                debounce = _observablesPromiseObservable2['default'].create(debounce);
	            }
	            this.lastValue = value;
	            this.add(this.debouncedSubscription = debounce._subscribe(new DurationSelectorSubscriber(this, currentIndex)));
	        }
	    };

	    DebounceSubscriber.prototype._complete = function _complete() {
	        this.debouncedNext();
	        this.destination.complete();
	    };

	    DebounceSubscriber.prototype.debouncedNext = function debouncedNext() {
	        this.clearDebounce();
	        if (this.lastValue != null) {
	            this.destination.next(this.lastValue);
	            this.lastValue = null;
	        }
	    };

	    DebounceSubscriber.prototype.clearDebounce = function clearDebounce() {
	        var debouncedSubscription = this.debouncedSubscription;
	        if (debouncedSubscription !== null) {
	            this.remove(debouncedSubscription);
	            this.debouncedSubscription = null;
	        }
	    };

	    _createClass(DebounceSubscriber, [{
	        key: 'index',
	        get: function get() {
	            return this._index;
	        }
	    }]);

	    return DebounceSubscriber;
	})(_Subscriber4['default']);

	var DurationSelectorSubscriber = (function (_Subscriber2) {
	    _inherits(DurationSelectorSubscriber, _Subscriber2);

	    function DurationSelectorSubscriber(parent, currentIndex) {
	        _classCallCheck(this, DurationSelectorSubscriber);

	        _Subscriber2.call(this, null);
	        this.parent = parent;
	        this.currentIndex = currentIndex;
	    }

	    //# sourceMappingURL=debounce.js.map

	    DurationSelectorSubscriber.prototype.debounceNext = function debounceNext() {
	        var parent = this.parent;
	        if (this.currentIndex === parent.index) {
	            parent.debouncedNext();
	            if (!this.isUnsubscribed) {
	                this.unsubscribe();
	            }
	        }
	    };

	    DurationSelectorSubscriber.prototype._next = function _next(unused) {
	        this.debounceNext();
	    };

	    DurationSelectorSubscriber.prototype._error = function _error(err) {
	        this.parent.error(err);
	    };

	    DurationSelectorSubscriber.prototype._complete = function _complete() {
	        this.debounceNext();
	    };

	    return DurationSelectorSubscriber;
	})(_Subscriber4['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=debounce.js.map

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = debounceTime;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	var _schedulersNextTick = __webpack_require__(90);

	var _schedulersNextTick2 = _interopRequireDefault(_schedulersNextTick);

	function debounceTime(dueTime) {
	    var scheduler = arguments.length <= 1 || arguments[1] === undefined ? _schedulersNextTick2['default'] : arguments[1];

	    return this.lift(new DebounceTimeOperator(dueTime, scheduler));
	}

	var DebounceTimeOperator = (function () {
	    function DebounceTimeOperator(dueTime, scheduler) {
	        _classCallCheck(this, DebounceTimeOperator);

	        this.dueTime = dueTime;
	        this.scheduler = scheduler;
	    }

	    DebounceTimeOperator.prototype.call = function call(subscriber) {
	        return new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler);
	    };

	    return DebounceTimeOperator;
	})();

	var DebounceTimeSubscriber = (function (_Subscriber) {
	    _inherits(DebounceTimeSubscriber, _Subscriber);

	    function DebounceTimeSubscriber(destination, dueTime, scheduler) {
	        _classCallCheck(this, DebounceTimeSubscriber);

	        _Subscriber.call(this, destination);
	        this.dueTime = dueTime;
	        this.scheduler = scheduler;
	        this.debouncedSubscription = null;
	        this.lastValue = null;
	    }

	    DebounceTimeSubscriber.prototype._next = function _next(value) {
	        this.clearDebounce();
	        this.lastValue = value;
	        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));
	    };

	    DebounceTimeSubscriber.prototype._complete = function _complete() {
	        this.debouncedNext();
	        this.destination.complete();
	    };

	    DebounceTimeSubscriber.prototype.debouncedNext = function debouncedNext() {
	        this.clearDebounce();
	        if (this.lastValue != null) {
	            this.destination.next(this.lastValue);
	            this.lastValue = null;
	        }
	    };

	    DebounceTimeSubscriber.prototype.clearDebounce = function clearDebounce() {
	        var debouncedSubscription = this.debouncedSubscription;
	        if (debouncedSubscription !== null) {
	            this.remove(debouncedSubscription);
	            debouncedSubscription.unsubscribe();
	            this.debouncedSubscription = null;
	        }
	    };

	    return DebounceTimeSubscriber;
	})(_Subscriber3['default']);

	function dispatchNext(subscriber) {
	    subscriber.debouncedNext();
	}
	//# sourceMappingURL=debounceTime.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=debounceTime.js.map

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = defaultIfEmpty;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	function defaultIfEmpty() {
	    var defaultValue = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];

	    return this.lift(new DefaultIfEmptyOperator(defaultValue));
	}

	var DefaultIfEmptyOperator = (function () {
	    function DefaultIfEmptyOperator(defaultValue) {
	        _classCallCheck(this, DefaultIfEmptyOperator);

	        this.defaultValue = defaultValue;
	    }

	    DefaultIfEmptyOperator.prototype.call = function call(subscriber) {
	        return new DefaultIfEmptySubscriber(subscriber, this.defaultValue);
	    };

	    return DefaultIfEmptyOperator;
	})();

	var DefaultIfEmptySubscriber = (function (_Subscriber) {
	    _inherits(DefaultIfEmptySubscriber, _Subscriber);

	    function DefaultIfEmptySubscriber(destination, defaultValue) {
	        _classCallCheck(this, DefaultIfEmptySubscriber);

	        _Subscriber.call(this, destination);
	        this.defaultValue = defaultValue;
	        this.isEmpty = true;
	    }

	    //# sourceMappingURL=defaultIfEmpty.js.map

	    DefaultIfEmptySubscriber.prototype._next = function _next(x) {
	        this.isEmpty = false;
	        this.destination.next(x);
	    };

	    DefaultIfEmptySubscriber.prototype._complete = function _complete() {
	        if (this.isEmpty) {
	            this.destination.next(this.defaultValue);
	        }
	        this.destination.complete();
	    };

	    return DefaultIfEmptySubscriber;
	})(_Subscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=defaultIfEmpty.js.map

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = delay;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	var _Notification = __webpack_require__(85);

	var _Notification2 = _interopRequireDefault(_Notification);

	var _schedulersImmediate = __webpack_require__(75);

	var _schedulersImmediate2 = _interopRequireDefault(_schedulersImmediate);

	var _utilIsDate = __webpack_require__(123);

	var _utilIsDate2 = _interopRequireDefault(_utilIsDate);

	function delay(delay) {
	    var scheduler = arguments.length <= 1 || arguments[1] === undefined ? _schedulersImmediate2['default'] : arguments[1];

	    var absoluteDelay = _utilIsDate2['default'](delay);
	    var delayFor = absoluteDelay ? +delay - scheduler.now() : delay;
	    return this.lift(new DelayOperator(delayFor, scheduler));
	}

	var DelayOperator = (function () {
	    function DelayOperator(delay, scheduler) {
	        _classCallCheck(this, DelayOperator);

	        this.delay = delay;
	        this.scheduler = scheduler;
	    }

	    DelayOperator.prototype.call = function call(subscriber) {
	        return new DelaySubscriber(subscriber, this.delay, this.scheduler);
	    };

	    return DelayOperator;
	})();

	var DelaySubscriber = (function (_Subscriber) {
	    _inherits(DelaySubscriber, _Subscriber);

	    function DelaySubscriber(destination, delay, scheduler) {
	        _classCallCheck(this, DelaySubscriber);

	        _Subscriber.call(this, destination);
	        this.delay = delay;
	        this.scheduler = scheduler;
	        this.queue = [];
	        this.active = false;
	        this.errored = false;
	    }

	    DelaySubscriber.dispatch = function dispatch(state) {
	        var source = state.source;
	        var queue = source.queue;
	        var scheduler = state.scheduler;
	        var destination = state.destination;
	        while (queue.length > 0 && queue[0].time - scheduler.now() <= 0) {
	            queue.shift().notification.observe(destination);
	        }
	        if (queue.length > 0) {
	            var _delay = Math.max(0, queue[0].time - scheduler.now());
	            this.schedule(state, _delay);
	        } else {
	            source.active = false;
	        }
	    };

	    DelaySubscriber.prototype._schedule = function _schedule(scheduler) {
	        this.active = true;
	        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
	            source: this, destination: this.destination, scheduler: scheduler
	        }));
	    };

	    DelaySubscriber.prototype.scheduleNotification = function scheduleNotification(notification) {
	        if (this.errored === true) {
	            return;
	        }
	        var scheduler = this.scheduler;
	        var message = new DelayMessage(scheduler.now() + this.delay, notification);
	        this.queue.push(message);
	        if (this.active === false) {
	            this._schedule(scheduler);
	        }
	    };

	    DelaySubscriber.prototype._next = function _next(value) {
	        this.scheduleNotification(_Notification2['default'].createNext(value));
	    };

	    DelaySubscriber.prototype._error = function _error(err) {
	        this.errored = true;
	        this.queue = [];
	        this.destination.error(err);
	    };

	    DelaySubscriber.prototype._complete = function _complete() {
	        this.scheduleNotification(_Notification2['default'].createComplete());
	    };

	    return DelaySubscriber;
	})(_Subscriber3['default']);

	var DelayMessage = function DelayMessage(time, notification) {
	    _classCallCheck(this, DelayMessage);

	    this.time = time;
	    this.notification = notification;
	}
	//# sourceMappingURL=delay.js.map
	;

	module.exports = exports['default'];
	//# sourceMappingURL=delay.js.map

/***/ },
/* 123 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = isDate;

	function isDate(value) {
	    return value instanceof Date && !isNaN(+value);
	}

	//# sourceMappingURL=isDate.js.map
	module.exports = exports["default"];
	//# sourceMappingURL=isDate.js.map

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = distinctUntilChanged;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	var _utilBindCallback = __webpack_require__(117);

	var _utilBindCallback2 = _interopRequireDefault(_utilBindCallback);

	function distinctUntilChanged(compare, thisArg) {
	    return this.lift(new DistinctUntilChangedOperator(thisArg ? _utilBindCallback2['default'](compare, thisArg, 2) : compare));
	}

	var DistinctUntilChangedOperator = (function () {
	    function DistinctUntilChangedOperator(compare) {
	        _classCallCheck(this, DistinctUntilChangedOperator);

	        this.compare = compare;
	    }

	    DistinctUntilChangedOperator.prototype.call = function call(subscriber) {
	        return new DistinctUntilChangedSubscriber(subscriber, this.compare);
	    };

	    return DistinctUntilChangedOperator;
	})();

	var DistinctUntilChangedSubscriber = (function (_Subscriber) {
	    _inherits(DistinctUntilChangedSubscriber, _Subscriber);

	    function DistinctUntilChangedSubscriber(destination, compare) {
	        _classCallCheck(this, DistinctUntilChangedSubscriber);

	        _Subscriber.call(this, destination);
	        this.hasValue = false;
	        if (typeof compare === 'function') {
	            this.compare = compare;
	        }
	    }

	    //# sourceMappingURL=distinctUntilChanged.js.map

	    DistinctUntilChangedSubscriber.prototype.compare = function compare(x, y) {
	        return x === y;
	    };

	    DistinctUntilChangedSubscriber.prototype._next = function _next(x) {
	        var result = false;
	        if (this.hasValue) {
	            result = _utilTryCatch2['default'](this.compare)(this.value, x);
	            if (result === _utilErrorObject.errorObject) {
	                this.destination.error(_utilErrorObject.errorObject.e);
	                return;
	            }
	        } else {
	            this.hasValue = true;
	        }
	        if (Boolean(result) === false) {
	            this.value = x;
	            this.destination.next(x);
	        }
	    };

	    return DistinctUntilChangedSubscriber;
	})(_Subscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=distinctUntilChanged.js.map

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = _do;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	var _utilNoop = __webpack_require__(55);

	var _utilNoop2 = _interopRequireDefault(_utilNoop);

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	function _do(nextOrObserver, error, complete) {
	    var next = undefined;
	    if (nextOrObserver && typeof nextOrObserver === 'object') {
	        next = nextOrObserver.next;
	        error = nextOrObserver.error;
	        complete = nextOrObserver.complete;
	    } else {
	        next = nextOrObserver;
	    }
	    return this.lift(new DoOperator(next || _utilNoop2['default'], error || _utilNoop2['default'], complete || _utilNoop2['default']));
	}

	var DoOperator = (function () {
	    function DoOperator(next, error, complete) {
	        _classCallCheck(this, DoOperator);

	        this.next = next;
	        this.error = error;
	        this.complete = complete;
	    }

	    DoOperator.prototype.call = function call(subscriber) {
	        return new DoSubscriber(subscriber, this.next, this.error, this.complete);
	    };

	    return DoOperator;
	})();

	var DoSubscriber = (function (_Subscriber) {
	    _inherits(DoSubscriber, _Subscriber);

	    function DoSubscriber(destination, next, error, complete) {
	        _classCallCheck(this, DoSubscriber);

	        _Subscriber.call(this, destination);
	        this.__next = next;
	        this.__error = error;
	        this.__complete = complete;
	    }

	    //# sourceMappingURL=do.js.map

	    DoSubscriber.prototype._next = function _next(x) {
	        var result = _utilTryCatch2['default'](this.__next)(x);
	        if (result === _utilErrorObject.errorObject) {
	            this.destination.error(_utilErrorObject.errorObject.e);
	        } else {
	            this.destination.next(x);
	        }
	    };

	    DoSubscriber.prototype._error = function _error(e) {
	        var result = _utilTryCatch2['default'](this.__error)(e);
	        if (result === _utilErrorObject.errorObject) {
	            this.destination.error(_utilErrorObject.errorObject.e);
	        } else {
	            this.destination.error(e);
	        }
	    };

	    DoSubscriber.prototype._complete = function _complete() {
	        var result = _utilTryCatch2['default'](this.__complete)();
	        if (result === _utilErrorObject.errorObject) {
	            this.destination.error(_utilErrorObject.errorObject.e);
	        } else {
	            this.destination.complete();
	        }
	    };

	    return DoSubscriber;
	})(_Subscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=do.js.map

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = expand;

	var _expandSupport = __webpack_require__(127);

	function expand(project) {
	    var concurrent = arguments.length <= 1 || arguments[1] === undefined ? Number.POSITIVE_INFINITY : arguments[1];

	    return this.lift(new _expandSupport.ExpandOperator(project, concurrent));
	}

	//# sourceMappingURL=expand.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=expand.js.map

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	var _OuterSubscriber2 = __webpack_require__(70);

	var _OuterSubscriber3 = _interopRequireDefault(_OuterSubscriber2);

	var _utilSubscribeToResult = __webpack_require__(71);

	var _utilSubscribeToResult2 = _interopRequireDefault(_utilSubscribeToResult);

	var ExpandOperator = (function () {
	    function ExpandOperator(project) {
	        var concurrent = arguments.length <= 1 || arguments[1] === undefined ? Number.POSITIVE_INFINITY : arguments[1];

	        _classCallCheck(this, ExpandOperator);

	        this.project = project;
	        this.concurrent = concurrent;
	    }

	    ExpandOperator.prototype.call = function call(subscriber) {
	        return new ExpandSubscriber(subscriber, this.project, this.concurrent);
	    };

	    return ExpandOperator;
	})();

	exports.ExpandOperator = ExpandOperator;

	var ExpandSubscriber = (function (_OuterSubscriber) {
	    _inherits(ExpandSubscriber, _OuterSubscriber);

	    function ExpandSubscriber(destination, project) {
	        var concurrent = arguments.length <= 2 || arguments[2] === undefined ? Number.POSITIVE_INFINITY : arguments[2];

	        _classCallCheck(this, ExpandSubscriber);

	        _OuterSubscriber.call(this, destination);
	        this.project = project;
	        this.concurrent = concurrent;
	        this.index = 0;
	        this.active = 0;
	        this.hasCompleted = false;
	        if (concurrent < Number.POSITIVE_INFINITY) {
	            this.buffer = [];
	        }
	    }

	    //# sourceMappingURL=expand-support.js.map

	    ExpandSubscriber.prototype._next = function _next(value) {
	        var index = this.index++;
	        this.destination.next(value);
	        if (this.active < this.concurrent) {
	            var result = _utilTryCatch2['default'](this.project)(value, index);
	            if (result === _utilErrorObject.errorObject) {
	                this.destination.error(result.e);
	            } else {
	                if (result._isScalar) {
	                    this._next(result.value);
	                } else {
	                    this.active++;
	                    this.add(_utilSubscribeToResult2['default'](this, result, value, index));
	                }
	            }
	        } else {
	            this.buffer.push(value);
	        }
	    };

	    ExpandSubscriber.prototype._complete = function _complete() {
	        this.hasCompleted = true;
	        if (this.hasCompleted && this.active === 0) {
	            this.destination.complete();
	        }
	    };

	    ExpandSubscriber.prototype.notifyComplete = function notifyComplete(innerSub) {
	        var buffer = this.buffer;
	        this.remove(innerSub);
	        this.active--;
	        if (buffer && buffer.length > 0) {
	            this._next(buffer.shift());
	        }
	        if (this.hasCompleted && this.active === 0) {
	            this.destination.complete();
	        }
	    };

	    ExpandSubscriber.prototype.notifyNext = function notifyNext(outerValue, innerValue, outerIndex, innerIndex) {
	        this._next(innerValue);
	    };

	    return ExpandSubscriber;
	})(_OuterSubscriber3['default']);

	exports.ExpandSubscriber = ExpandSubscriber;
	//# sourceMappingURL=expand-support.js.map

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = filter;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	var _utilBindCallback = __webpack_require__(117);

	var _utilBindCallback2 = _interopRequireDefault(_utilBindCallback);

	/**
	 * Similar to the well-known `Array.prototype.filter` method, this operator filters values down to a set
	 * allowed by a `select` function
	 *
	 * @param {Function} select a function that is used to select the resulting values
	 *  if it returns `true`, the value is emitted, if `false` the value is not passed to the resulting observable
	 * @param {any} [thisArg] an optional argument to determine the value of `this` in the `select` function
	 * @returns {Observable} an observable of values allowed by the select function
	 */

	function filter(select, thisArg) {
	    return this.lift(new FilterOperator(select, thisArg));
	}

	var FilterOperator = (function () {
	    function FilterOperator(select, thisArg) {
	        _classCallCheck(this, FilterOperator);

	        this.select = _utilBindCallback2['default'](select, thisArg, 2);
	    }

	    FilterOperator.prototype.call = function call(subscriber) {
	        return new FilterSubscriber(subscriber, this.select);
	    };

	    return FilterOperator;
	})();

	var FilterSubscriber = (function (_Subscriber) {
	    _inherits(FilterSubscriber, _Subscriber);

	    function FilterSubscriber(destination, select) {
	        _classCallCheck(this, FilterSubscriber);

	        _Subscriber.call(this, destination);
	        this.count = 0;
	        this.select = select;
	    }

	    //# sourceMappingURL=filter.js.map

	    FilterSubscriber.prototype._next = function _next(x) {
	        var result = _utilTryCatch2['default'](this.select)(x, this.count++);
	        if (result === _utilErrorObject.errorObject) {
	            this.destination.error(_utilErrorObject.errorObject.e);
	        } else if (Boolean(result)) {
	            this.destination.next(x);
	        }
	    };

	    return FilterSubscriber;
	})(_Subscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=filter.js.map

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = _finally;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	var _Subscription = __webpack_require__(58);

	var _Subscription2 = _interopRequireDefault(_Subscription);

	var _utilBindCallback = __webpack_require__(117);

	var _utilBindCallback2 = _interopRequireDefault(_utilBindCallback);

	function _finally(finallySelector, thisArg) {
	    return this.lift(new FinallyOperator(thisArg ? _utilBindCallback2['default'](finallySelector, thisArg, 2) : finallySelector));
	}

	var FinallyOperator = (function () {
	    function FinallyOperator(finallySelector) {
	        _classCallCheck(this, FinallyOperator);

	        this.finallySelector = finallySelector;
	    }

	    FinallyOperator.prototype.call = function call(subscriber) {
	        return new FinallySubscriber(subscriber, this.finallySelector);
	    };

	    return FinallyOperator;
	})();

	var FinallySubscriber = (function (_Subscriber) {
	    _inherits(FinallySubscriber, _Subscriber);

	    function FinallySubscriber(destination, finallySelector) {
	        _classCallCheck(this, FinallySubscriber);

	        _Subscriber.call(this, destination);
	        this.add(new _Subscription2['default'](finallySelector));
	    }

	    //# sourceMappingURL=finally.js.map
	    return FinallySubscriber;
	})(_Subscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=finally.js.map

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = first;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	var _utilEmptyError = __webpack_require__(131);

	var _utilEmptyError2 = _interopRequireDefault(_utilEmptyError);

	function first(predicate, resultSelector, defaultValue) {
	    return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));
	}

	var FirstOperator = (function () {
	    function FirstOperator(predicate, resultSelector, defaultValue, source) {
	        _classCallCheck(this, FirstOperator);

	        this.predicate = predicate;
	        this.resultSelector = resultSelector;
	        this.defaultValue = defaultValue;
	        this.source = source;
	    }

	    FirstOperator.prototype.call = function call(observer) {
	        return new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source);
	    };

	    return FirstOperator;
	})();

	var FirstSubscriber = (function (_Subscriber) {
	    _inherits(FirstSubscriber, _Subscriber);

	    function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {
	        _classCallCheck(this, FirstSubscriber);

	        _Subscriber.call(this, destination);
	        this.predicate = predicate;
	        this.resultSelector = resultSelector;
	        this.defaultValue = defaultValue;
	        this.source = source;
	        this.index = 0;
	        this.hasCompleted = false;
	    }

	    //# sourceMappingURL=first.js.map

	    FirstSubscriber.prototype._next = function _next(value) {
	        var destination = this.destination;
	        var predicate = this.predicate;
	        var resultSelector = this.resultSelector;

	        var index = this.index++;
	        var passed = true;
	        if (predicate) {
	            passed = _utilTryCatch2['default'](predicate)(value, index, this.source);
	            if (passed === _utilErrorObject.errorObject) {
	                destination.error(_utilErrorObject.errorObject.e);
	                return;
	            }
	        }
	        if (passed) {
	            if (resultSelector) {
	                var result = _utilTryCatch2['default'](resultSelector)(value, index);
	                if (result === _utilErrorObject.errorObject) {
	                    destination.error(_utilErrorObject.errorObject.e);
	                    return;
	                }
	                destination.next(result);
	            } else {
	                destination.next(value);
	            }
	            destination.complete();
	            this.hasCompleted = true;
	        }
	    };

	    FirstSubscriber.prototype._complete = function _complete() {
	        var destination = this.destination;
	        if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {
	            destination.next(this.defaultValue);
	            destination.complete();
	        } else if (!this.hasCompleted) {
	            destination.error(new _utilEmptyError2['default']());
	        }
	    };

	    return FirstSubscriber;
	})(_Subscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=first.js.map

/***/ },
/* 131 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var EmptyError = function EmptyError() {
	    _classCallCheck(this, EmptyError);

	    this.name = 'EmptyError';
	    this.message = 'no elements in sequence';
	}
	//# sourceMappingURL=EmptyError.js.map
	;

	exports['default'] = EmptyError;
	module.exports = exports['default'];
	//# sourceMappingURL=EmptyError.js.map

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.groupBy = groupBy;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _Subscriber3 = __webpack_require__(54);

	var _Subscriber4 = _interopRequireDefault(_Subscriber3);

	var _Observable2 = __webpack_require__(53);

	var _Observable3 = _interopRequireDefault(_Observable2);

	var _Subject = __webpack_require__(133);

	var _Subject2 = _interopRequireDefault(_Subject);

	var _utilMap = __webpack_require__(135);

	var _utilMap2 = _interopRequireDefault(_utilMap);

	var _utilFastMap = __webpack_require__(136);

	var _utilFastMap2 = _interopRequireDefault(_utilFastMap);

	var _groupBySupport = __webpack_require__(137);

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	function groupBy(keySelector, elementSelector, durationSelector) {
	    return new GroupByObservable(this, keySelector, elementSelector, durationSelector);
	}

	var GroupByObservable = (function (_Observable) {
	    _inherits(GroupByObservable, _Observable);

	    function GroupByObservable(source, keySelector, elementSelector, durationSelector) {
	        _classCallCheck(this, GroupByObservable);

	        _Observable.call(this);
	        this.source = source;
	        this.keySelector = keySelector;
	        this.elementSelector = elementSelector;
	        this.durationSelector = durationSelector;
	    }

	    GroupByObservable.prototype._subscribe = function _subscribe(subscriber) {
	        var refCountSubscription = new _groupBySupport.RefCountSubscription();
	        var groupBySubscriber = new GroupBySubscriber(subscriber, refCountSubscription, this.keySelector, this.elementSelector, this.durationSelector);
	        refCountSubscription.setPrimary(this.source.subscribe(groupBySubscriber));
	        return refCountSubscription;
	    };

	    return GroupByObservable;
	})(_Observable3['default']);

	exports.GroupByObservable = GroupByObservable;

	var GroupBySubscriber = (function (_Subscriber) {
	    _inherits(GroupBySubscriber, _Subscriber);

	    function GroupBySubscriber(destination, refCountSubscription, keySelector, elementSelector, durationSelector) {
	        _classCallCheck(this, GroupBySubscriber);

	        _Subscriber.call(this);
	        this.refCountSubscription = refCountSubscription;
	        this.keySelector = keySelector;
	        this.elementSelector = elementSelector;
	        this.durationSelector = durationSelector;
	        this.groups = null;
	        this.destination = destination;
	        this.add(destination);
	    }

	    GroupBySubscriber.prototype._next = function _next(x) {
	        var key = _utilTryCatch2['default'](this.keySelector)(x);
	        if (key === _utilErrorObject.errorObject) {
	            this.error(key.e);
	        } else {
	            var groups = this.groups;
	            var elementSelector = this.elementSelector;
	            var durationSelector = this.durationSelector;
	            if (!groups) {
	                groups = this.groups = typeof key === 'string' ? new _utilFastMap2['default']() : new _utilMap2['default']();
	            }
	            var group = groups.get(key);
	            if (!group) {
	                groups.set(key, group = new _Subject2['default']());
	                var groupedObservable = new _groupBySupport.GroupedObservable(key, group, this.refCountSubscription);
	                if (durationSelector) {
	                    var duration = _utilTryCatch2['default'](durationSelector)(new _groupBySupport.GroupedObservable(key, group));
	                    if (duration === _utilErrorObject.errorObject) {
	                        this.error(duration.e);
	                    } else {
	                        this.add(duration._subscribe(new GroupDurationSubscriber(key, group, this)));
	                    }
	                }
	                this.destination.next(groupedObservable);
	            }
	            if (elementSelector) {
	                var value = _utilTryCatch2['default'](elementSelector)(x);
	                if (value === _utilErrorObject.errorObject) {
	                    this.error(value.e);
	                } else {
	                    group.next(value);
	                }
	            } else {
	                group.next(x);
	            }
	        }
	    };

	    GroupBySubscriber.prototype._error = function _error(err) {
	        var _this = this;

	        var groups = this.groups;
	        if (groups) {
	            groups.forEach(function (group, key) {
	                group.error(err);
	                _this.removeGroup(key);
	            });
	        }
	        this.destination.error(err);
	    };

	    GroupBySubscriber.prototype._complete = function _complete() {
	        var _this2 = this;

	        var groups = this.groups;
	        if (groups) {
	            groups.forEach(function (group, key) {
	                group.complete();
	                _this2.removeGroup(group);
	            });
	        }
	        this.destination.complete();
	    };

	    GroupBySubscriber.prototype.removeGroup = function removeGroup(key) {
	        this.groups['delete'](key);
	    };

	    return GroupBySubscriber;
	})(_Subscriber4['default']);

	var GroupDurationSubscriber = (function (_Subscriber2) {
	    _inherits(GroupDurationSubscriber, _Subscriber2);

	    function GroupDurationSubscriber(key, group, parent) {
	        _classCallCheck(this, GroupDurationSubscriber);

	        _Subscriber2.call(this, null);
	        this.key = key;
	        this.group = group;
	        this.parent = parent;
	    }

	    //# sourceMappingURL=groupBy.js.map

	    GroupDurationSubscriber.prototype._next = function _next(value) {
	        this.group.complete();
	        this.parent.removeGroup(this.key);
	    };

	    GroupDurationSubscriber.prototype._error = function _error(err) {
	        this.group.error(err);
	        this.parent.removeGroup(this.key);
	    };

	    GroupDurationSubscriber.prototype._complete = function _complete() {
	        this.group.complete();
	        this.parent.removeGroup(this.key);
	    };

	    return GroupDurationSubscriber;
	})(_Subscriber4['default']);
	//# sourceMappingURL=groupBy.js.map

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _Observable2 = __webpack_require__(53);

	var _Observable3 = _interopRequireDefault(_Observable2);

	var _Subscriber = __webpack_require__(54);

	var _Subscriber2 = _interopRequireDefault(_Subscriber);

	var _Subscription = __webpack_require__(58);

	var _Subscription2 = _interopRequireDefault(_Subscription);

	var _subjectsSubjectSubscription = __webpack_require__(134);

	var _subjectsSubjectSubscription2 = _interopRequireDefault(_subjectsSubjectSubscription);

	var subscriptionAdd = _Subscription2['default'].prototype.add;
	var subscriptionRemove = _Subscription2['default'].prototype.remove;
	var subscriptionUnsubscribe = _Subscription2['default'].prototype.unsubscribe;
	var subscriberNext = _Subscriber2['default'].prototype.next;
	var subscriberError = _Subscriber2['default'].prototype.error;
	var subscriberComplete = _Subscriber2['default'].prototype.complete;
	var _subscriberNext = _Subscriber2['default'].prototype._next;
	var _subscriberError = _Subscriber2['default'].prototype._error;
	var _subscriberComplete = _Subscriber2['default'].prototype._complete;

	var Subject = (function (_Observable) {
	    _inherits(Subject, _Observable);

	    function Subject() {
	        _classCallCheck(this, Subject);

	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }

	        _Observable.call.apply(_Observable, [this].concat(args));
	        this.observers = [];
	        this.isUnsubscribed = false;
	        this.dispatching = false;
	        this.errorSignal = false;
	        this.completeSignal = false;
	    }

	    Subject.create = function create(source, destination) {
	        return new BidirectionalSubject(source, destination);
	    };

	    Subject.prototype.lift = function lift(operator) {
	        var subject = new BidirectionalSubject(this, this.destination || this);
	        subject.operator = operator;
	        return subject;
	    };

	    Subject.prototype._subscribe = function _subscribe(subscriber) {
	        if (subscriber.isUnsubscribed) {
	            return;
	        } else if (this.errorSignal) {
	            subscriber.error(this.errorInstance);
	            return;
	        } else if (this.completeSignal) {
	            subscriber.complete();
	            return;
	        } else if (this.isUnsubscribed) {
	            throw new Error("Cannot subscribe to a disposed Subject.");
	        }
	        this.observers.push(subscriber);
	        return new _subjectsSubjectSubscription2['default'](this, subscriber);
	    };

	    Subject.prototype.add = function add(subscription) {
	        subscriptionAdd.call(this, subscription);
	    };

	    Subject.prototype.remove = function remove(subscription) {
	        subscriptionRemove.call(this, subscription);
	    };

	    Subject.prototype.unsubscribe = function unsubscribe() {
	        this.observers = void 0;
	        subscriptionUnsubscribe.call(this);
	    };

	    Subject.prototype.next = function next(value) {
	        if (this.isUnsubscribed) {
	            return;
	        }
	        this.dispatching = true;
	        this._next(value);
	        this.dispatching = false;
	        if (this.errorSignal) {
	            this.error(this.errorInstance);
	        } else if (this.completeSignal) {
	            this.complete();
	        }
	    };

	    Subject.prototype.error = function error(_error) {
	        if (this.isUnsubscribed || this.completeSignal) {
	            return;
	        }
	        this.errorSignal = true;
	        this.errorInstance = _error;
	        if (this.dispatching) {
	            return;
	        }
	        this._error(_error);
	        this.unsubscribe();
	    };

	    Subject.prototype.complete = function complete() {
	        if (this.isUnsubscribed || this.errorSignal) {
	            return;
	        }
	        this.completeSignal = true;
	        if (this.dispatching) {
	            return;
	        }
	        this._complete();
	        this.unsubscribe();
	    };

	    Subject.prototype._next = function _next(value) {
	        var index = -1;
	        var observers = this.observers.slice(0);
	        var len = observers.length;
	        while (++index < len) {
	            observers[index].next(value);
	        }
	    };

	    Subject.prototype._error = function _error(error) {
	        var index = -1;
	        var observers = this.observers;
	        var len = observers.length;
	        // optimization -- block next, complete, and unsubscribe while dispatching
	        this.observers = void 0;
	        this.isUnsubscribed = true;
	        while (++index < len) {
	            observers[index].error(error);
	        }
	        this.isUnsubscribed = false;
	    };

	    Subject.prototype._complete = function _complete() {
	        var index = -1;
	        var observers = this.observers;
	        var len = observers.length;
	        // optimization -- block next, complete, and unsubscribe while dispatching
	        this.observers = void 0; // optimization
	        this.isUnsubscribed = true;
	        while (++index < len) {
	            observers[index].complete();
	        }
	        this.isUnsubscribed = false;
	    };

	    return Subject;
	})(_Observable3['default']);

	exports['default'] = Subject;

	var BidirectionalSubject = (function (_Subject) {
	    _inherits(BidirectionalSubject, _Subject);

	    function BidirectionalSubject(source, destination) {
	        _classCallCheck(this, BidirectionalSubject);

	        _Subject.call(this);
	        this.source = source;
	        this.destination = destination;
	    }

	    //# sourceMappingURL=Subject.js.map

	    BidirectionalSubject.prototype._subscribe = function _subscribe(subscriber) {
	        var operator = this.operator;
	        return this.source._subscribe.call(this.source, operator ? operator.call(subscriber) : subscriber);
	    };

	    BidirectionalSubject.prototype.next = function next(x) {
	        subscriberNext.call(this, x);
	    };

	    BidirectionalSubject.prototype.error = function error(e) {
	        subscriberError.call(this, e);
	    };

	    BidirectionalSubject.prototype.complete = function complete() {
	        subscriberComplete.call(this);
	    };

	    BidirectionalSubject.prototype._next = function _next(x) {
	        _subscriberNext.call(this, x);
	    };

	    BidirectionalSubject.prototype._error = function _error(e) {
	        _subscriberError.call(this, e);
	    };

	    BidirectionalSubject.prototype._complete = function _complete() {
	        _subscriberComplete.call(this);
	    };

	    return BidirectionalSubject;
	})(Subject);

	module.exports = exports['default'];
	//# sourceMappingURL=Subject.js.map

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _Subscription2 = __webpack_require__(58);

	var _Subscription3 = _interopRequireDefault(_Subscription2);

	var _Subscriber = __webpack_require__(54);

	var _Subscriber2 = _interopRequireDefault(_Subscriber);

	var SubjectSubscription = (function (_Subscription) {
	    _inherits(SubjectSubscription, _Subscription);

	    function SubjectSubscription(subject, observer) {
	        _classCallCheck(this, SubjectSubscription);

	        _Subscription.call(this);
	        this.subject = subject;
	        this.observer = observer;
	        this.isUnsubscribed = false;
	    }

	    //# sourceMappingURL=SubjectSubscription.js.map

	    SubjectSubscription.prototype.unsubscribe = function unsubscribe() {
	        if (this.isUnsubscribed) {
	            return;
	        }
	        this.isUnsubscribed = true;
	        var subject = this.subject;
	        var observers = subject.observers;
	        this.subject = void 0;
	        if (!observers || observers.length === 0 || subject.isUnsubscribed) {
	            return;
	        }
	        if (this.observer instanceof _Subscriber2['default']) {
	            this.observer.unsubscribe();
	        }
	        var subscriberIndex = observers.indexOf(this.observer);
	        if (subscriberIndex !== -1) {
	            observers.splice(subscriberIndex, 1);
	        }
	    };

	    return SubjectSubscription;
	})(_Subscription3['default']);

	exports['default'] = SubjectSubscription;
	module.exports = exports['default'];
	//# sourceMappingURL=SubjectSubscription.js.map

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _root = __webpack_require__(59);

	exports['default'] = _root.root.Map || (function () {
	    function Map() {
	        this.size = 0;
	        this._values = [];
	        this._keys = [];
	    }
	    Map.prototype['delete'] = function (key) {
	        var i = this._keys.indexOf(key);
	        if (i === -1) {
	            return false;
	        }
	        this._values.splice(i, 1);
	        this._keys.splice(i, 1);
	        this.size--;
	        return true;
	    };
	    Map.prototype.get = function (key) {
	        var i = this._keys.indexOf(key);
	        return i === -1 ? undefined : this._values[i];
	    };
	    Map.prototype.set = function (key, value) {
	        var i = this._keys.indexOf(key);
	        if (i === -1) {
	            this._keys.push(key);
	            this._values.push(value);
	            this.size++;
	        } else {
	            this._values[i] = value;
	        }
	        return this;
	    };
	    Map.prototype.forEach = function (cb, thisArg) {
	        for (var i = 0; i < this.size; i++) {
	            cb.call(thisArg, this._values[i], this._keys[i]);
	        }
	    };
	    return Map;
	})();

	//# sourceMappingURL=Map.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=Map.js.map

/***/ },
/* 136 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var FastMap = (function () {
	    function FastMap() {
	        _classCallCheck(this, FastMap);

	        this.size = 0;
	        this._values = {};
	    }

	    //# sourceMappingURL=FastMap.js.map

	    FastMap.prototype["delete"] = function _delete(key) {
	        this._values[key] = null;
	        return true;
	    };

	    FastMap.prototype.set = function set(key, value) {
	        this._values[key] = value;
	        return this;
	    };

	    FastMap.prototype.get = function get(key) {
	        return this._values[key];
	    };

	    FastMap.prototype.forEach = function forEach(cb, thisArg) {
	        var values = this._values;
	        for (var key in values) {
	            if (values.hasOwnProperty(key) && values[key] !== null) {
	                cb.call(thisArg, values[key], key);
	            }
	        }
	    };

	    FastMap.prototype.clear = function clear() {
	        this._values = {};
	    };

	    return FastMap;
	})();

	exports["default"] = FastMap;
	module.exports = exports["default"];
	//# sourceMappingURL=FastMap.js.map

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _Subscription3 = __webpack_require__(58);

	var _Subscription4 = _interopRequireDefault(_Subscription3);

	var _Observable2 = __webpack_require__(53);

	var _Observable3 = _interopRequireDefault(_Observable2);

	var RefCountSubscription = (function (_Subscription) {
	    _inherits(RefCountSubscription, _Subscription);

	    function RefCountSubscription() {
	        _classCallCheck(this, RefCountSubscription);

	        _Subscription.call(this);
	        this.attemptedToUnsubscribePrimary = false;
	        this.count = 0;
	    }

	    RefCountSubscription.prototype.setPrimary = function setPrimary(subscription) {
	        this.primary = subscription;
	    };

	    RefCountSubscription.prototype.unsubscribe = function unsubscribe() {
	        if (!this.isUnsubscribed && !this.attemptedToUnsubscribePrimary) {
	            this.attemptedToUnsubscribePrimary = true;
	            if (this.count === 0) {
	                _Subscription.prototype.unsubscribe.call(this);
	                this.primary.unsubscribe();
	            }
	        }
	    };

	    return RefCountSubscription;
	})(_Subscription4['default']);

	exports.RefCountSubscription = RefCountSubscription;

	var GroupedObservable = (function (_Observable) {
	    _inherits(GroupedObservable, _Observable);

	    function GroupedObservable(key, groupSubject, refCountSubscription) {
	        _classCallCheck(this, GroupedObservable);

	        _Observable.call(this);
	        this.key = key;
	        this.groupSubject = groupSubject;
	        this.refCountSubscription = refCountSubscription;
	    }

	    GroupedObservable.prototype._subscribe = function _subscribe(subscriber) {
	        var subscription = new _Subscription4['default']();
	        if (this.refCountSubscription && !this.refCountSubscription.isUnsubscribed) {
	            subscription.add(new InnerRefCountSubscription(this.refCountSubscription));
	        }
	        subscription.add(this.groupSubject.subscribe(subscriber));
	        return subscription;
	    };

	    return GroupedObservable;
	})(_Observable3['default']);

	exports.GroupedObservable = GroupedObservable;

	var InnerRefCountSubscription = (function (_Subscription2) {
	    _inherits(InnerRefCountSubscription, _Subscription2);

	    function InnerRefCountSubscription(parent) {
	        _classCallCheck(this, InnerRefCountSubscription);

	        _Subscription2.call(this);
	        this.parent = parent;
	        parent.count++;
	    }

	    //# sourceMappingURL=groupBy-support.js.map

	    InnerRefCountSubscription.prototype.unsubscribe = function unsubscribe() {
	        if (!this.parent.isUnsubscribed && !this.isUnsubscribed) {
	            _Subscription2.prototype.unsubscribe.call(this);
	            this.parent.count--;
	            if (this.parent.count === 0 && this.parent.attemptedToUnsubscribePrimary) {
	                this.parent.unsubscribe();
	                this.parent.primary.unsubscribe();
	            }
	        }
	    };

	    return InnerRefCountSubscription;
	})(_Subscription4['default']);

	exports.InnerRefCountSubscription = InnerRefCountSubscription;
	//# sourceMappingURL=groupBy-support.js.map

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = ignoreElements;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	function ignoreElements() {
	    return this.lift(new IgnoreElementsOperator());
	}

	;

	var IgnoreElementsOperator = (function () {
	    function IgnoreElementsOperator() {
	        _classCallCheck(this, IgnoreElementsOperator);
	    }

	    IgnoreElementsOperator.prototype.call = function call(subscriber) {
	        return new IgnoreElementsSubscriber(subscriber);
	    };

	    return IgnoreElementsOperator;
	})();

	var IgnoreElementsSubscriber = (function (_Subscriber) {
	    _inherits(IgnoreElementsSubscriber, _Subscriber);

	    function IgnoreElementsSubscriber() {
	        _classCallCheck(this, IgnoreElementsSubscriber);

	        _Subscriber.apply(this, arguments);
	    }

	    //# sourceMappingURL=ignoreElements.js.map

	    IgnoreElementsSubscriber.prototype._next = function _next() {};

	    return IgnoreElementsSubscriber;
	})(_Subscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=ignoreElements.js.map

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = every;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _observablesScalarObservable = __webpack_require__(64);

	var _observablesScalarObservable2 = _interopRequireDefault(_observablesScalarObservable);

	var _observablesArrayObservable = __webpack_require__(63);

	var _observablesArrayObservable2 = _interopRequireDefault(_observablesArrayObservable);

	var _observablesErrorObservable = __webpack_require__(67);

	var _observablesErrorObservable2 = _interopRequireDefault(_observablesErrorObservable);

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	var _utilBindCallback = __webpack_require__(117);

	var _utilBindCallback2 = _interopRequireDefault(_utilBindCallback);

	function every(predicate, thisArg) {
	    var source = this;
	    var result = undefined;
	    if (source._isScalar) {
	        result = _utilTryCatch2['default'](predicate)(source.value, 0, source);
	        if (result === _utilErrorObject.errorObject) {
	            return new _observablesErrorObservable2['default'](_utilErrorObject.errorObject.e, source.scheduler);
	        } else {
	            return new _observablesScalarObservable2['default'](result, source.scheduler);
	        }
	    }
	    if (source instanceof _observablesArrayObservable2['default']) {
	        var array = source.array;
	        var _result = _utilTryCatch2['default'](function (array, predicate) {
	            return array.every(predicate);
	        })(array, predicate);
	        if (_result === _utilErrorObject.errorObject) {
	            return new _observablesErrorObservable2['default'](_utilErrorObject.errorObject.e, source.scheduler);
	        } else {
	            return new _observablesScalarObservable2['default'](_result, source.scheduler);
	        }
	    }
	    return source.lift(new EveryOperator(predicate, thisArg, source));
	}

	var EveryOperator = (function () {
	    function EveryOperator(predicate, thisArg, source) {
	        _classCallCheck(this, EveryOperator);

	        this.predicate = predicate;
	        this.thisArg = thisArg;
	        this.source = source;
	    }

	    EveryOperator.prototype.call = function call(observer) {
	        return new EverySubscriber(observer, this.predicate, this.thisArg, this.source);
	    };

	    return EveryOperator;
	})();

	var EverySubscriber = (function (_Subscriber) {
	    _inherits(EverySubscriber, _Subscriber);

	    function EverySubscriber(destination, predicate, thisArg, source) {
	        _classCallCheck(this, EverySubscriber);

	        _Subscriber.call(this, destination);
	        this.thisArg = thisArg;
	        this.source = source;
	        this.predicate = undefined;
	        this.index = 0;
	        if (typeof predicate === 'function') {
	            this.predicate = _utilBindCallback2['default'](predicate, thisArg, 3);
	        }
	    }

	    //# sourceMappingURL=every.js.map

	    EverySubscriber.prototype.notifyComplete = function notifyComplete(everyValueMatch) {
	        this.destination.next(everyValueMatch);
	        this.destination.complete();
	    };

	    EverySubscriber.prototype._next = function _next(value) {
	        var predicate = this.predicate;
	        if (predicate === undefined) {
	            this.destination.error(new TypeError('predicate must be a function'));
	        }
	        var result = _utilTryCatch2['default'](predicate)(value, this.index++, this.source);
	        if (result === _utilErrorObject.errorObject) {
	            this.destination.error(result.e);
	        } else if (!result) {
	            this.notifyComplete(false);
	        }
	    };

	    EverySubscriber.prototype._complete = function _complete() {
	        this.notifyComplete(true);
	    };

	    return EverySubscriber;
	})(_Subscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=every.js.map

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = last;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	var _utilEmptyError = __webpack_require__(131);

	var _utilEmptyError2 = _interopRequireDefault(_utilEmptyError);

	function last(predicate, resultSelector, defaultValue) {
	    return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));
	}

	var LastOperator = (function () {
	    function LastOperator(predicate, resultSelector, defaultValue, source) {
	        _classCallCheck(this, LastOperator);

	        this.predicate = predicate;
	        this.resultSelector = resultSelector;
	        this.defaultValue = defaultValue;
	        this.source = source;
	    }

	    LastOperator.prototype.call = function call(observer) {
	        return new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source);
	    };

	    return LastOperator;
	})();

	var LastSubscriber = (function (_Subscriber) {
	    _inherits(LastSubscriber, _Subscriber);

	    function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {
	        _classCallCheck(this, LastSubscriber);

	        _Subscriber.call(this, destination);
	        this.predicate = predicate;
	        this.resultSelector = resultSelector;
	        this.defaultValue = defaultValue;
	        this.source = source;
	        this.hasValue = false;
	        this.index = 0;
	        if (typeof defaultValue !== 'undefined') {
	            this.lastValue = defaultValue;
	            this.hasValue = true;
	        }
	    }

	    //# sourceMappingURL=last.js.map

	    LastSubscriber.prototype._next = function _next(value) {
	        var predicate = this.predicate;
	        var resultSelector = this.resultSelector;
	        var destination = this.destination;

	        var index = this.index++;
	        if (predicate) {
	            var found = _utilTryCatch2['default'](predicate)(value, index, this.source);
	            if (found === _utilErrorObject.errorObject) {
	                destination.error(_utilErrorObject.errorObject.e);
	                return;
	            }
	            if (found) {
	                if (resultSelector) {
	                    var result = _utilTryCatch2['default'](resultSelector)(value, index);
	                    if (result === _utilErrorObject.errorObject) {
	                        destination.error(_utilErrorObject.errorObject.e);
	                        return;
	                    }
	                    this.lastValue = result;
	                } else {
	                    this.lastValue = value;
	                }
	                this.hasValue = true;
	            }
	        } else {
	            this.lastValue = value;
	            this.hasValue = true;
	        }
	    };

	    LastSubscriber.prototype._complete = function _complete() {
	        var destination = this.destination;
	        if (this.hasValue) {
	            destination.next(this.lastValue);
	            destination.complete();
	        } else {
	            destination.error(new _utilEmptyError2['default']());
	        }
	    };

	    return LastSubscriber;
	})(_Subscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=last.js.map

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = map;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	var _utilBindCallback = __webpack_require__(117);

	var _utilBindCallback2 = _interopRequireDefault(_utilBindCallback);

	/**
	 * Similar to the well known `Array.prototype.map` function, this operator
	 * applies a projection to each value and emits that projection in the returned observable
	 *
	 * @param {Function} project the function to create projection
	 * @param {any} [thisArg] an optional argument to define what `this` is in the project function
	 * @returns {Observable} a observable of projected values
	 */

	function map(project, thisArg) {
	    return this.lift(new MapOperator(project, thisArg));
	}

	var MapOperator = (function () {
	    function MapOperator(project, thisArg) {
	        _classCallCheck(this, MapOperator);

	        this.project = _utilBindCallback2['default'](project, thisArg, 2);
	    }

	    MapOperator.prototype.call = function call(subscriber) {
	        return new MapSubscriber(subscriber, this.project);
	    };

	    return MapOperator;
	})();

	var MapSubscriber = (function (_Subscriber) {
	    _inherits(MapSubscriber, _Subscriber);

	    function MapSubscriber(destination, project) {
	        _classCallCheck(this, MapSubscriber);

	        _Subscriber.call(this, destination);
	        this.count = 0;
	        this.project = project;
	    }

	    //# sourceMappingURL=map.js.map

	    MapSubscriber.prototype._next = function _next(x) {
	        var result = _utilTryCatch2['default'](this.project)(x, this.count++);
	        if (result === _utilErrorObject.errorObject) {
	            this.error(_utilErrorObject.errorObject.e);
	        } else {
	            this.destination.next(result);
	        }
	    };

	    return MapSubscriber;
	})(_Subscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=map.js.map

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = mapTo;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	/**
	 * Maps every value to the same value every time.
	 * @param {any} value the value to map each incoming value to
	 * @returns {Observable} an observable of the passed value that emits everytime the source does
	 */

	function mapTo(value) {
	    return this.lift(new MapToOperator(value));
	}

	var MapToOperator = (function () {
	    function MapToOperator(value) {
	        _classCallCheck(this, MapToOperator);

	        this.value = value;
	    }

	    MapToOperator.prototype.call = function call(subscriber) {
	        return new MapToSubscriber(subscriber, this.value);
	    };

	    return MapToOperator;
	})();

	var MapToSubscriber = (function (_Subscriber) {
	    _inherits(MapToSubscriber, _Subscriber);

	    function MapToSubscriber(destination, value) {
	        _classCallCheck(this, MapToSubscriber);

	        _Subscriber.call(this, destination);
	        this.value = value;
	    }

	    //# sourceMappingURL=mapTo.js.map

	    MapToSubscriber.prototype._next = function _next(x) {
	        this.destination.next(this.value);
	    };

	    return MapToSubscriber;
	})(_Subscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=mapTo.js.map

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = materialize;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	var _Notification = __webpack_require__(85);

	var _Notification2 = _interopRequireDefault(_Notification);

	function materialize() {
	    return this.lift(new MaterializeOperator());
	}

	var MaterializeOperator = (function () {
	    function MaterializeOperator() {
	        _classCallCheck(this, MaterializeOperator);
	    }

	    MaterializeOperator.prototype.call = function call(subscriber) {
	        return new MaterializeSubscriber(subscriber);
	    };

	    return MaterializeOperator;
	})();

	var MaterializeSubscriber = (function (_Subscriber) {
	    _inherits(MaterializeSubscriber, _Subscriber);

	    function MaterializeSubscriber(destination) {
	        _classCallCheck(this, MaterializeSubscriber);

	        _Subscriber.call(this, destination);
	    }

	    //# sourceMappingURL=materialize.js.map

	    MaterializeSubscriber.prototype._next = function _next(value) {
	        this.destination.next(_Notification2['default'].createNext(value));
	    };

	    MaterializeSubscriber.prototype._error = function _error(err) {
	        var destination = this.destination;
	        destination.next(_Notification2['default'].createError(err));
	        destination.complete();
	    };

	    MaterializeSubscriber.prototype._complete = function _complete() {
	        var destination = this.destination;
	        destination.next(_Notification2['default'].createComplete());
	        destination.complete();
	    };

	    return MaterializeSubscriber;
	})(_Subscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=materialize.js.map

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = merge;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _mergeStatic = __webpack_require__(95);

	var _mergeStatic2 = _interopRequireDefault(_mergeStatic);

	function merge() {
	    for (var _len = arguments.length, observables = Array(_len), _key = 0; _key < _len; _key++) {
	        observables[_key] = arguments[_key];
	    }

	    observables.unshift(this);
	    return _mergeStatic2['default'].apply(this, observables);
	}

	//# sourceMappingURL=merge.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=merge.js.map

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = mergeAll;

	var _mergeAllSupport = __webpack_require__(96);

	function mergeAll() {
	    var concurrent = arguments.length <= 0 || arguments[0] === undefined ? Number.POSITIVE_INFINITY : arguments[0];

	    return this.lift(new _mergeAllSupport.MergeAllOperator(concurrent));
	}

	//# sourceMappingURL=mergeAll.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=mergeAll.js.map

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = mergeMap;

	var _mergeMapSupport = __webpack_require__(113);

	function mergeMap(project, resultSelector) {
	    var concurrent = arguments.length <= 2 || arguments[2] === undefined ? Number.POSITIVE_INFINITY : arguments[2];

	    return this.lift(new _mergeMapSupport.MergeMapOperator(project, resultSelector, concurrent));
	}

	//# sourceMappingURL=mergeMap.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=mergeMap.js.map

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = mergeMapTo;

	var _mergeMapToSupport = __webpack_require__(115);

	function mergeMapTo(observable, resultSelector) {
	    var concurrent = arguments.length <= 2 || arguments[2] === undefined ? Number.POSITIVE_INFINITY : arguments[2];

	    return this.lift(new _mergeMapToSupport.MergeMapToOperator(observable, resultSelector, concurrent));
	}

	//# sourceMappingURL=mergeMapTo.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=mergeMapTo.js.map

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = multicast;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _observablesConnectableObservable = __webpack_require__(149);

	var _observablesConnectableObservable2 = _interopRequireDefault(_observablesConnectableObservable);

	function multicast(subjectFactory) {
	    return new _observablesConnectableObservable2['default'](this, subjectFactory);
	}

	//# sourceMappingURL=multicast.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=multicast.js.map

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _Observable3 = __webpack_require__(53);

	var _Observable4 = _interopRequireDefault(_Observable3);

	var _Subscription3 = __webpack_require__(58);

	var _Subscription4 = _interopRequireDefault(_Subscription3);

	var ConnectableObservable = (function (_Observable) {
	    _inherits(ConnectableObservable, _Observable);

	    function ConnectableObservable(source, subjectFactory) {
	        _classCallCheck(this, ConnectableObservable);

	        _Observable.call(this);
	        this.source = source;
	        this.subjectFactory = subjectFactory;
	    }

	    ConnectableObservable.prototype._subscribe = function _subscribe(subscriber) {
	        return this._getSubject().subscribe(subscriber);
	    };

	    ConnectableObservable.prototype._getSubject = function _getSubject() {
	        var subject = this.subject;
	        if (subject && !subject.isUnsubscribed) {
	            return subject;
	        }
	        return this.subject = this.subjectFactory();
	    };

	    ConnectableObservable.prototype.connect = function connect() {
	        var source = this.source;
	        var subscription = this.subscription;
	        if (subscription && !subscription.isUnsubscribed) {
	            return subscription;
	        }
	        subscription = source.subscribe(this._getSubject());
	        subscription.add(new ConnectableSubscription(this));
	        return this.subscription = subscription;
	    };

	    ConnectableObservable.prototype.refCount = function refCount() {
	        return new RefCountObservable(this);
	    };

	    return ConnectableObservable;
	})(_Observable4['default']);

	exports['default'] = ConnectableObservable;

	var ConnectableSubscription = (function (_Subscription) {
	    _inherits(ConnectableSubscription, _Subscription);

	    function ConnectableSubscription(connectable) {
	        _classCallCheck(this, ConnectableSubscription);

	        _Subscription.call(this);
	        this.connectable = connectable;
	    }

	    ConnectableSubscription.prototype._unsubscribe = function _unsubscribe() {
	        var connectable = this.connectable;
	        connectable.subject = void 0;
	        connectable.subscription = void 0;
	        this.connectable = void 0;
	    };

	    return ConnectableSubscription;
	})(_Subscription4['default']);

	var RefCountObservable = (function (_Observable2) {
	    _inherits(RefCountObservable, _Observable2);

	    function RefCountObservable(connectable) {
	        var refCount = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

	        _classCallCheck(this, RefCountObservable);

	        _Observable2.call(this);
	        this.connectable = connectable;
	        this.refCount = refCount;
	    }

	    RefCountObservable.prototype._subscribe = function _subscribe(subscriber) {
	        var connectable = this.connectable;
	        var subscription = connectable.subscribe(subscriber);
	        if (++this.refCount === 1) {
	            this.connection = connectable.connect();
	        }
	        subscription.add(new RefCountSubscription(this));
	        return subscription;
	    };

	    return RefCountObservable;
	})(_Observable4['default']);

	var RefCountSubscription = (function (_Subscription2) {
	    _inherits(RefCountSubscription, _Subscription2);

	    function RefCountSubscription(refCountObservable) {
	        _classCallCheck(this, RefCountSubscription);

	        _Subscription2.call(this);
	        this.refCountObservable = refCountObservable;
	    }

	    //# sourceMappingURL=ConnectableObservable.js.map

	    RefCountSubscription.prototype._unsubscribe = function _unsubscribe() {
	        var observable = this.refCountObservable;
	        if (--observable.refCount === 0) {
	            observable.connection.unsubscribe();
	            observable.connection = void 0;
	        }
	    };

	    return RefCountSubscription;
	})(_Subscription4['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=ConnectableObservable.js.map

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = observeOn;

	var _observeOnSupport = __webpack_require__(84);

	function observeOn(scheduler) {
	    var delay = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

	    return this.lift(new _observeOnSupport.ObserveOnOperator(scheduler, delay));
	}

	//# sourceMappingURL=observeOn.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=observeOn.js.map

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = partition;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _utilNot = __webpack_require__(152);

	var _utilNot2 = _interopRequireDefault(_utilNot);

	var _filter = __webpack_require__(128);

	var _filter2 = _interopRequireDefault(_filter);

	function partition(predicate, thisArg) {
	    return [_filter2['default'].call(this, predicate), _filter2['default'].call(this, _utilNot2['default'](predicate, thisArg))];
	}

	//# sourceMappingURL=partition.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=partition.js.map

/***/ },
/* 152 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = not;

	function not(pred, thisArg) {
	    function notPred() {
	        return !notPred.pred.apply(notPred.thisArg, arguments);
	    }
	    notPred.pred = pred;
	    notPred.thisArg = thisArg;
	    return notPred;
	}

	//# sourceMappingURL=not.js.map
	module.exports = exports["default"];
	//# sourceMappingURL=not.js.map

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = publish;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _Subject = __webpack_require__(133);

	var _Subject2 = _interopRequireDefault(_Subject);

	var _multicast = __webpack_require__(148);

	var _multicast2 = _interopRequireDefault(_multicast);

	function subjectFactory() {
	    return new _Subject2['default']();
	}

	function publish() {
	    return _multicast2['default'].call(this, subjectFactory);
	}

	//# sourceMappingURL=publish.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=publish.js.map

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = publishBehavior;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _subjectsBehaviorSubject = __webpack_require__(155);

	var _subjectsBehaviorSubject2 = _interopRequireDefault(_subjectsBehaviorSubject);

	var _multicast = __webpack_require__(148);

	var _multicast2 = _interopRequireDefault(_multicast);

	function publishBehavior(value) {
	    return _multicast2['default'].call(this, function () {
	        return new _subjectsBehaviorSubject2['default'](value);
	    });
	}

	//# sourceMappingURL=publishBehavior.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=publishBehavior.js.map

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _Subject2 = __webpack_require__(133);

	var _Subject3 = _interopRequireDefault(_Subject2);

	var BehaviorSubject = (function (_Subject) {
	    _inherits(BehaviorSubject, _Subject);

	    function BehaviorSubject(value) {
	        _classCallCheck(this, BehaviorSubject);

	        _Subject.call(this);
	        this.value = value;
	    }

	    //# sourceMappingURL=BehaviorSubject.js.map

	    BehaviorSubject.prototype._subscribe = function _subscribe(subscriber) {
	        var subscription = _Subject.prototype._subscribe.call(this, subscriber);
	        if (!subscription) {
	            return;
	        } else if (!subscription.isUnsubscribed) {
	            subscriber.next(this.value);
	        }
	        return subscription;
	    };

	    BehaviorSubject.prototype._next = function _next(value) {
	        _Subject.prototype._next.call(this, this.value = value);
	    };

	    return BehaviorSubject;
	})(_Subject3['default']);

	exports['default'] = BehaviorSubject;
	module.exports = exports['default'];
	//# sourceMappingURL=BehaviorSubject.js.map

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = publishReplay;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _subjectsReplaySubject = __webpack_require__(157);

	var _subjectsReplaySubject2 = _interopRequireDefault(_subjectsReplaySubject);

	var _multicast = __webpack_require__(148);

	var _multicast2 = _interopRequireDefault(_multicast);

	function publishReplay(bufferSize, windowTime, scheduler) {
	    if (bufferSize === undefined) bufferSize = Number.POSITIVE_INFINITY;
	    if (windowTime === undefined) windowTime = Number.POSITIVE_INFINITY;

	    return _multicast2['default'].call(this, function () {
	        return new _subjectsReplaySubject2['default'](bufferSize, windowTime, scheduler);
	    });
	}

	//# sourceMappingURL=publishReplay.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=publishReplay.js.map

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _Subject2 = __webpack_require__(133);

	var _Subject3 = _interopRequireDefault(_Subject2);

	var _schedulersImmediate = __webpack_require__(75);

	var _schedulersImmediate2 = _interopRequireDefault(_schedulersImmediate);

	var ReplaySubject = (function (_Subject) {
	    _inherits(ReplaySubject, _Subject);

	    function ReplaySubject(bufferSize, _windowTime, scheduler) {
	        if (bufferSize === undefined) bufferSize = Number.POSITIVE_INFINITY;
	        if (_windowTime === undefined) _windowTime = Number.POSITIVE_INFINITY;

	        _classCallCheck(this, ReplaySubject);

	        _Subject.call(this);
	        this.events = [];
	        this.bufferSize = bufferSize < 1 ? 1 : bufferSize;
	        this._windowTime = _windowTime < 1 ? 1 : _windowTime;
	        this.scheduler = scheduler;
	    }

	    ReplaySubject.prototype._next = function _next(value) {
	        var now = this._getNow();
	        this.events.push(new ReplayEvent(now, value));
	        _Subject.prototype._next.call(this, value);
	    };

	    ReplaySubject.prototype._subscribe = function _subscribe(subscriber) {
	        var events = this._getEvents(this._getNow());
	        var index = -1;
	        var len = events.length;
	        while (!subscriber.isUnsubscribed && ++index < len) {
	            subscriber.next(events[index].value);
	        }
	        return _Subject.prototype._subscribe.call(this, subscriber);
	    };

	    ReplaySubject.prototype._getNow = function _getNow() {
	        return (this.scheduler || _schedulersImmediate2['default']).now();
	    };

	    ReplaySubject.prototype._getEvents = function _getEvents(now) {
	        var bufferSize = this.bufferSize;
	        var _windowTime = this._windowTime;
	        var events = this.events;
	        var eventsCount = events.length;
	        var spliceCount = 0;
	        // Trim events that fall out of the time window.
	        // Start at the front of the list. Break early once
	        // we encounter an event that falls within the window.
	        while (spliceCount < eventsCount) {
	            if (now - events[spliceCount].time < _windowTime) {
	                break;
	            }
	            spliceCount += 1;
	        }
	        if (eventsCount > bufferSize) {
	            spliceCount = Math.max(spliceCount, eventsCount - bufferSize);
	        }
	        if (spliceCount > 0) {
	            events.splice(0, spliceCount);
	        }
	        return events;
	    };

	    return ReplaySubject;
	})(_Subject3['default']);

	exports['default'] = ReplaySubject;

	var ReplayEvent = function ReplayEvent(time, value) {
	    _classCallCheck(this, ReplayEvent);

	    this.time = time;
	    this.value = value;
	}
	//# sourceMappingURL=ReplaySubject.js.map
	;

	module.exports = exports['default'];
	//# sourceMappingURL=ReplaySubject.js.map

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = reduce;

	var _reduceSupport = __webpack_require__(159);

	function reduce(project, acc) {
	    return this.lift(new _reduceSupport.ReduceOperator(project, acc));
	}

	//# sourceMappingURL=reduce.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=reduce.js.map

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	var ReduceOperator = (function () {
	    function ReduceOperator(project, acc) {
	        _classCallCheck(this, ReduceOperator);

	        this.acc = acc;
	        this.project = project;
	    }

	    ReduceOperator.prototype.call = function call(subscriber) {
	        return new ReduceSubscriber(subscriber, this.project, this.acc);
	    };

	    return ReduceOperator;
	})();

	exports.ReduceOperator = ReduceOperator;

	var ReduceSubscriber = (function (_Subscriber) {
	    _inherits(ReduceSubscriber, _Subscriber);

	    function ReduceSubscriber(destination, project, acc) {
	        _classCallCheck(this, ReduceSubscriber);

	        _Subscriber.call(this, destination);
	        this.hasValue = false;
	        this.acc = acc;
	        this.project = project;
	        this.hasSeed = typeof acc !== 'undefined';
	    }

	    //# sourceMappingURL=reduce-support.js.map

	    ReduceSubscriber.prototype._next = function _next(x) {
	        if (this.hasValue || (this.hasValue = this.hasSeed)) {
	            var result = _utilTryCatch2['default'](this.project).call(this, this.acc, x);
	            if (result === _utilErrorObject.errorObject) {
	                this.destination.error(_utilErrorObject.errorObject.e);
	            } else {
	                this.acc = result;
	            }
	        } else {
	            this.acc = x;
	            this.hasValue = true;
	        }
	    };

	    ReduceSubscriber.prototype._complete = function _complete() {
	        if (this.hasValue || this.hasSeed) {
	            this.destination.next(this.acc);
	        }
	        this.destination.complete();
	    };

	    return ReduceSubscriber;
	})(_Subscriber3['default']);

	exports.ReduceSubscriber = ReduceSubscriber;
	//# sourceMappingURL=reduce-support.js.map

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = repeat;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber3 = __webpack_require__(54);

	var _Subscriber4 = _interopRequireDefault(_Subscriber3);

	var _observablesEmptyObservable = __webpack_require__(68);

	var _observablesEmptyObservable2 = _interopRequireDefault(_observablesEmptyObservable);

	function repeat() {
	    var count = arguments.length <= 0 || arguments[0] === undefined ? -1 : arguments[0];

	    if (count === 0) {
	        return _observablesEmptyObservable2['default'].create();
	    } else {
	        return this.lift(new RepeatOperator(count, this));
	    }
	}

	var RepeatOperator = (function () {
	    function RepeatOperator(count, source) {
	        _classCallCheck(this, RepeatOperator);

	        this.count = count;
	        this.source = source;
	    }

	    RepeatOperator.prototype.call = function call(subscriber) {
	        return new FirstRepeatSubscriber(subscriber, this.count, this.source);
	    };

	    return RepeatOperator;
	})();

	var FirstRepeatSubscriber = (function (_Subscriber) {
	    _inherits(FirstRepeatSubscriber, _Subscriber);

	    function FirstRepeatSubscriber(destination, count, source) {
	        _classCallCheck(this, FirstRepeatSubscriber);

	        _Subscriber.call(this, null);
	        this.destination = destination;
	        this.count = count;
	        this.source = source;
	        if (count === 0) {
	            this.destination.complete();
	            _Subscriber.prototype.unsubscribe.call(this);
	        }
	        this.lastSubscription = this;
	    }

	    FirstRepeatSubscriber.prototype._next = function _next(value) {
	        this.destination.next(value);
	    };

	    FirstRepeatSubscriber.prototype._error = function _error(err) {
	        this.destination.error(err);
	    };

	    FirstRepeatSubscriber.prototype.complete = function complete() {
	        if (!this.isUnsubscribed) {
	            this.resubscribe(this.count);
	        }
	    };

	    FirstRepeatSubscriber.prototype.unsubscribe = function unsubscribe() {
	        var lastSubscription = this.lastSubscription;
	        if (lastSubscription === this) {
	            _Subscriber.prototype.unsubscribe.call(this);
	        } else {
	            lastSubscription.unsubscribe();
	        }
	    };

	    FirstRepeatSubscriber.prototype.resubscribe = function resubscribe(count) {
	        this.lastSubscription.unsubscribe();
	        if (count - 1 === 0) {
	            this.destination.complete();
	        } else {
	            var nextSubscriber = new MoreRepeatSubscriber(this, count - 1);
	            this.lastSubscription = this.source.subscribe(nextSubscriber);
	        }
	    };

	    return FirstRepeatSubscriber;
	})(_Subscriber4['default']);

	var MoreRepeatSubscriber = (function (_Subscriber2) {
	    _inherits(MoreRepeatSubscriber, _Subscriber2);

	    function MoreRepeatSubscriber(parent, count) {
	        _classCallCheck(this, MoreRepeatSubscriber);

	        _Subscriber2.call(this, null);
	        this.parent = parent;
	        this.count = count;
	    }

	    //# sourceMappingURL=repeat.js.map

	    MoreRepeatSubscriber.prototype._next = function _next(value) {
	        this.parent.destination.next(value);
	    };

	    MoreRepeatSubscriber.prototype._error = function _error(err) {
	        this.parent.destination.error(err);
	    };

	    MoreRepeatSubscriber.prototype._complete = function _complete() {
	        var count = this.count;
	        this.parent.resubscribe(count < 0 ? -1 : count);
	    };

	    return MoreRepeatSubscriber;
	})(_Subscriber4['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=repeat.js.map

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = retry;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber3 = __webpack_require__(54);

	var _Subscriber4 = _interopRequireDefault(_Subscriber3);

	function retry() {
	    var count = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];

	    return this.lift(new RetryOperator(count, this));
	}

	var RetryOperator = (function () {
	    function RetryOperator(count, source) {
	        _classCallCheck(this, RetryOperator);

	        this.count = count;
	        this.source = source;
	    }

	    RetryOperator.prototype.call = function call(subscriber) {
	        return new FirstRetrySubscriber(subscriber, this.count, this.source);
	    };

	    return RetryOperator;
	})();

	var FirstRetrySubscriber = (function (_Subscriber) {
	    _inherits(FirstRetrySubscriber, _Subscriber);

	    function FirstRetrySubscriber(destination, count, source) {
	        _classCallCheck(this, FirstRetrySubscriber);

	        _Subscriber.call(this, null);
	        this.destination = destination;
	        this.count = count;
	        this.source = source;
	        this.lastSubscription = this;
	    }

	    FirstRetrySubscriber.prototype._next = function _next(value) {
	        this.destination.next(value);
	    };

	    FirstRetrySubscriber.prototype.error = function error(_error) {
	        if (!this.isUnsubscribed) {
	            _Subscriber.prototype.unsubscribe.call(this);
	            this.resubscribe();
	        }
	    };

	    FirstRetrySubscriber.prototype._complete = function _complete() {
	        _Subscriber.prototype.unsubscribe.call(this);
	        this.destination.complete();
	    };

	    FirstRetrySubscriber.prototype.unsubscribe = function unsubscribe() {
	        var lastSubscription = this.lastSubscription;
	        if (lastSubscription === this) {
	            _Subscriber.prototype.unsubscribe.call(this);
	        } else {
	            lastSubscription.unsubscribe();
	        }
	    };

	    FirstRetrySubscriber.prototype.resubscribe = function resubscribe() {
	        var retried = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];

	        this.lastSubscription.unsubscribe();
	        var nextSubscriber = new RetryMoreSubscriber(this, this.count, retried + 1);
	        this.lastSubscription = this.source.subscribe(nextSubscriber);
	    };

	    return FirstRetrySubscriber;
	})(_Subscriber4['default']);

	var RetryMoreSubscriber = (function (_Subscriber2) {
	    _inherits(RetryMoreSubscriber, _Subscriber2);

	    function RetryMoreSubscriber(parent, count) {
	        var retried = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];

	        _classCallCheck(this, RetryMoreSubscriber);

	        _Subscriber2.call(this, null);
	        this.parent = parent;
	        this.count = count;
	        this.retried = retried;
	    }

	    //# sourceMappingURL=retry.js.map

	    RetryMoreSubscriber.prototype._next = function _next(value) {
	        this.parent.destination.next(value);
	    };

	    RetryMoreSubscriber.prototype._error = function _error(err) {
	        var parent = this.parent;
	        var retried = this.retried;
	        var count = this.count;
	        if (count && retried === count) {
	            parent.destination.error(err);
	        } else {
	            parent.resubscribe(retried);
	        }
	    };

	    RetryMoreSubscriber.prototype._complete = function _complete() {
	        this.parent.destination.complete();
	    };

	    return RetryMoreSubscriber;
	})(_Subscriber4['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=retry.js.map

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = retryWhen;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber4 = __webpack_require__(54);

	var _Subscriber5 = _interopRequireDefault(_Subscriber4);

	var _Subject = __webpack_require__(133);

	var _Subject2 = _interopRequireDefault(_Subject);

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	function retryWhen(notifier) {
	    return this.lift(new RetryWhenOperator(notifier, this));
	}

	var RetryWhenOperator = (function () {
	    function RetryWhenOperator(notifier, source) {
	        _classCallCheck(this, RetryWhenOperator);

	        this.notifier = notifier;
	        this.source = source;
	    }

	    RetryWhenOperator.prototype.call = function call(subscriber) {
	        return new FirstRetryWhenSubscriber(subscriber, this.notifier, this.source);
	    };

	    return RetryWhenOperator;
	})();

	var FirstRetryWhenSubscriber = (function (_Subscriber) {
	    _inherits(FirstRetryWhenSubscriber, _Subscriber);

	    function FirstRetryWhenSubscriber(destination, notifier, source) {
	        _classCallCheck(this, FirstRetryWhenSubscriber);

	        _Subscriber.call(this, null);
	        this.destination = destination;
	        this.notifier = notifier;
	        this.source = source;
	        this.lastSubscription = this;
	    }

	    FirstRetryWhenSubscriber.prototype._next = function _next(value) {
	        this.destination.next(value);
	    };

	    FirstRetryWhenSubscriber.prototype.error = function error(err) {
	        if (!this.isUnsubscribed) {
	            _Subscriber.prototype.unsubscribe.call(this);
	            if (!this.retryNotifications) {
	                this.errors = new _Subject2['default']();
	                var notifications = _utilTryCatch2['default'](this.notifier).call(this, this.errors);
	                if (notifications === _utilErrorObject.errorObject) {
	                    this.destination.error(_utilErrorObject.errorObject.e);
	                } else {
	                    this.retryNotifications = notifications;
	                    var notificationSubscriber = new RetryNotificationSubscriber(this);
	                    this.notificationSubscription = notifications.subscribe(notificationSubscriber);
	                }
	            }
	            this.errors.next(err);
	        }
	    };

	    FirstRetryWhenSubscriber.prototype.destinationError = function destinationError(err) {
	        this.tearDown();
	        this.destination.error(err);
	    };

	    FirstRetryWhenSubscriber.prototype._complete = function _complete() {
	        this.destinationComplete();
	    };

	    FirstRetryWhenSubscriber.prototype.destinationComplete = function destinationComplete() {
	        this.tearDown();
	        this.destination.complete();
	    };

	    FirstRetryWhenSubscriber.prototype.unsubscribe = function unsubscribe() {
	        var lastSubscription = this.lastSubscription;
	        if (lastSubscription === this) {
	            _Subscriber.prototype.unsubscribe.call(this);
	        } else {
	            this.tearDown();
	        }
	    };

	    FirstRetryWhenSubscriber.prototype.tearDown = function tearDown() {
	        _Subscriber.prototype.unsubscribe.call(this);
	        this.lastSubscription.unsubscribe();
	        var notificationSubscription = this.notificationSubscription;
	        if (notificationSubscription) {
	            notificationSubscription.unsubscribe();
	        }
	    };

	    FirstRetryWhenSubscriber.prototype.resubscribe = function resubscribe() {
	        this.lastSubscription.unsubscribe();
	        var nextSubscriber = new MoreRetryWhenSubscriber(this);
	        this.lastSubscription = this.source.subscribe(nextSubscriber);
	    };

	    return FirstRetryWhenSubscriber;
	})(_Subscriber5['default']);

	var MoreRetryWhenSubscriber = (function (_Subscriber2) {
	    _inherits(MoreRetryWhenSubscriber, _Subscriber2);

	    function MoreRetryWhenSubscriber(parent) {
	        _classCallCheck(this, MoreRetryWhenSubscriber);

	        _Subscriber2.call(this, null);
	        this.parent = parent;
	    }

	    MoreRetryWhenSubscriber.prototype._next = function _next(value) {
	        this.parent.destination.next(value);
	    };

	    MoreRetryWhenSubscriber.prototype._error = function _error(err) {
	        this.parent.errors.next(err);
	    };

	    MoreRetryWhenSubscriber.prototype._complete = function _complete() {
	        this.parent.destinationComplete();
	    };

	    return MoreRetryWhenSubscriber;
	})(_Subscriber5['default']);

	var RetryNotificationSubscriber = (function (_Subscriber3) {
	    _inherits(RetryNotificationSubscriber, _Subscriber3);

	    function RetryNotificationSubscriber(parent) {
	        _classCallCheck(this, RetryNotificationSubscriber);

	        _Subscriber3.call(this, null);
	        this.parent = parent;
	    }

	    //# sourceMappingURL=retryWhen.js.map

	    RetryNotificationSubscriber.prototype._next = function _next(value) {
	        this.parent.resubscribe();
	    };

	    RetryNotificationSubscriber.prototype._error = function _error(err) {
	        this.parent.destinationError(err);
	    };

	    RetryNotificationSubscriber.prototype._complete = function _complete() {
	        this.parent.destinationComplete();
	    };

	    return RetryNotificationSubscriber;
	})(_Subscriber5['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=retryWhen.js.map

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = sample;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber3 = __webpack_require__(54);

	var _Subscriber4 = _interopRequireDefault(_Subscriber3);

	function sample(notifier) {
	    return this.lift(new SampleOperator(notifier));
	}

	var SampleOperator = (function () {
	    function SampleOperator(notifier) {
	        _classCallCheck(this, SampleOperator);

	        this.notifier = notifier;
	    }

	    SampleOperator.prototype.call = function call(subscriber) {
	        return new SampleSubscriber(subscriber, this.notifier);
	    };

	    return SampleOperator;
	})();

	var SampleSubscriber = (function (_Subscriber) {
	    _inherits(SampleSubscriber, _Subscriber);

	    function SampleSubscriber(destination, notifier) {
	        _classCallCheck(this, SampleSubscriber);

	        _Subscriber.call(this, destination);
	        this.notifier = notifier;
	        this.hasValue = false;
	        this.add(notifier._subscribe(new SampleNoficationSubscriber(this)));
	    }

	    SampleSubscriber.prototype._next = function _next(value) {
	        this.lastValue = value;
	        this.hasValue = true;
	    };

	    SampleSubscriber.prototype.notifyNext = function notifyNext() {
	        if (this.hasValue) {
	            this.destination.next(this.lastValue);
	        }
	    };

	    return SampleSubscriber;
	})(_Subscriber4['default']);

	var SampleNoficationSubscriber = (function (_Subscriber2) {
	    _inherits(SampleNoficationSubscriber, _Subscriber2);

	    function SampleNoficationSubscriber(parent) {
	        _classCallCheck(this, SampleNoficationSubscriber);

	        _Subscriber2.call(this, null);
	        this.parent = parent;
	    }

	    //# sourceMappingURL=sample.js.map

	    SampleNoficationSubscriber.prototype._next = function _next() {
	        this.parent.notifyNext();
	    };

	    SampleNoficationSubscriber.prototype._error = function _error(err) {
	        this.parent.error(err);
	    };

	    SampleNoficationSubscriber.prototype._complete = function _complete() {
	        //noop
	    };

	    return SampleNoficationSubscriber;
	})(_Subscriber4['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=sample.js.map

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = sampleTime;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	var _schedulersNextTick = __webpack_require__(90);

	var _schedulersNextTick2 = _interopRequireDefault(_schedulersNextTick);

	function sampleTime(delay) {
	    var scheduler = arguments.length <= 1 || arguments[1] === undefined ? _schedulersNextTick2['default'] : arguments[1];

	    return this.lift(new SampleTimeOperator(delay, scheduler));
	}

	var SampleTimeOperator = (function () {
	    function SampleTimeOperator(delay, scheduler) {
	        _classCallCheck(this, SampleTimeOperator);

	        this.delay = delay;
	        this.scheduler = scheduler;
	    }

	    SampleTimeOperator.prototype.call = function call(subscriber) {
	        return new SampleTimeSubscriber(subscriber, this.delay, this.scheduler);
	    };

	    return SampleTimeOperator;
	})();

	var SampleTimeSubscriber = (function (_Subscriber) {
	    _inherits(SampleTimeSubscriber, _Subscriber);

	    function SampleTimeSubscriber(destination, delay, scheduler) {
	        _classCallCheck(this, SampleTimeSubscriber);

	        _Subscriber.call(this, destination);
	        this.delay = delay;
	        this.scheduler = scheduler;
	        this.hasValue = false;
	        this.add(scheduler.schedule(dispatchNotification, delay, { subscriber: this, delay: delay }));
	    }

	    SampleTimeSubscriber.prototype._next = function _next(value) {
	        this.lastValue = value;
	        this.hasValue = true;
	    };

	    SampleTimeSubscriber.prototype.notifyNext = function notifyNext() {
	        if (this.hasValue) {
	            this.destination.next(this.lastValue);
	        }
	    };

	    return SampleTimeSubscriber;
	})(_Subscriber3['default']);

	function dispatchNotification(state) {
	    var subscriber = state.subscriber;
	    var delay = state.delay;

	    subscriber.notifyNext();
	    this.schedule(state, delay);
	}
	//# sourceMappingURL=sampleTime.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=sampleTime.js.map

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	exports['default'] = scan;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	function scan(project, acc) {
	    return this.lift(new ScanOperator(project, acc));
	}

	var ScanOperator = (function () {
	    function ScanOperator(project, acc) {
	        _classCallCheck(this, ScanOperator);

	        this.acc = acc;
	        this.project = project;
	    }

	    ScanOperator.prototype.call = function call(subscriber) {
	        return new ScanSubscriber(subscriber, this.project, this.acc);
	    };

	    return ScanOperator;
	})();

	var ScanSubscriber = (function (_Subscriber) {
	    _inherits(ScanSubscriber, _Subscriber);

	    function ScanSubscriber(destination, project, acc) {
	        _classCallCheck(this, ScanSubscriber);

	        _Subscriber.call(this, destination);
	        this.accumulatorSet = false;
	        this.acc = acc;
	        this.project = project;
	        this.accumulatorSet = typeof acc !== 'undefined';
	    }

	    //# sourceMappingURL=scan.js.map

	    ScanSubscriber.prototype._next = function _next(x) {
	        if (!this.accumulatorSet) {
	            this.acc = x;
	            this.destination.next(x);
	        } else {
	            var result = _utilTryCatch2['default'](this.project).call(this, this.acc, x);
	            if (result === _utilErrorObject.errorObject) {
	                this.destination.error(_utilErrorObject.errorObject.e);
	            } else {
	                this.acc = result;
	                this.destination.next(this.acc);
	            }
	        }
	    };

	    _createClass(ScanSubscriber, [{
	        key: 'acc',
	        get: function get() {
	            return this._acc;
	        },
	        set: function set(value) {
	            this.accumulatorSet = true;
	            this._acc = value;
	        }
	    }]);

	    return ScanSubscriber;
	})(_Subscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=scan.js.map

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = share;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _publish = __webpack_require__(153);

	var _publish2 = _interopRequireDefault(_publish);

	function share() {
	    return _publish2['default'].call(this).refCount();
	}

	;
	//# sourceMappingURL=share.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=share.js.map

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = shareBehavior;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _publishBehavior = __webpack_require__(154);

	var _publishBehavior2 = _interopRequireDefault(_publishBehavior);

	function shareBehavior(value) {
	    return _publishBehavior2['default'].call(this, value).refCount();
	}

	//# sourceMappingURL=shareBehavior.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=shareBehavior.js.map

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = shareReplay;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _publishReplay = __webpack_require__(156);

	var _publishReplay2 = _interopRequireDefault(_publishReplay);

	function shareReplay(bufferSize, windowTime, scheduler) {
	    if (bufferSize === undefined) bufferSize = Number.POSITIVE_INFINITY;
	    if (windowTime === undefined) windowTime = Number.POSITIVE_INFINITY;

	    return _publishReplay2['default'].call(this, bufferSize, windowTime, scheduler).refCount();
	}

	//# sourceMappingURL=shareReplay.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=shareReplay.js.map

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = single;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	var _utilBindCallback = __webpack_require__(117);

	var _utilBindCallback2 = _interopRequireDefault(_utilBindCallback);

	var _utilEmptyError = __webpack_require__(131);

	var _utilEmptyError2 = _interopRequireDefault(_utilEmptyError);

	function single(predicate, thisArg) {
	    return this.lift(new SingleOperator(predicate, thisArg, this));
	}

	var SingleOperator = (function () {
	    function SingleOperator(predicate, thisArg, source) {
	        _classCallCheck(this, SingleOperator);

	        this.predicate = predicate;
	        this.thisArg = thisArg;
	        this.source = source;
	    }

	    SingleOperator.prototype.call = function call(subscriber) {
	        return new SingleSubscriber(subscriber, this.predicate, this.thisArg, this.source);
	    };

	    return SingleOperator;
	})();

	var SingleSubscriber = (function (_Subscriber) {
	    _inherits(SingleSubscriber, _Subscriber);

	    function SingleSubscriber(destination, predicate, thisArg, source) {
	        _classCallCheck(this, SingleSubscriber);

	        _Subscriber.call(this, destination);
	        this.thisArg = thisArg;
	        this.source = source;
	        this.seenValue = false;
	        this.index = 0;
	        if (typeof predicate === 'function') {
	            this.predicate = _utilBindCallback2['default'](predicate, thisArg, 3);
	        }
	    }

	    //# sourceMappingURL=single.js.map

	    SingleSubscriber.prototype.applySingleValue = function applySingleValue(value) {
	        if (this.seenValue) {
	            this.destination.error('Sequence contains more than one element');
	        } else {
	            this.seenValue = true;
	            this.singleValue = value;
	        }
	    };

	    SingleSubscriber.prototype._next = function _next(value) {
	        var predicate = this.predicate;
	        var currentIndex = this.index++;
	        if (predicate) {
	            var result = _utilTryCatch2['default'](predicate)(value, currentIndex, this.source);
	            if (result === _utilErrorObject.errorObject) {
	                this.destination.error(result.e);
	            } else if (result) {
	                this.applySingleValue(value);
	            }
	        } else {
	            this.applySingleValue(value);
	        }
	    };

	    SingleSubscriber.prototype._complete = function _complete() {
	        var destination = this.destination;
	        if (this.index > 0) {
	            destination.next(this.seenValue ? this.singleValue : undefined);
	            destination.complete();
	        } else {
	            destination.error(new _utilEmptyError2['default']());
	        }
	    };

	    return SingleSubscriber;
	})(_Subscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=single.js.map

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = skip;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	function skip(total) {
	    return this.lift(new SkipOperator(total));
	}

	var SkipOperator = (function () {
	    function SkipOperator(total) {
	        _classCallCheck(this, SkipOperator);

	        this.total = total;
	    }

	    SkipOperator.prototype.call = function call(subscriber) {
	        return new SkipSubscriber(subscriber, this.total);
	    };

	    return SkipOperator;
	})();

	var SkipSubscriber = (function (_Subscriber) {
	    _inherits(SkipSubscriber, _Subscriber);

	    function SkipSubscriber(destination, total) {
	        _classCallCheck(this, SkipSubscriber);

	        _Subscriber.call(this, destination);
	        this.total = total;
	        this.count = 0;
	    }

	    //# sourceMappingURL=skip.js.map

	    SkipSubscriber.prototype._next = function _next(x) {
	        if (++this.count > this.total) {
	            this.destination.next(x);
	        }
	    };

	    return SkipSubscriber;
	})(_Subscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=skip.js.map

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = skipUntil;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber3 = __webpack_require__(54);

	var _Subscriber4 = _interopRequireDefault(_Subscriber3);

	function skipUntil(total) {
	    return this.lift(new SkipUntilOperator(total));
	}

	var SkipUntilOperator = (function () {
	    function SkipUntilOperator(notifier) {
	        _classCallCheck(this, SkipUntilOperator);

	        this.notifier = notifier;
	    }

	    SkipUntilOperator.prototype.call = function call(subscriber) {
	        return new SkipUntilSubscriber(subscriber, this.notifier);
	    };

	    return SkipUntilOperator;
	})();

	var SkipUntilSubscriber = (function (_Subscriber) {
	    _inherits(SkipUntilSubscriber, _Subscriber);

	    function SkipUntilSubscriber(destination, notifier) {
	        _classCallCheck(this, SkipUntilSubscriber);

	        _Subscriber.call(this, destination);
	        this.notifier = notifier;
	        this.notificationSubscriber = null;
	        this.notificationSubscriber = new NotificationSubscriber(this);
	        this.add(this.notifier.subscribe(this.notificationSubscriber));
	    }

	    SkipUntilSubscriber.prototype._next = function _next(value) {
	        if (this.notificationSubscriber.hasValue) {
	            this.destination.next(value);
	        }
	    };

	    SkipUntilSubscriber.prototype._complete = function _complete() {
	        if (this.notificationSubscriber.hasCompleted) {
	            this.destination.complete();
	        }
	        this.notificationSubscriber.unsubscribe();
	    };

	    return SkipUntilSubscriber;
	})(_Subscriber4['default']);

	var NotificationSubscriber = (function (_Subscriber2) {
	    _inherits(NotificationSubscriber, _Subscriber2);

	    function NotificationSubscriber(parent) {
	        _classCallCheck(this, NotificationSubscriber);

	        _Subscriber2.call(this, null);
	        this.parent = parent;
	        this.hasValue = false;
	        this.hasCompleted = false;
	    }

	    //# sourceMappingURL=skipUntil.js.map

	    NotificationSubscriber.prototype._next = function _next(unused) {
	        this.hasValue = true;
	    };

	    NotificationSubscriber.prototype._error = function _error(err) {
	        this.parent.error(err);
	        this.hasValue = true;
	    };

	    NotificationSubscriber.prototype._complete = function _complete() {
	        this.hasCompleted = true;
	    };

	    return NotificationSubscriber;
	})(_Subscriber4['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=skipUntil.js.map

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = startWith;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _observablesArrayObservable = __webpack_require__(63);

	var _observablesArrayObservable2 = _interopRequireDefault(_observablesArrayObservable);

	var _observablesScalarObservable = __webpack_require__(64);

	var _observablesScalarObservable2 = _interopRequireDefault(_observablesScalarObservable);

	var _observablesEmptyObservable = __webpack_require__(68);

	var _observablesEmptyObservable2 = _interopRequireDefault(_observablesEmptyObservable);

	var _concatStatic = __webpack_require__(74);

	var _concatStatic2 = _interopRequireDefault(_concatStatic);

	function startWith() {
	    for (var _len = arguments.length, array = Array(_len), _key = 0; _key < _len; _key++) {
	        array[_key] = arguments[_key];
	    }

	    var scheduler = array[array.length - 1];
	    if (scheduler && typeof scheduler.schedule === 'function') {
	        array.pop();
	    } else {
	        scheduler = void 0;
	    }
	    var len = array.length;
	    if (len === 1) {
	        return _concatStatic2['default'](new _observablesScalarObservable2['default'](array[0], scheduler), this);
	    } else if (len > 1) {
	        return _concatStatic2['default'](new _observablesArrayObservable2['default'](array, scheduler), this);
	    } else {
	        return _concatStatic2['default'](new _observablesEmptyObservable2['default'](scheduler), this);
	    }
	}

	//# sourceMappingURL=startWith.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=startWith.js.map

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = subscribeOn;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _observablesSubscribeOnObservable = __webpack_require__(174);

	var _observablesSubscribeOnObservable2 = _interopRequireDefault(_observablesSubscribeOnObservable);

	function subscribeOn(scheduler) {
	    var delay = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

	    return new _observablesSubscribeOnObservable2['default'](this, delay, scheduler);
	}

	//# sourceMappingURL=subscribeOn.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=subscribeOn.js.map

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _Observable2 = __webpack_require__(53);

	var _Observable3 = _interopRequireDefault(_Observable2);

	var _schedulersNextTick = __webpack_require__(90);

	var _schedulersNextTick2 = _interopRequireDefault(_schedulersNextTick);

	var SubscribeOnObservable = (function (_Observable) {
	    _inherits(SubscribeOnObservable, _Observable);

	    function SubscribeOnObservable(source) {
	        var delay = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
	        var scheduler = arguments.length <= 2 || arguments[2] === undefined ? _schedulersNextTick2['default'] : arguments[2];

	        _classCallCheck(this, SubscribeOnObservable);

	        _Observable.call(this);
	        this.source = source;
	        this.delayTime = delay;
	        this.scheduler = scheduler;
	    }

	    //# sourceMappingURL=SubscribeOnObservable.js.map

	    SubscribeOnObservable.create = function create(source) {
	        var delay = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
	        var scheduler = arguments.length <= 2 || arguments[2] === undefined ? _schedulersNextTick2['default'] : arguments[2];

	        return new SubscribeOnObservable(source, delay, scheduler);
	    };

	    SubscribeOnObservable.dispatch = function dispatch(_ref) {
	        var source = _ref.source;
	        var subscriber = _ref.subscriber;

	        return source.subscribe(subscriber);
	    };

	    SubscribeOnObservable.prototype._subscribe = function _subscribe(subscriber) {
	        var delay = this.delayTime;
	        var source = this.source;
	        var scheduler = this.scheduler;
	        subscriber.add(scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
	            source: source, subscriber: subscriber
	        }));
	    };

	    return SubscribeOnObservable;
	})(_Observable3['default']);

	exports['default'] = SubscribeOnObservable;
	module.exports = exports['default'];
	//# sourceMappingURL=SubscribeOnObservable.js.map

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = _switch;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _OuterSubscriber2 = __webpack_require__(70);

	var _OuterSubscriber3 = _interopRequireDefault(_OuterSubscriber2);

	var _utilSubscribeToResult = __webpack_require__(71);

	var _utilSubscribeToResult2 = _interopRequireDefault(_utilSubscribeToResult);

	function _switch() {
	    return this.lift(new SwitchOperator());
	}

	var SwitchOperator = (function () {
	    function SwitchOperator() {
	        _classCallCheck(this, SwitchOperator);
	    }

	    SwitchOperator.prototype.call = function call(subscriber) {
	        return new SwitchSubscriber(subscriber);
	    };

	    return SwitchOperator;
	})();

	var SwitchSubscriber = (function (_OuterSubscriber) {
	    _inherits(SwitchSubscriber, _OuterSubscriber);

	    function SwitchSubscriber(destination) {
	        _classCallCheck(this, SwitchSubscriber);

	        _OuterSubscriber.call(this, destination);
	        this.active = 0;
	        this.hasCompleted = false;
	    }

	    //# sourceMappingURL=switch.js.map

	    SwitchSubscriber.prototype._next = function _next(value) {
	        this.unsubscribeInner();
	        this.active++;
	        this.add(this.innerSubscription = _utilSubscribeToResult2['default'](this, value));
	    };

	    SwitchSubscriber.prototype._complete = function _complete() {
	        this.hasCompleted = true;
	        if (this.active === 0) {
	            this.destination.complete();
	        }
	    };

	    SwitchSubscriber.prototype.unsubscribeInner = function unsubscribeInner() {
	        this.active = this.active > 0 ? this.active - 1 : 0;
	        var innerSubscription = this.innerSubscription;
	        if (innerSubscription) {
	            innerSubscription.unsubscribe();
	            this.remove(innerSubscription);
	        }
	    };

	    SwitchSubscriber.prototype.notifyNext = function notifyNext(outerValue, innerValue) {
	        this.destination.next(innerValue);
	    };

	    SwitchSubscriber.prototype.notifyError = function notifyError(err) {
	        this.destination.error(err);
	    };

	    SwitchSubscriber.prototype.notifyComplete = function notifyComplete() {
	        this.unsubscribeInner();
	        if (this.hasCompleted && this.active === 0) {
	            this.destination.complete();
	        }
	    };

	    return SwitchSubscriber;
	})(_OuterSubscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=switch.js.map

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = switchMap;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	var _OuterSubscriber2 = __webpack_require__(70);

	var _OuterSubscriber3 = _interopRequireDefault(_OuterSubscriber2);

	var _utilSubscribeToResult = __webpack_require__(71);

	var _utilSubscribeToResult2 = _interopRequireDefault(_utilSubscribeToResult);

	function switchMap(project, resultSelector) {
	    return this.lift(new SwitchMapOperator(project, resultSelector));
	}

	var SwitchMapOperator = (function () {
	    function SwitchMapOperator(project, resultSelector) {
	        _classCallCheck(this, SwitchMapOperator);

	        this.project = project;
	        this.resultSelector = resultSelector;
	    }

	    SwitchMapOperator.prototype.call = function call(subscriber) {
	        return new SwitchMapSubscriber(subscriber, this.project, this.resultSelector);
	    };

	    return SwitchMapOperator;
	})();

	var SwitchMapSubscriber = (function (_OuterSubscriber) {
	    _inherits(SwitchMapSubscriber, _OuterSubscriber);

	    function SwitchMapSubscriber(destination, project, resultSelector) {
	        _classCallCheck(this, SwitchMapSubscriber);

	        _OuterSubscriber.call(this, destination);
	        this.project = project;
	        this.resultSelector = resultSelector;
	        this.hasCompleted = false;
	        this.index = 0;
	    }

	    //# sourceMappingURL=switchMap.js.map

	    SwitchMapSubscriber.prototype._next = function _next(value) {
	        var index = this.index++;
	        var destination = this.destination;
	        var result = _utilTryCatch2['default'](this.project)(value, index);
	        if (result === _utilErrorObject.errorObject) {
	            destination.error(result.e);
	        } else {
	            var innerSubscription = this.innerSubscription;
	            if (innerSubscription) {
	                innerSubscription.unsubscribe();
	            }
	            this.add(this.innerSubscription = _utilSubscribeToResult2['default'](this, result, value, index));
	        }
	    };

	    SwitchMapSubscriber.prototype._complete = function _complete() {
	        var innerSubscription = this.innerSubscription;
	        this.hasCompleted = true;
	        if (!innerSubscription || innerSubscription.isUnsubscribed) {
	            this.destination.complete();
	        }
	    };

	    SwitchMapSubscriber.prototype.notifyComplete = function notifyComplete(innerSub) {
	        this.remove(innerSub);
	        var prevSubscription = this.innerSubscription;
	        if (prevSubscription) {
	            prevSubscription.unsubscribe();
	        }
	        this.innerSubscription = null;
	        if (this.hasCompleted) {
	            this.destination.complete();
	        }
	    };

	    SwitchMapSubscriber.prototype.notifyError = function notifyError(err) {
	        this.destination.error(err);
	    };

	    SwitchMapSubscriber.prototype.notifyNext = function notifyNext(outerValue, innerValue, outerIndex, innerIndex) {
	        var resultSelector = this.resultSelector;
	        var destination = this.destination;

	        if (resultSelector) {
	            var result = _utilTryCatch2['default'](resultSelector)(outerValue, innerValue, outerIndex, innerIndex);
	            if (result === _utilErrorObject.errorObject) {
	                destination.error(_utilErrorObject.errorObject.e);
	            } else {
	                destination.next(result);
	            }
	        } else {
	            destination.next(innerValue);
	        }
	    };

	    return SwitchMapSubscriber;
	})(_OuterSubscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=switchMap.js.map

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = switchMapTo;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	var _OuterSubscriber2 = __webpack_require__(70);

	var _OuterSubscriber3 = _interopRequireDefault(_OuterSubscriber2);

	var _utilSubscribeToResult = __webpack_require__(71);

	var _utilSubscribeToResult2 = _interopRequireDefault(_utilSubscribeToResult);

	function switchMapTo(observable, projectResult) {
	    return this.lift(new SwitchMapToOperator(observable, projectResult));
	}

	var SwitchMapToOperator = (function () {
	    function SwitchMapToOperator(observable, resultSelector) {
	        _classCallCheck(this, SwitchMapToOperator);

	        this.observable = observable;
	        this.resultSelector = resultSelector;
	    }

	    SwitchMapToOperator.prototype.call = function call(subscriber) {
	        return new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector);
	    };

	    return SwitchMapToOperator;
	})();

	var SwitchMapToSubscriber = (function (_OuterSubscriber) {
	    _inherits(SwitchMapToSubscriber, _OuterSubscriber);

	    function SwitchMapToSubscriber(destination, inner, resultSelector) {
	        _classCallCheck(this, SwitchMapToSubscriber);

	        _OuterSubscriber.call(this, destination);
	        this.inner = inner;
	        this.resultSelector = resultSelector;
	        this.hasCompleted = false;
	        this.index = 0;
	    }

	    //# sourceMappingURL=switchMapTo.js.map

	    SwitchMapToSubscriber.prototype._next = function _next(value) {
	        var index = this.index++;
	        var innerSubscription = this.innerSubscription;
	        if (innerSubscription) {
	            innerSubscription.unsubscribe();
	        }
	        this.add(this.innerSubscription = _utilSubscribeToResult2['default'](this, this.inner, value, index));
	    };

	    SwitchMapToSubscriber.prototype._complete = function _complete() {
	        var innerSubscription = this.innerSubscription;
	        this.hasCompleted = true;
	        if (!innerSubscription || innerSubscription.isUnsubscribed) {
	            this.destination.complete();
	        }
	    };

	    SwitchMapToSubscriber.prototype.notifyComplete = function notifyComplete(innerSub) {
	        this.remove(innerSub);
	        var prevSubscription = this.innerSubscription;
	        if (prevSubscription) {
	            prevSubscription.unsubscribe();
	        }
	        this.innerSubscription = null;
	        if (this.hasCompleted) {
	            this.destination.complete();
	        }
	    };

	    SwitchMapToSubscriber.prototype.notifyError = function notifyError(err) {
	        this.destination.error(err);
	    };

	    SwitchMapToSubscriber.prototype.notifyNext = function notifyNext(outerValue, innerValue, outerIndex, innerIndex) {
	        var resultSelector = this.resultSelector;
	        var destination = this.destination;

	        if (resultSelector) {
	            var result = _utilTryCatch2['default'](resultSelector)(outerValue, innerValue, outerIndex, innerIndex);
	            if (result === _utilErrorObject.errorObject) {
	                destination.error(_utilErrorObject.errorObject.e);
	            } else {
	                destination.next(result);
	            }
	        } else {
	            destination.next(innerValue);
	        }
	    };

	    return SwitchMapToSubscriber;
	})(_OuterSubscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=switchMapTo.js.map

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = take;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	function take(total) {
	    return this.lift(new TakeOperator(total));
	}

	var TakeOperator = (function () {
	    function TakeOperator(total) {
	        _classCallCheck(this, TakeOperator);

	        this.total = total;
	    }

	    TakeOperator.prototype.call = function call(subscriber) {
	        return new TakeSubscriber(subscriber, this.total);
	    };

	    return TakeOperator;
	})();

	var TakeSubscriber = (function (_Subscriber) {
	    _inherits(TakeSubscriber, _Subscriber);

	    function TakeSubscriber(destination, total) {
	        _classCallCheck(this, TakeSubscriber);

	        _Subscriber.call(this, destination);
	        this.total = total;
	        this.count = 0;
	    }

	    //# sourceMappingURL=take.js.map

	    TakeSubscriber.prototype._next = function _next(value) {
	        var total = this.total;
	        if (++this.count <= total) {
	            this.destination.next(value);
	            if (this.count === total) {
	                this.destination.complete();
	            }
	        }
	    };

	    return TakeSubscriber;
	})(_Subscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=take.js.map

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = takeUntil;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber3 = __webpack_require__(54);

	var _Subscriber4 = _interopRequireDefault(_Subscriber3);

	function takeUntil(notifier) {
	    return this.lift(new TakeUntilOperator(notifier));
	}

	var TakeUntilOperator = (function () {
	    function TakeUntilOperator(notifier) {
	        _classCallCheck(this, TakeUntilOperator);

	        this.notifier = notifier;
	    }

	    TakeUntilOperator.prototype.call = function call(subscriber) {
	        return new TakeUntilSubscriber(subscriber, this.notifier);
	    };

	    return TakeUntilOperator;
	})();

	var TakeUntilSubscriber = (function (_Subscriber) {
	    _inherits(TakeUntilSubscriber, _Subscriber);

	    function TakeUntilSubscriber(destination, notifier) {
	        _classCallCheck(this, TakeUntilSubscriber);

	        _Subscriber.call(this, destination);
	        this.notifier = notifier;
	        this.notificationSubscriber = null;
	        this.notificationSubscriber = new TakeUntilInnerSubscriber(destination);
	        this.add(notifier.subscribe(this.notificationSubscriber));
	    }

	    TakeUntilSubscriber.prototype._complete = function _complete() {
	        this.destination.complete();
	        this.notificationSubscriber.unsubscribe();
	    };

	    return TakeUntilSubscriber;
	})(_Subscriber4['default']);

	var TakeUntilInnerSubscriber = (function (_Subscriber2) {
	    _inherits(TakeUntilInnerSubscriber, _Subscriber2);

	    function TakeUntilInnerSubscriber(destination) {
	        _classCallCheck(this, TakeUntilInnerSubscriber);

	        _Subscriber2.call(this, null);
	        this.destination = destination;
	    }

	    //# sourceMappingURL=takeUntil.js.map

	    TakeUntilInnerSubscriber.prototype._next = function _next() {
	        this.destination.complete();
	    };

	    TakeUntilInnerSubscriber.prototype._error = function _error(e) {
	        this.destination.error(e);
	    };

	    TakeUntilInnerSubscriber.prototype._complete = function _complete() {};

	    return TakeUntilInnerSubscriber;
	})(_Subscriber4['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=takeUntil.js.map

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = throttle;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	var _schedulersNextTick = __webpack_require__(90);

	var _schedulersNextTick2 = _interopRequireDefault(_schedulersNextTick);

	function throttle(delay) {
	    var scheduler = arguments.length <= 1 || arguments[1] === undefined ? _schedulersNextTick2['default'] : arguments[1];

	    return this.lift(new ThrottleOperator(delay, scheduler));
	}

	var ThrottleOperator = (function () {
	    function ThrottleOperator(delay, scheduler) {
	        _classCallCheck(this, ThrottleOperator);

	        this.delay = delay;
	        this.scheduler = scheduler;
	    }

	    ThrottleOperator.prototype.call = function call(subscriber) {
	        return new ThrottleSubscriber(subscriber, this.delay, this.scheduler);
	    };

	    return ThrottleOperator;
	})();

	var ThrottleSubscriber = (function (_Subscriber) {
	    _inherits(ThrottleSubscriber, _Subscriber);

	    function ThrottleSubscriber(destination, delay, scheduler) {
	        _classCallCheck(this, ThrottleSubscriber);

	        _Subscriber.call(this, destination);
	        this.delay = delay;
	        this.scheduler = scheduler;
	    }

	    ThrottleSubscriber.prototype._next = function _next(value) {
	        if (!this.throttled) {
	            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.delay, { value: value, subscriber: this }));
	        }
	    };

	    ThrottleSubscriber.prototype.throttledNext = function throttledNext(value) {
	        this.clearThrottle();
	        this.destination.next(value);
	    };

	    ThrottleSubscriber.prototype.clearThrottle = function clearThrottle() {
	        var throttled = this.throttled;
	        if (throttled) {
	            throttled.unsubscribe();
	            this.remove(throttled);
	        }
	    };

	    return ThrottleSubscriber;
	})(_Subscriber3['default']);

	function dispatchNext(_ref) {
	    var value = _ref.value;
	    var subscriber = _ref.subscriber;

	    subscriber.throttledNext(value);
	}
	//# sourceMappingURL=throttle.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=throttle.js.map

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	exports['default'] = timeout;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	var _schedulersImmediate = __webpack_require__(75);

	var _schedulersImmediate2 = _interopRequireDefault(_schedulersImmediate);

	var _utilIsDate = __webpack_require__(123);

	var _utilIsDate2 = _interopRequireDefault(_utilIsDate);

	function timeout(due) {
	    var errorToSend = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
	    var scheduler = arguments.length <= 2 || arguments[2] === undefined ? _schedulersImmediate2['default'] : arguments[2];

	    var absoluteTimeout = _utilIsDate2['default'](due);
	    var waitFor = absoluteTimeout ? +due - scheduler.now() : due;
	    return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, errorToSend, scheduler));
	}

	var TimeoutOperator = (function () {
	    function TimeoutOperator(waitFor, absoluteTimeout, errorToSend, scheduler) {
	        _classCallCheck(this, TimeoutOperator);

	        this.waitFor = waitFor;
	        this.absoluteTimeout = absoluteTimeout;
	        this.errorToSend = errorToSend;
	        this.scheduler = scheduler;
	    }

	    TimeoutOperator.prototype.call = function call(subscriber) {
	        return new TimeoutSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.errorToSend, this.scheduler);
	    };

	    return TimeoutOperator;
	})();

	var TimeoutSubscriber = (function (_Subscriber) {
	    _inherits(TimeoutSubscriber, _Subscriber);

	    function TimeoutSubscriber(destination, absoluteTimeout, waitFor, errorToSend, scheduler) {
	        _classCallCheck(this, TimeoutSubscriber);

	        _Subscriber.call(this, destination);
	        this.absoluteTimeout = absoluteTimeout;
	        this.waitFor = waitFor;
	        this.errorToSend = errorToSend;
	        this.scheduler = scheduler;
	        this.index = 0;
	        this._previousIndex = 0;
	        this._hasCompleted = false;
	        this.scheduleTimeout();
	    }

	    //# sourceMappingURL=timeout.js.map

	    TimeoutSubscriber.dispatchTimeout = function dispatchTimeout(state) {
	        var source = state.subscriber;
	        var currentIndex = state.index;
	        if (!source.hasCompleted && source.previousIndex === currentIndex) {
	            source.notifyTimeout();
	        }
	    };

	    TimeoutSubscriber.prototype.scheduleTimeout = function scheduleTimeout() {
	        var currentIndex = this.index;
	        this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, { subscriber: this, index: currentIndex });
	        this.index++;
	        this._previousIndex = currentIndex;
	    };

	    TimeoutSubscriber.prototype._next = function _next(value) {
	        this.destination.next(value);
	        if (!this.absoluteTimeout) {
	            this.scheduleTimeout();
	        }
	    };

	    TimeoutSubscriber.prototype._error = function _error(err) {
	        this.destination.error(err);
	        this._hasCompleted = true;
	    };

	    TimeoutSubscriber.prototype._complete = function _complete() {
	        this.destination.complete();
	        this._hasCompleted = true;
	    };

	    TimeoutSubscriber.prototype.notifyTimeout = function notifyTimeout() {
	        this.error(this.errorToSend || new Error('timeout'));
	    };

	    _createClass(TimeoutSubscriber, [{
	        key: 'previousIndex',
	        get: function get() {
	            return this._previousIndex;
	        }
	    }, {
	        key: 'hasCompleted',
	        get: function get() {
	            return this._hasCompleted;
	        }
	    }]);

	    return TimeoutSubscriber;
	})(_Subscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=timeout.js.map

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	exports['default'] = timeoutWith;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _schedulersImmediate = __webpack_require__(75);

	var _schedulersImmediate2 = _interopRequireDefault(_schedulersImmediate);

	var _utilIsDate = __webpack_require__(123);

	var _utilIsDate2 = _interopRequireDefault(_utilIsDate);

	var _OuterSubscriber2 = __webpack_require__(70);

	var _OuterSubscriber3 = _interopRequireDefault(_OuterSubscriber2);

	var _utilSubscribeToResult = __webpack_require__(71);

	var _utilSubscribeToResult2 = _interopRequireDefault(_utilSubscribeToResult);

	function timeoutWith(due, withObservable) {
	    var scheduler = arguments.length <= 2 || arguments[2] === undefined ? _schedulersImmediate2['default'] : arguments[2];

	    var absoluteTimeout = _utilIsDate2['default'](due);
	    var waitFor = absoluteTimeout ? +due - scheduler.now() : due;
	    return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));
	}

	var TimeoutWithOperator = (function () {
	    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {
	        _classCallCheck(this, TimeoutWithOperator);

	        this.waitFor = waitFor;
	        this.absoluteTimeout = absoluteTimeout;
	        this.withObservable = withObservable;
	        this.scheduler = scheduler;
	    }

	    TimeoutWithOperator.prototype.call = function call(subscriber) {
	        return new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler);
	    };

	    return TimeoutWithOperator;
	})();

	var TimeoutWithSubscriber = (function (_OuterSubscriber) {
	    _inherits(TimeoutWithSubscriber, _OuterSubscriber);

	    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
	        _classCallCheck(this, TimeoutWithSubscriber);

	        _OuterSubscriber.call(this, destination);
	        this.absoluteTimeout = absoluteTimeout;
	        this.waitFor = waitFor;
	        this.withObservable = withObservable;
	        this.scheduler = scheduler;
	        this.timeoutSubscription = undefined;
	        this.timedOut = false;
	        this.index = 0;
	        this._previousIndex = 0;
	        this._hasCompleted = false;
	        this.scheduleTimeout();
	    }

	    //# sourceMappingURL=timeoutWith.js.map

	    TimeoutWithSubscriber.dispatchTimeout = function dispatchTimeout(state) {
	        var source = state.subscriber;
	        var currentIndex = state.index;
	        if (!source.hasCompleted && source.previousIndex === currentIndex) {
	            source.handleTimeout();
	        }
	    };

	    TimeoutWithSubscriber.prototype.scheduleTimeout = function scheduleTimeout() {
	        var currentIndex = this.index;
	        var timeoutState = { subscriber: this, index: currentIndex };
	        this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, timeoutState);
	        this.index++;
	        this._previousIndex = currentIndex;
	    };

	    TimeoutWithSubscriber.prototype._next = function _next(value) {
	        if (!this.timedOut) {
	            this.destination.next(value);
	            if (!this.absoluteTimeout) {
	                this.scheduleTimeout();
	            }
	        }
	    };

	    TimeoutWithSubscriber.prototype._error = function _error(err) {
	        if (!this.timedOut) {
	            this.destination.error(err);
	            this._hasCompleted = true;
	        }
	    };

	    TimeoutWithSubscriber.prototype._complete = function _complete() {
	        if (!this.timedOut) {
	            this.destination.complete();
	            this._hasCompleted = true;
	        }
	    };

	    TimeoutWithSubscriber.prototype.handleTimeout = function handleTimeout() {
	        var withObservable = this.withObservable;
	        this.timedOut = true;
	        this.add(this.timeoutSubscription = _utilSubscribeToResult2['default'](this, withObservable));
	    };

	    _createClass(TimeoutWithSubscriber, [{
	        key: 'previousIndex',
	        get: function get() {
	            return this._previousIndex;
	        }
	    }, {
	        key: 'hasCompleted',
	        get: function get() {
	            return this._hasCompleted;
	        }
	    }]);

	    return TimeoutWithSubscriber;
	})(_OuterSubscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=timeoutWith.js.map

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = toArray;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	function toArray() {
	    return this.lift(new ToArrayOperator());
	}

	var ToArrayOperator = (function () {
	    function ToArrayOperator() {
	        _classCallCheck(this, ToArrayOperator);
	    }

	    ToArrayOperator.prototype.call = function call(subscriber) {
	        return new ToArraySubscriber(subscriber);
	    };

	    return ToArrayOperator;
	})();

	var ToArraySubscriber = (function (_Subscriber) {
	    _inherits(ToArraySubscriber, _Subscriber);

	    function ToArraySubscriber(destination) {
	        _classCallCheck(this, ToArraySubscriber);

	        _Subscriber.call(this, destination);
	        this.array = [];
	    }

	    //# sourceMappingURL=toArray.js.map

	    ToArraySubscriber.prototype._next = function _next(x) {
	        this.array.push(x);
	    };

	    ToArraySubscriber.prototype._complete = function _complete() {
	        this.destination.next(this.array);
	        this.destination.complete();
	    };

	    return ToArraySubscriber;
	})(_Subscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=toArray.js.map

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = toPromise;

	var _utilRoot = __webpack_require__(59);

	function toPromise(PromiseCtor) {
	    var _this = this;

	    if (!PromiseCtor) {
	        if (_utilRoot.root.Rx && _utilRoot.root.Rx.config && _utilRoot.root.Rx.config.Promise) {
	            PromiseCtor = _utilRoot.root.Rx.config.Promise;
	        } else if (_utilRoot.root.Promise) {
	            PromiseCtor = _utilRoot.root.Promise;
	        }
	    }
	    if (!PromiseCtor) {
	        throw new Error('no Promise impl found');
	    }
	    return new PromiseCtor(function (resolve, reject) {
	        var value = undefined;
	        _this.subscribe(function (x) {
	            return value = x;
	        }, function (err) {
	            return reject(err);
	        }, function () {
	            return resolve(value);
	        });
	    });
	}

	//# sourceMappingURL=toPromise.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=toPromise.js.map

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = window;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber3 = __webpack_require__(54);

	var _Subscriber4 = _interopRequireDefault(_Subscriber3);

	var _Subject = __webpack_require__(133);

	var _Subject2 = _interopRequireDefault(_Subject);

	function window(closingNotifier) {
	    return this.lift(new WindowOperator(closingNotifier));
	}

	var WindowOperator = (function () {
	    function WindowOperator(closingNotifier) {
	        _classCallCheck(this, WindowOperator);

	        this.closingNotifier = closingNotifier;
	    }

	    WindowOperator.prototype.call = function call(subscriber) {
	        return new WindowSubscriber(subscriber, this.closingNotifier);
	    };

	    return WindowOperator;
	})();

	var WindowSubscriber = (function (_Subscriber) {
	    _inherits(WindowSubscriber, _Subscriber);

	    function WindowSubscriber(destination, closingNotifier) {
	        _classCallCheck(this, WindowSubscriber);

	        _Subscriber.call(this, destination);
	        this.closingNotifier = closingNotifier;
	        this.window = new _Subject2['default']();
	        this.add(closingNotifier._subscribe(new WindowClosingNotifierSubscriber(this)));
	        this.openWindow();
	    }

	    WindowSubscriber.prototype._next = function _next(value) {
	        this.window.next(value);
	    };

	    WindowSubscriber.prototype._error = function _error(err) {
	        this.window.error(err);
	        this.destination.error(err);
	    };

	    WindowSubscriber.prototype._complete = function _complete() {
	        this.window.complete();
	        this.destination.complete();
	    };

	    WindowSubscriber.prototype.openWindow = function openWindow() {
	        var prevWindow = this.window;
	        if (prevWindow) {
	            prevWindow.complete();
	        }
	        this.destination.next(this.window = new _Subject2['default']());
	    };

	    return WindowSubscriber;
	})(_Subscriber4['default']);

	var WindowClosingNotifierSubscriber = (function (_Subscriber2) {
	    _inherits(WindowClosingNotifierSubscriber, _Subscriber2);

	    function WindowClosingNotifierSubscriber(parent) {
	        _classCallCheck(this, WindowClosingNotifierSubscriber);

	        _Subscriber2.call(this, null);
	        this.parent = parent;
	    }

	    //# sourceMappingURL=window.js.map

	    WindowClosingNotifierSubscriber.prototype._next = function _next() {
	        this.parent.openWindow();
	    };

	    WindowClosingNotifierSubscriber.prototype._error = function _error(err) {
	        this.parent._error(err);
	    };

	    WindowClosingNotifierSubscriber.prototype._complete = function _complete() {
	        this.parent._complete();
	    };

	    return WindowClosingNotifierSubscriber;
	})(_Subscriber4['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=window.js.map

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = windowCount;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	var _Subject = __webpack_require__(133);

	var _Subject2 = _interopRequireDefault(_Subject);

	function windowCount(windowSize) {
	    var startWindowEvery = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

	    return this.lift(new WindowCountOperator(windowSize, startWindowEvery));
	}

	var WindowCountOperator = (function () {
	    function WindowCountOperator(windowSize, startWindowEvery) {
	        _classCallCheck(this, WindowCountOperator);

	        this.windowSize = windowSize;
	        this.startWindowEvery = startWindowEvery;
	    }

	    WindowCountOperator.prototype.call = function call(subscriber) {
	        return new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery);
	    };

	    return WindowCountOperator;
	})();

	var WindowCountSubscriber = (function (_Subscriber) {
	    _inherits(WindowCountSubscriber, _Subscriber);

	    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
	        _classCallCheck(this, WindowCountSubscriber);

	        _Subscriber.call(this, destination);
	        this.windowSize = windowSize;
	        this.startWindowEvery = startWindowEvery;
	        this.windows = [new _Subject2['default']()];
	        this.count = 0;
	        destination.next(this.windows[0]);
	    }

	    //# sourceMappingURL=windowCount.js.map

	    WindowCountSubscriber.prototype._next = function _next(value) {
	        var startWindowEvery = this.startWindowEvery > 0 ? this.startWindowEvery : this.windowSize;
	        var windowSize = this.windowSize;
	        var windows = this.windows;
	        var len = windows.length;
	        for (var i = 0; i < len; i++) {
	            windows[i].next(value);
	        }
	        var c = this.count - windowSize + 1;
	        if (c >= 0 && c % startWindowEvery === 0) {
	            windows.shift().complete();
	        }
	        if (++this.count % startWindowEvery === 0) {
	            var _window = new _Subject2['default']();
	            windows.push(_window);
	            this.destination.next(_window);
	        }
	    };

	    WindowCountSubscriber.prototype._error = function _error(err) {
	        var windows = this.windows;
	        while (windows.length > 0) {
	            windows.shift().error(err);
	        }
	        this.destination.error(err);
	    };

	    WindowCountSubscriber.prototype._complete = function _complete() {
	        var windows = this.windows;
	        while (windows.length > 0) {
	            windows.shift().complete();
	        }
	        this.destination.complete();
	    };

	    return WindowCountSubscriber;
	})(_Subscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=windowCount.js.map

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = windowTime;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber2 = __webpack_require__(54);

	var _Subscriber3 = _interopRequireDefault(_Subscriber2);

	var _Subject = __webpack_require__(133);

	var _Subject2 = _interopRequireDefault(_Subject);

	var _schedulersNextTick = __webpack_require__(90);

	var _schedulersNextTick2 = _interopRequireDefault(_schedulersNextTick);

	function windowTime(windowTimeSpan) {
	    var windowCreationInterval = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
	    var scheduler = arguments.length <= 2 || arguments[2] === undefined ? _schedulersNextTick2['default'] : arguments[2];

	    return this.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, scheduler));
	}

	var WindowTimeOperator = (function () {
	    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, scheduler) {
	        _classCallCheck(this, WindowTimeOperator);

	        this.windowTimeSpan = windowTimeSpan;
	        this.windowCreationInterval = windowCreationInterval;
	        this.scheduler = scheduler;
	    }

	    WindowTimeOperator.prototype.call = function call(subscriber) {
	        return new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.scheduler);
	    };

	    return WindowTimeOperator;
	})();

	var WindowTimeSubscriber = (function (_Subscriber) {
	    _inherits(WindowTimeSubscriber, _Subscriber);

	    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, scheduler) {
	        _classCallCheck(this, WindowTimeSubscriber);

	        _Subscriber.call(this, destination);
	        this.windowTimeSpan = windowTimeSpan;
	        this.windowCreationInterval = windowCreationInterval;
	        this.scheduler = scheduler;
	        this.windows = [];
	        if (windowCreationInterval !== null && windowCreationInterval >= 0) {
	            var _window = this.openWindow();
	            var closeState = { subscriber: this, window: _window, context: null };
	            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: this, scheduler: scheduler };
	            this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
	            this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
	        } else {
	            var _window2 = this.openWindow();
	            var timeSpanOnlyState = { subscriber: this, window: _window2, windowTimeSpan: windowTimeSpan };
	            this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
	        }
	    }

	    WindowTimeSubscriber.prototype._next = function _next(value) {
	        var windows = this.windows;
	        var len = windows.length;
	        for (var i = 0; i < len; i++) {
	            windows[i].next(value);
	        }
	    };

	    WindowTimeSubscriber.prototype._error = function _error(err) {
	        var windows = this.windows;
	        while (windows.length > 0) {
	            windows.shift().error(err);
	        }
	        this.destination.error(err);
	    };

	    WindowTimeSubscriber.prototype._complete = function _complete() {
	        var windows = this.windows;
	        while (windows.length > 0) {
	            windows.shift().complete();
	        }
	        this.destination.complete();
	    };

	    WindowTimeSubscriber.prototype.openWindow = function openWindow() {
	        var window = new _Subject2['default']();
	        this.windows.push(window);
	        this.destination.next(window);
	        return window;
	    };

	    WindowTimeSubscriber.prototype.closeWindow = function closeWindow(window) {
	        window.complete();
	        var windows = this.windows;
	        windows.splice(windows.indexOf(window), 1);
	    };

	    return WindowTimeSubscriber;
	})(_Subscriber3['default']);

	function dispatchWindowTimeSpanOnly(state) {
	    var subscriber = state.subscriber;
	    var windowTimeSpan = state.windowTimeSpan;
	    var window = state.window;

	    if (window) {
	        window.complete();
	    }
	    state.window = subscriber.openWindow();
	    this.schedule(state, windowTimeSpan);
	}
	function dispatchWindowCreation(state) {
	    var windowTimeSpan = state.windowTimeSpan;
	    var subscriber = state.subscriber;
	    var scheduler = state.scheduler;
	    var windowCreationInterval = state.windowCreationInterval;

	    var window = subscriber.openWindow();
	    var action = this;
	    var context = { action: action, subscription: null };
	    var timeSpanState = { subscriber: subscriber, window: window, context: context };
	    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
	    action.add(context.subscription);
	    action.schedule(state, windowCreationInterval);
	}
	function dispatchWindowClose(_ref) {
	    var subscriber = _ref.subscriber;
	    var window = _ref.window;
	    var context = _ref.context;

	    if (context && context.action && context.subscription) {
	        context.action.remove(context.subscription);
	    }
	    subscriber.closeWindow(window);
	}
	//# sourceMappingURL=windowTime.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=windowTime.js.map

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = windowToggle;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber4 = __webpack_require__(54);

	var _Subscriber5 = _interopRequireDefault(_Subscriber4);

	var _Subject = __webpack_require__(133);

	var _Subject2 = _interopRequireDefault(_Subject);

	var _Subscription = __webpack_require__(58);

	var _Subscription2 = _interopRequireDefault(_Subscription);

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	function windowToggle(openings, closingSelector) {
	    return this.lift(new WindowToggleOperator(openings, closingSelector));
	}

	var WindowToggleOperator = (function () {
	    function WindowToggleOperator(openings, closingSelector) {
	        _classCallCheck(this, WindowToggleOperator);

	        this.openings = openings;
	        this.closingSelector = closingSelector;
	    }

	    WindowToggleOperator.prototype.call = function call(subscriber) {
	        return new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector);
	    };

	    return WindowToggleOperator;
	})();

	var WindowToggleSubscriber = (function (_Subscriber) {
	    _inherits(WindowToggleSubscriber, _Subscriber);

	    function WindowToggleSubscriber(destination, openings, closingSelector) {
	        _classCallCheck(this, WindowToggleSubscriber);

	        _Subscriber.call(this, destination);
	        this.openings = openings;
	        this.closingSelector = closingSelector;
	        this.contexts = [];
	        this.add(this.openings._subscribe(new WindowToggleOpeningsSubscriber(this)));
	    }

	    WindowToggleSubscriber.prototype._next = function _next(value) {
	        var contexts = this.contexts;
	        var len = contexts.length;
	        for (var i = 0; i < len; i++) {
	            contexts[i].window.next(value);
	        }
	    };

	    WindowToggleSubscriber.prototype._error = function _error(err) {
	        var contexts = this.contexts;
	        while (contexts.length > 0) {
	            contexts.shift().window.error(err);
	        }
	        this.destination.error(err);
	    };

	    WindowToggleSubscriber.prototype._complete = function _complete() {
	        var contexts = this.contexts;
	        while (contexts.length > 0) {
	            var context = contexts.shift();
	            context.window.complete();
	            context.subscription.unsubscribe();
	        }
	        this.destination.complete();
	    };

	    WindowToggleSubscriber.prototype.openWindow = function openWindow(value) {
	        var closingSelector = this.closingSelector;
	        var closingNotifier = _utilTryCatch2['default'](closingSelector)(value);
	        if (closingNotifier === _utilErrorObject.errorObject) {
	            this.error(closingNotifier.e);
	        } else {
	            var context = {
	                window: new _Subject2['default'](),
	                subscription: new _Subscription2['default']()
	            };
	            this.contexts.push(context);
	            this.destination.next(context.window);
	            var subscriber = new WindowClosingNotifierSubscriber(this, context);
	            var subscription = closingNotifier._subscribe(subscriber);
	            this.add(context.subscription.add(subscription));
	        }
	    };

	    WindowToggleSubscriber.prototype.closeWindow = function closeWindow(context) {
	        var window = context.window;
	        var subscription = context.subscription;

	        var contexts = this.contexts;
	        contexts.splice(contexts.indexOf(context), 1);
	        window.complete();
	        this.remove(subscription);
	        subscription.unsubscribe();
	    };

	    return WindowToggleSubscriber;
	})(_Subscriber5['default']);

	var WindowClosingNotifierSubscriber = (function (_Subscriber2) {
	    _inherits(WindowClosingNotifierSubscriber, _Subscriber2);

	    function WindowClosingNotifierSubscriber(parent, windowContext) {
	        _classCallCheck(this, WindowClosingNotifierSubscriber);

	        _Subscriber2.call(this, null);
	        this.parent = parent;
	        this.windowContext = windowContext;
	    }

	    WindowClosingNotifierSubscriber.prototype._next = function _next() {
	        this.parent.closeWindow(this.windowContext);
	    };

	    WindowClosingNotifierSubscriber.prototype._error = function _error(err) {
	        this.parent.error(err);
	    };

	    WindowClosingNotifierSubscriber.prototype._complete = function _complete() {
	        this.parent.closeWindow(this.windowContext);
	    };

	    return WindowClosingNotifierSubscriber;
	})(_Subscriber5['default']);

	var WindowToggleOpeningsSubscriber = (function (_Subscriber3) {
	    _inherits(WindowToggleOpeningsSubscriber, _Subscriber3);

	    function WindowToggleOpeningsSubscriber(parent) {
	        _classCallCheck(this, WindowToggleOpeningsSubscriber);

	        _Subscriber3.call(this);
	        this.parent = parent;
	    }

	    //# sourceMappingURL=windowToggle.js.map

	    WindowToggleOpeningsSubscriber.prototype._next = function _next(value) {
	        this.parent.openWindow(value);
	    };

	    WindowToggleOpeningsSubscriber.prototype._error = function _error(err) {
	        this.parent.error(err);
	    };

	    WindowToggleOpeningsSubscriber.prototype._complete = function _complete() {
	        // noop
	    };

	    return WindowToggleOpeningsSubscriber;
	})(_Subscriber5['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=windowToggle.js.map

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = window;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Subscriber3 = __webpack_require__(54);

	var _Subscriber4 = _interopRequireDefault(_Subscriber3);

	var _Subject = __webpack_require__(133);

	var _Subject2 = _interopRequireDefault(_Subject);

	var _Subscription = __webpack_require__(58);

	var _Subscription2 = _interopRequireDefault(_Subscription);

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	function window(closingSelector) {
	    return this.lift(new WindowOperator(closingSelector));
	}

	var WindowOperator = (function () {
	    function WindowOperator(closingSelector) {
	        _classCallCheck(this, WindowOperator);

	        this.closingSelector = closingSelector;
	    }

	    WindowOperator.prototype.call = function call(subscriber) {
	        return new WindowSubscriber(subscriber, this.closingSelector);
	    };

	    return WindowOperator;
	})();

	var WindowSubscriber = (function (_Subscriber) {
	    _inherits(WindowSubscriber, _Subscriber);

	    function WindowSubscriber(destination, closingSelector) {
	        _classCallCheck(this, WindowSubscriber);

	        _Subscriber.call(this, destination);
	        this.closingSelector = closingSelector;
	        this.window = new _Subject2['default']();
	        this.openWindow();
	    }

	    WindowSubscriber.prototype._next = function _next(value) {
	        this.window.next(value);
	    };

	    WindowSubscriber.prototype._error = function _error(err) {
	        this.window.error(err);
	        this.destination.error(err);
	    };

	    WindowSubscriber.prototype._complete = function _complete() {
	        this.window.complete();
	        this.destination.complete();
	    };

	    WindowSubscriber.prototype.openWindow = function openWindow() {
	        var prevClosingNotification = this.closingNotification;
	        if (prevClosingNotification) {
	            this.remove(prevClosingNotification);
	            prevClosingNotification.unsubscribe();
	        }
	        var prevWindow = this.window;
	        if (prevWindow) {
	            prevWindow.complete();
	        }
	        this.destination.next(this.window = new _Subject2['default']());
	        var closingNotifier = _utilTryCatch2['default'](this.closingSelector)();
	        if (closingNotifier === _utilErrorObject.errorObject) {
	            var err = closingNotifier.e;
	            this.destination.error(err);
	            this.window.error(err);
	        } else {
	            var closingNotification = this.closingNotification = new _Subscription2['default']();
	            this.add(closingNotification.add(closingNotifier._subscribe(new WindowClosingNotifierSubscriber(this))));
	        }
	    };

	    return WindowSubscriber;
	})(_Subscriber4['default']);

	var WindowClosingNotifierSubscriber = (function (_Subscriber2) {
	    _inherits(WindowClosingNotifierSubscriber, _Subscriber2);

	    function WindowClosingNotifierSubscriber(parent) {
	        _classCallCheck(this, WindowClosingNotifierSubscriber);

	        _Subscriber2.call(this, null);
	        this.parent = parent;
	    }

	    //# sourceMappingURL=windowWhen.js.map

	    WindowClosingNotifierSubscriber.prototype._next = function _next() {
	        this.parent.openWindow();
	    };

	    WindowClosingNotifierSubscriber.prototype._error = function _error(err) {
	        this.parent.error(err);
	    };

	    WindowClosingNotifierSubscriber.prototype._complete = function _complete() {
	        // noop
	    };

	    return WindowClosingNotifierSubscriber;
	})(_Subscriber4['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=windowWhen.js.map

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = withLatestFrom;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _utilTryCatch = __webpack_require__(65);

	var _utilTryCatch2 = _interopRequireDefault(_utilTryCatch);

	var _utilErrorObject = __webpack_require__(66);

	var _OuterSubscriber2 = __webpack_require__(70);

	var _OuterSubscriber3 = _interopRequireDefault(_OuterSubscriber2);

	var _utilSubscribeToResult = __webpack_require__(71);

	var _utilSubscribeToResult2 = _interopRequireDefault(_utilSubscribeToResult);

	/**
	 * @param {Observable} observables the observables to get the latest values from.
	 * @param {Function} [project] optional projection function for merging values together. Receives all values in order
	 *  of observables passed. (e.g. `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not passed, arrays
	 *  will be returned.
	 * @description merges each value from an observable with the latest values from the other passed observables.
	 * All observables must emit at least one value before the resulting observable will emit
	 *
	 * #### example
	 * ```
	 * A.withLatestFrom(B, C)
	 *
	 *  A:     ----a-----------------b---------------c-----------|
	 *  B:     ---d----------------e--------------f---------|
	 *  C:     --x----------------y-------------z-------------|
	 * result: ---([a,d,x])---------([b,e,y])--------([c,f,z])---|
	 * ```
	 */

	function withLatestFrom() {
	    var project = undefined;

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	    }

	    if (typeof args[args.length - 1] === 'function') {
	        project = args.pop();
	    }
	    var observables = args;
	    return this.lift(new WithLatestFromOperator(observables, project));
	}

	var WithLatestFromOperator = (function () {
	    function WithLatestFromOperator(observables, project) {
	        _classCallCheck(this, WithLatestFromOperator);

	        this.observables = observables;
	        this.project = project;
	    }

	    WithLatestFromOperator.prototype.call = function call(subscriber) {
	        return new WithLatestFromSubscriber(subscriber, this.observables, this.project);
	    };

	    return WithLatestFromOperator;
	})();

	var WithLatestFromSubscriber = (function (_OuterSubscriber) {
	    _inherits(WithLatestFromSubscriber, _OuterSubscriber);

	    function WithLatestFromSubscriber(destination, observables, project) {
	        _classCallCheck(this, WithLatestFromSubscriber);

	        _OuterSubscriber.call(this, destination);
	        this.observables = observables;
	        this.project = project;
	        this.toRespond = [];
	        var len = observables.length;
	        this.values = new Array(len);
	        for (var i = 0; i < len; i++) {
	            this.toRespond.push(i);
	        }
	        for (var i = 0; i < len; i++) {
	            var observable = observables[i];
	            this.add(_utilSubscribeToResult2['default'](this, observable, observable, i));
	        }
	    }

	    //# sourceMappingURL=withLatestFrom.js.map

	    WithLatestFromSubscriber.prototype.notifyNext = function notifyNext(observable, value, observableIndex, index) {
	        this.values[observableIndex] = value;
	        var toRespond = this.toRespond;
	        if (toRespond.length > 0) {
	            var found = toRespond.indexOf(observableIndex);
	            if (found !== -1) {
	                toRespond.splice(found, 1);
	            }
	        }
	    };

	    WithLatestFromSubscriber.prototype.notifyComplete = function notifyComplete() {
	        // noop
	    };

	    WithLatestFromSubscriber.prototype._next = function _next(value) {
	        if (this.toRespond.length === 0) {
	            var values = this.values;
	            var destination = this.destination;
	            var project = this.project;
	            var args = [value].concat(values);
	            if (project) {
	                var result = _utilTryCatch2['default'](this.project).apply(this, args);
	                if (result === _utilErrorObject.errorObject) {
	                    destination.error(result.e);
	                } else {
	                    destination.next(result);
	                }
	            } else {
	                destination.next(args);
	            }
	        }
	    };

	    return WithLatestFromSubscriber;
	})(_OuterSubscriber3['default']);

	module.exports = exports['default'];
	//# sourceMappingURL=withLatestFrom.js.map

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = zipProto;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _zipStatic = __webpack_require__(100);

	var _zipStatic2 = _interopRequireDefault(_zipStatic);

	function zipProto() {
	    for (var _len = arguments.length, observables = Array(_len), _key = 0; _key < _len; _key++) {
	        observables[_key] = arguments[_key];
	    }

	    observables.unshift(this);
	    return _zipStatic2['default'].apply(this, observables);
	}

	//# sourceMappingURL=zip.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=zip.js.map

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = zipAll;

	var _zipSupport = __webpack_require__(101);

	function zipAll(project) {
	    return this.lift(new _zipSupport.ZipOperator(project));
	}

	//# sourceMappingURL=zipAll.js.map
	module.exports = exports['default'];
	//# sourceMappingURL=zipAll.js.map

/***/ },
/* 193 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var ArgumentOutOfRangeError = function ArgumentOutOfRangeError() {
	    _classCallCheck(this, ArgumentOutOfRangeError);

	    this.name = 'ArgumentOutOfRangeError';
	    this.message = 'argument out of range';
	}
	//# sourceMappingURL=ArgumentOutOfRangeError.js.map
	;

	exports['default'] = ArgumentOutOfRangeError;
	module.exports = exports['default'];
	//# sourceMappingURL=ArgumentOutOfRangeError.js.map

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * This indirection is needed to free up Component, etc symbols in the public API
	 * to be used by the decorator versions of these annotations.
	 */
	var di_1 = __webpack_require__(195);
	exports.QueryMetadata = di_1.QueryMetadata;
	exports.ContentChildrenMetadata = di_1.ContentChildrenMetadata;
	exports.ContentChildMetadata = di_1.ContentChildMetadata;
	exports.ViewChildrenMetadata = di_1.ViewChildrenMetadata;
	exports.ViewQueryMetadata = di_1.ViewQueryMetadata;
	exports.ViewChildMetadata = di_1.ViewChildMetadata;
	exports.AttributeMetadata = di_1.AttributeMetadata;
	var directives_1 = __webpack_require__(213);
	exports.ComponentMetadata = directives_1.ComponentMetadata;
	exports.DirectiveMetadata = directives_1.DirectiveMetadata;
	exports.PipeMetadata = directives_1.PipeMetadata;
	exports.InputMetadata = directives_1.InputMetadata;
	exports.OutputMetadata = directives_1.OutputMetadata;
	exports.HostBindingMetadata = directives_1.HostBindingMetadata;
	exports.HostListenerMetadata = directives_1.HostListenerMetadata;
	var view_1 = __webpack_require__(246);
	exports.ViewMetadata = view_1.ViewMetadata;
	exports.ViewEncapsulation = view_1.ViewEncapsulation;
	var di_2 = __webpack_require__(195);
	var directives_2 = __webpack_require__(213);
	var view_2 = __webpack_require__(246);
	var decorators_1 = __webpack_require__(199);
	// TODO(alexeagle): remove the duplication of this doc. It is copied from ComponentMetadata.
	/**
	 * Declare reusable UI building blocks for an application.
	 *
	 * Each Angular component requires a single `@Component` and at least one `@View` annotation. The
	 * `@Component`
	 * annotation specifies when a component is instantiated, and which properties and hostListeners it
	 * binds to.
	 *
	 * When a component is instantiated, Angular
	 * - creates a shadow DOM for the component.
	 * - loads the selected template into the shadow DOM.
	 * - creates all the injectable objects configured with `providers` and `viewProviders`.
	 *
	 * All template expressions and statements are then evaluated against the component instance.
	 *
	 * For details on the `@View` annotation, see {@link ViewMetadata}.
	 *
	 * ## Lifecycle hooks
	 *
	 * When the component class implements some {@link angular2/lifecycle_hooks} the callbacks are
	 * called by the change detection at defined points in time during the life of the component.
	 *
	 * ### Example
	 *
	 * ```
	 * @Component({
	 *   selector: 'greet',
	 *   template: 'Hello {{name}}!'
	 * })
	 * class Greet {
	 *   name: string;
	 *
	 *   constructor() {
	 *     this.name = 'World';
	 *   }
	 * }
	 * ```
	 *
	 */
	exports.Component = decorators_1.makeDecorator(directives_2.ComponentMetadata, function (fn) { return fn.View = exports.View; });
	// TODO(alexeagle): remove the duplication of this doc. It is copied from DirectiveMetadata.
	/**
	 * Directives allow you to attach behavior to elements in the DOM.
	 *
	 * {@link DirectiveMetadata}s with an embedded view are called {@link ComponentMetadata}s.
	 *
	 * A directive consists of a single directive annotation and a controller class. When the
	 * directive's `selector` matches
	 * elements in the DOM, the following steps occur:
	 *
	 * 1. For each directive, the `ElementInjector` attempts to resolve the directive's constructor
	 * arguments.
	 * 2. Angular instantiates directives for each matched element using `ElementInjector` in a
	 * depth-first order,
	 *    as declared in the HTML.
	 *
	 * ## Understanding How Injection Works
	 *
	 * There are three stages of injection resolution.
	 * - *Pre-existing Injectors*:
	 *   - The terminal {@link Injector} cannot resolve dependencies. It either throws an error or, if
	 * the dependency was
	 *     specified as `@Optional`, returns `null`.
	 *   - The platform injector resolves browser singleton resources, such as: cookies, title,
	 * location, and others.
	 * - *Component Injectors*: Each component instance has its own {@link Injector}, and they follow
	 * the same parent-child hierarchy
	 *     as the component instances in the DOM.
	 * - *Element Injectors*: Each component instance has a Shadow DOM. Within the Shadow DOM each
	 * element has an `ElementInjector`
	 *     which follow the same parent-child hierarchy as the DOM elements themselves.
	 *
	 * When a template is instantiated, it also must instantiate the corresponding directives in a
	 * depth-first order. The
	 * current `ElementInjector` resolves the constructor dependencies for each directive.
	 *
	 * Angular then resolves dependencies as follows, according to the order in which they appear in the
	 * {@link ViewMetadata}:
	 *
	 * 1. Dependencies on the current element
	 * 2. Dependencies on element injectors and their parents until it encounters a Shadow DOM boundary
	 * 3. Dependencies on component injectors and their parents until it encounters the root component
	 * 4. Dependencies on pre-existing injectors
	 *
	 *
	 * The `ElementInjector` can inject other directives, element-specific special objects, or it can
	 * delegate to the parent
	 * injector.
	 *
	 * To inject other directives, declare the constructor parameter as:
	 * - `directive:DirectiveType`: a directive on the current element only
	 * - `@Host() directive:DirectiveType`: any directive that matches the type between the current
	 * element and the
	 *    Shadow DOM root.
	 * - `@Query(DirectiveType) query:QueryList<DirectiveType>`: A live collection of direct child
	 * directives.
	 * - `@QueryDescendants(DirectiveType) query:QueryList<DirectiveType>`: A live collection of any
	 * child directives.
	 *
	 * To inject element-specific special objects, declare the constructor parameter as:
	 * - `element: ElementRef` to obtain a reference to logical element in the view.
	 * - `viewContainer: ViewContainerRef` to control child template instantiation, for
	 * {@link DirectiveMetadata} directives only
	 * - `bindingPropagation: BindingPropagation` to control change detection in a more granular way.
	 *
	 * ### Example
	 *
	 * The following example demonstrates how dependency injection resolves constructor arguments in
	 * practice.
	 *
	 *
	 * Assume this HTML template:
	 *
	 * ```
	 * <div dependency="1">
	 *   <div dependency="2">
	 *     <div dependency="3" my-directive>
	 *       <div dependency="4">
	 *         <div dependency="5"></div>
	 *       </div>
	 *       <div dependency="6"></div>
	 *     </div>
	 *   </div>
	 * </div>
	 * ```
	 *
	 * With the following `dependency` decorator and `SomeService` injectable class.
	 *
	 * ```
	 * @Injectable()
	 * class SomeService {
	 * }
	 *
	 * @Directive({
	 *   selector: '[dependency]',
	 *   inputs: [
	 *     'id: dependency'
	 *   ]
	 * })
	 * class Dependency {
	 *   id:string;
	 * }
	 * ```
	 *
	 * Let's step through the different ways in which `MyDirective` could be declared...
	 *
	 *
	 * ### No injection
	 *
	 * Here the constructor is declared with no arguments, therefore nothing is injected into
	 * `MyDirective`.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor() {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with no dependencies.
	 *
	 *
	 * ### Component-level injection
	 *
	 * Directives can inject any injectable instance from the closest component injector or any of its
	 * parents.
	 *
	 * Here, the constructor declares a parameter, `someService`, and injects the `SomeService` type
	 * from the parent
	 * component's injector.
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(someService: SomeService) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a dependency on `SomeService`.
	 *
	 *
	 * ### Injecting a directive from the current element
	 *
	 * Directives can inject other directives declared on the current element.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(dependency: Dependency) {
	 *     expect(dependency.id).toEqual(3);
	 *   }
	 * }
	 * ```
	 * This directive would be instantiated with `Dependency` declared at the same element, in this case
	 * `dependency="3"`.
	 *
	 * ### Injecting a directive from any ancestor elements
	 *
	 * Directives can inject other directives declared on any ancestor element (in the current Shadow
	 * DOM), i.e. on the current element, the
	 * parent element, or its parents.
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Host() dependency: Dependency) {
	 *     expect(dependency.id).toEqual(2);
	 *   }
	 * }
	 * ```
	 *
	 * `@Host` checks the current element, the parent, as well as its parents recursively. If
	 * `dependency="2"` didn't
	 * exist on the direct parent, this injection would
	 * have returned
	 * `dependency="1"`.
	 *
	 *
	 * ### Injecting a live collection of direct child directives
	 *
	 *
	 * A directive can also query for other child directives. Since parent directives are instantiated
	 * before child directives, a directive can't simply inject the list of child directives. Instead,
	 * the directive injects a {@link QueryList}, which updates its contents as children are added,
	 * removed, or moved by a directive that uses a {@link ViewContainerRef} such as a `ng-for`, an
	 * `ng-if`, or an `ng-switch`.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Query(Dependency) dependencies:QueryList<Dependency>) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a {@link QueryList} which contains `Dependency` 4 and
	 * 6. Here, `Dependency` 5 would not be included, because it is not a direct child.
	 *
	 * ### Injecting a live collection of descendant directives
	 *
	 * By passing the descendant flag to `@Query` above, we can include the children of the child
	 * elements.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Query(Dependency, {descendants: true}) dependencies:QueryList<Dependency>) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a Query which would contain `Dependency` 4, 5 and 6.
	 *
	 * ### Optional injection
	 *
	 * The normal behavior of directives is to return an error when a specified dependency cannot be
	 * resolved. If you
	 * would like to inject `null` on unresolved dependency instead, you can annotate that dependency
	 * with `@Optional()`.
	 * This explicitly permits the author of a template to treat some of the surrounding directives as
	 * optional.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Optional() dependency:Dependency) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a `Dependency` directive found on the current element.
	 * If none can be
	 * found, the injector supplies `null` instead of throwing an error.
	 *
	 * ### Example
	 *
	 * Here we use a decorator directive to simply define basic tool-tip behavior.
	 *
	 * ```
	 * @Directive({
	 *   selector: '[tooltip]',
	 *   inputs: [
	 *     'text: tooltip'
	 *   ],
	 *   host: {
	 *     '(mouseenter)': 'onMouseEnter()',
	 *     '(mouseleave)': 'onMouseLeave()'
	 *   }
	 * })
	 * class Tooltip{
	 *   text:string;
	 *   overlay:Overlay; // NOT YET IMPLEMENTED
	 *   overlayManager:OverlayManager; // NOT YET IMPLEMENTED
	 *
	 *   constructor(overlayManager:OverlayManager) {
	 *     this.overlay = overlay;
	 *   }
	 *
	 *   onMouseEnter() {
	 *     // exact signature to be determined
	 *     this.overlay = this.overlayManager.open(text, ...);
	 *   }
	 *
	 *   onMouseLeave() {
	 *     this.overlay.close();
	 *     this.overlay = null;
	 *   }
	 * }
	 * ```
	 * In our HTML template, we can then add this behavior to a `<div>` or any other element with the
	 * `tooltip` selector,
	 * like so:
	 *
	 * ```
	 * <div tooltip="some text here"></div>
	 * ```
	 *
	 * Directives can also control the instantiation, destruction, and positioning of inline template
	 * elements:
	 *
	 * A directive uses a {@link ViewContainerRef} to instantiate, insert, move, and destroy views at
	 * runtime.
	 * The {@link ViewContainerRef} is created as a result of `<template>` element, and represents a
	 * location in the current view
	 * where these actions are performed.
	 *
	 * Views are always created as children of the current {@link ViewMetadata}, and as siblings of the
	 * `<template>` element. Thus a
	 * directive in a child view cannot inject the directive that created it.
	 *
	 * Since directives that create views via ViewContainers are common in Angular, and using the full
	 * `<template>` element syntax is wordy, Angular
	 * also supports a shorthand notation: `<li *foo="bar">` and `<li template="foo: bar">` are
	 * equivalent.
	 *
	 * Thus,
	 *
	 * ```
	 * <ul>
	 *   <li *foo="bar" title="text"></li>
	 * </ul>
	 * ```
	 *
	 * Expands in use to:
	 *
	 * ```
	 * <ul>
	 *   <template [foo]="bar">
	 *     <li title="text"></li>
	 *   </template>
	 * </ul>
	 * ```
	 *
	 * Notice that although the shorthand places `*foo="bar"` within the `<li>` element, the binding for
	 * the directive
	 * controller is correctly instantiated on the `<template>` element rather than the `<li>` element.
	 *
	 * ## Lifecycle hooks
	 *
	 * When the directive class implements some {@link angular2/lifecycle_hooks} the callbacks are
	 * called by the change detection at defined points in time during the life of the directive.
	 *
	 * ### Example
	 *
	 * Let's suppose we want to implement the `unless` behavior, to conditionally include a template.
	 *
	 * Here is a simple directive that triggers on an `unless` selector:
	 *
	 * ```
	 * @Directive({
	 *   selector: '[unless]',
	 *   inputs: ['unless']
	 * })
	 * export class Unless {
	 *   viewContainer: ViewContainerRef;
	 *   templateRef: TemplateRef;
	 *   prevCondition: boolean;
	 *
	 *   constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef) {
	 *     this.viewContainer = viewContainer;
	 *     this.templateRef = templateRef;
	 *     this.prevCondition = null;
	 *   }
	 *
	 *   set unless(newCondition) {
	 *     if (newCondition && (isBlank(this.prevCondition) || !this.prevCondition)) {
	 *       this.prevCondition = true;
	 *       this.viewContainer.clear();
	 *     } else if (!newCondition && (isBlank(this.prevCondition) || this.prevCondition)) {
	 *       this.prevCondition = false;
	 *       this.viewContainer.create(this.templateRef);
	 *     }
	 *   }
	 * }
	 * ```
	 *
	 * We can then use this `unless` selector in a template:
	 * ```
	 * <ul>
	 *   <li *unless="expr"></li>
	 * </ul>
	 * ```
	 *
	 * Once the directive instantiates the child view, the shorthand notation for the template expands
	 * and the result is:
	 *
	 * ```
	 * <ul>
	 *   <template [unless]="exp">
	 *     <li></li>
	 *   </template>
	 *   <li></li>
	 * </ul>
	 * ```
	 *
	 * Note also that although the `<li></li>` template still exists inside the `<template></template>`,
	 * the instantiated
	 * view occurs on the second `<li></li>` which is a sibling to the `<template>` element.
	 */
	exports.Directive = decorators_1.makeDecorator(directives_2.DirectiveMetadata);
	// TODO(alexeagle): remove the duplication of this doc. It is copied from ViewMetadata.
	/**
	 * Metadata properties available for configuring Views.
	 *
	 * Each Angular component requires a single `@Component` and at least one `@View` annotation. The
	 * `@View` annotation specifies the HTML template to use, and lists the directives that are active
	 * within the template.
	 *
	 * When a component is instantiated, the template is loaded into the component's shadow root, and
	 * the expressions and statements in the template are evaluated against the component.
	 *
	 * For details on the `@Component` annotation, see {@link ComponentMetadata}.
	 *
	 * ### Example
	 *
	 * ```
	 * @Component({
	 *   selector: 'greet',
	 *   template: 'Hello {{name}}!',
	 *   directives: [GreetUser, Bold]
	 * })
	 * class Greet {
	 *   name: string;
	 *
	 *   constructor() {
	 *     this.name = 'World';
	 *   }
	 * }
	 * ```
	 */
	exports.View = decorators_1.makeDecorator(view_2.ViewMetadata, function (fn) { return fn.View = exports.View; });
	// TODO(alexeagle): remove the duplication of this doc. It is copied from AttributeMetadata.
	/**
	 * Metadata properties available for configuring Views.
	 *
	 * Each Angular component requires a single `@Component` and at least one `@View` annotation. The
	 * `@View` annotation specifies the HTML template to use, and lists the directives that are active
	 * within the template.
	 *
	 * When a component is instantiated, the template is loaded into the component's shadow root, and
	 * the expressions and statements in the template are evaluated against the component.
	 *
	 * For details on the `@Component` annotation, see {@link ComponentMetadata}.
	 *
	 * ### Example
	 *
	 * ```
	 * @Component({
	 *   selector: 'greet',
	 *   template: 'Hello {{name}}!',
	 *   directives: [GreetUser, Bold]
	 * })
	 * class Greet {
	 *   name: string;
	 *
	 *   constructor() {
	 *     this.name = 'World';
	 *   }
	 * }
	 * ```
	 */
	exports.Attribute = decorators_1.makeParamDecorator(di_2.AttributeMetadata);
	// TODO(alexeagle): remove the duplication of this doc. It is copied from QueryMetadata.
	/**
	 * Declares an injectable parameter to be a live list of directives or variable
	 * bindings from the content children of a directive.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/lY9m8HLy7z06vDoUaSN2?p=preview))
	 *
	 * Assume that `<tabs>` component would like to get a list its children `<pane>`
	 * components as shown in this example:
	 *
	 * ```html
	 * <tabs>
	 *   <pane title="Overview">...</pane>
	 *   <pane *ng-for="#o of objects" [title]="o.title">{{o.text}}</pane>
	 * </tabs>
	 * ```
	 *
	 * The preferred solution is to query for `Pane` directives using this decorator.
	 *
	 * ```javascript
	 * @Component({
	 *   selector: 'pane',
	 *   inputs: ['title']
	 * })
	 * class Pane {
	 *   title:string;
	 * }
	 *
	 * @Component({
	 *  selector: 'tabs',
	 *  template: `
	 *    <ul>
	 *      <li *ng-for="#pane of panes">{{pane.title}}</li>
	 *    </ul>
	 *    <content></content>
	 *  `
	 * })
	 * class Tabs {
	 *   panes: QueryList<Pane>;
	 *   constructor(@Query(Pane) panes:QueryList<Pane>) {
	 *     this.panes = panes;
	 *   }
	 * }
	 * ```
	 *
	 * A query can look for variable bindings by passing in a string with desired binding symbol.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/sT2j25cH1dURAyBRCKx1?p=preview))
	 * ```html
	 * <seeker>
	 *   <div #findme>...</div>
	 * </seeker>
	 *
	 * @Component({ selector: 'foo' })
	 * class seeker {
	 *   constructor(@Query('findme') elList: QueryList<ElementRef>) {...}
	 * }
	 * ```
	 *
	 * In this case the object that is injected depend on the type of the variable
	 * binding. It can be an ElementRef, a directive or a component.
	 *
	 * Passing in a comma separated list of variable bindings will query for all of them.
	 *
	 * ```html
	 * <seeker>
	 *   <div #find-me>...</div>
	 *   <div #find-me-too>...</div>
	 * </seeker>
	 *
	 *  @Component({
	 *   selector: 'foo'
	 * })
	 * class Seeker {
	 *   constructor(@Query('findMe, findMeToo') elList: QueryList<ElementRef>) {...}
	 * }
	 * ```
	 *
	 * Configure whether query looks for direct children or all descendants
	 * of the querying element, by using the `descendants` parameter.
	 * It is set to `false` by default.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/wtGeB977bv7qvA5FTYl9?p=preview))
	 * ```html
	 * <container #first>
	 *   <item>a</item>
	 *   <item>b</item>
	 *   <container #second>
	 *     <item>c</item>
	 *   </container>
	 * </container>
	 * ```
	 *
	 * When querying for items, the first container will see only `a` and `b` by default,
	 * but with `Query(TextDirective, {descendants: true})` it will see `c` too.
	 *
	 * The queried directives are kept in a depth-first pre-order with respect to their
	 * positions in the DOM.
	 *
	 * Query does not look deep into any subcomponent views.
	 *
	 * Query is updated as part of the change-detection cycle. Since change detection
	 * happens after construction of a directive, QueryList will always be empty when observed in the
	 * constructor.
	 *
	 * The injected object is an unmodifiable live list.
	 * See {@link QueryList} for more details.
	 */
	exports.Query = decorators_1.makeParamDecorator(di_2.QueryMetadata);
	// TODO(alexeagle): remove the duplication of this doc. It is copied from ContentChildrenMetadata.
	/**
	 * Configures a content query.
	 *
	 * Content queries are set before the `afterContentInit` callback is called.
	 *
	 * ### Example
	 *
	 * ```
	 * @Directive({
	 *   selector: 'someDir'
	 * })
	 * class SomeDir {
	 *   @ContentChildren(ChildDirective) contentChildren: QueryList<ChildDirective>;
	 *
	 *   afterContentInit() {
	 *     // contentChildren is set
	 *   }
	 * }
	 * ```
	 */
	exports.ContentChildren = decorators_1.makePropDecorator(di_2.ContentChildrenMetadata);
	// TODO(alexeagle): remove the duplication of this doc. It is copied from ContentChildMetadata.
	/**
	 * Configures a content query.
	 *
	 * Content queries are set before the `afterContentInit` callback is called.
	 *
	 * ### Example
	 *
	 * ```
	 * @Directive({
	 *   selector: 'someDir'
	 * })
	 * class SomeDir {
	 *   @ContentChild(ChildDirective) contentChild;
	 *
	 *   afterContentInit() {
	 *     // contentChild is set
	 *   }
	 * }
	 * ```
	 */
	exports.ContentChild = decorators_1.makePropDecorator(di_2.ContentChildMetadata);
	// TODO(alexeagle): remove the duplication of this doc. It is copied from ViewChildrenMetadata.
	/**
	 * Configures a view query.
	 *
	 * View queries are set before the `afterViewInit` callback is called.
	 *
	 * ### Example
	 *
	 * ```
	 * @Component({
	 *   selector: 'someDir',
	 *   templateUrl: 'someTemplate',
	 *   directives: [ItemDirective]
	 * })
	 * class SomeDir {
	 *   @ViewChildren(ItemDirective) viewChildren: QueryList<ItemDirective>;
	 *
	 *   afterViewInit() {
	 *     // viewChildren is set
	 *   }
	 * }
	 * ```
	 */
	exports.ViewChildren = decorators_1.makePropDecorator(di_2.ViewChildrenMetadata);
	// TODO(alexeagle): remove the duplication of this doc. It is copied from ViewChildMetadata.
	/**
	 * Configures a view query.
	 *
	 * View queries are set before the `afterViewInit` callback is called.
	 *
	 * ### Example
	 *
	 * ```
	 * @Component({
	 *   selector: 'someDir',
	 *   templateUrl: 'someTemplate',
	 *   directives: [ItemDirective]
	 * })
	 * class SomeDir {
	 *   @ViewChild(ItemDirective) viewChild:ItemDirective;
	 *
	 *   afterViewInit() {
	 *     // viewChild is set
	 *   }
	 * }
	 * ```
	 */
	exports.ViewChild = decorators_1.makePropDecorator(di_2.ViewChildMetadata);
	// TODO(alexeagle): remove the duplication of this doc. It is copied from ViewQueryMetadata.
	/**
	 * Similar to {@link QueryMetadata}, but querying the component view, instead of
	 * the content children.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/eNsFHDf7YjyM6IzKxM1j?p=preview))
	 *
	 * ```javascript
	 * @Component({...})
	 * @View({
	 *   template: `
	 *     <item> a </item>
	 *     <item> b </item>
	 *     <item> c </item>
	 *   `
	 * })
	 * class MyComponent {
	 *   shown: boolean;
	 *
	 *   constructor(private @Query(Item) items:QueryList<Item>) {
	 *     items.onChange(() => console.log(items.length));
	 *   }
	 * }
	 * ```
	 *
	 * Supports the same querying parameters as {@link QueryMetadata}, except
	 * `descendants`. This always queries the whole view.
	 *
	 * As `shown` is flipped between true and false, items will contain zero of one
	 * items.
	 *
	 * Specifies that a {@link QueryList} should be injected.
	 *
	 * The injected object is an iterable and observable live list.
	 * See {@link QueryList} for more details.
	 */
	exports.ViewQuery = decorators_1.makeParamDecorator(di_2.ViewQueryMetadata);
	// TODO(alexeagle): remove the duplication of this doc. It is copied from PipeMetadata.
	/**
	 * Declare reusable pipe function.
	 *
	 * ### Example
	 *
	 * ```
	 * @Pipe({
	 *   name: 'lowercase'
	 * })
	 * class Lowercase {
	 *   transform(v, args) { return v.toLowerCase(); }
	 * }
	 * ```
	 */
	exports.Pipe = decorators_1.makeDecorator(directives_2.PipeMetadata);
	// TODO(alexeagle): remove the duplication of this doc. It is copied from InputMetadata.
	/**
	 * Declares a data-bound input property.
	 *
	 * Angular automatically updates data-bound properties during change detection.
	 *
	 * `InputMetadata` takes an optional parameter that specifies the name
	 * used when instantiating a component in the template. When not provided,
	 * the name of the decorated property is used.
	 *
	 * ### Example
	 *
	 * The following example creates a component with two input properties.
	 *
	 * ```typescript
	 * @Component({
	 *   selector: 'bank-account',
	 *   template: `
	 *     Bank Name: {{bankName}}
	 *     Account Id: {{id}}
	 *   `
	 * })
	 * class BankAccount {
	 *   @Input() bankName: string;
	 *   @Input('account-id') id: string;
	 *
	 *   // this property is not bound, and won't be automatically updated by Angular
	 *   normalizedBankName: string;
	 * }
	 *
	 * @Component({
	 *   selector: 'app',
	 *   template: `
	 *     <bank-account bank-name="RBC" account-id="4747"></bank-account>
	 *   `,
	 *   directives: [BankAccount]
	 * })
	 * class App {}
	 *
	 * bootstrap(App);
	 * ```
	 */
	exports.Input = decorators_1.makePropDecorator(directives_2.InputMetadata);
	// TODO(alexeagle): remove the duplication of this doc. It is copied from OutputMetadata.
	/**
	 * Declares an event-bound output property.
	 *
	 * When an output property emits an event, an event handler attached to that event
	 * the template is invoked.
	 *
	 * `OutputMetadata` takes an optional parameter that specifies the name
	 * used when instantiating a component in the template. When not provided,
	 * the name of the decorated property is used.
	 *
	 * ### Example
	 *
	 * ```typescript
	 * @Directive({
	 *   selector: 'interval-dir',
	 * })
	 * class IntervalDir {
	 *   @Output() everySecond = new EventEmitter();
	 *   @Output('everyFiveSeconds') five5Secs = new EventEmitter();
	 *
	 *   constructor() {
	 *     setInterval(() => this.everySecond.next("event"), 1000);
	 *     setInterval(() => this.five5Secs.next("event"), 5000);
	 *   }
	 * }
	 *
	 * @Component({
	 *   selector: 'app',
	 *   template: `
	 *     <interval-dir (every-second)="everySecond()" (every-five-seconds)="everyFiveSeconds()">
	 *     </interval-dir>
	 *   `,
	 *   directives: [IntervalDir]
	 * })
	 * class App {
	 *   everySecond() { console.log('second'); }
	 *   everyFiveSeconds() { console.log('five seconds'); }
	 * }
	 * bootstrap(App);
	 * ```
	 */
	exports.Output = decorators_1.makePropDecorator(directives_2.OutputMetadata);
	// TODO(alexeagle): remove the duplication of this doc. It is copied from HostBindingMetadata.
	/**
	 * Declares a host property binding.
	 *
	 * Angular automatically checks host property bindings during change detection.
	 * If a binding changes, it will update the host element of the directive.
	 *
	 * `HostBindingMetadata` takes an optional parameter that specifies the property
	 * name of the host element that will be updated. When not provided,
	 * the class property name is used.
	 *
	 * ### Example
	 *
	 * The following example creates a directive that sets the `valid` and `invalid` classes
	 * on the DOM element that has ng-model directive on it.
	 *
	 * ```typescript
	 * @Directive({selector: '[ng-model]'})
	 * class NgModelStatus {
	 *   constructor(public control:NgModel) {}
	 *   @HostBinding('[class.valid]') get valid { return this.control.valid; }
	 *   @HostBinding('[class.invalid]') get invalid { return this.control.invalid; }
	 * }
	 *
	 * @Component({
	 *   selector: 'app',
	 *   template: `<input [(ng-model)]="prop">`,
	 *   directives: [FORM_DIRECTIVES, NgModelStatus]
	 * })
	 * class App {
	 *   prop;
	 * }
	 *
	 * bootstrap(App);
	 * ```
	 */
	exports.HostBinding = decorators_1.makePropDecorator(directives_2.HostBindingMetadata);
	// TODO(alexeagle): remove the duplication of this doc. It is copied from HostListenerMetadata.
	/**
	 * Declares a host listener.
	 *
	 * Angular will invoke the decorated method when the host element emits the specified event.
	 *
	 * If the decorated method returns `false`, then `preventDefault` is applied on the DOM
	 * event.
	 *
	 * ### Example
	 *
	 * The following example declares a directive that attaches a click listener to the button and
	 * counts clicks.
	 *
	 * ```typescript
	 * @Directive({selector: 'button[counting]'})
	 * class CountClicks {
	 *   numberOfClicks = 0;
	 *
	 *   @HostListener('click', ['$event.target'])
	 *   onClick(btn) {
	 *     console.log("button", btn, "number of clicks:", this.numberOfClicks++);
	 *   }
	 * }
	 *
	 * @Component({
	 *   selector: 'app',
	 *   template: `<button counting>Increment</button>`,
	 *   directives: [CountClicks]
	 * })
	 * class App {}
	 *
	 * bootstrap(App);
	 * ```
	 */
	exports.HostListener = decorators_1.makePropDecorator(directives_2.HostListenerMetadata);
	//# sourceMappingURL=metadata.js.map

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(49);
	var di_1 = __webpack_require__(196);
	var metadata_1 = __webpack_require__(197);
	/**
	 * Specifies that a constant attribute value should be injected.
	 *
	 * The directive can inject constant string literals of host element attributes.
	 *
	 * ### Example
	 *
	 * Suppose we have an `<input>` element and want to know its `type`.
	 *
	 * ```html
	 * <input type="text">
	 * ```
	 *
	 * A decorator can inject string literal `text` like so:
	 *
	 * ```javascript
	 * @Directive({
	 *   selector: `input'
	 * })
	 * class InputDirective {
	 *   constructor(@Attribute('type') type) {
	 *     // type would be `text` in this example
	 *   }
	 * }
	 * ```
	 */
	var AttributeMetadata = (function (_super) {
	    __extends(AttributeMetadata, _super);
	    function AttributeMetadata(attributeName) {
	        _super.call(this);
	        this.attributeName = attributeName;
	    }
	    Object.defineProperty(AttributeMetadata.prototype, "token", {
	        get: function () {
	            // Normally one would default a token to a type of an injected value but here
	            // the type of a variable is "string" and we can't use primitive type as a return value
	            // so we use instance of Attribute instead. This doesn't matter much in practice as arguments
	            // with @Attribute annotation are injected by ElementInjector that doesn't take tokens into
	            // account.
	            return this;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    AttributeMetadata.prototype.toString = function () { return "@Attribute(" + lang_1.stringify(this.attributeName) + ")"; };
	    AttributeMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [String])
	    ], AttributeMetadata);
	    return AttributeMetadata;
	})(metadata_1.DependencyMetadata);
	exports.AttributeMetadata = AttributeMetadata;
	/**
	 * Declares an injectable parameter to be a live list of directives or variable
	 * bindings from the content children of a directive.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/lY9m8HLy7z06vDoUaSN2?p=preview))
	 *
	 * Assume that `<tabs>` component would like to get a list its children `<pane>`
	 * components as shown in this example:
	 *
	 * ```html
	 * <tabs>
	 *   <pane title="Overview">...</pane>
	 *   <pane *ng-for="#o of objects" [title]="o.title">{{o.text}}</pane>
	 * </tabs>
	 * ```
	 *
	 * The preferred solution is to query for `Pane` directives using this decorator.
	 *
	 * ```javascript
	 * @Component({
	 *   selector: 'pane',
	 *   inputs: ['title']
	 * })
	 * class Pane {
	 *   title:string;
	 * }
	 *
	 * @Component({
	 *  selector: 'tabs',
	 *  template: `
	 *    <ul>
	 *      <li *ng-for="#pane of panes">{{pane.title}}</li>
	 *    </ul>
	 *    <content></content>
	 *  `
	 * })
	 * class Tabs {
	 *   panes: QueryList<Pane>;
	 *   constructor(@Query(Pane) panes:QueryList<Pane>) {
	  *    this.panes = panes;
	  *  }
	 * }
	 * ```
	 *
	 * A query can look for variable bindings by passing in a string with desired binding symbol.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/sT2j25cH1dURAyBRCKx1?p=preview))
	 * ```html
	 * <seeker>
	 *   <div #findme>...</div>
	 * </seeker>
	 *
	 * @Component({ selector: 'seeker' })
	 * class Seeker {
	 *   constructor(@Query('findme') elList: QueryList<ElementRef>) {...}
	 * }
	 * ```
	 *
	 * In this case the object that is injected depend on the type of the variable
	 * binding. It can be an ElementRef, a directive or a component.
	 *
	 * Passing in a comma separated list of variable bindings will query for all of them.
	 *
	 * ```html
	 * <seeker>
	 *   <div #find-me>...</div>
	 *   <div #find-me-too>...</div>
	 * </seeker>
	 *
	 *  @Component({
	 *   selector: 'seeker'
	 * })
	 * class Seeker {
	 *   constructor(@Query('findMe, findMeToo') elList: QueryList<ElementRef>) {...}
	 * }
	 * ```
	 *
	 * Configure whether query looks for direct children or all descendants
	 * of the querying element, by using the `descendants` parameter.
	 * It is set to `false` by default.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/wtGeB977bv7qvA5FTYl9?p=preview))
	 * ```html
	 * <container #first>
	 *   <item>a</item>
	 *   <item>b</item>
	 *   <container #second>
	 *     <item>c</item>
	 *   </container>
	 * </container>
	 * ```
	 *
	 * When querying for items, the first container will see only `a` and `b` by default,
	 * but with `Query(TextDirective, {descendants: true})` it will see `c` too.
	 *
	 * The queried directives are kept in a depth-first pre-order with respect to their
	 * positions in the DOM.
	 *
	 * Query does not look deep into any subcomponent views.
	 *
	 * Query is updated as part of the change-detection cycle. Since change detection
	 * happens after construction of a directive, QueryList will always be empty when observed in the
	 * constructor.
	 *
	 * The injected object is an unmodifiable live list.
	 * See {@link QueryList} for more details.
	 */
	var QueryMetadata = (function (_super) {
	    __extends(QueryMetadata, _super);
	    function QueryMetadata(_selector, _a) {
	        var _b = _a === void 0 ? {} : _a, _c = _b.descendants, descendants = _c === void 0 ? false : _c, _d = _b.first, first = _d === void 0 ? false : _d;
	        _super.call(this);
	        this._selector = _selector;
	        this.descendants = descendants;
	        this.first = first;
	    }
	    Object.defineProperty(QueryMetadata.prototype, "isViewQuery", {
	        /**
	         * always `false` to differentiate it with {@link ViewQueryMetadata}.
	         */
	        get: function () { return false; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QueryMetadata.prototype, "selector", {
	        /**
	         * what this is querying for.
	         */
	        get: function () { return di_1.resolveForwardRef(this._selector); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QueryMetadata.prototype, "isVarBindingQuery", {
	        /**
	         * whether this is querying for a variable binding or a directive.
	         */
	        get: function () { return lang_1.isString(this.selector); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QueryMetadata.prototype, "varBindings", {
	        /**
	         * returns a list of variable bindings this is querying for.
	         * Only applicable if this is a variable bindings query.
	         */
	        get: function () { return this.selector.split(','); },
	        enumerable: true,
	        configurable: true
	    });
	    QueryMetadata.prototype.toString = function () { return "@Query(" + lang_1.stringify(this.selector) + ")"; };
	    QueryMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object, Object])
	    ], QueryMetadata);
	    return QueryMetadata;
	})(metadata_1.DependencyMetadata);
	exports.QueryMetadata = QueryMetadata;
	// TODO: add an example after ContentChildren and ViewChildren are in master
	/**
	 * Configures a content query.
	 *
	 * Content queries are set before the `afterContentInit` callback is called.
	 *
	 * ### Example
	 *
	 * ```
	 * @Directive({
	 *   selector: 'someDir'
	 * })
	 * class SomeDir {
	 *   @ContentChildren(ChildDirective) contentChildren: QueryList<ChildDirective>;
	 *
	 *   afterContentInit() {
	 *     // contentChildren is set
	 *   }
	 * }
	 * ```
	 */
	var ContentChildrenMetadata = (function (_super) {
	    __extends(ContentChildrenMetadata, _super);
	    function ContentChildrenMetadata(_selector, _a) {
	        var _b = (_a === void 0 ? {} : _a).descendants, descendants = _b === void 0 ? false : _b;
	        _super.call(this, _selector, { descendants: descendants });
	    }
	    ContentChildrenMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object, Object])
	    ], ContentChildrenMetadata);
	    return ContentChildrenMetadata;
	})(QueryMetadata);
	exports.ContentChildrenMetadata = ContentChildrenMetadata;
	// TODO: add an example after ContentChild and ViewChild are in master
	/**
	 * Configures a content query.
	 *
	 * Content queries are set before the `afterContentInit` callback is called.
	 *
	 * ### Example
	 *
	 * ```
	 * @Directive({
	 *   selector: 'someDir'
	 * })
	 * class SomeDir {
	 *   @ContentChild(ChildDirective) contentChild;
	 *
	 *   afterContentInit() {
	 *     // contentChild is set
	 *   }
	 * }
	 * ```
	 */
	var ContentChildMetadata = (function (_super) {
	    __extends(ContentChildMetadata, _super);
	    function ContentChildMetadata(_selector) {
	        _super.call(this, _selector, { descendants: true, first: true });
	    }
	    ContentChildMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], ContentChildMetadata);
	    return ContentChildMetadata;
	})(QueryMetadata);
	exports.ContentChildMetadata = ContentChildMetadata;
	/**
	 * Similar to {@link QueryMetadata}, but querying the component view, instead of
	 * the content children.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/eNsFHDf7YjyM6IzKxM1j?p=preview))
	 *
	 * ```javascript
	 * @Component({...})
	 * @View({
	 *   template: `
	 *     <item> a </item>
	 *     <item> b </item>
	 *     <item> c </item>
	 *   `
	 * })
	 * class MyComponent {
	 *   shown: boolean;
	 *
	 *   constructor(private @Query(Item) items:QueryList<Item>) {
	 *     items.onChange(() => console.log(items.length));
	 *   }
	 * }
	 * ```
	 *
	 * Supports the same querying parameters as {@link QueryMetadata}, except
	 * `descendants`. This always queries the whole view.
	 *
	 * As `shown` is flipped between true and false, items will contain zero of one
	 * items.
	 *
	 * Specifies that a {@link QueryList} should be injected.
	 *
	 * The injected object is an iterable and observable live list.
	 * See {@link QueryList} for more details.
	 */
	var ViewQueryMetadata = (function (_super) {
	    __extends(ViewQueryMetadata, _super);
	    function ViewQueryMetadata(_selector, _a) {
	        var _b = _a === void 0 ? {} : _a, _c = _b.descendants, descendants = _c === void 0 ? false : _c, _d = _b.first, first = _d === void 0 ? false : _d;
	        _super.call(this, _selector, { descendants: descendants, first: first });
	    }
	    Object.defineProperty(ViewQueryMetadata.prototype, "isViewQuery", {
	        /**
	         * always `true` to differentiate it with {@link QueryMetadata}.
	         */
	        get: function () { return true; },
	        enumerable: true,
	        configurable: true
	    });
	    ViewQueryMetadata.prototype.toString = function () { return "@ViewQuery(" + lang_1.stringify(this.selector) + ")"; };
	    ViewQueryMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object, Object])
	    ], ViewQueryMetadata);
	    return ViewQueryMetadata;
	})(QueryMetadata);
	exports.ViewQueryMetadata = ViewQueryMetadata;
	/**
	 * Configures a view query.
	 *
	 * View queries are set before the `afterViewInit` callback is called.
	 *
	 * ### Example
	 *
	 * ```
	 * @Component({
	 *   selector: 'someDir',
	 *   templateUrl: 'someTemplate',
	 *   directives: [ItemDirective]
	 * })
	 * class SomeDir {
	 *   @ViewChildren(ItemDirective) viewChildren: QueryList<ItemDirective>;
	 *
	 *   afterViewInit() {
	 *     // viewChildren is set
	 *   }
	 * }
	 * ```
	 */
	var ViewChildrenMetadata = (function (_super) {
	    __extends(ViewChildrenMetadata, _super);
	    function ViewChildrenMetadata(_selector) {
	        _super.call(this, _selector, { descendants: true });
	    }
	    ViewChildrenMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], ViewChildrenMetadata);
	    return ViewChildrenMetadata;
	})(ViewQueryMetadata);
	exports.ViewChildrenMetadata = ViewChildrenMetadata;
	/**
	 * Configures a view query.
	 *
	 * View queries are set before the `afterViewInit` callback is called.
	 *
	 * ### Example
	 *
	 * ```
	 * @Component({
	 *   selector: 'someDir',
	 *   templateUrl: 'someTemplate',
	 *   directives: [ItemDirective]
	 * })
	 * class SomeDir {
	 *   @ViewChild(ItemDirective) viewChild:ItemDirective;
	 *
	 *   afterViewInit() {
	 *     // viewChild is set
	 *   }
	 * }
	 * ```
	 */
	var ViewChildMetadata = (function (_super) {
	    __extends(ViewChildMetadata, _super);
	    function ViewChildMetadata(_selector) {
	        _super.call(this, _selector, { descendants: true, first: true });
	    }
	    ViewChildMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], ViewChildMetadata);
	    return ViewChildMetadata;
	})(ViewQueryMetadata);
	exports.ViewChildMetadata = ViewChildMetadata;
	//# sourceMappingURL=di.js.map

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * @module
	 * @description
	 * The `di` module provides dependency injection container services.
	 */
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var metadata_1 = __webpack_require__(197);
	exports.InjectMetadata = metadata_1.InjectMetadata;
	exports.OptionalMetadata = metadata_1.OptionalMetadata;
	exports.InjectableMetadata = metadata_1.InjectableMetadata;
	exports.SelfMetadata = metadata_1.SelfMetadata;
	exports.HostMetadata = metadata_1.HostMetadata;
	exports.SkipSelfMetadata = metadata_1.SkipSelfMetadata;
	exports.DependencyMetadata = metadata_1.DependencyMetadata;
	// we have to reexport * because Dart and TS export two different sets of types
	__export(__webpack_require__(198));
	var forward_ref_1 = __webpack_require__(200);
	exports.forwardRef = forward_ref_1.forwardRef;
	exports.resolveForwardRef = forward_ref_1.resolveForwardRef;
	var injector_1 = __webpack_require__(201);
	exports.Injector = injector_1.Injector;
	var provider_1 = __webpack_require__(203);
	exports.Binding = provider_1.Binding;
	exports.ProviderBuilder = provider_1.ProviderBuilder;
	exports.ResolvedFactory = provider_1.ResolvedFactory;
	exports.Dependency = provider_1.Dependency;
	exports.bind = provider_1.bind;
	exports.Provider = provider_1.Provider;
	exports.provide = provider_1.provide;
	var key_1 = __webpack_require__(209);
	exports.Key = key_1.Key;
	exports.TypeLiteral = key_1.TypeLiteral;
	var exceptions_1 = __webpack_require__(211);
	exports.NoProviderError = exceptions_1.NoProviderError;
	exports.AbstractProviderError = exceptions_1.AbstractProviderError;
	exports.CyclicDependencyError = exceptions_1.CyclicDependencyError;
	exports.InstantiationError = exceptions_1.InstantiationError;
	exports.InvalidProviderError = exceptions_1.InvalidProviderError;
	exports.NoAnnotationError = exceptions_1.NoAnnotationError;
	exports.OutOfBoundsError = exceptions_1.OutOfBoundsError;
	var opaque_token_1 = __webpack_require__(212);
	exports.OpaqueToken = opaque_token_1.OpaqueToken;
	//# sourceMappingURL=di.js.map

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(49);
	/**
	 * A parameter metadata that specifies a dependency.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/6uHYJK?p=preview))
	 *
	 * ```typescript
	 * class Engine {}
	 *
	 * @Injectable()
	 * class Car {
	 *   engine;
	 *   constructor(@Inject("MyEngine") engine:Engine) {
	 *     this.engine = engine;
	 *   }
	 * }
	 *
	 * var injector = Injector.resolveAndCreate([
	 *  provide("MyEngine", {useClass: Engine}),
	 *  Car
	 * ]);
	 *
	 * expect(injector.get(Car).engine instanceof Engine).toBe(true);
	 * ```
	 *
	 * When `@Inject()` is not present, {@link Injector} will use the type annotation of the parameter.
	 *
	 * ### Example
	 *
	 * ```typescript
	 * class Engine {}
	 *
	 * @Injectable()
	 * class Car {
	 *   constructor(public engine: Engine) {} //same as constructor(@Inject(Engine) engine:Engine)
	 * }
	 *
	 * var injector = Injector.resolveAndCreate([Engine, Car]);
	 * expect(injector.get(Car).engine instanceof Engine).toBe(true);
	 * ```
	 */
	var InjectMetadata = (function () {
	    function InjectMetadata(token) {
	        this.token = token;
	    }
	    InjectMetadata.prototype.toString = function () { return "@Inject(" + lang_1.stringify(this.token) + ")"; };
	    InjectMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], InjectMetadata);
	    return InjectMetadata;
	})();
	exports.InjectMetadata = InjectMetadata;
	/**
	 * A parameter metadata that marks a dependency as optional. {@link Injector} provides `null` if
	 * the dependency is not found.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/AsryOm?p=preview))
	 *
	 * ```typescript
	 * class Engine {}
	 *
	 * @Injectable()
	 * class Car {
	 *   engine;
	 *   constructor(@Optional() engine:Engine) {
	 *     this.engine = engine;
	 *   }
	 * }
	 *
	 * var injector = Injector.resolveAndCreate([Car]);
	 * expect(injector.get(Car).engine).toBeNull();
	 * ```
	 */
	var OptionalMetadata = (function () {
	    function OptionalMetadata() {
	    }
	    OptionalMetadata.prototype.toString = function () { return "@Optional()"; };
	    OptionalMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], OptionalMetadata);
	    return OptionalMetadata;
	})();
	exports.OptionalMetadata = OptionalMetadata;
	/**
	 * `DependencyMetadata` is used by the framework to extend DI.
	 * This is internal to Angular and should not be used directly.
	 */
	var DependencyMetadata = (function () {
	    function DependencyMetadata() {
	    }
	    Object.defineProperty(DependencyMetadata.prototype, "token", {
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    DependencyMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], DependencyMetadata);
	    return DependencyMetadata;
	})();
	exports.DependencyMetadata = DependencyMetadata;
	/**
	 * A marker metadata that marks a class as available to {@link Injector} for creation.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/Wk4DMQ?p=preview))
	 *
	 * ```typescript
	 * @Injectable()
	 * class UsefulService {}
	 *
	 * @Injectable()
	 * class NeedsService {
	 *   constructor(public service:UsefulService) {}
	 * }
	 *
	 * var injector = Injector.resolveAndCreate([NeedsService, UsefulService]);
	 * expect(injector.get(NeedsService).service instanceof UsefulService).toBe(true);
	 * ```
	 * {@link Injector} will throw {@link NoAnnotationError} when trying to instantiate a class that
	 * does not have `@Injectable` marker, as shown in the example below.
	 *
	 * ```typescript
	 * class UsefulService {}
	 *
	 * class NeedsService {
	 *   constructor(public service:UsefulService) {}
	 * }
	 *
	 * var injector = Injector.resolveAndCreate([NeedsService, UsefulService]);
	 * expect(() => injector.get(NeedsService)).toThrowError();
	 * ```
	 */
	var InjectableMetadata = (function () {
	    function InjectableMetadata() {
	    }
	    InjectableMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], InjectableMetadata);
	    return InjectableMetadata;
	})();
	exports.InjectableMetadata = InjectableMetadata;
	/**
	 * Specifies that an {@link Injector} should retrieve a dependency only from itself.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/NeagAg?p=preview))
	 *
	 * ```typescript
	 * class Dependency {
	 * }
	 *
	 * @Injectable()
	 * class NeedsDependency {
	 *   dependency;
	 *   constructor(@Self() dependency:Dependency) {
	 *     this.dependency = dependency;
	 *   }
	 * }
	 *
	 * var inj = Injector.resolveAndCreate([Dependency, NeedsDependency]);
	 * var nd = inj.get(NeedsDependency);
	 *
	 * expect(nd.dependency instanceof Dependency).toBe(true);
	 *
	 * var inj = Injector.resolveAndCreate([Dependency]);
	 * var child = inj.resolveAndCreateChild([NeedsDependency]);
	 * expect(() => child.get(NeedsDependency)).toThrowError();
	 * ```
	 */
	var SelfMetadata = (function () {
	    function SelfMetadata() {
	    }
	    SelfMetadata.prototype.toString = function () { return "@Self()"; };
	    SelfMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], SelfMetadata);
	    return SelfMetadata;
	})();
	exports.SelfMetadata = SelfMetadata;
	/**
	 * Specifies that the dependency resolution should start from the parent injector.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/Wchdzb?p=preview))
	 *
	 * ```typescript
	 * class Dependency {
	 * }
	 *
	 * @Injectable()
	 * class NeedsDependency {
	 *   dependency;
	 *   constructor(@SkipSelf() dependency:Dependency) {
	 *     this.dependency = dependency;
	 *   }
	 * }
	 *
	 * var parent = Injector.resolveAndCreate([Dependency]);
	 * var child = parent.resolveAndCreateChild([NeedsDependency]);
	 * expect(child.get(NeedsDependency).dependency instanceof Depedency).toBe(true);
	 *
	 * var inj = Injector.resolveAndCreate([Dependency, NeedsDependency]);
	 * expect(() => inj.get(NeedsDependency)).toThrowError();
	 * ```
	 */
	var SkipSelfMetadata = (function () {
	    function SkipSelfMetadata() {
	    }
	    SkipSelfMetadata.prototype.toString = function () { return "@SkipSelf()"; };
	    SkipSelfMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], SkipSelfMetadata);
	    return SkipSelfMetadata;
	})();
	exports.SkipSelfMetadata = SkipSelfMetadata;
	/**
	 * Specifies that an injector should retrieve a dependency from any injector until reaching the
	 * closest host.
	 *
	 * In Angular, a component element is automatically declared as a host for all the injectors in
	 * its view.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/GX79pV?p=preview))
	 *
	 * In the following example `App` contains `ParentCmp`, which contains `ChildDirective`.
	 * So `ParentCmp` is the host of `ChildDirective`.
	 *
	 * `ChildDirective` depends on two services: `HostService` and `OtherService`.
	 * `HostService` is defined at `ParentCmp`, and `OtherService` is defined at `App`.
	 *
	 *```typescript
	 * class OtherService {}
	 * class HostService {}
	 *
	 * @Directive({
	 *   selector: 'child-directive'
	 * })
	 * class ChildDirective {
	 *   constructor(@Optional() @Host() os:OtherService, @Optional() @Host() hs:HostService){
	 *     console.log("os is null", os);
	 *     console.log("hs is NOT null", hs);
	 *   }
	 * }
	 *
	 * @Component({
	 *   selector: 'parent-cmp',
	 *   providers: [HostService],
	 *   template: `
	 *     Dir: <child-directive></child-directive>
	 *   `,
	 *   directives: [ChildDirective]
	 * })
	 * class ParentCmp {
	 * }
	 *
	 * @Component({
	 *   selector: 'app',
	 *   providers: [OtherService],
	 *   template: `
	 *     Parent: <parent-cmp></parent-cmp>
	 *   `,
	 *   directives: [ParentCmp]
	 * })
	 * class App {
	 * }
	 *
	 * bootstrap(App);
	 *```
	 */
	var HostMetadata = (function () {
	    function HostMetadata() {
	    }
	    HostMetadata.prototype.toString = function () { return "@Host()"; };
	    HostMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], HostMetadata);
	    return HostMetadata;
	})();
	exports.HostMetadata = HostMetadata;
	//# sourceMappingURL=metadata.js.map

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var metadata_1 = __webpack_require__(197);
	var decorators_1 = __webpack_require__(199);
	/**
	 * Factory for creating {@link InjectMetadata}.
	 */
	exports.Inject = decorators_1.makeParamDecorator(metadata_1.InjectMetadata);
	/**
	 * Factory for creating {@link OptionalMetadata}.
	 */
	exports.Optional = decorators_1.makeParamDecorator(metadata_1.OptionalMetadata);
	/**
	 * Factory for creating {@link InjectableMetadata}.
	 */
	exports.Injectable = decorators_1.makeDecorator(metadata_1.InjectableMetadata);
	/**
	 * Factory for creating {@link SelfMetadata}.
	 */
	exports.Self = decorators_1.makeParamDecorator(metadata_1.SelfMetadata);
	/**
	 * Factory for creating {@link HostMetadata}.
	 */
	exports.Host = decorators_1.makeParamDecorator(metadata_1.HostMetadata);
	/**
	 * Factory for creating {@link SkipSelfMetadata}.
	 */
	exports.SkipSelf = decorators_1.makeParamDecorator(metadata_1.SkipSelfMetadata);
	//# sourceMappingURL=decorators.js.map

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	function extractAnnotation(annotation) {
	    if (lang_1.isFunction(annotation) && annotation.hasOwnProperty('annotation')) {
	        // it is a decorator, extract annotation
	        annotation = annotation.annotation;
	    }
	    return annotation;
	}
	function applyParams(fnOrArray, key) {
	    if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function ||
	        fnOrArray === Number || fnOrArray === Array) {
	        throw new Error("Can not use native " + lang_1.stringify(fnOrArray) + " as constructor");
	    }
	    if (lang_1.isFunction(fnOrArray)) {
	        return fnOrArray;
	    }
	    else if (fnOrArray instanceof Array) {
	        var annotations = fnOrArray;
	        var fn = fnOrArray[fnOrArray.length - 1];
	        if (!lang_1.isFunction(fn)) {
	            throw new Error("Last position of Class method array must be Function in key " + key + " was '" + lang_1.stringify(fn) + "'");
	        }
	        var annoLength = annotations.length - 1;
	        if (annoLength != fn.length) {
	            throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + lang_1.stringify(fn));
	        }
	        var paramsAnnotations = [];
	        for (var i = 0, ii = annotations.length - 1; i < ii; i++) {
	            var paramAnnotations = [];
	            paramsAnnotations.push(paramAnnotations);
	            var annotation = annotations[i];
	            if (annotation instanceof Array) {
	                for (var j = 0; j < annotation.length; j++) {
	                    paramAnnotations.push(extractAnnotation(annotation[j]));
	                }
	            }
	            else if (lang_1.isFunction(annotation)) {
	                paramAnnotations.push(extractAnnotation(annotation));
	            }
	            else {
	                paramAnnotations.push(annotation);
	            }
	        }
	        Reflect.defineMetadata('parameters', paramsAnnotations, fn);
	        return fn;
	    }
	    else {
	        throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + lang_1.stringify(fnOrArray) + "'");
	    }
	}
	/**
	 * Provides a way for expressing ES6 classes with parameter annotations in ES5.
	 *
	 * ## Basic Example
	 *
	 * ```
	 * var Greeter = ng.Class({
	 *   constructor: function(name) {
	 *     this.name = name;
	 *   },
	 *
	 *   greet: function() {
	 *     alert('Hello ' + this.name + '!');
	 *   }
	 * });
	 * ```
	 *
	 * is equivalent to ES6:
	 *
	 * ```
	 * class Greeter {
	 *   constructor(name) {
	 *     this.name = name;
	 *   }
	 *
	 *   greet() {
	 *     alert('Hello ' + this.name + '!');
	 *   }
	 * }
	 * ```
	 *
	 * or equivalent to ES5:
	 *
	 * ```
	 * var Greeter = function (name) {
	 *   this.name = name;
	 * }
	 *
	 * Greeter.prototype.greet = function () {
	 *   alert('Hello ' + this.name + '!');
	 * }
	 * ```
	 *
	 * ### Example with parameter annotations
	 *
	 * ```
	 * var MyService = ng.Class({
	 *   constructor: [String, [new Query(), QueryList], function(name, queryList) {
	 *     ...
	 *   }]
	 * });
	 * ```
	 *
	 * is equivalent to ES6:
	 *
	 * ```
	 * class MyService {
	 *   constructor(name: string, @Query() queryList: QueryList) {
	 *     ...
	 *   }
	 * }
	 * ```
	 *
	 * ### Example with inheritance
	 *
	 * ```
	 * var Shape = ng.Class({
	 *   constructor: (color) {
	 *     this.color = color;
	 *   }
	 * });
	 *
	 * var Square = ng.Class({
	 *   extends: Shape,
	 *   constructor: function(color, size) {
	 *     Shape.call(this, color);
	 *     this.size = size;
	 *   }
	 * });
	 * ```
	 */
	function Class(clsDef) {
	    var constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
	    var proto = constructor.prototype;
	    if (clsDef.hasOwnProperty('extends')) {
	        if (lang_1.isFunction(clsDef.extends)) {
	            constructor.prototype = proto =
	                Object.create(clsDef.extends.prototype);
	        }
	        else {
	            throw new Error("Class definition 'extends' property must be a constructor function was: " + lang_1.stringify(clsDef.extends));
	        }
	    }
	    for (var key in clsDef) {
	        if (key != 'extends' && key != 'prototype' && clsDef.hasOwnProperty(key)) {
	            proto[key] = applyParams(clsDef[key], key);
	        }
	    }
	    if (this && this.annotations instanceof Array) {
	        Reflect.defineMetadata('annotations', this.annotations, constructor);
	    }
	    return constructor;
	}
	exports.Class = Class;
	var Reflect = lang_1.global.Reflect;
	if (!(Reflect && Reflect.getMetadata)) {
	    throw 'reflect-metadata shim is required when using class decorators';
	}
	function makeDecorator(annotationCls, chainFn) {
	    if (chainFn === void 0) { chainFn = null; }
	    function DecoratorFactory(objOrType) {
	        var annotationInstance = new annotationCls(objOrType);
	        if (this instanceof annotationCls) {
	            return annotationInstance;
	        }
	        else {
	            var chainAnnotation = lang_1.isFunction(this) && this.annotations instanceof Array ? this.annotations : [];
	            chainAnnotation.push(annotationInstance);
	            var TypeDecorator = function TypeDecorator(cls) {
	                var annotations = Reflect.getOwnMetadata('annotations', cls);
	                annotations = annotations || [];
	                annotations.push(annotationInstance);
	                Reflect.defineMetadata('annotations', annotations, cls);
	                return cls;
	            };
	            TypeDecorator.annotations = chainAnnotation;
	            TypeDecorator.Class = Class;
	            if (chainFn)
	                chainFn(TypeDecorator);
	            return TypeDecorator;
	        }
	    }
	    DecoratorFactory.prototype = Object.create(annotationCls.prototype);
	    return DecoratorFactory;
	}
	exports.makeDecorator = makeDecorator;
	function makeParamDecorator(annotationCls) {
	    function ParamDecoratorFactory() {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i - 0] = arguments[_i];
	        }
	        var annotationInstance = Object.create(annotationCls.prototype);
	        annotationCls.apply(annotationInstance, args);
	        if (this instanceof annotationCls) {
	            return annotationInstance;
	        }
	        else {
	            ParamDecorator.annotation = annotationInstance;
	            return ParamDecorator;
	        }
	        function ParamDecorator(cls, unusedKey, index) {
	            var parameters = Reflect.getMetadata('parameters', cls);
	            parameters = parameters || [];
	            // there might be gaps if some in between parameters do not have annotations.
	            // we pad with nulls.
	            while (parameters.length <= index) {
	                parameters.push(null);
	            }
	            parameters[index] = parameters[index] || [];
	            var annotationsForParam = parameters[index];
	            annotationsForParam.push(annotationInstance);
	            Reflect.defineMetadata('parameters', parameters, cls);
	            return cls;
	        }
	    }
	    ParamDecoratorFactory.prototype = Object.create(annotationCls.prototype);
	    return ParamDecoratorFactory;
	}
	exports.makeParamDecorator = makeParamDecorator;
	function makePropDecorator(decoratorCls) {
	    function PropDecoratorFactory() {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i - 0] = arguments[_i];
	        }
	        var decoratorInstance = Object.create(decoratorCls.prototype);
	        decoratorCls.apply(decoratorInstance, args);
	        if (this instanceof decoratorCls) {
	            return decoratorInstance;
	        }
	        else {
	            return function PropDecorator(target, name) {
	                var meta = Reflect.getOwnMetadata('propMetadata', target.constructor);
	                meta = meta || {};
	                meta[name] = meta[name] || [];
	                meta[name].unshift(decoratorInstance);
	                Reflect.defineMetadata('propMetadata', meta, target.constructor);
	            };
	        }
	    }
	    PropDecoratorFactory.prototype = Object.create(decoratorCls.prototype);
	    return PropDecoratorFactory;
	}
	exports.makePropDecorator = makePropDecorator;
	//# sourceMappingURL=decorators.js.map

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	/**
	 * Allows to refer to references which are not yet defined.
	 *
	 * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
	 * DI is declared,
	 * but not yet defined. It is also used when the `token` which we use when creating a query is not
	 * yet defined.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))
	 *
	 * ```typescript
	 * class Door {
	 *   lock: Lock;
	 *   constructor(@Inject(forwardRef(() => Lock)) lock:Lock) {
	 *     this.lock = lock;
	 *   }
	 * }
	 *
	 * // Only at this point Lock is defined.
	 * class Lock {
	 * }
	 *
	 * var injector = Injector.resolveAndCreate([Door, Lock]);
	 * var door = injector.get(Door);
	 * expect(door instanceof Door).toBe(true);
	 * expect(door.lock instanceof Lock).toBe(true);
	 * ```
	 */
	function forwardRef(forwardRefFn) {
	    forwardRefFn.__forward_ref__ = forwardRef;
	    forwardRefFn.toString = function () { return lang_1.stringify(this()); };
	    return forwardRefFn;
	}
	exports.forwardRef = forwardRef;
	/**
	 * Lazily retrieves the reference value from a forwardRef.
	 *
	 * Acts as the identity function when given a non-forward-ref value.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))
	 *
	 * ```typescript
	 * var ref = forwardRef(() => "refValue");
	 * expect(resolveForwardRef(ref)).toEqual("refValue");
	 * expect(resolveForwardRef("regularValue")).toEqual("regularValue");
	 * ```
	 *
	 * See: {@link forwardRef}
	 */
	function resolveForwardRef(type) {
	    if (lang_1.isFunction(type) && type.hasOwnProperty('__forward_ref__') &&
	        type.__forward_ref__ === forwardRef) {
	        return type();
	    }
	    else {
	        return type;
	    }
	}
	exports.resolveForwardRef = resolveForwardRef;
	//# sourceMappingURL=forward_ref.js.map

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var collection_1 = __webpack_require__(202);
	var provider_1 = __webpack_require__(203);
	var exceptions_1 = __webpack_require__(211);
	var lang_1 = __webpack_require__(49);
	var key_1 = __webpack_require__(209);
	var metadata_1 = __webpack_require__(197);
	// Threshold for the dynamic version
	var _MAX_CONSTRUCTION_COUNTER = 10;
	exports.UNDEFINED = lang_1.CONST_EXPR(new Object());
	/**
	 * Visibility of a {@link Provider}.
	 */
	(function (Visibility) {
	    /**
	     * A `Public` {@link Provider} is only visible to regular (as opposed to host) child injectors.
	     */
	    Visibility[Visibility["Public"] = 0] = "Public";
	    /**
	     * A `Private` {@link Provider} is only visible to host (as opposed to regular) child injectors.
	     */
	    Visibility[Visibility["Private"] = 1] = "Private";
	    /**
	     * A `PublicAndPrivate` {@link Provider} is visible to both host and regular child injectors.
	     */
	    Visibility[Visibility["PublicAndPrivate"] = 2] = "PublicAndPrivate";
	})(exports.Visibility || (exports.Visibility = {}));
	var Visibility = exports.Visibility;
	function canSee(src, dst) {
	    return (src === dst) ||
	        (dst === Visibility.PublicAndPrivate || src === Visibility.PublicAndPrivate);
	}
	var ProtoInjectorInlineStrategy = (function () {
	    function ProtoInjectorInlineStrategy(protoEI, bwv) {
	        this.provider0 = null;
	        this.provider1 = null;
	        this.provider2 = null;
	        this.provider3 = null;
	        this.provider4 = null;
	        this.provider5 = null;
	        this.provider6 = null;
	        this.provider7 = null;
	        this.provider8 = null;
	        this.provider9 = null;
	        this.keyId0 = null;
	        this.keyId1 = null;
	        this.keyId2 = null;
	        this.keyId3 = null;
	        this.keyId4 = null;
	        this.keyId5 = null;
	        this.keyId6 = null;
	        this.keyId7 = null;
	        this.keyId8 = null;
	        this.keyId9 = null;
	        this.visibility0 = null;
	        this.visibility1 = null;
	        this.visibility2 = null;
	        this.visibility3 = null;
	        this.visibility4 = null;
	        this.visibility5 = null;
	        this.visibility6 = null;
	        this.visibility7 = null;
	        this.visibility8 = null;
	        this.visibility9 = null;
	        var length = bwv.length;
	        if (length > 0) {
	            this.provider0 = bwv[0].provider;
	            this.keyId0 = bwv[0].getKeyId();
	            this.visibility0 = bwv[0].visibility;
	        }
	        if (length > 1) {
	            this.provider1 = bwv[1].provider;
	            this.keyId1 = bwv[1].getKeyId();
	            this.visibility1 = bwv[1].visibility;
	        }
	        if (length > 2) {
	            this.provider2 = bwv[2].provider;
	            this.keyId2 = bwv[2].getKeyId();
	            this.visibility2 = bwv[2].visibility;
	        }
	        if (length > 3) {
	            this.provider3 = bwv[3].provider;
	            this.keyId3 = bwv[3].getKeyId();
	            this.visibility3 = bwv[3].visibility;
	        }
	        if (length > 4) {
	            this.provider4 = bwv[4].provider;
	            this.keyId4 = bwv[4].getKeyId();
	            this.visibility4 = bwv[4].visibility;
	        }
	        if (length > 5) {
	            this.provider5 = bwv[5].provider;
	            this.keyId5 = bwv[5].getKeyId();
	            this.visibility5 = bwv[5].visibility;
	        }
	        if (length > 6) {
	            this.provider6 = bwv[6].provider;
	            this.keyId6 = bwv[6].getKeyId();
	            this.visibility6 = bwv[6].visibility;
	        }
	        if (length > 7) {
	            this.provider7 = bwv[7].provider;
	            this.keyId7 = bwv[7].getKeyId();
	            this.visibility7 = bwv[7].visibility;
	        }
	        if (length > 8) {
	            this.provider8 = bwv[8].provider;
	            this.keyId8 = bwv[8].getKeyId();
	            this.visibility8 = bwv[8].visibility;
	        }
	        if (length > 9) {
	            this.provider9 = bwv[9].provider;
	            this.keyId9 = bwv[9].getKeyId();
	            this.visibility9 = bwv[9].visibility;
	        }
	    }
	    ProtoInjectorInlineStrategy.prototype.getProviderAtIndex = function (index) {
	        if (index == 0)
	            return this.provider0;
	        if (index == 1)
	            return this.provider1;
	        if (index == 2)
	            return this.provider2;
	        if (index == 3)
	            return this.provider3;
	        if (index == 4)
	            return this.provider4;
	        if (index == 5)
	            return this.provider5;
	        if (index == 6)
	            return this.provider6;
	        if (index == 7)
	            return this.provider7;
	        if (index == 8)
	            return this.provider8;
	        if (index == 9)
	            return this.provider9;
	        throw new exceptions_1.OutOfBoundsError(index);
	    };
	    ProtoInjectorInlineStrategy.prototype.createInjectorStrategy = function (injector) {
	        return new InjectorInlineStrategy(injector, this);
	    };
	    return ProtoInjectorInlineStrategy;
	})();
	exports.ProtoInjectorInlineStrategy = ProtoInjectorInlineStrategy;
	var ProtoInjectorDynamicStrategy = (function () {
	    function ProtoInjectorDynamicStrategy(protoInj, bwv) {
	        var len = bwv.length;
	        this.providers = collection_1.ListWrapper.createFixedSize(len);
	        this.keyIds = collection_1.ListWrapper.createFixedSize(len);
	        this.visibilities = collection_1.ListWrapper.createFixedSize(len);
	        for (var i = 0; i < len; i++) {
	            this.providers[i] = bwv[i].provider;
	            this.keyIds[i] = bwv[i].getKeyId();
	            this.visibilities[i] = bwv[i].visibility;
	        }
	    }
	    ProtoInjectorDynamicStrategy.prototype.getProviderAtIndex = function (index) {
	        if (index < 0 || index >= this.providers.length) {
	            throw new exceptions_1.OutOfBoundsError(index);
	        }
	        return this.providers[index];
	    };
	    ProtoInjectorDynamicStrategy.prototype.createInjectorStrategy = function (ei) {
	        return new InjectorDynamicStrategy(this, ei);
	    };
	    return ProtoInjectorDynamicStrategy;
	})();
	exports.ProtoInjectorDynamicStrategy = ProtoInjectorDynamicStrategy;
	var ProtoInjector = (function () {
	    function ProtoInjector(bwv) {
	        this.numberOfProviders = bwv.length;
	        this._strategy = bwv.length > _MAX_CONSTRUCTION_COUNTER ?
	            new ProtoInjectorDynamicStrategy(this, bwv) :
	            new ProtoInjectorInlineStrategy(this, bwv);
	    }
	    ProtoInjector.prototype.getProviderAtIndex = function (index) { return this._strategy.getProviderAtIndex(index); };
	    return ProtoInjector;
	})();
	exports.ProtoInjector = ProtoInjector;
	var InjectorInlineStrategy = (function () {
	    function InjectorInlineStrategy(injector, protoStrategy) {
	        this.injector = injector;
	        this.protoStrategy = protoStrategy;
	        this.obj0 = exports.UNDEFINED;
	        this.obj1 = exports.UNDEFINED;
	        this.obj2 = exports.UNDEFINED;
	        this.obj3 = exports.UNDEFINED;
	        this.obj4 = exports.UNDEFINED;
	        this.obj5 = exports.UNDEFINED;
	        this.obj6 = exports.UNDEFINED;
	        this.obj7 = exports.UNDEFINED;
	        this.obj8 = exports.UNDEFINED;
	        this.obj9 = exports.UNDEFINED;
	    }
	    InjectorInlineStrategy.prototype.resetConstructionCounter = function () { this.injector._constructionCounter = 0; };
	    InjectorInlineStrategy.prototype.instantiateProvider = function (provider, visibility) {
	        return this.injector._new(provider, visibility);
	    };
	    InjectorInlineStrategy.prototype.attach = function (parent, isHost) {
	        var inj = this.injector;
	        inj._parent = parent;
	        inj._isHost = isHost;
	    };
	    InjectorInlineStrategy.prototype.getObjByKeyId = function (keyId, visibility) {
	        var p = this.protoStrategy;
	        var inj = this.injector;
	        if (p.keyId0 === keyId && canSee(p.visibility0, visibility)) {
	            if (this.obj0 === exports.UNDEFINED) {
	                this.obj0 = inj._new(p.provider0, p.visibility0);
	            }
	            return this.obj0;
	        }
	        if (p.keyId1 === keyId && canSee(p.visibility1, visibility)) {
	            if (this.obj1 === exports.UNDEFINED) {
	                this.obj1 = inj._new(p.provider1, p.visibility1);
	            }
	            return this.obj1;
	        }
	        if (p.keyId2 === keyId && canSee(p.visibility2, visibility)) {
	            if (this.obj2 === exports.UNDEFINED) {
	                this.obj2 = inj._new(p.provider2, p.visibility2);
	            }
	            return this.obj2;
	        }
	        if (p.keyId3 === keyId && canSee(p.visibility3, visibility)) {
	            if (this.obj3 === exports.UNDEFINED) {
	                this.obj3 = inj._new(p.provider3, p.visibility3);
	            }
	            return this.obj3;
	        }
	        if (p.keyId4 === keyId && canSee(p.visibility4, visibility)) {
	            if (this.obj4 === exports.UNDEFINED) {
	                this.obj4 = inj._new(p.provider4, p.visibility4);
	            }
	            return this.obj4;
	        }
	        if (p.keyId5 === keyId && canSee(p.visibility5, visibility)) {
	            if (this.obj5 === exports.UNDEFINED) {
	                this.obj5 = inj._new(p.provider5, p.visibility5);
	            }
	            return this.obj5;
	        }
	        if (p.keyId6 === keyId && canSee(p.visibility6, visibility)) {
	            if (this.obj6 === exports.UNDEFINED) {
	                this.obj6 = inj._new(p.provider6, p.visibility6);
	            }
	            return this.obj6;
	        }
	        if (p.keyId7 === keyId && canSee(p.visibility7, visibility)) {
	            if (this.obj7 === exports.UNDEFINED) {
	                this.obj7 = inj._new(p.provider7, p.visibility7);
	            }
	            return this.obj7;
	        }
	        if (p.keyId8 === keyId && canSee(p.visibility8, visibility)) {
	            if (this.obj8 === exports.UNDEFINED) {
	                this.obj8 = inj._new(p.provider8, p.visibility8);
	            }
	            return this.obj8;
	        }
	        if (p.keyId9 === keyId && canSee(p.visibility9, visibility)) {
	            if (this.obj9 === exports.UNDEFINED) {
	                this.obj9 = inj._new(p.provider9, p.visibility9);
	            }
	            return this.obj9;
	        }
	        return exports.UNDEFINED;
	    };
	    InjectorInlineStrategy.prototype.getObjAtIndex = function (index) {
	        if (index == 0)
	            return this.obj0;
	        if (index == 1)
	            return this.obj1;
	        if (index == 2)
	            return this.obj2;
	        if (index == 3)
	            return this.obj3;
	        if (index == 4)
	            return this.obj4;
	        if (index == 5)
	            return this.obj5;
	        if (index == 6)
	            return this.obj6;
	        if (index == 7)
	            return this.obj7;
	        if (index == 8)
	            return this.obj8;
	        if (index == 9)
	            return this.obj9;
	        throw new exceptions_1.OutOfBoundsError(index);
	    };
	    InjectorInlineStrategy.prototype.getMaxNumberOfObjects = function () { return _MAX_CONSTRUCTION_COUNTER; };
	    return InjectorInlineStrategy;
	})();
	exports.InjectorInlineStrategy = InjectorInlineStrategy;
	var InjectorDynamicStrategy = (function () {
	    function InjectorDynamicStrategy(protoStrategy, injector) {
	        this.protoStrategy = protoStrategy;
	        this.injector = injector;
	        this.objs = collection_1.ListWrapper.createFixedSize(protoStrategy.providers.length);
	        collection_1.ListWrapper.fill(this.objs, exports.UNDEFINED);
	    }
	    InjectorDynamicStrategy.prototype.resetConstructionCounter = function () { this.injector._constructionCounter = 0; };
	    InjectorDynamicStrategy.prototype.instantiateProvider = function (provider, visibility) {
	        return this.injector._new(provider, visibility);
	    };
	    InjectorDynamicStrategy.prototype.attach = function (parent, isHost) {
	        var inj = this.injector;
	        inj._parent = parent;
	        inj._isHost = isHost;
	    };
	    InjectorDynamicStrategy.prototype.getObjByKeyId = function (keyId, visibility) {
	        var p = this.protoStrategy;
	        for (var i = 0; i < p.keyIds.length; i++) {
	            if (p.keyIds[i] === keyId && canSee(p.visibilities[i], visibility)) {
	                if (this.objs[i] === exports.UNDEFINED) {
	                    this.objs[i] = this.injector._new(p.providers[i], p.visibilities[i]);
	                }
	                return this.objs[i];
	            }
	        }
	        return exports.UNDEFINED;
	    };
	    InjectorDynamicStrategy.prototype.getObjAtIndex = function (index) {
	        if (index < 0 || index >= this.objs.length) {
	            throw new exceptions_1.OutOfBoundsError(index);
	        }
	        return this.objs[index];
	    };
	    InjectorDynamicStrategy.prototype.getMaxNumberOfObjects = function () { return this.objs.length; };
	    return InjectorDynamicStrategy;
	})();
	exports.InjectorDynamicStrategy = InjectorDynamicStrategy;
	var ProviderWithVisibility = (function () {
	    function ProviderWithVisibility(provider, visibility) {
	        this.provider = provider;
	        this.visibility = visibility;
	    }
	    ;
	    ProviderWithVisibility.prototype.getKeyId = function () { return this.provider.key.id; };
	    return ProviderWithVisibility;
	})();
	exports.ProviderWithVisibility = ProviderWithVisibility;
	/**
	 * A dependency injection container used for instantiating objects and resolving dependencies.
	 *
	 * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
	 * constructor dependencies.
	 *
	 * In typical use, application code asks for the dependencies in the constructor and they are
	 * resolved by the `Injector`.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))
	 *
	 * The following example creates an `Injector` configured to create `Engine` and `Car`.
	 *
	 * ```typescript
	 * @Injectable()
	 * class Engine {
	 * }
	 *
	 * @Injectable()
	 * class Car {
	 *   constructor(public engine:Engine) {}
	 * }
	 *
	 * var injector = Injector.resolveAndCreate([Car, Engine]);
	 * var car = injector.get(Car);
	 * expect(car instanceof Car).toBe(true);
	 * expect(car.engine instanceof Engine).toBe(true);
	 * ```
	 *
	 * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
	 * resolve all of the object's dependencies automatically.
	 */
	var Injector = (function () {
	    /**
	     * Private
	     */
	    function Injector(_proto /* ProtoInjector */, _parent, _depProvider, _debugContext) {
	        if (_parent === void 0) { _parent = null; }
	        if (_depProvider === void 0) { _depProvider = null; }
	        if (_debugContext === void 0) { _debugContext = null; }
	        this._depProvider = _depProvider;
	        this._debugContext = _debugContext;
	        /** @internal */
	        this._isHost = false;
	        /** @internal */
	        this._constructionCounter = 0;
	        this._proto = _proto;
	        this._parent = _parent;
	        this._strategy = _proto._strategy.createInjectorStrategy(this);
	    }
	    /**
	     * Turns an array of provider definitions into an array of resolved providers.
	     *
	     * A resolution is a process of flattening multiple nested arrays and converting individual
	     * providers into an array of {@link ResolvedProvider}s.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))
	     *
	     * ```typescript
	     * @Injectable()
	     * class Engine {
	     * }
	     *
	     * @Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var providers = Injector.resolve([Car, [[Engine]]]);
	     *
	     * expect(providers.length).toEqual(2);
	     *
	     * expect(providers[0] instanceof ResolvedProvider).toBe(true);
	     * expect(providers[0].key.displayName).toBe("Car");
	     * expect(providers[0].dependencies.length).toEqual(1);
	     * expect(providers[0].factory).toBeDefined();
	     *
	     * expect(providers[1].key.displayName).toBe("Engine");
	     * });
	     * ```
	     *
	     * See {@link Injector#fromResolvedProviders} for more info.
	     */
	    Injector.resolve = function (providers) {
	        return provider_1.resolveProviders(providers);
	    };
	    /**
	     * Resolves an array of providers and creates an injector from those providers.
	     *
	     * The passed-in providers can be an array of `Type`, {@link Provider},
	     * or a recursive array of more providers.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))
	     *
	     * ```typescript
	     * @Injectable()
	     * class Engine {
	     * }
	     *
	     * @Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var injector = Injector.resolveAndCreate([Car, Engine]);
	     * expect(injector.get(Car) instanceof Car).toBe(true);
	     * ```
	     *
	     * This function is slower than the corresponding `fromResolvedProviders`
	     * because it needs to resolve the passed-in providers first.
	     * See {@link Injector#resolve} and {@link Injector#fromResolvedProviders}.
	     */
	    Injector.resolveAndCreate = function (providers) {
	        var resolvedProviders = Injector.resolve(providers);
	        return Injector.fromResolvedProviders(resolvedProviders);
	    };
	    /**
	     * Creates an injector from previously resolved providers.
	     *
	     * This API is the recommended way to construct injectors in performance-sensitive parts.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))
	     *
	     * ```typescript
	     * @Injectable()
	     * class Engine {
	     * }
	     *
	     * @Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var providers = Injector.resolve([Car, Engine]);
	     * var injector = Injector.fromResolvedProviders(providers);
	     * expect(injector.get(Car) instanceof Car).toBe(true);
	     * ```
	     */
	    Injector.fromResolvedProviders = function (providers) {
	        var bd = providers.map(function (b) { return new ProviderWithVisibility(b, Visibility.Public); });
	        var proto = new ProtoInjector(bd);
	        return new Injector(proto, null, null);
	    };
	    /**
	     * @deprecated
	     */
	    Injector.fromResolvedBindings = function (providers) {
	        return Injector.fromResolvedProviders(providers);
	    };
	    /**
	     * @internal
	     */
	    Injector.prototype.debugContext = function () { return this._debugContext(); };
	    /**
	     * Retrieves an instance from the injector based on the provided token.
	     * Throws {@link NoProviderError} if not found.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/HeXSHg?p=preview))
	     *
	     * ```typescript
	     * var injector = Injector.resolveAndCreate([
	     *   provide("validToken", {useValue: "Value"})
	     * ]);
	     * expect(injector.get("validToken")).toEqual("Value");
	     * expect(() => injector.get("invalidToken")).toThrowError();
	     * ```
	     *
	     * `Injector` returns itself when given `Injector` as a token.
	     *
	     * ```typescript
	     * var injector = Injector.resolveAndCreate([]);
	     * expect(injector.get(Injector)).toBe(injector);
	     * ```
	     */
	    Injector.prototype.get = function (token) {
	        return this._getByKey(key_1.Key.get(token), null, null, false, Visibility.PublicAndPrivate);
	    };
	    /**
	     * Retrieves an instance from the injector based on the provided token.
	     * Returns null if not found.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/tpEbEy?p=preview))
	     *
	     * ```typescript
	     * var injector = Injector.resolveAndCreate([
	     *   provide("validToken", {useValue: "Value"})
	     * ]);
	     * expect(injector.getOptional("validToken")).toEqual("Value");
	     * expect(injector.getOptional("invalidToken")).toBe(null);
	     * ```
	     *
	     * `Injector` returns itself when given `Injector` as a token.
	     *
	     * ```typescript
	     * var injector = Injector.resolveAndCreate([]);
	     * expect(injector.getOptional(Injector)).toBe(injector);
	     * ```
	     */
	    Injector.prototype.getOptional = function (token) {
	        return this._getByKey(key_1.Key.get(token), null, null, true, Visibility.PublicAndPrivate);
	    };
	    /**
	     * @internal
	     */
	    Injector.prototype.getAt = function (index) { return this._strategy.getObjAtIndex(index); };
	    Object.defineProperty(Injector.prototype, "parent", {
	        /**
	         * Parent of this injector.
	         *
	         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	         * -->
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))
	         *
	         * ```typescript
	         * var parent = Injector.resolveAndCreate([]);
	         * var child = parent.resolveAndCreateChild([]);
	         * expect(child.parent).toBe(parent);
	         * ```
	         */
	        get: function () { return this._parent; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Injector.prototype, "internalStrategy", {
	        /**
	         * @internal
	         * Internal. Do not use.
	         * We return `any` not to export the InjectorStrategy type.
	         */
	        get: function () { return this._strategy; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Resolves an array of providers and creates a child injector from those providers.
	     *
	     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	     * -->
	     *
	     * The passed-in providers can be an array of `Type`, {@link Provider},
	     * or a recursive array of more providers.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))
	     *
	     * ```typescript
	     * class ParentProvider {}
	     * class ChildProvider {}
	     *
	     * var parent = Injector.resolveAndCreate([ParentProvider]);
	     * var child = parent.resolveAndCreateChild([ChildProvider]);
	     *
	     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
	     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
	     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
	     * ```
	     *
	     * This function is slower than the corresponding `createChildFromResolved`
	     * because it needs to resolve the passed-in providers first.
	     * See {@link Injector#resolve} and {@link Injector#createChildFromResolved}.
	     */
	    Injector.prototype.resolveAndCreateChild = function (providers) {
	        var resolvedProviders = Injector.resolve(providers);
	        return this.createChildFromResolved(resolvedProviders);
	    };
	    /**
	     * Creates a child injector from previously resolved providers.
	     *
	     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	     * -->
	     *
	     * This API is the recommended way to construct injectors in performance-sensitive parts.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))
	     *
	     * ```typescript
	     * class ParentProvider {}
	     * class ChildProvider {}
	     *
	     * var parentProviders = Injector.resolve([ParentProvider]);
	     * var childProviders = Injector.resolve([ChildProvider]);
	     *
	     * var parent = Injector.fromResolvedProviders(parentProviders);
	     * var child = parent.createChildFromResolved(childProviders);
	     *
	     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
	     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
	     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
	     * ```
	     */
	    Injector.prototype.createChildFromResolved = function (providers) {
	        var bd = providers.map(function (b) { return new ProviderWithVisibility(b, Visibility.Public); });
	        var proto = new ProtoInjector(bd);
	        var inj = new Injector(proto, null, null);
	        inj._parent = this;
	        return inj;
	    };
	    /**
	     * Resolves a provider and instantiates an object in the context of the injector.
	     *
	     * The created object does not get cached by the injector.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))
	     *
	     * ```typescript
	     * @Injectable()
	     * class Engine {
	     * }
	     *
	     * @Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var injector = Injector.resolveAndCreate([Engine]);
	     *
	     * var car = injector.resolveAndInstantiate(Car);
	     * expect(car.engine).toBe(injector.get(Engine));
	     * expect(car).not.toBe(injector.resolveAndInstantiate(Car));
	     * ```
	     */
	    Injector.prototype.resolveAndInstantiate = function (provider) {
	        return this.instantiateResolved(Injector.resolve([provider])[0]);
	    };
	    /**
	     * Instantiates an object using a resolved provider in the context of the injector.
	     *
	     * The created object does not get cached by the injector.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))
	     *
	     * ```typescript
	     * @Injectable()
	     * class Engine {
	     * }
	     *
	     * @Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var injector = Injector.resolveAndCreate([Engine]);
	     * var carProvider = Injector.resolve([Car])[0];
	     * var car = injector.instantiateResolved(carProvider);
	     * expect(car.engine).toBe(injector.get(Engine));
	     * expect(car).not.toBe(injector.instantiateResolved(carProvider));
	     * ```
	     */
	    Injector.prototype.instantiateResolved = function (provider) {
	        return this._instantiateProvider(provider, Visibility.PublicAndPrivate);
	    };
	    /** @internal */
	    Injector.prototype._new = function (provider, visibility) {
	        if (this._constructionCounter++ > this._strategy.getMaxNumberOfObjects()) {
	            throw new exceptions_1.CyclicDependencyError(this, provider.key);
	        }
	        return this._instantiateProvider(provider, visibility);
	    };
	    Injector.prototype._instantiateProvider = function (provider, visibility) {
	        if (provider.multiProvider) {
	            var res = collection_1.ListWrapper.createFixedSize(provider.resolvedFactories.length);
	            for (var i = 0; i < provider.resolvedFactories.length; ++i) {
	                res[i] = this._instantiate(provider, provider.resolvedFactories[i], visibility);
	            }
	            return res;
	        }
	        else {
	            return this._instantiate(provider, provider.resolvedFactories[0], visibility);
	        }
	    };
	    Injector.prototype._instantiate = function (provider, resolvedFactory, visibility) {
	        var factory = resolvedFactory.factory;
	        var deps = resolvedFactory.dependencies;
	        var length = deps.length;
	        var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19;
	        try {
	            d0 = length > 0 ? this._getByDependency(provider, deps[0], visibility) : null;
	            d1 = length > 1 ? this._getByDependency(provider, deps[1], visibility) : null;
	            d2 = length > 2 ? this._getByDependency(provider, deps[2], visibility) : null;
	            d3 = length > 3 ? this._getByDependency(provider, deps[3], visibility) : null;
	            d4 = length > 4 ? this._getByDependency(provider, deps[4], visibility) : null;
	            d5 = length > 5 ? this._getByDependency(provider, deps[5], visibility) : null;
	            d6 = length > 6 ? this._getByDependency(provider, deps[6], visibility) : null;
	            d7 = length > 7 ? this._getByDependency(provider, deps[7], visibility) : null;
	            d8 = length > 8 ? this._getByDependency(provider, deps[8], visibility) : null;
	            d9 = length > 9 ? this._getByDependency(provider, deps[9], visibility) : null;
	            d10 = length > 10 ? this._getByDependency(provider, deps[10], visibility) : null;
	            d11 = length > 11 ? this._getByDependency(provider, deps[11], visibility) : null;
	            d12 = length > 12 ? this._getByDependency(provider, deps[12], visibility) : null;
	            d13 = length > 13 ? this._getByDependency(provider, deps[13], visibility) : null;
	            d14 = length > 14 ? this._getByDependency(provider, deps[14], visibility) : null;
	            d15 = length > 15 ? this._getByDependency(provider, deps[15], visibility) : null;
	            d16 = length > 16 ? this._getByDependency(provider, deps[16], visibility) : null;
	            d17 = length > 17 ? this._getByDependency(provider, deps[17], visibility) : null;
	            d18 = length > 18 ? this._getByDependency(provider, deps[18], visibility) : null;
	            d19 = length > 19 ? this._getByDependency(provider, deps[19], visibility) : null;
	        }
	        catch (e) {
	            if (e instanceof exceptions_1.AbstractProviderError || e instanceof exceptions_1.InstantiationError) {
	                e.addKey(this, provider.key);
	            }
	            throw e;
	        }
	        var obj;
	        try {
	            switch (length) {
	                case 0:
	                    obj = factory();
	                    break;
	                case 1:
	                    obj = factory(d0);
	                    break;
	                case 2:
	                    obj = factory(d0, d1);
	                    break;
	                case 3:
	                    obj = factory(d0, d1, d2);
	                    break;
	                case 4:
	                    obj = factory(d0, d1, d2, d3);
	                    break;
	                case 5:
	                    obj = factory(d0, d1, d2, d3, d4);
	                    break;
	                case 6:
	                    obj = factory(d0, d1, d2, d3, d4, d5);
	                    break;
	                case 7:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6);
	                    break;
	                case 8:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
	                    break;
	                case 9:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
	                    break;
	                case 10:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
	                    break;
	                case 11:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
	                    break;
	                case 12:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11);
	                    break;
	                case 13:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12);
	                    break;
	                case 14:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13);
	                    break;
	                case 15:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14);
	                    break;
	                case 16:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15);
	                    break;
	                case 17:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16);
	                    break;
	                case 18:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17);
	                    break;
	                case 19:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18);
	                    break;
	                case 20:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19);
	                    break;
	            }
	        }
	        catch (e) {
	            throw new exceptions_1.InstantiationError(this, e, e.stack, provider.key);
	        }
	        return obj;
	    };
	    Injector.prototype._getByDependency = function (provider, dep, providerVisibility) {
	        var special = lang_1.isPresent(this._depProvider) ?
	            this._depProvider.getDependency(this, provider, dep) :
	            exports.UNDEFINED;
	        if (special !== exports.UNDEFINED) {
	            return special;
	        }
	        else {
	            return this._getByKey(dep.key, dep.lowerBoundVisibility, dep.upperBoundVisibility, dep.optional, providerVisibility);
	        }
	    };
	    Injector.prototype._getByKey = function (key, lowerBoundVisibility, upperBoundVisibility, optional, providerVisibility) {
	        if (key === INJECTOR_KEY) {
	            return this;
	        }
	        if (upperBoundVisibility instanceof metadata_1.SelfMetadata) {
	            return this._getByKeySelf(key, optional, providerVisibility);
	        }
	        else if (upperBoundVisibility instanceof metadata_1.HostMetadata) {
	            return this._getByKeyHost(key, optional, providerVisibility, lowerBoundVisibility);
	        }
	        else {
	            return this._getByKeyDefault(key, optional, providerVisibility, lowerBoundVisibility);
	        }
	    };
	    /** @internal */
	    Injector.prototype._throwOrNull = function (key, optional) {
	        if (optional) {
	            return null;
	        }
	        else {
	            throw new exceptions_1.NoProviderError(this, key);
	        }
	    };
	    /** @internal */
	    Injector.prototype._getByKeySelf = function (key, optional, providerVisibility) {
	        var obj = this._strategy.getObjByKeyId(key.id, providerVisibility);
	        return (obj !== exports.UNDEFINED) ? obj : this._throwOrNull(key, optional);
	    };
	    /** @internal */
	    Injector.prototype._getByKeyHost = function (key, optional, providerVisibility, lowerBoundVisibility) {
	        var inj = this;
	        if (lowerBoundVisibility instanceof metadata_1.SkipSelfMetadata) {
	            if (inj._isHost) {
	                return this._getPrivateDependency(key, optional, inj);
	            }
	            else {
	                inj = inj._parent;
	            }
	        }
	        while (inj != null) {
	            var obj = inj._strategy.getObjByKeyId(key.id, providerVisibility);
	            if (obj !== exports.UNDEFINED)
	                return obj;
	            if (lang_1.isPresent(inj._parent) && inj._isHost) {
	                return this._getPrivateDependency(key, optional, inj);
	            }
	            else {
	                inj = inj._parent;
	            }
	        }
	        return this._throwOrNull(key, optional);
	    };
	    /** @internal */
	    Injector.prototype._getPrivateDependency = function (key, optional, inj) {
	        var obj = inj._parent._strategy.getObjByKeyId(key.id, Visibility.Private);
	        return (obj !== exports.UNDEFINED) ? obj : this._throwOrNull(key, optional);
	    };
	    /** @internal */
	    Injector.prototype._getByKeyDefault = function (key, optional, providerVisibility, lowerBoundVisibility) {
	        var inj = this;
	        if (lowerBoundVisibility instanceof metadata_1.SkipSelfMetadata) {
	            providerVisibility = inj._isHost ? Visibility.PublicAndPrivate : Visibility.Public;
	            inj = inj._parent;
	        }
	        while (inj != null) {
	            var obj = inj._strategy.getObjByKeyId(key.id, providerVisibility);
	            if (obj !== exports.UNDEFINED)
	                return obj;
	            providerVisibility = inj._isHost ? Visibility.PublicAndPrivate : Visibility.Public;
	            inj = inj._parent;
	        }
	        return this._throwOrNull(key, optional);
	    };
	    Object.defineProperty(Injector.prototype, "displayName", {
	        get: function () {
	            return "Injector(providers: [" + _mapProviders(this, function (b) { return (" \"" + b.key.displayName + "\" "); }).join(", ") + "])";
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Injector.prototype.toString = function () { return this.displayName; };
	    return Injector;
	})();
	exports.Injector = Injector;
	var INJECTOR_KEY = key_1.Key.get(Injector);
	function _mapProviders(injector, fn) {
	    var res = [];
	    for (var i = 0; i < injector._proto.numberOfProviders; ++i) {
	        res.push(fn(injector._proto.getProviderAtIndex(i)));
	    }
	    return res;
	}
	//# sourceMappingURL=injector.js.map

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	exports.Map = lang_1.global.Map;
	exports.Set = lang_1.global.Set;
	// Safari and Internet Explorer do not support the iterable parameter to the
	// Map constructor.  We work around that by manually adding the items.
	var createMapFromPairs = (function () {
	    try {
	        if (new exports.Map([[1, 2]]).size === 1) {
	            return function createMapFromPairs(pairs) { return new exports.Map(pairs); };
	        }
	    }
	    catch (e) {
	    }
	    return function createMapAndPopulateFromPairs(pairs) {
	        var map = new exports.Map();
	        for (var i = 0; i < pairs.length; i++) {
	            var pair = pairs[i];
	            map.set(pair[0], pair[1]);
	        }
	        return map;
	    };
	})();
	var createMapFromMap = (function () {
	    try {
	        if (new exports.Map(new exports.Map())) {
	            return function createMapFromMap(m) { return new exports.Map(m); };
	        }
	    }
	    catch (e) {
	    }
	    return function createMapAndPopulateFromMap(m) {
	        var map = new exports.Map();
	        m.forEach(function (v, k) { map.set(k, v); });
	        return map;
	    };
	})();
	var _clearValues = (function () {
	    if ((new exports.Map()).keys().next) {
	        return function _clearValues(m) {
	            var keyIterator = m.keys();
	            var k;
	            while (!((k = keyIterator.next()).done)) {
	                m.set(k.value, null);
	            }
	        };
	    }
	    else {
	        return function _clearValuesWithForeEach(m) {
	            m.forEach(function (v, k) { m.set(k, null); });
	        };
	    }
	})();
	// Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from
	// TODO(mlaval): remove the work around once we have a working polyfill of Array.from
	var _arrayFromMap = (function () {
	    try {
	        if ((new exports.Map()).values().next) {
	            return function createArrayFromMap(m, getValues) {
	                return getValues ? Array.from(m.values()) : Array.from(m.keys());
	            };
	        }
	    }
	    catch (e) {
	    }
	    return function createArrayFromMapWithForeach(m, getValues) {
	        var res = ListWrapper.createFixedSize(m.size), i = 0;
	        m.forEach(function (v, k) {
	            res[i] = getValues ? v : k;
	            i++;
	        });
	        return res;
	    };
	})();
	var MapWrapper = (function () {
	    function MapWrapper() {
	    }
	    MapWrapper.clone = function (m) { return createMapFromMap(m); };
	    MapWrapper.createFromStringMap = function (stringMap) {
	        var result = new exports.Map();
	        for (var prop in stringMap) {
	            result.set(prop, stringMap[prop]);
	        }
	        return result;
	    };
	    MapWrapper.toStringMap = function (m) {
	        var r = {};
	        m.forEach(function (v, k) { return r[k] = v; });
	        return r;
	    };
	    MapWrapper.createFromPairs = function (pairs) { return createMapFromPairs(pairs); };
	    MapWrapper.clearValues = function (m) { _clearValues(m); };
	    MapWrapper.iterable = function (m) { return m; };
	    MapWrapper.keys = function (m) { return _arrayFromMap(m, false); };
	    MapWrapper.values = function (m) { return _arrayFromMap(m, true); };
	    return MapWrapper;
	})();
	exports.MapWrapper = MapWrapper;
	/**
	 * Wraps Javascript Objects
	 */
	var StringMapWrapper = (function () {
	    function StringMapWrapper() {
	    }
	    StringMapWrapper.create = function () {
	        // Note: We are not using Object.create(null) here due to
	        // performance!
	        // http://jsperf.com/ng2-object-create-null
	        return {};
	    };
	    StringMapWrapper.contains = function (map, key) {
	        return map.hasOwnProperty(key);
	    };
	    StringMapWrapper.get = function (map, key) {
	        return map.hasOwnProperty(key) ? map[key] : undefined;
	    };
	    StringMapWrapper.set = function (map, key, value) { map[key] = value; };
	    StringMapWrapper.keys = function (map) { return Object.keys(map); };
	    StringMapWrapper.isEmpty = function (map) {
	        for (var prop in map) {
	            return false;
	        }
	        return true;
	    };
	    StringMapWrapper.delete = function (map, key) { delete map[key]; };
	    StringMapWrapper.forEach = function (map, callback) {
	        for (var prop in map) {
	            if (map.hasOwnProperty(prop)) {
	                callback(map[prop], prop);
	            }
	        }
	    };
	    StringMapWrapper.merge = function (m1, m2) {
	        var m = {};
	        for (var attr in m1) {
	            if (m1.hasOwnProperty(attr)) {
	                m[attr] = m1[attr];
	            }
	        }
	        for (var attr in m2) {
	            if (m2.hasOwnProperty(attr)) {
	                m[attr] = m2[attr];
	            }
	        }
	        return m;
	    };
	    StringMapWrapper.equals = function (m1, m2) {
	        var k1 = Object.keys(m1);
	        var k2 = Object.keys(m2);
	        if (k1.length != k2.length) {
	            return false;
	        }
	        var key;
	        for (var i = 0; i < k1.length; i++) {
	            key = k1[i];
	            if (m1[key] !== m2[key]) {
	                return false;
	            }
	        }
	        return true;
	    };
	    return StringMapWrapper;
	})();
	exports.StringMapWrapper = StringMapWrapper;
	var ListWrapper = (function () {
	    function ListWrapper() {
	    }
	    // JS has no way to express a statically fixed size list, but dart does so we
	    // keep both methods.
	    ListWrapper.createFixedSize = function (size) { return new Array(size); };
	    ListWrapper.createGrowableSize = function (size) { return new Array(size); };
	    ListWrapper.clone = function (array) { return array.slice(0); };
	    ListWrapper.forEachWithIndex = function (array, fn) {
	        for (var i = 0; i < array.length; i++) {
	            fn(array[i], i);
	        }
	    };
	    ListWrapper.first = function (array) {
	        if (!array)
	            return null;
	        return array[0];
	    };
	    ListWrapper.last = function (array) {
	        if (!array || array.length == 0)
	            return null;
	        return array[array.length - 1];
	    };
	    ListWrapper.indexOf = function (array, value, startIndex) {
	        if (startIndex === void 0) { startIndex = 0; }
	        return array.indexOf(value, startIndex);
	    };
	    ListWrapper.contains = function (list, el) { return list.indexOf(el) !== -1; };
	    ListWrapper.reversed = function (array) {
	        var a = ListWrapper.clone(array);
	        return a.reverse();
	    };
	    ListWrapper.concat = function (a, b) { return a.concat(b); };
	    ListWrapper.insert = function (list, index, value) { list.splice(index, 0, value); };
	    ListWrapper.removeAt = function (list, index) {
	        var res = list[index];
	        list.splice(index, 1);
	        return res;
	    };
	    ListWrapper.removeAll = function (list, items) {
	        for (var i = 0; i < items.length; ++i) {
	            var index = list.indexOf(items[i]);
	            list.splice(index, 1);
	        }
	    };
	    ListWrapper.remove = function (list, el) {
	        var index = list.indexOf(el);
	        if (index > -1) {
	            list.splice(index, 1);
	            return true;
	        }
	        return false;
	    };
	    ListWrapper.clear = function (list) { list.length = 0; };
	    ListWrapper.isEmpty = function (list) { return list.length == 0; };
	    ListWrapper.fill = function (list, value, start, end) {
	        if (start === void 0) { start = 0; }
	        if (end === void 0) { end = null; }
	        list.fill(value, start, end === null ? list.length : end);
	    };
	    ListWrapper.equals = function (a, b) {
	        if (a.length != b.length)
	            return false;
	        for (var i = 0; i < a.length; ++i) {
	            if (a[i] !== b[i])
	                return false;
	        }
	        return true;
	    };
	    ListWrapper.slice = function (l, from, to) {
	        if (from === void 0) { from = 0; }
	        if (to === void 0) { to = null; }
	        return l.slice(from, to === null ? undefined : to);
	    };
	    ListWrapper.splice = function (l, from, length) { return l.splice(from, length); };
	    ListWrapper.sort = function (l, compareFn) {
	        if (lang_1.isPresent(compareFn)) {
	            l.sort(compareFn);
	        }
	        else {
	            l.sort();
	        }
	    };
	    ListWrapper.toString = function (l) { return l.toString(); };
	    ListWrapper.toJSON = function (l) { return JSON.stringify(l); };
	    ListWrapper.maximum = function (list, predicate) {
	        if (list.length == 0) {
	            return null;
	        }
	        var solution = null;
	        var maxValue = -Infinity;
	        for (var index = 0; index < list.length; index++) {
	            var candidate = list[index];
	            if (lang_1.isBlank(candidate)) {
	                continue;
	            }
	            var candidateValue = predicate(candidate);
	            if (candidateValue > maxValue) {
	                solution = candidate;
	                maxValue = candidateValue;
	            }
	        }
	        return solution;
	    };
	    return ListWrapper;
	})();
	exports.ListWrapper = ListWrapper;
	function isListLikeIterable(obj) {
	    if (!lang_1.isJsObject(obj))
	        return false;
	    return lang_1.isArray(obj) ||
	        (!(obj instanceof exports.Map) &&
	            lang_1.getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
	}
	exports.isListLikeIterable = isListLikeIterable;
	function iterateListLike(obj, fn) {
	    if (lang_1.isArray(obj)) {
	        for (var i = 0; i < obj.length; i++) {
	            fn(obj[i]);
	        }
	    }
	    else {
	        var iterator = obj[lang_1.getSymbolIterator()]();
	        var item;
	        while (!((item = iterator.next()).done)) {
	            fn(item.value);
	        }
	    }
	}
	exports.iterateListLike = iterateListLike;
	// Safari and Internet Explorer do not support the iterable parameter to the
	// Set constructor.  We work around that by manually adding the items.
	var createSetFromList = (function () {
	    var test = new exports.Set([1, 2, 3]);
	    if (test.size === 3) {
	        return function createSetFromList(lst) { return new exports.Set(lst); };
	    }
	    else {
	        return function createSetAndPopulateFromList(lst) {
	            var res = new exports.Set(lst);
	            if (res.size !== lst.length) {
	                for (var i = 0; i < lst.length; i++) {
	                    res.add(lst[i]);
	                }
	            }
	            return res;
	        };
	    }
	})();
	var SetWrapper = (function () {
	    function SetWrapper() {
	    }
	    SetWrapper.createFromList = function (lst) { return createSetFromList(lst); };
	    SetWrapper.has = function (s, key) { return s.has(key); };
	    SetWrapper.delete = function (m, k) { m.delete(k); };
	    return SetWrapper;
	})();
	exports.SetWrapper = SetWrapper;
	//# sourceMappingURL=collection.js.map

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var collection_1 = __webpack_require__(202);
	var reflection_1 = __webpack_require__(206);
	var key_1 = __webpack_require__(209);
	var metadata_1 = __webpack_require__(197);
	var exceptions_2 = __webpack_require__(211);
	var forward_ref_1 = __webpack_require__(200);
	var Dependency = (function () {
	    function Dependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties) {
	        this.key = key;
	        this.optional = optional;
	        this.lowerBoundVisibility = lowerBoundVisibility;
	        this.upperBoundVisibility = upperBoundVisibility;
	        this.properties = properties;
	    }
	    Dependency.fromKey = function (key) { return new Dependency(key, false, null, null, []); };
	    return Dependency;
	})();
	exports.Dependency = Dependency;
	var _EMPTY_LIST = lang_1.CONST_EXPR([]);
	/**
	 * Describes how the {@link Injector} should instantiate a given token.
	 *
	 * See {@link provide}.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/GNAyj6K6PfYg2NBzgwZ5?p%3Dpreview&p=preview))
	 *
	 * ```javascript
	 * var injector = Injector.resolveAndCreate([
	 *   new Provider("message", { useValue: 'Hello' })
	 * ]);
	 *
	 * expect(injector.get("message")).toEqual('Hello');
	 * ```
	 */
	var Provider = (function () {
	    function Provider(token, _a) {
	        var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
	        this.token = token;
	        this.useClass = useClass;
	        this.useValue = useValue;
	        this.useExisting = useExisting;
	        this.useFactory = useFactory;
	        this.dependencies = deps;
	        this._multi = multi;
	    }
	    Object.defineProperty(Provider.prototype, "multi", {
	        // TODO: Provide a full working example after alpha38 is released.
	        /**
	         * Creates multiple providers matching the same token (a multi-provider).
	         *
	         * Multi-providers are used for creating pluggable service, where the system comes
	         * with some default providers, and the user can register additonal providers.
	         * The combination of the default providers and the additional providers will be
	         * used to drive the behavior of the system.
	         *
	         * ### Example
	         *
	         * ```typescript
	         * var injector = Injector.resolveAndCreate([
	         *   new Provider("Strings", { useValue: "String1", multi: true}),
	         *   new Provider("Strings", { useValue: "String2", multi: true})
	         * ]);
	         *
	         * expect(injector.get("Strings")).toEqual(["String1", "String2"]);
	         * ```
	         *
	         * Multi-providers and regular providers cannot be mixed. The following
	         * will throw an exception:
	         *
	         * ```typescript
	         * var injector = Injector.resolveAndCreate([
	         *   new Provider("Strings", { useValue: "String1", multi: true }),
	         *   new Provider("Strings", { useValue: "String2"})
	         * ]);
	         * ```
	         */
	        get: function () { return lang_1.normalizeBool(this._multi); },
	        enumerable: true,
	        configurable: true
	    });
	    Provider = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object, Object])
	    ], Provider);
	    return Provider;
	})();
	exports.Provider = Provider;
	/**
	 * @deprecated
	 */
	var Binding = (function (_super) {
	    __extends(Binding, _super);
	    function Binding(token, _a) {
	        var toClass = _a.toClass, toValue = _a.toValue, toAlias = _a.toAlias, toFactory = _a.toFactory, deps = _a.deps, multi = _a.multi;
	        _super.call(this, token, {
	            useClass: toClass,
	            useValue: toValue,
	            useExisting: toAlias,
	            useFactory: toFactory,
	            deps: deps,
	            multi: multi
	        });
	    }
	    Object.defineProperty(Binding.prototype, "toClass", {
	        /**
	         * @deprecated
	         */
	        get: function () { return this.useClass; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Binding.prototype, "toAlias", {
	        /**
	         * @deprecated
	         */
	        get: function () { return this.useExisting; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Binding.prototype, "toFactory", {
	        /**
	         * @deprecated
	         */
	        get: function () { return this.useFactory; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Binding.prototype, "toValue", {
	        /**
	         * @deprecated
	         */
	        get: function () { return this.useValue; },
	        enumerable: true,
	        configurable: true
	    });
	    Binding = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object, Object])
	    ], Binding);
	    return Binding;
	})(Provider);
	exports.Binding = Binding;
	var ResolvedProvider_ = (function () {
	    function ResolvedProvider_(key, resolvedFactories, multiProvider) {
	        this.key = key;
	        this.resolvedFactories = resolvedFactories;
	        this.multiProvider = multiProvider;
	    }
	    Object.defineProperty(ResolvedProvider_.prototype, "resolvedFactory", {
	        get: function () { return this.resolvedFactories[0]; },
	        enumerable: true,
	        configurable: true
	    });
	    return ResolvedProvider_;
	})();
	exports.ResolvedProvider_ = ResolvedProvider_;
	/**
	 * An internal resolved representation of a factory function created by resolving {@link Provider}.
	 */
	var ResolvedFactory = (function () {
	    function ResolvedFactory(
	        /**
	         * Factory function which can return an instance of an object represented by a key.
	         */
	        factory, 
	        /**
	         * Arguments (dependencies) to the `factory` function.
	         */
	        dependencies) {
	        this.factory = factory;
	        this.dependencies = dependencies;
	    }
	    return ResolvedFactory;
	})();
	exports.ResolvedFactory = ResolvedFactory;
	/**
	 * @deprecated
	 * Creates a {@link Provider}.
	 *
	 * To construct a {@link Provider}, bind a `token` to either a class, a value, a factory function,
	 * or
	 * to an existing `token`.
	 * See {@link ProviderBuilder} for more details.
	 *
	 * The `token` is most commonly a class or {@link angular2/di/OpaqueToken}.
	 */
	function bind(token) {
	    return new ProviderBuilder(token);
	}
	exports.bind = bind;
	/**
	 * Creates a {@link Provider}.
	 *
	 * See {@link Provider} for more details.
	 *
	 * <!-- TODO: improve the docs -->
	 */
	function provide(token, _a) {
	    var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
	    return new Provider(token, {
	        useClass: useClass,
	        useValue: useValue,
	        useExisting: useExisting,
	        useFactory: useFactory,
	        deps: deps,
	        multi: multi
	    });
	}
	exports.provide = provide;
	/**
	 * Helper class for the {@link bind} function.
	 */
	var ProviderBuilder = (function () {
	    function ProviderBuilder(token) {
	        this.token = token;
	    }
	    /**
	     * Binds a DI token to a class.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/ZpBCSYqv6e2ud5KXLdxQ?p=preview))
	     *
	     * Because `toAlias` and `toClass` are often confused, the example contains
	     * both use cases for easy comparison.
	     *
	     * ```typescript
	     * class Vehicle {}
	     *
	     * class Car extends Vehicle {}
	     *
	     * var injectorClass = Injector.resolveAndCreate([
	     *   Car,
	     *   provide(Vehicle, {useClass: Car})
	     * ]);
	     * var injectorAlias = Injector.resolveAndCreate([
	     *   Car,
	     *   provide(Vehicle, {useExisting: Car})
	     * ]);
	     *
	     * expect(injectorClass.get(Vehicle)).not.toBe(injectorClass.get(Car));
	     * expect(injectorClass.get(Vehicle) instanceof Car).toBe(true);
	     *
	     * expect(injectorAlias.get(Vehicle)).toBe(injectorAlias.get(Car));
	     * expect(injectorAlias.get(Vehicle) instanceof Car).toBe(true);
	     * ```
	     */
	    ProviderBuilder.prototype.toClass = function (type) {
	        if (!lang_1.isType(type)) {
	            throw new exceptions_1.BaseException("Trying to create a class provider but \"" + lang_1.stringify(type) + "\" is not a class!");
	        }
	        return new Provider(this.token, { useClass: type });
	    };
	    /**
	     * Binds a DI token to a value.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/G024PFHmDL0cJFgfZK8O?p=preview))
	     *
	     * ```typescript
	     * var injector = Injector.resolveAndCreate([
	     *   provide('message', {useValue: 'Hello'})
	     * ]);
	     *
	     * expect(injector.get('message')).toEqual('Hello');
	     * ```
	     */
	    ProviderBuilder.prototype.toValue = function (value) { return new Provider(this.token, { useValue: value }); };
	    /**
	     * Binds a DI token to an existing token.
	     *
	     * Angular will return the same instance as if the provided token was used. (This is
	     * in contrast to `useClass` where a separate instance of `useClass` will be returned.)
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/uBaoF2pN5cfc5AfZapNw?p=preview))
	     *
	     * Because `toAlias` and `toClass` are often confused, the example contains
	     * both use cases for easy comparison.
	     *
	     * ```typescript
	     * class Vehicle {}
	     *
	     * class Car extends Vehicle {}
	     *
	     * var injectorAlias = Injector.resolveAndCreate([
	     *   Car,
	     *   provide(Vehicle, {useExisting: Car})
	     * ]);
	     * var injectorClass = Injector.resolveAndCreate([
	     *   Car,
	     *   provide(Vehicle, {useClass: Car})
	     * ]);
	     *
	     * expect(injectorAlias.get(Vehicle)).toBe(injectorAlias.get(Car));
	     * expect(injectorAlias.get(Vehicle) instanceof Car).toBe(true);
	     *
	     * expect(injectorClass.get(Vehicle)).not.toBe(injectorClass.get(Car));
	     * expect(injectorClass.get(Vehicle) instanceof Car).toBe(true);
	     * ```
	     */
	    ProviderBuilder.prototype.toAlias = function (aliasToken) {
	        if (lang_1.isBlank(aliasToken)) {
	            throw new exceptions_1.BaseException("Can not alias " + lang_1.stringify(this.token) + " to a blank value!");
	        }
	        return new Provider(this.token, { useExisting: aliasToken });
	    };
	    /**
	     * Binds a DI token to a function which computes the value.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/OejNIfTT3zb1iBxaIYOb?p=preview))
	     *
	     * ```typescript
	     * var injector = Injector.resolveAndCreate([
	     *   provide(Number, {useFactory: () => { return 1+2; }}),
	     *   provide(String, {useFactory: (v) => { return "Value: " + v; }, deps: [Number]})
	     * ]);
	     *
	     * expect(injector.get(Number)).toEqual(3);
	     * expect(injector.get(String)).toEqual('Value: 3');
	     * ```
	     */
	    ProviderBuilder.prototype.toFactory = function (factory, dependencies) {
	        if (!lang_1.isFunction(factory)) {
	            throw new exceptions_1.BaseException("Trying to create a factory provider but \"" + lang_1.stringify(factory) + "\" is not a function!");
	        }
	        return new Provider(this.token, { useFactory: factory, deps: dependencies });
	    };
	    return ProviderBuilder;
	})();
	exports.ProviderBuilder = ProviderBuilder;
	/**
	 * Resolve a single provider.
	 */
	function resolveFactory(provider) {
	    var factoryFn;
	    var resolvedDeps;
	    if (lang_1.isPresent(provider.useClass)) {
	        var useClass = forward_ref_1.resolveForwardRef(provider.useClass);
	        factoryFn = reflection_1.reflector.factory(useClass);
	        resolvedDeps = _dependenciesFor(useClass);
	    }
	    else if (lang_1.isPresent(provider.useExisting)) {
	        factoryFn = function (aliasInstance) { return aliasInstance; };
	        resolvedDeps = [Dependency.fromKey(key_1.Key.get(provider.useExisting))];
	    }
	    else if (lang_1.isPresent(provider.useFactory)) {
	        factoryFn = provider.useFactory;
	        resolvedDeps = _constructDependencies(provider.useFactory, provider.dependencies);
	    }
	    else {
	        factoryFn = function () { return provider.useValue; };
	        resolvedDeps = _EMPTY_LIST;
	    }
	    return new ResolvedFactory(factoryFn, resolvedDeps);
	}
	exports.resolveFactory = resolveFactory;
	/**
	 * Converts the {@link Provider} into {@link ResolvedProvider}.
	 *
	 * {@link Injector} internally only uses {@link ResolvedProvider}, {@link Provider} contains
	 * convenience provider syntax.
	 */
	function resolveProvider(provider) {
	    return new ResolvedProvider_(key_1.Key.get(provider.token), [resolveFactory(provider)], false);
	}
	exports.resolveProvider = resolveProvider;
	/**
	 * Resolve a list of Providers.
	 */
	function resolveProviders(providers) {
	    var normalized = _createListOfProviders(_normalizeProviders(providers, new Map()));
	    return normalized.map(function (b) {
	        if (b instanceof _NormalizedProvider) {
	            return new ResolvedProvider_(b.key, [b.resolvedFactory], false);
	        }
	        else {
	            var arr = b;
	            return new ResolvedProvider_(arr[0].key, arr.map(function (_) { return _.resolvedFactory; }), true);
	        }
	    });
	}
	exports.resolveProviders = resolveProviders;
	/**
	 * The algorithm works as follows:
	 *
	 * [Provider] -> [_NormalizedProvider|[_NormalizedProvider]] -> [ResolvedProvider]
	 *
	 * _NormalizedProvider is essentially a resolved provider before it was grouped by key.
	 */
	var _NormalizedProvider = (function () {
	    function _NormalizedProvider(key, resolvedFactory) {
	        this.key = key;
	        this.resolvedFactory = resolvedFactory;
	    }
	    return _NormalizedProvider;
	})();
	function _createListOfProviders(flattenedProviders) {
	    return collection_1.MapWrapper.values(flattenedProviders);
	}
	function _normalizeProviders(providers, res) {
	    providers.forEach(function (b) {
	        if (b instanceof lang_1.Type) {
	            _normalizeProvider(provide(b, { useClass: b }), res);
	        }
	        else if (b instanceof Provider) {
	            _normalizeProvider(b, res);
	        }
	        else if (b instanceof Array) {
	            _normalizeProviders(b, res);
	        }
	        else if (b instanceof ProviderBuilder) {
	            throw new exceptions_2.InvalidProviderError(b.token);
	        }
	        else {
	            throw new exceptions_2.InvalidProviderError(b);
	        }
	    });
	    return res;
	}
	function _normalizeProvider(b, res) {
	    var key = key_1.Key.get(b.token);
	    var factory = resolveFactory(b);
	    var normalized = new _NormalizedProvider(key, factory);
	    if (b.multi) {
	        var existingProvider = res.get(key.id);
	        if (existingProvider instanceof Array) {
	            existingProvider.push(normalized);
	        }
	        else if (lang_1.isBlank(existingProvider)) {
	            res.set(key.id, [normalized]);
	        }
	        else {
	            throw new exceptions_2.MixingMultiProvidersWithRegularProvidersError(existingProvider, b);
	        }
	    }
	    else {
	        var existingProvider = res.get(key.id);
	        if (existingProvider instanceof Array) {
	            throw new exceptions_2.MixingMultiProvidersWithRegularProvidersError(existingProvider, b);
	        }
	        res.set(key.id, normalized);
	    }
	}
	function _constructDependencies(factoryFunction, dependencies) {
	    if (lang_1.isBlank(dependencies)) {
	        return _dependenciesFor(factoryFunction);
	    }
	    else {
	        var params = dependencies.map(function (t) { return [t]; });
	        return dependencies.map(function (t) { return _extractToken(factoryFunction, t, params); });
	    }
	}
	function _dependenciesFor(typeOrFunc) {
	    var params = reflection_1.reflector.parameters(typeOrFunc);
	    if (lang_1.isBlank(params))
	        return [];
	    if (params.some(lang_1.isBlank)) {
	        throw new exceptions_2.NoAnnotationError(typeOrFunc, params);
	    }
	    return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });
	}
	function _extractToken(typeOrFunc, metadata /*any[] | any*/, params) {
	    var depProps = [];
	    var token = null;
	    var optional = false;
	    if (!lang_1.isArray(metadata)) {
	        if (metadata instanceof metadata_1.InjectMetadata) {
	            return _createDependency(metadata.token, optional, null, null, depProps);
	        }
	        else {
	            return _createDependency(metadata, optional, null, null, depProps);
	        }
	    }
	    var lowerBoundVisibility = null;
	    var upperBoundVisibility = null;
	    for (var i = 0; i < metadata.length; ++i) {
	        var paramMetadata = metadata[i];
	        if (paramMetadata instanceof lang_1.Type) {
	            token = paramMetadata;
	        }
	        else if (paramMetadata instanceof metadata_1.InjectMetadata) {
	            token = paramMetadata.token;
	        }
	        else if (paramMetadata instanceof metadata_1.OptionalMetadata) {
	            optional = true;
	        }
	        else if (paramMetadata instanceof metadata_1.SelfMetadata) {
	            upperBoundVisibility = paramMetadata;
	        }
	        else if (paramMetadata instanceof metadata_1.HostMetadata) {
	            upperBoundVisibility = paramMetadata;
	        }
	        else if (paramMetadata instanceof metadata_1.SkipSelfMetadata) {
	            lowerBoundVisibility = paramMetadata;
	        }
	        else if (paramMetadata instanceof metadata_1.DependencyMetadata) {
	            if (lang_1.isPresent(paramMetadata.token)) {
	                token = paramMetadata.token;
	            }
	            depProps.push(paramMetadata);
	        }
	    }
	    token = forward_ref_1.resolveForwardRef(token);
	    if (lang_1.isPresent(token)) {
	        return _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps);
	    }
	    else {
	        throw new exceptions_2.NoAnnotationError(typeOrFunc, params);
	    }
	}
	function _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps) {
	    return new Dependency(key_1.Key.get(token), optional, lowerBoundVisibility, upperBoundVisibility, depProps);
	}
	//# sourceMappingURL=provider.js.map

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var exception_handler_1 = __webpack_require__(205);
	var exception_handler_2 = __webpack_require__(205);
	exports.ExceptionHandler = exception_handler_2.ExceptionHandler;
	var BaseException = (function (_super) {
	    __extends(BaseException, _super);
	    function BaseException(message) {
	        if (message === void 0) { message = "--"; }
	        _super.call(this, message);
	        this.message = message;
	        this.stack = (new Error(message)).stack;
	    }
	    BaseException.prototype.toString = function () { return this.message; };
	    return BaseException;
	})(Error);
	exports.BaseException = BaseException;
	var WrappedException = (function (_super) {
	    __extends(WrappedException, _super);
	    function WrappedException(_wrapperMessage, _originalException, _originalStack, _context) {
	        _super.call(this, _wrapperMessage);
	        this._wrapperMessage = _wrapperMessage;
	        this._originalException = _originalException;
	        this._originalStack = _originalStack;
	        this._context = _context;
	        this._wrapperStack = (new Error(_wrapperMessage)).stack;
	    }
	    Object.defineProperty(WrappedException.prototype, "wrapperMessage", {
	        get: function () { return this._wrapperMessage; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WrappedException.prototype, "wrapperStack", {
	        get: function () { return this._wrapperStack; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WrappedException.prototype, "originalException", {
	        get: function () { return this._originalException; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WrappedException.prototype, "originalStack", {
	        get: function () { return this._originalStack; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WrappedException.prototype, "context", {
	        get: function () { return this._context; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WrappedException.prototype, "message", {
	        get: function () { return exception_handler_1.ExceptionHandler.exceptionToString(this); },
	        enumerable: true,
	        configurable: true
	    });
	    WrappedException.prototype.toString = function () { return this.message; };
	    return WrappedException;
	})(Error);
	exports.WrappedException = WrappedException;
	function makeTypeError(message) {
	    return new TypeError(message);
	}
	exports.makeTypeError = makeTypeError;
	function unimplemented() {
	    throw new BaseException('unimplemented');
	}
	exports.unimplemented = unimplemented;
	//# sourceMappingURL=exceptions.js.map

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var collection_1 = __webpack_require__(202);
	var _ArrayLogger = (function () {
	    function _ArrayLogger() {
	        this.res = [];
	    }
	    _ArrayLogger.prototype.log = function (s) { this.res.push(s); };
	    _ArrayLogger.prototype.logError = function (s) { this.res.push(s); };
	    _ArrayLogger.prototype.logGroup = function (s) { this.res.push(s); };
	    _ArrayLogger.prototype.logGroupEnd = function () { };
	    ;
	    return _ArrayLogger;
	})();
	/**
	 * Provides a hook for centralized exception handling.
	 *
	 * The default implementation of `ExceptionHandler` prints error messages to the `Console`. To
	 * intercept error handling,
	 * write a custom exception handler that replaces this default as appropriate for your app.
	 *
	 * ### Example
	 *
	 * ```javascript
	 *
	 * class MyExceptionHandler implements ExceptionHandler {
	 *   call(error, stackTrace = null, reason = null) {
	 *     // do something with the exception
	 *   }
	 * }
	 *
	 * bootstrap(MyApp, [provide(ExceptionHandler, {useClass: MyExceptionHandler})])
	 *
	 * ```
	 */
	var ExceptionHandler = (function () {
	    function ExceptionHandler(_logger, _rethrowException) {
	        if (_rethrowException === void 0) { _rethrowException = true; }
	        this._logger = _logger;
	        this._rethrowException = _rethrowException;
	    }
	    ExceptionHandler.exceptionToString = function (exception, stackTrace, reason) {
	        if (stackTrace === void 0) { stackTrace = null; }
	        if (reason === void 0) { reason = null; }
	        var l = new _ArrayLogger();
	        var e = new ExceptionHandler(l, false);
	        e.call(exception, stackTrace, reason);
	        return l.res.join("\n");
	    };
	    ExceptionHandler.prototype.call = function (exception, stackTrace, reason) {
	        if (stackTrace === void 0) { stackTrace = null; }
	        if (reason === void 0) { reason = null; }
	        var originalException = this._findOriginalException(exception);
	        var originalStack = this._findOriginalStack(exception);
	        var context = this._findContext(exception);
	        this._logger.logGroup("EXCEPTION: " + this._extractMessage(exception));
	        if (lang_1.isPresent(stackTrace) && lang_1.isBlank(originalStack)) {
	            this._logger.logError("STACKTRACE:");
	            this._logger.logError(this._longStackTrace(stackTrace));
	        }
	        if (lang_1.isPresent(reason)) {
	            this._logger.logError("REASON: " + reason);
	        }
	        if (lang_1.isPresent(originalException)) {
	            this._logger.logError("ORIGINAL EXCEPTION: " + this._extractMessage(originalException));
	        }
	        if (lang_1.isPresent(originalStack)) {
	            this._logger.logError("ORIGINAL STACKTRACE:");
	            this._logger.logError(this._longStackTrace(originalStack));
	        }
	        if (lang_1.isPresent(context)) {
	            this._logger.logError("ERROR CONTEXT:");
	            this._logger.logError(context);
	        }
	        this._logger.logGroupEnd();
	        // We rethrow exceptions, so operations like 'bootstrap' will result in an error
	        // when an exception happens. If we do not rethrow, bootstrap will always succeed.
	        if (this._rethrowException)
	            throw exception;
	    };
	    /** @internal */
	    ExceptionHandler.prototype._extractMessage = function (exception) {
	        return exception instanceof exceptions_1.WrappedException ? exception.wrapperMessage : exception.toString();
	    };
	    /** @internal */
	    ExceptionHandler.prototype._longStackTrace = function (stackTrace) {
	        return collection_1.isListLikeIterable(stackTrace) ? stackTrace.join("\n\n-----async gap-----\n") :
	            stackTrace.toString();
	    };
	    /** @internal */
	    ExceptionHandler.prototype._findContext = function (exception) {
	        try {
	            if (!(exception instanceof exceptions_1.WrappedException))
	                return null;
	            return lang_1.isPresent(exception.context) ? exception.context :
	                this._findContext(exception.originalException);
	        }
	        catch (e) {
	            // exception.context can throw an exception. if it happens, we ignore the context.
	            return null;
	        }
	    };
	    /** @internal */
	    ExceptionHandler.prototype._findOriginalException = function (exception) {
	        if (!(exception instanceof exceptions_1.WrappedException))
	            return null;
	        var e = exception.originalException;
	        while (e instanceof exceptions_1.WrappedException && lang_1.isPresent(e.originalException)) {
	            e = e.originalException;
	        }
	        return e;
	    };
	    /** @internal */
	    ExceptionHandler.prototype._findOriginalStack = function (exception) {
	        if (!(exception instanceof exceptions_1.WrappedException))
	            return null;
	        var e = exception;
	        var stack = exception.originalStack;
	        while (e instanceof exceptions_1.WrappedException && lang_1.isPresent(e.originalException)) {
	            e = e.originalException;
	            if (e instanceof exceptions_1.WrappedException && lang_1.isPresent(e.originalException)) {
	                stack = e.originalStack;
	            }
	        }
	        return stack;
	    };
	    return ExceptionHandler;
	})();
	exports.ExceptionHandler = ExceptionHandler;
	//# sourceMappingURL=exception_handler.js.map

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var reflector_1 = __webpack_require__(207);
	var reflector_2 = __webpack_require__(207);
	exports.Reflector = reflector_2.Reflector;
	exports.ReflectionInfo = reflector_2.ReflectionInfo;
	var reflection_capabilities_1 = __webpack_require__(208);
	exports.reflector = new reflector_1.Reflector(new reflection_capabilities_1.ReflectionCapabilities());
	//# sourceMappingURL=reflection.js.map

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var collection_1 = __webpack_require__(202);
	var ReflectionInfo = (function () {
	    function ReflectionInfo(annotations, parameters, factory, interfaces, propMetadata) {
	        this.annotations = annotations;
	        this.parameters = parameters;
	        this.factory = factory;
	        this.interfaces = interfaces;
	        this.propMetadata = propMetadata;
	    }
	    return ReflectionInfo;
	})();
	exports.ReflectionInfo = ReflectionInfo;
	var Reflector = (function () {
	    function Reflector(reflectionCapabilities) {
	        /** @internal */
	        this._injectableInfo = new collection_1.Map();
	        /** @internal */
	        this._getters = new collection_1.Map();
	        /** @internal */
	        this._setters = new collection_1.Map();
	        /** @internal */
	        this._methods = new collection_1.Map();
	        this._usedKeys = null;
	        this.reflectionCapabilities = reflectionCapabilities;
	    }
	    Reflector.prototype.isReflectionEnabled = function () { return this.reflectionCapabilities.isReflectionEnabled(); };
	    /**
	     * Causes `this` reflector to track keys used to access
	     * {@link ReflectionInfo} objects.
	     */
	    Reflector.prototype.trackUsage = function () { this._usedKeys = new collection_1.Set(); };
	    /**
	     * Lists types for which reflection information was not requested since
	     * {@link #trackUsage} was called. This list could later be audited as
	     * potential dead code.
	     */
	    Reflector.prototype.listUnusedKeys = function () {
	        var _this = this;
	        if (this._usedKeys == null) {
	            throw new exceptions_1.BaseException('Usage tracking is disabled');
	        }
	        var allTypes = collection_1.MapWrapper.keys(this._injectableInfo);
	        return allTypes.filter(function (key) { return !collection_1.SetWrapper.has(_this._usedKeys, key); });
	    };
	    Reflector.prototype.registerFunction = function (func, funcInfo) {
	        this._injectableInfo.set(func, funcInfo);
	    };
	    Reflector.prototype.registerType = function (type, typeInfo) {
	        this._injectableInfo.set(type, typeInfo);
	    };
	    Reflector.prototype.registerGetters = function (getters) { _mergeMaps(this._getters, getters); };
	    Reflector.prototype.registerSetters = function (setters) { _mergeMaps(this._setters, setters); };
	    Reflector.prototype.registerMethods = function (methods) { _mergeMaps(this._methods, methods); };
	    Reflector.prototype.factory = function (type) {
	        if (this._containsReflectionInfo(type)) {
	            var res = this._getReflectionInfo(type).factory;
	            return lang_1.isPresent(res) ? res : null;
	        }
	        else {
	            return this.reflectionCapabilities.factory(type);
	        }
	    };
	    Reflector.prototype.parameters = function (typeOrFunc) {
	        if (this._injectableInfo.has(typeOrFunc)) {
	            var res = this._getReflectionInfo(typeOrFunc).parameters;
	            return lang_1.isPresent(res) ? res : [];
	        }
	        else {
	            return this.reflectionCapabilities.parameters(typeOrFunc);
	        }
	    };
	    Reflector.prototype.annotations = function (typeOrFunc) {
	        if (this._injectableInfo.has(typeOrFunc)) {
	            var res = this._getReflectionInfo(typeOrFunc).annotations;
	            return lang_1.isPresent(res) ? res : [];
	        }
	        else {
	            return this.reflectionCapabilities.annotations(typeOrFunc);
	        }
	    };
	    Reflector.prototype.propMetadata = function (typeOrFunc) {
	        if (this._injectableInfo.has(typeOrFunc)) {
	            var res = this._getReflectionInfo(typeOrFunc).propMetadata;
	            return lang_1.isPresent(res) ? res : {};
	        }
	        else {
	            return this.reflectionCapabilities.propMetadata(typeOrFunc);
	        }
	    };
	    Reflector.prototype.interfaces = function (type) {
	        if (this._injectableInfo.has(type)) {
	            var res = this._getReflectionInfo(type).interfaces;
	            return lang_1.isPresent(res) ? res : [];
	        }
	        else {
	            return this.reflectionCapabilities.interfaces(type);
	        }
	    };
	    Reflector.prototype.getter = function (name) {
	        if (this._getters.has(name)) {
	            return this._getters.get(name);
	        }
	        else {
	            return this.reflectionCapabilities.getter(name);
	        }
	    };
	    Reflector.prototype.setter = function (name) {
	        if (this._setters.has(name)) {
	            return this._setters.get(name);
	        }
	        else {
	            return this.reflectionCapabilities.setter(name);
	        }
	    };
	    Reflector.prototype.method = function (name) {
	        if (this._methods.has(name)) {
	            return this._methods.get(name);
	        }
	        else {
	            return this.reflectionCapabilities.method(name);
	        }
	    };
	    /** @internal */
	    Reflector.prototype._getReflectionInfo = function (typeOrFunc) {
	        if (lang_1.isPresent(this._usedKeys)) {
	            this._usedKeys.add(typeOrFunc);
	        }
	        return this._injectableInfo.get(typeOrFunc);
	    };
	    /** @internal */
	    Reflector.prototype._containsReflectionInfo = function (typeOrFunc) { return this._injectableInfo.has(typeOrFunc); };
	    Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };
	    return Reflector;
	})();
	exports.Reflector = Reflector;
	function _mergeMaps(target, config) {
	    collection_1.StringMapWrapper.forEach(config, function (v, k) { return target.set(k, v); });
	}
	//# sourceMappingURL=reflector.js.map

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var ReflectionCapabilities = (function () {
	    function ReflectionCapabilities(reflect) {
	        this._reflect = lang_1.isPresent(reflect) ? reflect : lang_1.global.Reflect;
	    }
	    ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };
	    ReflectionCapabilities.prototype.factory = function (t) {
	        switch (t.length) {
	            case 0:
	                return function () { return new t(); };
	            case 1:
	                return function (a1) { return new t(a1); };
	            case 2:
	                return function (a1, a2) { return new t(a1, a2); };
	            case 3:
	                return function (a1, a2, a3) { return new t(a1, a2, a3); };
	            case 4:
	                return function (a1, a2, a3, a4) { return new t(a1, a2, a3, a4); };
	            case 5:
	                return function (a1, a2, a3, a4, a5) { return new t(a1, a2, a3, a4, a5); };
	            case 6:
	                return function (a1, a2, a3, a4, a5, a6) { return new t(a1, a2, a3, a4, a5, a6); };
	            case 7:
	                return function (a1, a2, a3, a4, a5, a6, a7) { return new t(a1, a2, a3, a4, a5, a6, a7); };
	            case 8:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8) { return new t(a1, a2, a3, a4, a5, a6, a7, a8); };
	            case 9:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) { return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9); };
	            case 10:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
	                };
	            case 11:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
	                };
	            case 12:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
	                };
	            case 13:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
	                };
	            case 14:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
	                };
	            case 15:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
	                };
	            case 16:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
	                };
	            case 17:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
	                };
	            case 18:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
	                };
	            case 19:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
	                };
	            case 20:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
	                };
	        }
	        ;
	        throw new Error("Cannot create a factory for '" + lang_1.stringify(t) + "' because its constructor has more than 20 arguments");
	    };
	    /** @internal */
	    ReflectionCapabilities.prototype._zipTypesAndAnnotaions = function (paramTypes, paramAnnotations) {
	        var result;
	        if (typeof paramTypes === 'undefined') {
	            result = new Array(paramAnnotations.length);
	        }
	        else {
	            result = new Array(paramTypes.length);
	        }
	        for (var i = 0; i < result.length; i++) {
	            // TS outputs Object for parameters without types, while Traceur omits
	            // the annotations. For now we preserve the Traceur behavior to aid
	            // migration, but this can be revisited.
	            if (typeof paramTypes === 'undefined') {
	                result[i] = [];
	            }
	            else if (paramTypes[i] != Object) {
	                result[i] = [paramTypes[i]];
	            }
	            else {
	                result[i] = [];
	            }
	            if (lang_1.isPresent(paramAnnotations) && lang_1.isPresent(paramAnnotations[i])) {
	                result[i] = result[i].concat(paramAnnotations[i]);
	            }
	        }
	        return result;
	    };
	    ReflectionCapabilities.prototype.parameters = function (typeOrFunc) {
	        // Prefer the direct API.
	        if (lang_1.isPresent(typeOrFunc.parameters)) {
	            return typeOrFunc.parameters;
	        }
	        if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
	            var paramAnnotations = this._reflect.getMetadata('parameters', typeOrFunc);
	            var paramTypes = this._reflect.getMetadata('design:paramtypes', typeOrFunc);
	            if (lang_1.isPresent(paramTypes) || lang_1.isPresent(paramAnnotations)) {
	                return this._zipTypesAndAnnotaions(paramTypes, paramAnnotations);
	            }
	        }
	        // The array has to be filled with `undefined` because holes would be skipped by `some`
	        var parameters = new Array(typeOrFunc.length);
	        parameters.fill(undefined);
	        return parameters;
	    };
	    ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {
	        // Prefer the direct API.
	        if (lang_1.isPresent(typeOrFunc.annotations)) {
	            var annotations = typeOrFunc.annotations;
	            if (lang_1.isFunction(annotations) && annotations.annotations) {
	                annotations = annotations.annotations;
	            }
	            return annotations;
	        }
	        if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
	            var annotations = this._reflect.getMetadata('annotations', typeOrFunc);
	            if (lang_1.isPresent(annotations))
	                return annotations;
	        }
	        return [];
	    };
	    ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
	        // Prefer the direct API.
	        if (lang_1.isPresent(typeOrFunc.propMetadata)) {
	            var propMetadata = typeOrFunc.propMetadata;
	            if (lang_1.isFunction(propMetadata) && propMetadata.propMetadata) {
	                propMetadata = propMetadata.propMetadata;
	            }
	            return propMetadata;
	        }
	        if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
	            var propMetadata = this._reflect.getMetadata('propMetadata', typeOrFunc);
	            if (lang_1.isPresent(propMetadata))
	                return propMetadata;
	        }
	        return {};
	    };
	    ReflectionCapabilities.prototype.interfaces = function (type) {
	        throw new exceptions_1.BaseException("JavaScript does not support interfaces");
	    };
	    ReflectionCapabilities.prototype.getter = function (name) { return new Function('o', 'return o.' + name + ';'); };
	    ReflectionCapabilities.prototype.setter = function (name) {
	        return new Function('o', 'v', 'return o.' + name + ' = v;');
	    };
	    ReflectionCapabilities.prototype.method = function (name) {
	        var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
	        return new Function('o', 'args', functionBody);
	    };
	    // There is not a concept of import uri in Js, but this is useful in developing Dart applications.
	    ReflectionCapabilities.prototype.importUri = function (type) { return './'; };
	    return ReflectionCapabilities;
	})();
	exports.ReflectionCapabilities = ReflectionCapabilities;
	//# sourceMappingURL=reflection_capabilities.js.map

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var type_literal_1 = __webpack_require__(210);
	var forward_ref_1 = __webpack_require__(200);
	var type_literal_2 = __webpack_require__(210);
	exports.TypeLiteral = type_literal_2.TypeLiteral;
	/**
	 * A unique object used for retrieving items from the {@link Injector}.
	 *
	 * Keys have:
	 * - a system-wide unique `id`.
	 * - a `token`.
	 *
	 * `Key` is used internally by {@link Injector} because its system-wide unique `id` allows the
	 * injector to store created objects in a more efficient way.
	 *
	 * `Key` should not be created directly. {@link Injector} creates keys automatically when resolving
	 * providers.
	 */
	var Key = (function () {
	    /**
	     * Private
	     */
	    function Key(token, id) {
	        this.token = token;
	        this.id = id;
	        if (lang_1.isBlank(token)) {
	            throw new exceptions_1.BaseException('Token must be defined!');
	        }
	    }
	    Object.defineProperty(Key.prototype, "displayName", {
	        /**
	         * Returns a stringified token.
	         */
	        get: function () { return lang_1.stringify(this.token); },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Retrieves a `Key` for a token.
	     */
	    Key.get = function (token) { return _globalKeyRegistry.get(forward_ref_1.resolveForwardRef(token)); };
	    Object.defineProperty(Key, "numberOfKeys", {
	        /**
	         * @returns the number of keys registered in the system.
	         */
	        get: function () { return _globalKeyRegistry.numberOfKeys; },
	        enumerable: true,
	        configurable: true
	    });
	    return Key;
	})();
	exports.Key = Key;
	/**
	 * @internal
	 */
	var KeyRegistry = (function () {
	    function KeyRegistry() {
	        this._allKeys = new Map();
	    }
	    KeyRegistry.prototype.get = function (token) {
	        if (token instanceof Key)
	            return token;
	        // TODO: workaround for https://github.com/Microsoft/TypeScript/issues/3123
	        var theToken = token;
	        if (token instanceof type_literal_1.TypeLiteral) {
	            theToken = token.type;
	        }
	        token = theToken;
	        if (this._allKeys.has(token)) {
	            return this._allKeys.get(token);
	        }
	        var newKey = new Key(token, Key.numberOfKeys);
	        this._allKeys.set(token, newKey);
	        return newKey;
	    };
	    Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
	        get: function () { return this._allKeys.size; },
	        enumerable: true,
	        configurable: true
	    });
	    return KeyRegistry;
	})();
	exports.KeyRegistry = KeyRegistry;
	var _globalKeyRegistry = new KeyRegistry();
	//# sourceMappingURL=key.js.map

/***/ },
/* 210 */
/***/ function(module, exports) {

	'use strict';/**
	 * Type literals is a Dart-only feature. This is here only so we can x-compile
	 * to multiple languages.
	 */
	var TypeLiteral = (function () {
	    function TypeLiteral() {
	    }
	    Object.defineProperty(TypeLiteral.prototype, "type", {
	        get: function () { throw new Error("Type literals are only supported in Dart"); },
	        enumerable: true,
	        configurable: true
	    });
	    return TypeLiteral;
	})();
	exports.TypeLiteral = TypeLiteral;
	//# sourceMappingURL=type_literal.js.map

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var collection_1 = __webpack_require__(202);
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	function findFirstClosedCycle(keys) {
	    var res = [];
	    for (var i = 0; i < keys.length; ++i) {
	        if (collection_1.ListWrapper.contains(res, keys[i])) {
	            res.push(keys[i]);
	            return res;
	        }
	        else {
	            res.push(keys[i]);
	        }
	    }
	    return res;
	}
	function constructResolvingPath(keys) {
	    if (keys.length > 1) {
	        var reversed = findFirstClosedCycle(collection_1.ListWrapper.reversed(keys));
	        var tokenStrs = reversed.map(function (k) { return lang_1.stringify(k.token); });
	        return " (" + tokenStrs.join(' -> ') + ")";
	    }
	    else {
	        return "";
	    }
	}
	/**
	 * Base class for all errors arising from misconfigured providers.
	 */
	var AbstractProviderError = (function (_super) {
	    __extends(AbstractProviderError, _super);
	    function AbstractProviderError(injector, key, constructResolvingMessage) {
	        _super.call(this, "DI Exception");
	        this.keys = [key];
	        this.injectors = [injector];
	        this.constructResolvingMessage = constructResolvingMessage;
	        this.message = this.constructResolvingMessage(this.keys);
	    }
	    AbstractProviderError.prototype.addKey = function (injector, key) {
	        this.injectors.push(injector);
	        this.keys.push(key);
	        this.message = this.constructResolvingMessage(this.keys);
	    };
	    Object.defineProperty(AbstractProviderError.prototype, "context", {
	        get: function () { return this.injectors[this.injectors.length - 1].debugContext(); },
	        enumerable: true,
	        configurable: true
	    });
	    return AbstractProviderError;
	})(exceptions_1.BaseException);
	exports.AbstractProviderError = AbstractProviderError;
	/**
	 * Thrown when trying to retrieve a dependency by `Key` from {@link Injector}, but the
	 * {@link Injector} does not have a {@link Provider} for {@link Key}.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))
	 *
	 * ```typescript
	 * class A {
	 *   constructor(b:B) {}
	 * }
	 *
	 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
	 * ```
	 */
	var NoProviderError = (function (_super) {
	    __extends(NoProviderError, _super);
	    function NoProviderError(injector, key) {
	        _super.call(this, injector, key, function (keys) {
	            var first = lang_1.stringify(collection_1.ListWrapper.first(keys).token);
	            return "No provider for " + first + "!" + constructResolvingPath(keys);
	        });
	    }
	    return NoProviderError;
	})(AbstractProviderError);
	exports.NoProviderError = NoProviderError;
	/**
	 * Thrown when dependencies form a cycle.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))
	 *
	 * ```typescript
	 * var injector = Injector.resolveAndCreate([
	 *   provide("one", {useFactory: (two) => "two", deps: [[new Inject("two")]]}),
	 *   provide("two", {useFactory: (one) => "one", deps: [[new Inject("one")]]})
	 * ]);
	 *
	 * expect(() => injector.get("one")).toThrowError();
	 * ```
	 *
	 * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
	 */
	var CyclicDependencyError = (function (_super) {
	    __extends(CyclicDependencyError, _super);
	    function CyclicDependencyError(injector, key) {
	        _super.call(this, injector, key, function (keys) {
	            return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
	        });
	    }
	    return CyclicDependencyError;
	})(AbstractProviderError);
	exports.CyclicDependencyError = CyclicDependencyError;
	/**
	 * Thrown when a constructing type returns with an Error.
	 *
	 * The `InstantiationError` class contains the original error plus the dependency graph which caused
	 * this object to be instantiated.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))
	 *
	 * ```typescript
	 * class A {
	 *   constructor() {
	 *     throw new Error('message');
	 *   }
	 * }
	 *
	 * var injector = Injector.resolveAndCreate([A]);

	 * try {
	 *   injector.get(A);
	 * } catch (e) {
	 *   expect(e instanceof InstantiationError).toBe(true);
	 *   expect(e.originalException.message).toEqual("message");
	 *   expect(e.originalStack).toBeDefined();
	 * }
	 * ```
	 */
	var InstantiationError = (function (_super) {
	    __extends(InstantiationError, _super);
	    function InstantiationError(injector, originalException, originalStack, key) {
	        _super.call(this, "DI Exception", originalException, originalStack, null);
	        this.keys = [key];
	        this.injectors = [injector];
	    }
	    InstantiationError.prototype.addKey = function (injector, key) {
	        this.injectors.push(injector);
	        this.keys.push(key);
	    };
	    Object.defineProperty(InstantiationError.prototype, "wrapperMessage", {
	        get: function () {
	            var first = lang_1.stringify(collection_1.ListWrapper.first(this.keys).token);
	            return "Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(InstantiationError.prototype, "causeKey", {
	        get: function () { return this.keys[0]; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(InstantiationError.prototype, "context", {
	        get: function () { return this.injectors[this.injectors.length - 1].debugContext(); },
	        enumerable: true,
	        configurable: true
	    });
	    return InstantiationError;
	})(exceptions_1.WrappedException);
	exports.InstantiationError = InstantiationError;
	/**
	 * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}
	 * creation.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))
	 *
	 * ```typescript
	 * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
	 * ```
	 */
	var InvalidProviderError = (function (_super) {
	    __extends(InvalidProviderError, _super);
	    function InvalidProviderError(provider) {
	        _super.call(this, "Invalid provider - only instances of Provider and Type are allowed, got: " +
	            provider.toString());
	    }
	    return InvalidProviderError;
	})(exceptions_1.BaseException);
	exports.InvalidProviderError = InvalidProviderError;
	/**
	 * Thrown when the class has no annotation information.
	 *
	 * Lack of annotation information prevents the {@link Injector} from determining which dependencies
	 * need to be injected into the constructor.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))
	 *
	 * ```typescript
	 * class A {
	 *   constructor(b) {}
	 * }
	 *
	 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
	 * ```
	 *
	 * This error is also thrown when the class not marked with {@link Injectable} has parameter types.
	 *
	 * ```typescript
	 * class B {}
	 *
	 * class A {
	 *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
	 * }
	 *
	 * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
	 * ```
	 */
	var NoAnnotationError = (function (_super) {
	    __extends(NoAnnotationError, _super);
	    function NoAnnotationError(typeOrFunc, params) {
	        _super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));
	    }
	    NoAnnotationError._genMessage = function (typeOrFunc, params) {
	        var signature = [];
	        for (var i = 0, ii = params.length; i < ii; i++) {
	            var parameter = params[i];
	            if (lang_1.isBlank(parameter) || parameter.length == 0) {
	                signature.push('?');
	            }
	            else {
	                signature.push(parameter.map(lang_1.stringify).join(' '));
	            }
	        }
	        return "Cannot resolve all parameters for " + lang_1.stringify(typeOrFunc) + "(" +
	            signature.join(', ') + "). " + 'Make sure they all have valid type or annotations.';
	    };
	    return NoAnnotationError;
	})(exceptions_1.BaseException);
	exports.NoAnnotationError = NoAnnotationError;
	/**
	 * Thrown when getting an object by index.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))
	 *
	 * ```typescript
	 * class A {}
	 *
	 * var injector = Injector.resolveAndCreate([A]);
	 *
	 * expect(() => injector.getAt(100)).toThrowError();
	 * ```
	 */
	var OutOfBoundsError = (function (_super) {
	    __extends(OutOfBoundsError, _super);
	    function OutOfBoundsError(index) {
	        _super.call(this, "Index " + index + " is out-of-bounds.");
	    }
	    return OutOfBoundsError;
	})(exceptions_1.BaseException);
	exports.OutOfBoundsError = OutOfBoundsError;
	// TODO: add a working example after alpha38 is released
	/**
	 * Thrown when a multi provider and a regular provider are bound to the same token.
	 *
	 * ### Example
	 *
	 * ```typescript
	 * expect(() => Injector.resolveAndCreate([
	 *   new Provider("Strings", {useValue: "string1", multi: true}),
	 *   new Provider("Strings", {useValue: "string2", multi: false})
	 * ])).toThrowError();
	 * ```
	 */
	var MixingMultiProvidersWithRegularProvidersError = (function (_super) {
	    __extends(MixingMultiProvidersWithRegularProvidersError, _super);
	    function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
	        _super.call(this, "Cannot mix multi providers and regular providers, got: " + provider1.toString() + " " +
	            provider2.toString());
	    }
	    return MixingMultiProvidersWithRegularProvidersError;
	})(exceptions_1.BaseException);
	exports.MixingMultiProvidersWithRegularProvidersError = MixingMultiProvidersWithRegularProvidersError;
	//# sourceMappingURL=exceptions.js.map

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(49);
	/**
	 * Creates a token that can be used in a DI Provider.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/Ys9ezXpj2Mnoy3Uc8KBp?p=preview))
	 *
	 * ```typescript
	 * var t = new OpaqueToken("value");
	 *
	 * var injector = Injector.resolveAndCreate([
	 *   provide(t, {useValue: "providedValue"})
	 * ]);
	 *
	 * expect(injector.get(t)).toEqual("bindingValue");
	 * ```
	 *
	 * Using an `OpaqueToken` is preferable to using strings as tokens because of possible collisions
	 * caused by multiple providers using the same string as two different tokens.
	 *
	 * Using an `OpaqueToken` is preferable to using an `Object` as tokens because it provides better
	 * error messages.
	 */
	var OpaqueToken = (function () {
	    function OpaqueToken(_desc) {
	        this._desc = _desc;
	    }
	    OpaqueToken.prototype.toString = function () { return "Token " + this._desc; };
	    OpaqueToken = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [String])
	    ], OpaqueToken);
	    return OpaqueToken;
	})();
	exports.OpaqueToken = OpaqueToken;
	//# sourceMappingURL=opaque_token.js.map

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(49);
	var metadata_1 = __webpack_require__(197);
	var change_detection_1 = __webpack_require__(214);
	/**
	 * Directives allow you to attach behavior to elements in the DOM.
	 *
	 * {@link DirectiveMetadata}s with an embedded view are called {@link ComponentMetadata}s.
	 *
	 * A directive consists of a single directive annotation and a controller class. When the
	 * directive's `selector` matches
	 * elements in the DOM, the following steps occur:
	 *
	 * 1. For each directive, the `ElementInjector` attempts to resolve the directive's constructor
	 * arguments.
	 * 2. Angular instantiates directives for each matched element using `ElementInjector` in a
	 * depth-first order,
	 *    as declared in the HTML.
	 *
	 * ## Understanding How Injection Works
	 *
	 * There are three stages of injection resolution.
	 * - *Pre-existing Injectors*:
	 *   - The terminal {@link Injector} cannot resolve dependencies. It either throws an error or, if
	 * the dependency was
	 *     specified as `@Optional`, returns `null`.
	 *   - The platform injector resolves browser singleton resources, such as: cookies, title,
	 * location, and others.
	 * - *Component Injectors*: Each component instance has its own {@link Injector}, and they follow
	 * the same parent-child hierarchy
	 *     as the component instances in the DOM.
	 * - *Element Injectors*: Each component instance has a Shadow DOM. Within the Shadow DOM each
	 * element has an `ElementInjector`
	 *     which follow the same parent-child hierarchy as the DOM elements themselves.
	 *
	 * When a template is instantiated, it also must instantiate the corresponding directives in a
	 * depth-first order. The
	 * current `ElementInjector` resolves the constructor dependencies for each directive.
	 *
	 * Angular then resolves dependencies as follows, according to the order in which they appear in the
	 * {@link ViewMetadata}:
	 *
	 * 1. Dependencies on the current element
	 * 2. Dependencies on element injectors and their parents until it encounters a Shadow DOM boundary
	 * 3. Dependencies on component injectors and their parents until it encounters the root component
	 * 4. Dependencies on pre-existing injectors
	 *
	 *
	 * The `ElementInjector` can inject other directives, element-specific special objects, or it can
	 * delegate to the parent
	 * injector.
	 *
	 * To inject other directives, declare the constructor parameter as:
	 * - `directive:DirectiveType`: a directive on the current element only
	 * - `@Host() directive:DirectiveType`: any directive that matches the type between the current
	 * element and the
	 *    Shadow DOM root.
	 * - `@Query(DirectiveType) query:QueryList<DirectiveType>`: A live collection of direct child
	 * directives.
	 * - `@QueryDescendants(DirectiveType) query:QueryList<DirectiveType>`: A live collection of any
	 * child directives.
	 *
	 * To inject element-specific special objects, declare the constructor parameter as:
	 * - `element: ElementRef` to obtain a reference to logical element in the view.
	 * - `viewContainer: ViewContainerRef` to control child template instantiation, for
	 * {@link DirectiveMetadata} directives only
	 * - `bindingPropagation: BindingPropagation` to control change detection in a more granular way.
	 *
	 * ### Example
	 *
	 * The following example demonstrates how dependency injection resolves constructor arguments in
	 * practice.
	 *
	 *
	 * Assume this HTML template:
	 *
	 * ```
	 * <div dependency="1">
	 *   <div dependency="2">
	 *     <div dependency="3" my-directive>
	 *       <div dependency="4">
	 *         <div dependency="5"></div>
	 *       </div>
	 *       <div dependency="6"></div>
	 *     </div>
	 *   </div>
	 * </div>
	 * ```
	 *
	 * With the following `dependency` decorator and `SomeService` injectable class.
	 *
	 * ```
	 * @Injectable()
	 * class SomeService {
	 * }
	 *
	 * @Directive({
	 *   selector: '[dependency]',
	 *   inputs: [
	 *     'id: dependency'
	 *   ]
	 * })
	 * class Dependency {
	 *   id:string;
	 * }
	 * ```
	 *
	 * Let's step through the different ways in which `MyDirective` could be declared...
	 *
	 *
	 * ### No injection
	 *
	 * Here the constructor is declared with no arguments, therefore nothing is injected into
	 * `MyDirective`.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor() {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with no dependencies.
	 *
	 *
	 * ### Component-level injection
	 *
	 * Directives can inject any injectable instance from the closest component injector or any of its
	 * parents.
	 *
	 * Here, the constructor declares a parameter, `someService`, and injects the `SomeService` type
	 * from the parent
	 * component's injector.
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(someService: SomeService) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a dependency on `SomeService`.
	 *
	 *
	 * ### Injecting a directive from the current element
	 *
	 * Directives can inject other directives declared on the current element.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(dependency: Dependency) {
	 *     expect(dependency.id).toEqual(3);
	 *   }
	 * }
	 * ```
	 * This directive would be instantiated with `Dependency` declared at the same element, in this case
	 * `dependency="3"`.
	 *
	 * ### Injecting a directive from any ancestor elements
	 *
	 * Directives can inject other directives declared on any ancestor element (in the current Shadow
	 * DOM), i.e. on the current element, the
	 * parent element, or its parents.
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Host() dependency: Dependency) {
	 *     expect(dependency.id).toEqual(2);
	 *   }
	 * }
	 * ```
	 *
	 * `@Host` checks the current element, the parent, as well as its parents recursively. If
	 * `dependency="2"` didn't
	 * exist on the direct parent, this injection would
	 * have returned
	 * `dependency="1"`.
	 *
	 *
	 * ### Injecting a live collection of direct child directives
	 *
	 *
	 * A directive can also query for other child directives. Since parent directives are instantiated
	 * before child directives, a directive can't simply inject the list of child directives. Instead,
	 * the directive injects a {@link QueryList}, which updates its contents as children are added,
	 * removed, or moved by a directive that uses a {@link ViewContainerRef} such as a `ng-for`, an
	 * `ng-if`, or an `ng-switch`.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Query(Dependency) dependencies:QueryList<Dependency>) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a {@link QueryList} which contains `Dependency` 4 and
	 * `Dependency` 6. Here, `Dependency` 5 would not be included, because it is not a direct child.
	 *
	 * ### Injecting a live collection of descendant directives
	 *
	 * By passing the descendant flag to `@Query` above, we can include the children of the child
	 * elements.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Query(Dependency, {descendants: true}) dependencies:QueryList<Dependency>) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a Query which would contain `Dependency` 4, 5 and 6.
	 *
	 * ### Optional injection
	 *
	 * The normal behavior of directives is to return an error when a specified dependency cannot be
	 * resolved. If you
	 * would like to inject `null` on unresolved dependency instead, you can annotate that dependency
	 * with `@Optional()`.
	 * This explicitly permits the author of a template to treat some of the surrounding directives as
	 * optional.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Optional() dependency:Dependency) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a `Dependency` directive found on the current element.
	 * If none can be
	 * found, the injector supplies `null` instead of throwing an error.
	 *
	 * ### Example
	 *
	 * Here we use a decorator directive to simply define basic tool-tip behavior.
	 *
	 * ```
	 * @Directive({
	 *   selector: '[tooltip]',
	 *   inputs: [
	 *     'text: tooltip'
	 *   ],
	 *   host: {
	 *     '(mouseenter)': 'onMouseEnter()',
	 *     '(mouseleave)': 'onMouseLeave()'
	 *   }
	 * })
	 * class Tooltip{
	 *   text:string;
	 *   overlay:Overlay; // NOT YET IMPLEMENTED
	 *   overlayManager:OverlayManager; // NOT YET IMPLEMENTED
	 *
	 *   constructor(overlayManager:OverlayManager) {
	 *     this.overlay = overlay;
	 *   }
	 *
	 *   onMouseEnter() {
	 *     // exact signature to be determined
	 *     this.overlay = this.overlayManager.open(text, ...);
	 *   }
	 *
	 *   onMouseLeave() {
	 *     this.overlay.close();
	 *     this.overlay = null;
	 *   }
	 * }
	 * ```
	 * In our HTML template, we can then add this behavior to a `<div>` or any other element with the
	 * `tooltip` selector,
	 * like so:
	 *
	 * ```
	 * <div tooltip="some text here"></div>
	 * ```
	 *
	 * Directives can also control the instantiation, destruction, and positioning of inline template
	 * elements:
	 *
	 * A directive uses a {@link ViewContainerRef} to instantiate, insert, move, and destroy views at
	 * runtime.
	 * The {@link ViewContainerRef} is created as a result of `<template>` element, and represents a
	 * location in the current view
	 * where these actions are performed.
	 *
	 * Views are always created as children of the current {@link ViewMetadata}, and as siblings of the
	 * `<template>` element. Thus a
	 * directive in a child view cannot inject the directive that created it.
	 *
	 * Since directives that create views via ViewContainers are common in Angular, and using the full
	 * `<template>` element syntax is wordy, Angular
	 * also supports a shorthand notation: `<li *foo="bar">` and `<li template="foo: bar">` are
	 * equivalent.
	 *
	 * Thus,
	 *
	 * ```
	 * <ul>
	 *   <li *foo="bar" title="text"></li>
	 * </ul>
	 * ```
	 *
	 * Expands in use to:
	 *
	 * ```
	 * <ul>
	 *   <template [foo]="bar">
	 *     <li title="text"></li>
	 *   </template>
	 * </ul>
	 * ```
	 *
	 * Notice that although the shorthand places `*foo="bar"` within the `<li>` element, the binding for
	 * the directive
	 * controller is correctly instantiated on the `<template>` element rather than the `<li>` element.
	 *
	 * ## Lifecycle hooks
	 *
	 * When the directive class implements some {@link angular2/lifecycle_hooks} the callbacks are
	 * called by the change detection at defined points in time during the life of the directive.
	 *
	 * ### Example
	 *
	 * Let's suppose we want to implement the `unless` behavior, to conditionally include a template.
	 *
	 * Here is a simple directive that triggers on an `unless` selector:
	 *
	 * ```
	 * @Directive({
	 *   selector: '[unless]',
	 *   inputs: ['unless']
	 * })
	 * export class Unless {
	 *   viewContainer: ViewContainerRef;
	 *   templateRef: TemplateRef;
	 *   prevCondition: boolean;
	 *
	 *   constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef) {
	 *     this.viewContainer = viewContainer;
	 *     this.templateRef = templateRef;
	 *     this.prevCondition = null;
	 *   }
	 *
	 *   set unless(newCondition) {
	 *     if (newCondition && (isBlank(this.prevCondition) || !this.prevCondition)) {
	 *       this.prevCondition = true;
	 *       this.viewContainer.clear();
	 *     } else if (!newCondition && (isBlank(this.prevCondition) || this.prevCondition)) {
	 *       this.prevCondition = false;
	 *       this.viewContainer.create(this.templateRef);
	 *     }
	 *   }
	 * }
	 * ```
	 *
	 * We can then use this `unless` selector in a template:
	 * ```
	 * <ul>
	 *   <li *unless="expr"></li>
	 * </ul>
	 * ```
	 *
	 * Once the directive instantiates the child view, the shorthand notation for the template expands
	 * and the result is:
	 *
	 * ```
	 * <ul>
	 *   <template [unless]="exp">
	 *     <li></li>
	 *   </template>
	 *   <li></li>
	 * </ul>
	 * ```
	 *
	 * Note also that although the `<li></li>` template still exists inside the `<template></template>`,
	 * the instantiated
	 * view occurs on the second `<li></li>` which is a sibling to the `<template>` element.
	 */
	var DirectiveMetadata = (function (_super) {
	    __extends(DirectiveMetadata, _super);
	    function DirectiveMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, selector = _b.selector, inputs = _b.inputs, outputs = _b.outputs, properties = _b.properties, events = _b.events, host = _b.host, bindings = _b.bindings, providers = _b.providers, exportAs = _b.exportAs, moduleId = _b.moduleId, queries = _b.queries;
	        _super.call(this);
	        this.selector = selector;
	        this._inputs = inputs;
	        this._properties = properties;
	        this._outputs = outputs;
	        this._events = events;
	        this.host = host;
	        this.exportAs = exportAs;
	        this.moduleId = moduleId;
	        this.queries = queries;
	        this._providers = providers;
	        this._bindings = bindings;
	    }
	    Object.defineProperty(DirectiveMetadata.prototype, "inputs", {
	        /**
	         * Enumerates the set of data-bound input properties for a directive
	         *
	         * Angular automatically updates input properties during change detection.
	         *
	         * The `inputs` property defines a set of `directiveProperty` to `bindingProperty`
	         * configuration:
	         *
	         * - `directiveProperty` specifies the component property where the value is written.
	         * - `bindingProperty` specifies the DOM property where the value is read from.
	         *
	         * When `bindingProperty` is not provided, it is assumed to be equal to `directiveProperty`.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/ivhfXY?p=preview))
	         *
	         * The following example creates a component with two data-bound properties.
	         *
	         * ```typescript
	         * @Component({
	         *   selector: 'bank-account',
	         *   inputs: ['bankName', 'id: account-id'],
	         *   template: `
	         *     Bank Name: {{bankName}}
	         *     Account Id: {{id}}
	         *   `
	         * })
	         * class BankAccount {
	         *   bankName: string;
	         *   id: string;
	         *
	         *   // this property is not bound, and won't be automatically updated by Angular
	         *   normalizedBankName: string;
	         * }
	         *
	         * @Component({
	         *   selector: 'app',
	         *   template: `
	         *     <bank-account bank-name="RBC" account-id="4747"></bank-account>
	         *   `,
	         *   directives: [BankAccount]
	         * })
	         * class App {}
	         *
	         * bootstrap(App);
	         * ```
	         *
	         */
	        get: function () {
	            return lang_1.isPresent(this._properties) && this._properties.length > 0 ? this._properties :
	                this._inputs;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveMetadata.prototype, "properties", {
	        get: function () { return this.inputs; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveMetadata.prototype, "outputs", {
	        /**
	         * Enumerates the set of event-bound output properties.
	         *
	         * When an output property emits an event, an event handler attached to that event
	         * the template is invoked.
	         *
	         * The `outputs` property defines a set of `directiveProperty` to `bindingProperty`
	         * configuration:
	         *
	         * - `directiveProperty` specifies the component property that emits events.
	         * - `bindingProperty` specifies the DOM property the event handler is attached to.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/d5CNq7?p=preview))
	         *
	         * ```typescript
	         * @Directive({
	         *   selector: 'interval-dir',
	         *   outputs: ['everySecond', 'five5Secs: everyFiveSeconds']
	         * })
	         * class IntervalDir {
	         *   everySecond = new EventEmitter();
	         *   five5Secs = new EventEmitter();
	         *
	         *   constructor() {
	         *     setInterval(() => this.everySecond.next("event"), 1000);
	         *     setInterval(() => this.five5Secs.next("event"), 5000);
	         *   }
	         * }
	         *
	         * @Component({
	         *   selector: 'app',
	         *   template: `
	         *     <interval-dir (every-second)="everySecond()" (every-five-seconds)="everyFiveSeconds()">
	         *     </interval-dir>
	         *   `,
	         *   directives: [IntervalDir]
	         * })
	         * class App {
	         *   everySecond() { console.log('second'); }
	         *   everyFiveSeconds() { console.log('five seconds'); }
	         * }
	         * bootstrap(App);
	         * ```
	         *
	         */
	        get: function () {
	            return lang_1.isPresent(this._events) && this._events.length > 0 ? this._events : this._outputs;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveMetadata.prototype, "events", {
	        get: function () { return this.outputs; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveMetadata.prototype, "providers", {
	        /**
	         * Defines the set of injectable objects that are visible to a Directive and its light DOM
	         * children.
	         *
	         * ## Simple Example
	         *
	         * Here is an example of a class that can be injected:
	         *
	         * ```
	         * class Greeter {
	         *    greet(name:string) {
	         *      return 'Hello ' + name + '!';
	         *    }
	         * }
	         *
	         * @Directive({
	         *   selector: 'greet',
	         *   bindings: [
	         *     Greeter
	         *   ]
	         * })
	         * class HelloWorld {
	         *   greeter:Greeter;
	         *
	         *   constructor(greeter:Greeter) {
	         *     this.greeter = greeter;
	         *   }
	         * }
	         * ```
	         */
	        get: function () {
	            return lang_1.isPresent(this._bindings) && this._bindings.length > 0 ? this._bindings :
	                this._providers;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveMetadata.prototype, "bindings", {
	        /** @deprecated */
	        get: function () { return this.providers; },
	        enumerable: true,
	        configurable: true
	    });
	    DirectiveMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], DirectiveMetadata);
	    return DirectiveMetadata;
	})(metadata_1.InjectableMetadata);
	exports.DirectiveMetadata = DirectiveMetadata;
	/**
	 * Declare reusable UI building blocks for an application.
	 *
	 * Each Angular component requires a single `@Component` and at least one `@View` annotation. The
	 * `@Component`
	 * annotation specifies when a component is instantiated, and which properties and hostListeners it
	 * binds to.
	 *
	 * When a component is instantiated, Angular
	 * - creates a shadow DOM for the component.
	 * - loads the selected template into the shadow DOM.
	 * - creates all the injectable objects configured with `providers` and `viewProviders`.
	 *
	 * All template expressions and statements are then evaluated against the component instance.
	 *
	 * For details on the `@View` annotation, see {@link ViewMetadata}.
	 *
	 * ## Lifecycle hooks
	 *
	 * When the component class implements some {@link angular2/lifecycle_hooks} the callbacks are
	 * called by the change detection at defined points in time during the life of the component.
	 *
	 * ### Example
	 *
	 * ```
	 * @Component({
	 *   selector: 'greet',
	 *   template: 'Hello {{name}}!'
	 * })
	 * class Greet {
	 *   name: string;
	 *
	 *   constructor() {
	 *     this.name = 'World';
	 *   }
	 * }
	 * ```
	 *
	 */
	var ComponentMetadata = (function (_super) {
	    __extends(ComponentMetadata, _super);
	    function ComponentMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, selector = _b.selector, inputs = _b.inputs, outputs = _b.outputs, properties = _b.properties, events = _b.events, host = _b.host, exportAs = _b.exportAs, moduleId = _b.moduleId, bindings = _b.bindings, providers = _b.providers, viewBindings = _b.viewBindings, viewProviders = _b.viewProviders, _c = _b.changeDetection, changeDetection = _c === void 0 ? change_detection_1.ChangeDetectionStrategy.Default : _c, queries = _b.queries, templateUrl = _b.templateUrl, template = _b.template, styleUrls = _b.styleUrls, styles = _b.styles, directives = _b.directives, pipes = _b.pipes, encapsulation = _b.encapsulation;
	        _super.call(this, {
	            selector: selector,
	            inputs: inputs,
	            outputs: outputs,
	            properties: properties,
	            events: events,
	            host: host,
	            exportAs: exportAs,
	            moduleId: moduleId,
	            bindings: bindings,
	            providers: providers,
	            queries: queries
	        });
	        this.changeDetection = changeDetection;
	        this._viewProviders = viewProviders;
	        this._viewBindings = viewBindings;
	        this.templateUrl = templateUrl;
	        this.template = template;
	        this.styleUrls = styleUrls;
	        this.styles = styles;
	        this.directives = directives;
	        this.pipes = pipes;
	        this.encapsulation = encapsulation;
	    }
	    Object.defineProperty(ComponentMetadata.prototype, "viewProviders", {
	        /**
	         * Defines the set of injectable objects that are visible to its view DOM children.
	         *
	         * ## Simple Example
	         *
	         * Here is an example of a class that can be injected:
	         *
	         * ```
	         * class Greeter {
	         *    greet(name:string) {
	         *      return 'Hello ' + name + '!';
	         *    }
	         * }
	         *
	         * @Directive({
	         *   selector: 'needs-greeter'
	         * })
	         * class NeedsGreeter {
	         *   greeter:Greeter;
	         *
	         *   constructor(greeter:Greeter) {
	         *     this.greeter = greeter;
	         *   }
	         * }
	         *
	         * @Component({
	         *   selector: 'greet',
	         *   viewProviders: [
	         *     Greeter
	         *   ],
	         *   template: `<needs-greeter></needs-greeter>`,
	         *   directives: [NeedsGreeter]
	         * })
	         * class HelloWorld {
	         * }
	         *
	         * ```
	         */
	        get: function () {
	            return lang_1.isPresent(this._viewBindings) && this._viewBindings.length > 0 ? this._viewBindings :
	                this._viewProviders;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentMetadata.prototype, "viewBindings", {
	        get: function () { return this.viewProviders; },
	        enumerable: true,
	        configurable: true
	    });
	    ComponentMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], ComponentMetadata);
	    return ComponentMetadata;
	})(DirectiveMetadata);
	exports.ComponentMetadata = ComponentMetadata;
	/**
	 * Declare reusable pipe function.
	 *
	 * A "pure" pipe is only re-evaluated when either the input or any of the arguments change.
	 *
	 * When not specified, pipes default to being pure.
	 *
	 * ### Example
	 *
	 * ```
	 * @Pipe({name: 'lowercase'})
	 * class Lowercase {
	 *   transform(v, args) { return v.toLowerCase(); }
	 * }
	 * ```
	 */
	var PipeMetadata = (function (_super) {
	    __extends(PipeMetadata, _super);
	    function PipeMetadata(_a) {
	        var name = _a.name, pure = _a.pure;
	        _super.call(this);
	        this.name = name;
	        this._pure = pure;
	    }
	    Object.defineProperty(PipeMetadata.prototype, "pure", {
	        get: function () { return lang_1.isPresent(this._pure) ? this._pure : true; },
	        enumerable: true,
	        configurable: true
	    });
	    PipeMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], PipeMetadata);
	    return PipeMetadata;
	})(metadata_1.InjectableMetadata);
	exports.PipeMetadata = PipeMetadata;
	/**
	 * Declares a data-bound input property.
	 *
	 * Angular automatically updates data-bound properties during change detection.
	 *
	 * `InputMetadata` takes an optional parameter that specifies the name
	 * used when instantiating a component in the template. When not provided,
	 * the name of the decorated property is used.
	 *
	 * ### Example
	 *
	 * The following example creates a component with two input properties.
	 *
	 * ```typescript
	 * @Component({
	 *   selector: 'bank-account',
	 *   template: `
	 *     Bank Name: {{bankName}}
	 *     Account Id: {{id}}
	 *   `
	 * })
	 * class BankAccount {
	 *   @Input() bankName: string;
	 *   @Input('account-id') id: string;
	 *
	 *   // this property is not bound, and won't be automatically updated by Angular
	 *   normalizedBankName: string;
	 * }
	 *
	 * @Component({
	 *   selector: 'app',
	 *   template: `
	 *     <bank-account bank-name="RBC" account-id="4747"></bank-account>
	 *   `,
	 *   directives: [BankAccount]
	 * })
	 * class App {}
	 *
	 * bootstrap(App);
	 * ```
	 */
	var InputMetadata = (function () {
	    function InputMetadata(
	        /**
	         * Name used when instantiating a component in the temlate.
	         */
	        bindingPropertyName) {
	        this.bindingPropertyName = bindingPropertyName;
	    }
	    InputMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [String])
	    ], InputMetadata);
	    return InputMetadata;
	})();
	exports.InputMetadata = InputMetadata;
	/**
	 * Declares an event-bound output property.
	 *
	 * When an output property emits an event, an event handler attached to that event
	 * the template is invoked.
	 *
	 * `OutputMetadata` takes an optional parameter that specifies the name
	 * used when instantiating a component in the template. When not provided,
	 * the name of the decorated property is used.
	 *
	 * ### Example
	 *
	 * ```typescript
	 * @Directive({
	 *   selector: 'interval-dir',
	 * })
	 * class IntervalDir {
	 *   @Output() everySecond = new EventEmitter();
	 *   @Output('everyFiveSeconds') five5Secs = new EventEmitter();
	 *
	 *   constructor() {
	 *     setInterval(() => this.everySecond.next("event"), 1000);
	 *     setInterval(() => this.five5Secs.next("event"), 5000);
	 *   }
	 * }
	 *
	 * @Component({
	 *   selector: 'app',
	 *   template: `
	 *     <interval-dir (every-second)="everySecond()" (every-five-seconds)="everyFiveSeconds()">
	 *     </interval-dir>
	 *   `,
	 *   directives: [IntervalDir]
	 * })
	 * class App {
	 *   everySecond() { console.log('second'); }
	 *   everyFiveSeconds() { console.log('five seconds'); }
	 * }
	 * bootstrap(App);
	 * ```
	 */
	var OutputMetadata = (function () {
	    function OutputMetadata(bindingPropertyName) {
	        this.bindingPropertyName = bindingPropertyName;
	    }
	    OutputMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [String])
	    ], OutputMetadata);
	    return OutputMetadata;
	})();
	exports.OutputMetadata = OutputMetadata;
	/**
	 * Declares a host property binding.
	 *
	 * Angular automatically checks host property bindings during change detection.
	 * If a binding changes, it will update the host element of the directive.
	 *
	 * `HostBindingMetadata` takes an optional parameter that specifies the property
	 * name of the host element that will be updated. When not provided,
	 * the class property name is used.
	 *
	 * ### Example
	 *
	 * The following example creates a directive that sets the `valid` and `invalid` classes
	 * on the DOM element that has ng-model directive on it.
	 *
	 * ```typescript
	 * @Directive({selector: '[ng-model]'})
	 * class NgModelStatus {
	 *   constructor(public control:NgModel) {}
	 *   @HostBinding('[class.valid]') get valid { return this.control.valid; }
	 *   @HostBinding('[class.invalid]') get invalid { return this.control.invalid; }
	 * }
	 *
	 * @Component({
	 *   selector: 'app',
	 *   template: `<input [(ng-model)]="prop">`,
	 *   directives: [FORM_DIRECTIVES, NgModelStatus]
	 * })
	 * class App {
	 *   prop;
	 * }
	 *
	 * bootstrap(App);
	 * ```
	 */
	var HostBindingMetadata = (function () {
	    function HostBindingMetadata(hostPropertyName) {
	        this.hostPropertyName = hostPropertyName;
	    }
	    HostBindingMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [String])
	    ], HostBindingMetadata);
	    return HostBindingMetadata;
	})();
	exports.HostBindingMetadata = HostBindingMetadata;
	/**
	 * Declares a host listener.
	 *
	 * Angular will invoke the decorated method when the host element emits the specified event.
	 *
	 * If the decorated method returns `false`, then `preventDefault` is applied on the DOM
	 * event.
	 *
	 * ### Example
	 *
	 * The following example declares a directive that attaches a click listener to the button and
	 * counts clicks.
	 *
	 * ```typescript
	 * @Directive({selector: 'button[counting]'})
	 * class CountClicks {
	 *   numberOfClicks = 0;
	 *
	 *   @HostListener('click', ['$event.target'])
	 *   onClick(btn) {
	 *     console.log("button", btn, "number of clicks:", this.numberOfClicks++);
	 *   }
	 * }
	 *
	 * @Component({
	 *   selector: 'app',
	 *   template: `<button counting>Increment</button>`,
	 *   directives: [CountClicks]
	 * })
	 * class App {}
	 *
	 * bootstrap(App);
	 * ```
	 */
	var HostListenerMetadata = (function () {
	    function HostListenerMetadata(eventName, args) {
	        this.eventName = eventName;
	        this.args = args;
	    }
	    HostListenerMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [String, Array])
	    ], HostListenerMetadata);
	    return HostListenerMetadata;
	})();
	exports.HostListenerMetadata = HostListenerMetadata;
	//# sourceMappingURL=directives.js.map

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * @module
	 * @description
	 * Change detection enables data binding in Angular.
	 */
	var change_detection_1 = __webpack_require__(215);
	exports.ChangeDetectionStrategy = change_detection_1.ChangeDetectionStrategy;
	exports.ExpressionChangedAfterItHasBeenCheckedException = change_detection_1.ExpressionChangedAfterItHasBeenCheckedException;
	exports.ChangeDetectionError = change_detection_1.ChangeDetectionError;
	exports.ChangeDetectorRef = change_detection_1.ChangeDetectorRef;
	exports.WrappedValue = change_detection_1.WrappedValue;
	exports.SimpleChange = change_detection_1.SimpleChange;
	exports.IterableDiffers = change_detection_1.IterableDiffers;
	exports.KeyValueDiffers = change_detection_1.KeyValueDiffers;
	//# sourceMappingURL=change_detection.js.map

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var iterable_differs_1 = __webpack_require__(216);
	var default_iterable_differ_1 = __webpack_require__(217);
	var keyvalue_differs_1 = __webpack_require__(218);
	var default_keyvalue_differ_1 = __webpack_require__(219);
	var lang_1 = __webpack_require__(49);
	var ast_1 = __webpack_require__(220);
	exports.ASTWithSource = ast_1.ASTWithSource;
	exports.AST = ast_1.AST;
	exports.AstTransformer = ast_1.AstTransformer;
	exports.PropertyRead = ast_1.PropertyRead;
	exports.LiteralArray = ast_1.LiteralArray;
	exports.ImplicitReceiver = ast_1.ImplicitReceiver;
	var lexer_1 = __webpack_require__(221);
	exports.Lexer = lexer_1.Lexer;
	var parser_1 = __webpack_require__(222);
	exports.Parser = parser_1.Parser;
	var locals_1 = __webpack_require__(223);
	exports.Locals = locals_1.Locals;
	var exceptions_1 = __webpack_require__(224);
	exports.DehydratedException = exceptions_1.DehydratedException;
	exports.ExpressionChangedAfterItHasBeenCheckedException = exceptions_1.ExpressionChangedAfterItHasBeenCheckedException;
	exports.ChangeDetectionError = exceptions_1.ChangeDetectionError;
	var interfaces_1 = __webpack_require__(225);
	exports.ChangeDetectorDefinition = interfaces_1.ChangeDetectorDefinition;
	exports.DebugContext = interfaces_1.DebugContext;
	exports.ChangeDetectorGenConfig = interfaces_1.ChangeDetectorGenConfig;
	var constants_1 = __webpack_require__(226);
	exports.ChangeDetectionStrategy = constants_1.ChangeDetectionStrategy;
	exports.CHANGE_DETECTION_STRATEGY_VALUES = constants_1.CHANGE_DETECTION_STRATEGY_VALUES;
	var proto_change_detector_1 = __webpack_require__(227);
	exports.DynamicProtoChangeDetector = proto_change_detector_1.DynamicProtoChangeDetector;
	var jit_proto_change_detector_1 = __webpack_require__(241);
	exports.JitProtoChangeDetector = jit_proto_change_detector_1.JitProtoChangeDetector;
	var binding_record_1 = __webpack_require__(230);
	exports.BindingRecord = binding_record_1.BindingRecord;
	exports.BindingTarget = binding_record_1.BindingTarget;
	var directive_record_1 = __webpack_require__(231);
	exports.DirectiveIndex = directive_record_1.DirectiveIndex;
	exports.DirectiveRecord = directive_record_1.DirectiveRecord;
	var dynamic_change_detector_1 = __webpack_require__(232);
	exports.DynamicChangeDetector = dynamic_change_detector_1.DynamicChangeDetector;
	var change_detector_ref_1 = __webpack_require__(234);
	exports.ChangeDetectorRef = change_detector_ref_1.ChangeDetectorRef;
	var iterable_differs_2 = __webpack_require__(216);
	exports.IterableDiffers = iterable_differs_2.IterableDiffers;
	var keyvalue_differs_2 = __webpack_require__(218);
	exports.KeyValueDiffers = keyvalue_differs_2.KeyValueDiffers;
	var change_detection_util_1 = __webpack_require__(228);
	exports.WrappedValue = change_detection_util_1.WrappedValue;
	exports.SimpleChange = change_detection_util_1.SimpleChange;
	/**
	 * Structural diffing for `Object`s and `Map`s.
	 */
	exports.keyValDiff = lang_1.CONST_EXPR([lang_1.CONST_EXPR(new default_keyvalue_differ_1.DefaultKeyValueDifferFactory())]);
	/**
	 * Structural diffing for `Iterable` types such as `Array`s.
	 */
	exports.iterableDiff = lang_1.CONST_EXPR([lang_1.CONST_EXPR(new default_iterable_differ_1.DefaultIterableDifferFactory())]);
	exports.defaultIterableDiffers = lang_1.CONST_EXPR(new iterable_differs_1.IterableDiffers(exports.iterableDiff));
	exports.defaultKeyValueDiffers = lang_1.CONST_EXPR(new keyvalue_differs_1.KeyValueDiffers(exports.keyValDiff));
	//# sourceMappingURL=change_detection.js.map

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var collection_1 = __webpack_require__(202);
	var di_1 = __webpack_require__(196);
	/**
	 * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
	 */
	var IterableDiffers = (function () {
	    function IterableDiffers(factories) {
	        this.factories = factories;
	    }
	    IterableDiffers.create = function (factories, parent) {
	        if (lang_1.isPresent(parent)) {
	            var copied = collection_1.ListWrapper.clone(parent.factories);
	            factories = factories.concat(copied);
	            return new IterableDiffers(factories);
	        }
	        else {
	            return new IterableDiffers(factories);
	        }
	    };
	    /**
	     * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the
	     * inherited {@link IterableDiffers} instance with the provided factories and return a new
	     * {@link IterableDiffers} instance.
	     *
	     * The following example shows how to extend an existing list of factories,
	           * which will only be applied to the injector for this component and its children.
	           * This step is all that's required to make a new {@link IterableDiffer} available.
	     *
	     * ### Example
	     *
	     * ```
	     * @Component({
	     *   viewProviders: [
	     *     IterableDiffers.extend([new ImmutableListDiffer()])
	     *   ]
	     * })
	     * ```
	     */
	    IterableDiffers.extend = function (factories) {
	        return new di_1.Provider(IterableDiffers, {
	            useFactory: function (parent) {
	                if (lang_1.isBlank(parent)) {
	                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed
	                    // to
	                    // bootstrap(), which would override default pipes instead of extending them.
	                    throw new exceptions_1.BaseException('Cannot extend IterableDiffers without a parent injector');
	                }
	                return IterableDiffers.create(factories, parent);
	            },
	            // Dependency technically isn't optional, but we can provide a better error message this way.
	            deps: [[IterableDiffers, new di_1.SkipSelfMetadata(), new di_1.OptionalMetadata()]]
	        });
	    };
	    IterableDiffers.prototype.find = function (iterable) {
	        var factory = this.factories.find(function (f) { return f.supports(iterable); });
	        if (lang_1.isPresent(factory)) {
	            return factory;
	        }
	        else {
	            throw new exceptions_1.BaseException("Cannot find a differ supporting object '" + iterable + "'");
	        }
	    };
	    IterableDiffers = __decorate([
	        di_1.Injectable(),
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Array])
	    ], IterableDiffers);
	    return IterableDiffers;
	})();
	exports.IterableDiffers = IterableDiffers;
	//# sourceMappingURL=iterable_differs.js.map

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var collection_1 = __webpack_require__(202);
	var lang_2 = __webpack_require__(49);
	var DefaultIterableDifferFactory = (function () {
	    function DefaultIterableDifferFactory() {
	    }
	    DefaultIterableDifferFactory.prototype.supports = function (obj) { return collection_1.isListLikeIterable(obj); };
	    DefaultIterableDifferFactory.prototype.create = function (cdRef) { return new DefaultIterableDiffer(); };
	    DefaultIterableDifferFactory = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], DefaultIterableDifferFactory);
	    return DefaultIterableDifferFactory;
	})();
	exports.DefaultIterableDifferFactory = DefaultIterableDifferFactory;
	var DefaultIterableDiffer = (function () {
	    function DefaultIterableDiffer() {
	        this._collection = null;
	        this._length = null;
	        // Keeps track of the used records at any point in time (during & across `_check()` calls)
	        this._linkedRecords = null;
	        // Keeps track of the removed records at any point in time during `_check()` calls.
	        this._unlinkedRecords = null;
	        this._previousItHead = null;
	        this._itHead = null;
	        this._itTail = null;
	        this._additionsHead = null;
	        this._additionsTail = null;
	        this._movesHead = null;
	        this._movesTail = null;
	        this._removalsHead = null;
	        this._removalsTail = null;
	    }
	    Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
	        get: function () { return this._collection; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
	        get: function () { return this._length; },
	        enumerable: true,
	        configurable: true
	    });
	    DefaultIterableDiffer.prototype.forEachItem = function (fn) {
	        var record;
	        for (record = this._itHead; record !== null; record = record._next) {
	            fn(record);
	        }
	    };
	    DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {
	        var record;
	        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
	            fn(record);
	        }
	    };
	    DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {
	        var record;
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            fn(record);
	        }
	    };
	    DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {
	        var record;
	        for (record = this._movesHead; record !== null; record = record._nextMoved) {
	            fn(record);
	        }
	    };
	    DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {
	        var record;
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            fn(record);
	        }
	    };
	    DefaultIterableDiffer.prototype.diff = function (collection) {
	        if (lang_2.isBlank(collection))
	            collection = [];
	        if (!collection_1.isListLikeIterable(collection)) {
	            throw new exceptions_1.BaseException("Error trying to diff '" + collection + "'");
	        }
	        if (this.check(collection)) {
	            return this;
	        }
	        else {
	            return null;
	        }
	    };
	    DefaultIterableDiffer.prototype.onDestroy = function () { };
	    // todo(vicb): optim for UnmodifiableListView (frozen arrays)
	    DefaultIterableDiffer.prototype.check = function (collection) {
	        var _this = this;
	        this._reset();
	        var record = this._itHead;
	        var mayBeDirty = false;
	        var index;
	        var item;
	        if (lang_2.isArray(collection)) {
	            var list = collection;
	            this._length = collection.length;
	            for (index = 0; index < this._length; index++) {
	                item = list[index];
	                if (record === null || !lang_2.looseIdentical(record.item, item)) {
	                    record = this._mismatch(record, item, index);
	                    mayBeDirty = true;
	                }
	                else if (mayBeDirty) {
	                    // TODO(misko): can we limit this to duplicates only?
	                    record = this._verifyReinsertion(record, item, index);
	                }
	                record = record._next;
	            }
	        }
	        else {
	            index = 0;
	            collection_1.iterateListLike(collection, function (item) {
	                if (record === null || !lang_2.looseIdentical(record.item, item)) {
	                    record = _this._mismatch(record, item, index);
	                    mayBeDirty = true;
	                }
	                else if (mayBeDirty) {
	                    // TODO(misko): can we limit this to duplicates only?
	                    record = _this._verifyReinsertion(record, item, index);
	                }
	                record = record._next;
	                index++;
	            });
	            this._length = index;
	        }
	        this._truncate(record);
	        this._collection = collection;
	        return this.isDirty;
	    };
	    Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
	        // CollectionChanges is considered dirty if it has any additions, moves or removals.
	        get: function () {
	            return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Reset the state of the change objects to show no changes. This means set previousKey to
	     * currentKey, and clear all of the queues (additions, moves, removals).
	     * Set the previousIndexes of moved and added items to their currentIndexes
	     * Reset the list of additions, moves and removals
	     *
	     * @internal
	     */
	    DefaultIterableDiffer.prototype._reset = function () {
	        if (this.isDirty) {
	            var record;
	            var nextRecord;
	            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
	                record._nextPrevious = record._next;
	            }
	            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                record.previousIndex = record.currentIndex;
	            }
	            this._additionsHead = this._additionsTail = null;
	            for (record = this._movesHead; record !== null; record = nextRecord) {
	                record.previousIndex = record.currentIndex;
	                nextRecord = record._nextMoved;
	            }
	            this._movesHead = this._movesTail = null;
	            this._removalsHead = this._removalsTail = null;
	        }
	    };
	    /**
	     * This is the core function which handles differences between collections.
	     *
	     * - `record` is the record which we saw at this position last time. If null then it is a new
	     *   item.
	     * - `item` is the current item in the collection
	     * - `index` is the position of the item in the collection
	     *
	     * @internal
	     */
	    DefaultIterableDiffer.prototype._mismatch = function (record, item, index) {
	        // The previous record after which we will append the current one.
	        var previousRecord;
	        if (record === null) {
	            previousRecord = this._itTail;
	        }
	        else {
	            previousRecord = record._prev;
	            // Remove the record from the collection since we know it does not match the item.
	            this._remove(record);
	        }
	        // Attempt to see if we have seen the item before.
	        record = this._linkedRecords === null ? null : this._linkedRecords.get(item, index);
	        if (record !== null) {
	            // We have seen this before, we need to move it forward in the collection.
	            this._moveAfter(record, previousRecord, index);
	        }
	        else {
	            // Never seen it, check evicted list.
	            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(item);
	            if (record !== null) {
	                // It is an item which we have evicted earlier: reinsert it back into the list.
	                this._reinsertAfter(record, previousRecord, index);
	            }
	            else {
	                // It is a new item: add it.
	                record = this._addAfter(new CollectionChangeRecord(item), previousRecord, index);
	            }
	        }
	        return record;
	    };
	    /**
	     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
	     *
	     * Use case: `[a, a]` => `[b, a, a]`
	     *
	     * If we did not have this check then the insertion of `b` would:
	     *   1) evict first `a`
	     *   2) insert `b` at `0` index.
	     *   3) leave `a` at index `1` as is. <-- this is wrong!
	     *   3) reinsert `a` at index 2. <-- this is wrong!
	     *
	     * The correct behavior is:
	     *   1) evict first `a`
	     *   2) insert `b` at `0` index.
	     *   3) reinsert `a` at index 1.
	     *   3) move `a` at from `1` to `2`.
	     *
	     *
	     * Double check that we have not evicted a duplicate item. We need to check if the item type may
	     * have already been removed:
	     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
	     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
	     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
	     * at the end.
	     *
	     * @internal
	     */
	    DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, index) {
	        var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(item);
	        if (reinsertRecord !== null) {
	            record = this._reinsertAfter(reinsertRecord, record._prev, index);
	        }
	        else if (record.currentIndex != index) {
	            record.currentIndex = index;
	            this._addToMoves(record, index);
	        }
	        return record;
	    };
	    /**
	     * Get rid of any excess {@link CollectionChangeRecord}s from the previous collection
	     *
	     * - `record` The first excess {@link CollectionChangeRecord}.
	     *
	     * @internal
	     */
	    DefaultIterableDiffer.prototype._truncate = function (record) {
	        // Anything after that needs to be removed;
	        while (record !== null) {
	            var nextRecord = record._next;
	            this._addToRemovals(this._unlink(record));
	            record = nextRecord;
	        }
	        if (this._unlinkedRecords !== null) {
	            this._unlinkedRecords.clear();
	        }
	        if (this._additionsTail !== null) {
	            this._additionsTail._nextAdded = null;
	        }
	        if (this._movesTail !== null) {
	            this._movesTail._nextMoved = null;
	        }
	        if (this._itTail !== null) {
	            this._itTail._next = null;
	        }
	        if (this._removalsTail !== null) {
	            this._removalsTail._nextRemoved = null;
	        }
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {
	        if (this._unlinkedRecords !== null) {
	            this._unlinkedRecords.remove(record);
	        }
	        var prev = record._prevRemoved;
	        var next = record._nextRemoved;
	        if (prev === null) {
	            this._removalsHead = next;
	        }
	        else {
	            prev._nextRemoved = next;
	        }
	        if (next === null) {
	            this._removalsTail = prev;
	        }
	        else {
	            next._prevRemoved = prev;
	        }
	        this._insertAfter(record, prevRecord, index);
	        this._addToMoves(record, index);
	        return record;
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {
	        this._unlink(record);
	        this._insertAfter(record, prevRecord, index);
	        this._addToMoves(record, index);
	        return record;
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {
	        this._insertAfter(record, prevRecord, index);
	        if (this._additionsTail === null) {
	            // todo(vicb)
	            // assert(this._additionsHead === null);
	            this._additionsTail = this._additionsHead = record;
	        }
	        else {
	            // todo(vicb)
	            // assert(_additionsTail._nextAdded === null);
	            // assert(record._nextAdded === null);
	            this._additionsTail = this._additionsTail._nextAdded = record;
	        }
	        return record;
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {
	        // todo(vicb)
	        // assert(record != prevRecord);
	        // assert(record._next === null);
	        // assert(record._prev === null);
	        var next = prevRecord === null ? this._itHead : prevRecord._next;
	        // todo(vicb)
	        // assert(next != record);
	        // assert(prevRecord != record);
	        record._next = next;
	        record._prev = prevRecord;
	        if (next === null) {
	            this._itTail = record;
	        }
	        else {
	            next._prev = record;
	        }
	        if (prevRecord === null) {
	            this._itHead = record;
	        }
	        else {
	            prevRecord._next = record;
	        }
	        if (this._linkedRecords === null) {
	            this._linkedRecords = new _DuplicateMap();
	        }
	        this._linkedRecords.put(record);
	        record.currentIndex = index;
	        return record;
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._remove = function (record) {
	        return this._addToRemovals(this._unlink(record));
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._unlink = function (record) {
	        if (this._linkedRecords !== null) {
	            this._linkedRecords.remove(record);
	        }
	        var prev = record._prev;
	        var next = record._next;
	        // todo(vicb)
	        // assert((record._prev = null) === null);
	        // assert((record._next = null) === null);
	        if (prev === null) {
	            this._itHead = next;
	        }
	        else {
	            prev._next = next;
	        }
	        if (next === null) {
	            this._itTail = prev;
	        }
	        else {
	            next._prev = prev;
	        }
	        return record;
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {
	        // todo(vicb)
	        // assert(record._nextMoved === null);
	        if (record.previousIndex === toIndex) {
	            return record;
	        }
	        if (this._movesTail === null) {
	            // todo(vicb)
	            // assert(_movesHead === null);
	            this._movesTail = this._movesHead = record;
	        }
	        else {
	            // todo(vicb)
	            // assert(_movesTail._nextMoved === null);
	            this._movesTail = this._movesTail._nextMoved = record;
	        }
	        return record;
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._addToRemovals = function (record) {
	        if (this._unlinkedRecords === null) {
	            this._unlinkedRecords = new _DuplicateMap();
	        }
	        this._unlinkedRecords.put(record);
	        record.currentIndex = null;
	        record._nextRemoved = null;
	        if (this._removalsTail === null) {
	            // todo(vicb)
	            // assert(_removalsHead === null);
	            this._removalsTail = this._removalsHead = record;
	            record._prevRemoved = null;
	        }
	        else {
	            // todo(vicb)
	            // assert(_removalsTail._nextRemoved === null);
	            // assert(record._nextRemoved === null);
	            record._prevRemoved = this._removalsTail;
	            this._removalsTail = this._removalsTail._nextRemoved = record;
	        }
	        return record;
	    };
	    DefaultIterableDiffer.prototype.toString = function () {
	        var record;
	        var list = [];
	        for (record = this._itHead; record !== null; record = record._next) {
	            list.push(record);
	        }
	        var previous = [];
	        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
	            previous.push(record);
	        }
	        var additions = [];
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            additions.push(record);
	        }
	        var moves = [];
	        for (record = this._movesHead; record !== null; record = record._nextMoved) {
	            moves.push(record);
	        }
	        var removals = [];
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            removals.push(record);
	        }
	        return "collection: " + list.join(', ') + "\n" + "previous: " + previous.join(', ') + "\n" +
	            "additions: " + additions.join(', ') + "\n" + "moves: " + moves.join(', ') + "\n" +
	            "removals: " + removals.join(', ') + "\n";
	    };
	    return DefaultIterableDiffer;
	})();
	exports.DefaultIterableDiffer = DefaultIterableDiffer;
	var CollectionChangeRecord = (function () {
	    function CollectionChangeRecord(item) {
	        this.item = item;
	        this.currentIndex = null;
	        this.previousIndex = null;
	        /** @internal */
	        this._nextPrevious = null;
	        /** @internal */
	        this._prev = null;
	        /** @internal */
	        this._next = null;
	        /** @internal */
	        this._prevDup = null;
	        /** @internal */
	        this._nextDup = null;
	        /** @internal */
	        this._prevRemoved = null;
	        /** @internal */
	        this._nextRemoved = null;
	        /** @internal */
	        this._nextAdded = null;
	        /** @internal */
	        this._nextMoved = null;
	    }
	    CollectionChangeRecord.prototype.toString = function () {
	        return this.previousIndex === this.currentIndex ?
	            lang_2.stringify(this.item) :
	            lang_2.stringify(this.item) + '[' + lang_2.stringify(this.previousIndex) + '->' +
	                lang_2.stringify(this.currentIndex) + ']';
	    };
	    return CollectionChangeRecord;
	})();
	exports.CollectionChangeRecord = CollectionChangeRecord;
	// A linked list of CollectionChangeRecords with the same CollectionChangeRecord.item
	var _DuplicateItemRecordList = (function () {
	    function _DuplicateItemRecordList() {
	        /** @internal */
	        this._head = null;
	        /** @internal */
	        this._tail = null;
	    }
	    /**
	     * Append the record to the list of duplicates.
	     *
	     * Note: by design all records in the list of duplicates hold the same value in record.item.
	     */
	    _DuplicateItemRecordList.prototype.add = function (record) {
	        if (this._head === null) {
	            this._head = this._tail = record;
	            record._nextDup = null;
	            record._prevDup = null;
	        }
	        else {
	            // todo(vicb)
	            // assert(record.item ==  _head.item ||
	            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
	            this._tail._nextDup = record;
	            record._prevDup = this._tail;
	            record._nextDup = null;
	            this._tail = record;
	        }
	    };
	    // Returns a CollectionChangeRecord having CollectionChangeRecord.item == item and
	    // CollectionChangeRecord.currentIndex >= afterIndex
	    _DuplicateItemRecordList.prototype.get = function (item, afterIndex) {
	        var record;
	        for (record = this._head; record !== null; record = record._nextDup) {
	            if ((afterIndex === null || afterIndex < record.currentIndex) &&
	                lang_2.looseIdentical(record.item, item)) {
	                return record;
	            }
	        }
	        return null;
	    };
	    /**
	     * Remove one {@link CollectionChangeRecord} from the list of duplicates.
	     *
	     * Returns whether the list of duplicates is empty.
	     */
	    _DuplicateItemRecordList.prototype.remove = function (record) {
	        // todo(vicb)
	        // assert(() {
	        //  // verify that the record being removed is in the list.
	        //  for (CollectionChangeRecord cursor = _head; cursor != null; cursor = cursor._nextDup) {
	        //    if (identical(cursor, record)) return true;
	        //  }
	        //  return false;
	        //});
	        var prev = record._prevDup;
	        var next = record._nextDup;
	        if (prev === null) {
	            this._head = next;
	        }
	        else {
	            prev._nextDup = next;
	        }
	        if (next === null) {
	            this._tail = prev;
	        }
	        else {
	            next._prevDup = prev;
	        }
	        return this._head === null;
	    };
	    return _DuplicateItemRecordList;
	})();
	var _DuplicateMap = (function () {
	    function _DuplicateMap() {
	        this.map = new Map();
	    }
	    _DuplicateMap.prototype.put = function (record) {
	        // todo(vicb) handle corner cases
	        var key = lang_2.getMapKey(record.item);
	        var duplicates = this.map.get(key);
	        if (!lang_2.isPresent(duplicates)) {
	            duplicates = new _DuplicateItemRecordList();
	            this.map.set(key, duplicates);
	        }
	        duplicates.add(record);
	    };
	    /**
	     * Retrieve the `value` using key. Because the CollectionChangeRecord value maybe one which we
	     * have already iterated over, we use the afterIndex to pretend it is not there.
	     *
	     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
	     * have any more `a`s needs to return the last `a` not the first or second.
	     */
	    _DuplicateMap.prototype.get = function (value, afterIndex) {
	        if (afterIndex === void 0) { afterIndex = null; }
	        var key = lang_2.getMapKey(value);
	        var recordList = this.map.get(key);
	        return lang_2.isBlank(recordList) ? null : recordList.get(value, afterIndex);
	    };
	    /**
	     * Removes a {@link CollectionChangeRecord} from the list of duplicates.
	     *
	     * The list of duplicates also is removed from the map if it gets empty.
	     */
	    _DuplicateMap.prototype.remove = function (record) {
	        var key = lang_2.getMapKey(record.item);
	        // todo(vicb)
	        // assert(this.map.containsKey(key));
	        var recordList = this.map.get(key);
	        // Remove the list of duplicates when it gets empty
	        if (recordList.remove(record)) {
	            this.map.delete(key);
	        }
	        return record;
	    };
	    Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
	        get: function () { return this.map.size === 0; },
	        enumerable: true,
	        configurable: true
	    });
	    _DuplicateMap.prototype.clear = function () { this.map.clear(); };
	    _DuplicateMap.prototype.toString = function () { return '_DuplicateMap(' + lang_2.stringify(this.map) + ')'; };
	    return _DuplicateMap;
	})();
	//# sourceMappingURL=default_iterable_differ.js.map

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var collection_1 = __webpack_require__(202);
	var di_1 = __webpack_require__(196);
	/**
	 * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
	 */
	var KeyValueDiffers = (function () {
	    function KeyValueDiffers(factories) {
	        this.factories = factories;
	    }
	    KeyValueDiffers.create = function (factories, parent) {
	        if (lang_1.isPresent(parent)) {
	            var copied = collection_1.ListWrapper.clone(parent.factories);
	            factories = factories.concat(copied);
	            return new KeyValueDiffers(factories);
	        }
	        else {
	            return new KeyValueDiffers(factories);
	        }
	    };
	    /**
	     * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the
	     * inherited {@link KeyValueDiffers} instance with the provided factories and return a new
	     * {@link KeyValueDiffers} instance.
	     *
	     * The following example shows how to extend an existing list of factories,
	           * which will only be applied to the injector for this component and its children.
	           * This step is all that's required to make a new {@link KeyValueDiffer} available.
	     *
	     * ### Example
	     *
	     * ```
	     * @Component({
	     *   viewProviders: [
	     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
	     *   ]
	     * })
	     * ```
	     */
	    KeyValueDiffers.extend = function (factories) {
	        return new di_1.Provider(KeyValueDiffers, {
	            useFactory: function (parent) {
	                if (lang_1.isBlank(parent)) {
	                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed
	                    // to
	                    // bootstrap(), which would override default pipes instead of extending them.
	                    throw new exceptions_1.BaseException('Cannot extend KeyValueDiffers without a parent injector');
	                }
	                return KeyValueDiffers.create(factories, parent);
	            },
	            // Dependency technically isn't optional, but we can provide a better error message this way.
	            deps: [[KeyValueDiffers, new di_1.SkipSelfMetadata(), new di_1.OptionalMetadata()]]
	        });
	    };
	    KeyValueDiffers.prototype.find = function (kv) {
	        var factory = this.factories.find(function (f) { return f.supports(kv); });
	        if (lang_1.isPresent(factory)) {
	            return factory;
	        }
	        else {
	            throw new exceptions_1.BaseException("Cannot find a differ supporting object '" + kv + "'");
	        }
	    };
	    KeyValueDiffers = __decorate([
	        di_1.Injectable(),
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Array])
	    ], KeyValueDiffers);
	    return KeyValueDiffers;
	})();
	exports.KeyValueDiffers = KeyValueDiffers;
	//# sourceMappingURL=keyvalue_differs.js.map

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var collection_1 = __webpack_require__(202);
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var DefaultKeyValueDifferFactory = (function () {
	    function DefaultKeyValueDifferFactory() {
	    }
	    DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || lang_1.isJsObject(obj); };
	    DefaultKeyValueDifferFactory.prototype.create = function (cdRef) { return new DefaultKeyValueDiffer(); };
	    DefaultKeyValueDifferFactory = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], DefaultKeyValueDifferFactory);
	    return DefaultKeyValueDifferFactory;
	})();
	exports.DefaultKeyValueDifferFactory = DefaultKeyValueDifferFactory;
	var DefaultKeyValueDiffer = (function () {
	    function DefaultKeyValueDiffer() {
	        this._records = new Map();
	        this._mapHead = null;
	        this._previousMapHead = null;
	        this._changesHead = null;
	        this._changesTail = null;
	        this._additionsHead = null;
	        this._additionsTail = null;
	        this._removalsHead = null;
	        this._removalsTail = null;
	    }
	    Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
	        get: function () {
	            return this._additionsHead !== null || this._changesHead !== null ||
	                this._removalsHead !== null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {
	        var record;
	        for (record = this._mapHead; record !== null; record = record._next) {
	            fn(record);
	        }
	    };
	    DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {
	        var record;
	        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	            fn(record);
	        }
	    };
	    DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {
	        var record;
	        for (record = this._changesHead; record !== null; record = record._nextChanged) {
	            fn(record);
	        }
	    };
	    DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {
	        var record;
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            fn(record);
	        }
	    };
	    DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {
	        var record;
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            fn(record);
	        }
	    };
	    DefaultKeyValueDiffer.prototype.diff = function (map) {
	        if (lang_1.isBlank(map))
	            map = collection_1.MapWrapper.createFromPairs([]);
	        if (!(map instanceof Map || lang_1.isJsObject(map))) {
	            throw new exceptions_1.BaseException("Error trying to diff '" + map + "'");
	        }
	        if (this.check(map)) {
	            return this;
	        }
	        else {
	            return null;
	        }
	    };
	    DefaultKeyValueDiffer.prototype.onDestroy = function () { };
	    DefaultKeyValueDiffer.prototype.check = function (map) {
	        var _this = this;
	        this._reset();
	        var records = this._records;
	        var oldSeqRecord = this._mapHead;
	        var lastOldSeqRecord = null;
	        var lastNewSeqRecord = null;
	        var seqChanged = false;
	        this._forEach(map, function (value, key) {
	            var newSeqRecord;
	            if (oldSeqRecord !== null && key === oldSeqRecord.key) {
	                newSeqRecord = oldSeqRecord;
	                if (!lang_1.looseIdentical(value, oldSeqRecord.currentValue)) {
	                    oldSeqRecord.previousValue = oldSeqRecord.currentValue;
	                    oldSeqRecord.currentValue = value;
	                    _this._addToChanges(oldSeqRecord);
	                }
	            }
	            else {
	                seqChanged = true;
	                if (oldSeqRecord !== null) {
	                    oldSeqRecord._next = null;
	                    _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
	                    _this._addToRemovals(oldSeqRecord);
	                }
	                if (records.has(key)) {
	                    newSeqRecord = records.get(key);
	                }
	                else {
	                    newSeqRecord = new KVChangeRecord(key);
	                    records.set(key, newSeqRecord);
	                    newSeqRecord.currentValue = value;
	                    _this._addToAdditions(newSeqRecord);
	                }
	            }
	            if (seqChanged) {
	                if (_this._isInRemovals(newSeqRecord)) {
	                    _this._removeFromRemovals(newSeqRecord);
	                }
	                if (lastNewSeqRecord == null) {
	                    _this._mapHead = newSeqRecord;
	                }
	                else {
	                    lastNewSeqRecord._next = newSeqRecord;
	                }
	            }
	            lastOldSeqRecord = oldSeqRecord;
	            lastNewSeqRecord = newSeqRecord;
	            oldSeqRecord = oldSeqRecord === null ? null : oldSeqRecord._next;
	        });
	        this._truncate(lastOldSeqRecord, oldSeqRecord);
	        return this.isDirty;
	    };
	    /** @internal */
	    DefaultKeyValueDiffer.prototype._reset = function () {
	        if (this.isDirty) {
	            var record;
	            // Record the state of the mapping
	            for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
	                record._nextPrevious = record._next;
	            }
	            for (record = this._changesHead; record !== null; record = record._nextChanged) {
	                record.previousValue = record.currentValue;
	            }
	            for (record = this._additionsHead; record != null; record = record._nextAdded) {
	                record.previousValue = record.currentValue;
	            }
	            // todo(vicb) once assert is supported
	            // assert(() {
	            //  var r = _changesHead;
	            //  while (r != null) {
	            //    var nextRecord = r._nextChanged;
	            //    r._nextChanged = null;
	            //    r = nextRecord;
	            //  }
	            //
	            //  r = _additionsHead;
	            //  while (r != null) {
	            //    var nextRecord = r._nextAdded;
	            //    r._nextAdded = null;
	            //    r = nextRecord;
	            //  }
	            //
	            //  r = _removalsHead;
	            //  while (r != null) {
	            //    var nextRecord = r._nextRemoved;
	            //    r._nextRemoved = null;
	            //    r = nextRecord;
	            //  }
	            //
	            //  return true;
	            //});
	            this._changesHead = this._changesTail = null;
	            this._additionsHead = this._additionsTail = null;
	            this._removalsHead = this._removalsTail = null;
	        }
	    };
	    /** @internal */
	    DefaultKeyValueDiffer.prototype._truncate = function (lastRecord, record) {
	        while (record !== null) {
	            if (lastRecord === null) {
	                this._mapHead = null;
	            }
	            else {
	                lastRecord._next = null;
	            }
	            var nextRecord = record._next;
	            // todo(vicb) assert
	            // assert((() {
	            //  record._next = null;
	            //  return true;
	            //}));
	            this._addToRemovals(record);
	            lastRecord = record;
	            record = nextRecord;
	        }
	        for (var rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
	            rec.previousValue = rec.currentValue;
	            rec.currentValue = null;
	            this._records.delete(rec.key);
	        }
	    };
	    /** @internal */
	    DefaultKeyValueDiffer.prototype._isInRemovals = function (record) {
	        return record === this._removalsHead || record._nextRemoved !== null ||
	            record._prevRemoved !== null;
	    };
	    /** @internal */
	    DefaultKeyValueDiffer.prototype._addToRemovals = function (record) {
	        // todo(vicb) assert
	        // assert(record._next == null);
	        // assert(record._nextAdded == null);
	        // assert(record._nextChanged == null);
	        // assert(record._nextRemoved == null);
	        // assert(record._prevRemoved == null);
	        if (this._removalsHead === null) {
	            this._removalsHead = this._removalsTail = record;
	        }
	        else {
	            this._removalsTail._nextRemoved = record;
	            record._prevRemoved = this._removalsTail;
	            this._removalsTail = record;
	        }
	    };
	    /** @internal */
	    DefaultKeyValueDiffer.prototype._removeFromSeq = function (prev, record) {
	        var next = record._next;
	        if (prev === null) {
	            this._mapHead = next;
	        }
	        else {
	            prev._next = next;
	        }
	        // todo(vicb) assert
	        // assert((() {
	        //  record._next = null;
	        //  return true;
	        //})());
	    };
	    /** @internal */
	    DefaultKeyValueDiffer.prototype._removeFromRemovals = function (record) {
	        // todo(vicb) assert
	        // assert(record._next == null);
	        // assert(record._nextAdded == null);
	        // assert(record._nextChanged == null);
	        var prev = record._prevRemoved;
	        var next = record._nextRemoved;
	        if (prev === null) {
	            this._removalsHead = next;
	        }
	        else {
	            prev._nextRemoved = next;
	        }
	        if (next === null) {
	            this._removalsTail = prev;
	        }
	        else {
	            next._prevRemoved = prev;
	        }
	        record._prevRemoved = record._nextRemoved = null;
	    };
	    /** @internal */
	    DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {
	        // todo(vicb): assert
	        // assert(record._next == null);
	        // assert(record._nextAdded == null);
	        // assert(record._nextChanged == null);
	        // assert(record._nextRemoved == null);
	        // assert(record._prevRemoved == null);
	        if (this._additionsHead === null) {
	            this._additionsHead = this._additionsTail = record;
	        }
	        else {
	            this._additionsTail._nextAdded = record;
	            this._additionsTail = record;
	        }
	    };
	    /** @internal */
	    DefaultKeyValueDiffer.prototype._addToChanges = function (record) {
	        // todo(vicb) assert
	        // assert(record._nextAdded == null);
	        // assert(record._nextChanged == null);
	        // assert(record._nextRemoved == null);
	        // assert(record._prevRemoved == null);
	        if (this._changesHead === null) {
	            this._changesHead = this._changesTail = record;
	        }
	        else {
	            this._changesTail._nextChanged = record;
	            this._changesTail = record;
	        }
	    };
	    DefaultKeyValueDiffer.prototype.toString = function () {
	        var items = [];
	        var previous = [];
	        var changes = [];
	        var additions = [];
	        var removals = [];
	        var record;
	        for (record = this._mapHead; record !== null; record = record._next) {
	            items.push(lang_1.stringify(record));
	        }
	        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	            previous.push(lang_1.stringify(record));
	        }
	        for (record = this._changesHead; record !== null; record = record._nextChanged) {
	            changes.push(lang_1.stringify(record));
	        }
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            additions.push(lang_1.stringify(record));
	        }
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            removals.push(lang_1.stringify(record));
	        }
	        return "map: " + items.join(', ') + "\n" + "previous: " + previous.join(', ') + "\n" +
	            "additions: " + additions.join(', ') + "\n" + "changes: " + changes.join(', ') + "\n" +
	            "removals: " + removals.join(', ') + "\n";
	    };
	    /** @internal */
	    DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {
	        if (obj instanceof Map) {
	            obj.forEach(fn);
	        }
	        else {
	            collection_1.StringMapWrapper.forEach(obj, fn);
	        }
	    };
	    return DefaultKeyValueDiffer;
	})();
	exports.DefaultKeyValueDiffer = DefaultKeyValueDiffer;
	var KVChangeRecord = (function () {
	    function KVChangeRecord(key) {
	        this.key = key;
	        this.previousValue = null;
	        this.currentValue = null;
	        /** @internal */
	        this._nextPrevious = null;
	        /** @internal */
	        this._next = null;
	        /** @internal */
	        this._nextAdded = null;
	        /** @internal */
	        this._nextRemoved = null;
	        /** @internal */
	        this._prevRemoved = null;
	        /** @internal */
	        this._nextChanged = null;
	    }
	    KVChangeRecord.prototype.toString = function () {
	        return lang_1.looseIdentical(this.previousValue, this.currentValue) ?
	            lang_1.stringify(this.key) :
	            (lang_1.stringify(this.key) + '[' + lang_1.stringify(this.previousValue) + '->' +
	                lang_1.stringify(this.currentValue) + ']');
	    };
	    return KVChangeRecord;
	})();
	exports.KVChangeRecord = KVChangeRecord;
	//# sourceMappingURL=default_keyvalue_differ.js.map

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var collection_1 = __webpack_require__(202);
	var AST = (function () {
	    function AST() {
	    }
	    AST.prototype.visit = function (visitor) { return null; };
	    AST.prototype.toString = function () { return "AST"; };
	    return AST;
	})();
	exports.AST = AST;
	var EmptyExpr = (function (_super) {
	    __extends(EmptyExpr, _super);
	    function EmptyExpr() {
	        _super.apply(this, arguments);
	    }
	    EmptyExpr.prototype.visit = function (visitor) {
	        // do nothing
	    };
	    return EmptyExpr;
	})(AST);
	exports.EmptyExpr = EmptyExpr;
	var ImplicitReceiver = (function (_super) {
	    __extends(ImplicitReceiver, _super);
	    function ImplicitReceiver() {
	        _super.apply(this, arguments);
	    }
	    ImplicitReceiver.prototype.visit = function (visitor) { return visitor.visitImplicitReceiver(this); };
	    return ImplicitReceiver;
	})(AST);
	exports.ImplicitReceiver = ImplicitReceiver;
	/**
	 * Multiple expressions separated by a semicolon.
	 */
	var Chain = (function (_super) {
	    __extends(Chain, _super);
	    function Chain(expressions) {
	        _super.call(this);
	        this.expressions = expressions;
	    }
	    Chain.prototype.visit = function (visitor) { return visitor.visitChain(this); };
	    return Chain;
	})(AST);
	exports.Chain = Chain;
	var Conditional = (function (_super) {
	    __extends(Conditional, _super);
	    function Conditional(condition, trueExp, falseExp) {
	        _super.call(this);
	        this.condition = condition;
	        this.trueExp = trueExp;
	        this.falseExp = falseExp;
	    }
	    Conditional.prototype.visit = function (visitor) { return visitor.visitConditional(this); };
	    return Conditional;
	})(AST);
	exports.Conditional = Conditional;
	var PropertyRead = (function (_super) {
	    __extends(PropertyRead, _super);
	    function PropertyRead(receiver, name, getter) {
	        _super.call(this);
	        this.receiver = receiver;
	        this.name = name;
	        this.getter = getter;
	    }
	    PropertyRead.prototype.visit = function (visitor) { return visitor.visitPropertyRead(this); };
	    return PropertyRead;
	})(AST);
	exports.PropertyRead = PropertyRead;
	var PropertyWrite = (function (_super) {
	    __extends(PropertyWrite, _super);
	    function PropertyWrite(receiver, name, setter, value) {
	        _super.call(this);
	        this.receiver = receiver;
	        this.name = name;
	        this.setter = setter;
	        this.value = value;
	    }
	    PropertyWrite.prototype.visit = function (visitor) { return visitor.visitPropertyWrite(this); };
	    return PropertyWrite;
	})(AST);
	exports.PropertyWrite = PropertyWrite;
	var SafePropertyRead = (function (_super) {
	    __extends(SafePropertyRead, _super);
	    function SafePropertyRead(receiver, name, getter) {
	        _super.call(this);
	        this.receiver = receiver;
	        this.name = name;
	        this.getter = getter;
	    }
	    SafePropertyRead.prototype.visit = function (visitor) { return visitor.visitSafePropertyRead(this); };
	    return SafePropertyRead;
	})(AST);
	exports.SafePropertyRead = SafePropertyRead;
	var KeyedRead = (function (_super) {
	    __extends(KeyedRead, _super);
	    function KeyedRead(obj, key) {
	        _super.call(this);
	        this.obj = obj;
	        this.key = key;
	    }
	    KeyedRead.prototype.visit = function (visitor) { return visitor.visitKeyedRead(this); };
	    return KeyedRead;
	})(AST);
	exports.KeyedRead = KeyedRead;
	var KeyedWrite = (function (_super) {
	    __extends(KeyedWrite, _super);
	    function KeyedWrite(obj, key, value) {
	        _super.call(this);
	        this.obj = obj;
	        this.key = key;
	        this.value = value;
	    }
	    KeyedWrite.prototype.visit = function (visitor) { return visitor.visitKeyedWrite(this); };
	    return KeyedWrite;
	})(AST);
	exports.KeyedWrite = KeyedWrite;
	var BindingPipe = (function (_super) {
	    __extends(BindingPipe, _super);
	    function BindingPipe(exp, name, args) {
	        _super.call(this);
	        this.exp = exp;
	        this.name = name;
	        this.args = args;
	    }
	    BindingPipe.prototype.visit = function (visitor) { return visitor.visitPipe(this); };
	    return BindingPipe;
	})(AST);
	exports.BindingPipe = BindingPipe;
	var LiteralPrimitive = (function (_super) {
	    __extends(LiteralPrimitive, _super);
	    function LiteralPrimitive(value) {
	        _super.call(this);
	        this.value = value;
	    }
	    LiteralPrimitive.prototype.visit = function (visitor) { return visitor.visitLiteralPrimitive(this); };
	    return LiteralPrimitive;
	})(AST);
	exports.LiteralPrimitive = LiteralPrimitive;
	var LiteralArray = (function (_super) {
	    __extends(LiteralArray, _super);
	    function LiteralArray(expressions) {
	        _super.call(this);
	        this.expressions = expressions;
	    }
	    LiteralArray.prototype.visit = function (visitor) { return visitor.visitLiteralArray(this); };
	    return LiteralArray;
	})(AST);
	exports.LiteralArray = LiteralArray;
	var LiteralMap = (function (_super) {
	    __extends(LiteralMap, _super);
	    function LiteralMap(keys, values) {
	        _super.call(this);
	        this.keys = keys;
	        this.values = values;
	    }
	    LiteralMap.prototype.visit = function (visitor) { return visitor.visitLiteralMap(this); };
	    return LiteralMap;
	})(AST);
	exports.LiteralMap = LiteralMap;
	var Interpolation = (function (_super) {
	    __extends(Interpolation, _super);
	    function Interpolation(strings, expressions) {
	        _super.call(this);
	        this.strings = strings;
	        this.expressions = expressions;
	    }
	    Interpolation.prototype.visit = function (visitor) { visitor.visitInterpolation(this); };
	    return Interpolation;
	})(AST);
	exports.Interpolation = Interpolation;
	var Binary = (function (_super) {
	    __extends(Binary, _super);
	    function Binary(operation, left, right) {
	        _super.call(this);
	        this.operation = operation;
	        this.left = left;
	        this.right = right;
	    }
	    Binary.prototype.visit = function (visitor) { return visitor.visitBinary(this); };
	    return Binary;
	})(AST);
	exports.Binary = Binary;
	var PrefixNot = (function (_super) {
	    __extends(PrefixNot, _super);
	    function PrefixNot(expression) {
	        _super.call(this);
	        this.expression = expression;
	    }
	    PrefixNot.prototype.visit = function (visitor) { return visitor.visitPrefixNot(this); };
	    return PrefixNot;
	})(AST);
	exports.PrefixNot = PrefixNot;
	var MethodCall = (function (_super) {
	    __extends(MethodCall, _super);
	    function MethodCall(receiver, name, fn, args) {
	        _super.call(this);
	        this.receiver = receiver;
	        this.name = name;
	        this.fn = fn;
	        this.args = args;
	    }
	    MethodCall.prototype.visit = function (visitor) { return visitor.visitMethodCall(this); };
	    return MethodCall;
	})(AST);
	exports.MethodCall = MethodCall;
	var SafeMethodCall = (function (_super) {
	    __extends(SafeMethodCall, _super);
	    function SafeMethodCall(receiver, name, fn, args) {
	        _super.call(this);
	        this.receiver = receiver;
	        this.name = name;
	        this.fn = fn;
	        this.args = args;
	    }
	    SafeMethodCall.prototype.visit = function (visitor) { return visitor.visitSafeMethodCall(this); };
	    return SafeMethodCall;
	})(AST);
	exports.SafeMethodCall = SafeMethodCall;
	var FunctionCall = (function (_super) {
	    __extends(FunctionCall, _super);
	    function FunctionCall(target, args) {
	        _super.call(this);
	        this.target = target;
	        this.args = args;
	    }
	    FunctionCall.prototype.visit = function (visitor) { return visitor.visitFunctionCall(this); };
	    return FunctionCall;
	})(AST);
	exports.FunctionCall = FunctionCall;
	var ASTWithSource = (function (_super) {
	    __extends(ASTWithSource, _super);
	    function ASTWithSource(ast, source, location) {
	        _super.call(this);
	        this.ast = ast;
	        this.source = source;
	        this.location = location;
	    }
	    ASTWithSource.prototype.visit = function (visitor) { return this.ast.visit(visitor); };
	    ASTWithSource.prototype.toString = function () { return this.source + " in " + this.location; };
	    return ASTWithSource;
	})(AST);
	exports.ASTWithSource = ASTWithSource;
	var TemplateBinding = (function () {
	    function TemplateBinding(key, keyIsVar, name, expression) {
	        this.key = key;
	        this.keyIsVar = keyIsVar;
	        this.name = name;
	        this.expression = expression;
	    }
	    return TemplateBinding;
	})();
	exports.TemplateBinding = TemplateBinding;
	var RecursiveAstVisitor = (function () {
	    function RecursiveAstVisitor() {
	    }
	    RecursiveAstVisitor.prototype.visitBinary = function (ast) {
	        ast.left.visit(this);
	        ast.right.visit(this);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitChain = function (ast) { return this.visitAll(ast.expressions); };
	    RecursiveAstVisitor.prototype.visitConditional = function (ast) {
	        ast.condition.visit(this);
	        ast.trueExp.visit(this);
	        ast.falseExp.visit(this);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitPipe = function (ast) {
	        ast.exp.visit(this);
	        this.visitAll(ast.args);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitFunctionCall = function (ast) {
	        ast.target.visit(this);
	        this.visitAll(ast.args);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitImplicitReceiver = function (ast) { return null; };
	    RecursiveAstVisitor.prototype.visitInterpolation = function (ast) { return this.visitAll(ast.expressions); };
	    RecursiveAstVisitor.prototype.visitKeyedRead = function (ast) {
	        ast.obj.visit(this);
	        ast.key.visit(this);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitKeyedWrite = function (ast) {
	        ast.obj.visit(this);
	        ast.key.visit(this);
	        ast.value.visit(this);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitLiteralArray = function (ast) { return this.visitAll(ast.expressions); };
	    RecursiveAstVisitor.prototype.visitLiteralMap = function (ast) { return this.visitAll(ast.values); };
	    RecursiveAstVisitor.prototype.visitLiteralPrimitive = function (ast) { return null; };
	    RecursiveAstVisitor.prototype.visitMethodCall = function (ast) {
	        ast.receiver.visit(this);
	        return this.visitAll(ast.args);
	    };
	    RecursiveAstVisitor.prototype.visitPrefixNot = function (ast) {
	        ast.expression.visit(this);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitPropertyRead = function (ast) {
	        ast.receiver.visit(this);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitPropertyWrite = function (ast) {
	        ast.receiver.visit(this);
	        ast.value.visit(this);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitSafePropertyRead = function (ast) {
	        ast.receiver.visit(this);
	        return null;
	    };
	    RecursiveAstVisitor.prototype.visitSafeMethodCall = function (ast) {
	        ast.receiver.visit(this);
	        return this.visitAll(ast.args);
	    };
	    RecursiveAstVisitor.prototype.visitAll = function (asts) {
	        var _this = this;
	        asts.forEach(function (ast) { return ast.visit(_this); });
	        return null;
	    };
	    return RecursiveAstVisitor;
	})();
	exports.RecursiveAstVisitor = RecursiveAstVisitor;
	var AstTransformer = (function () {
	    function AstTransformer() {
	    }
	    AstTransformer.prototype.visitImplicitReceiver = function (ast) { return ast; };
	    AstTransformer.prototype.visitInterpolation = function (ast) {
	        return new Interpolation(ast.strings, this.visitAll(ast.expressions));
	    };
	    AstTransformer.prototype.visitLiteralPrimitive = function (ast) {
	        return new LiteralPrimitive(ast.value);
	    };
	    AstTransformer.prototype.visitPropertyRead = function (ast) {
	        return new PropertyRead(ast.receiver.visit(this), ast.name, ast.getter);
	    };
	    AstTransformer.prototype.visitPropertyWrite = function (ast) {
	        return new PropertyWrite(ast.receiver.visit(this), ast.name, ast.setter, ast.value);
	    };
	    AstTransformer.prototype.visitSafePropertyRead = function (ast) {
	        return new SafePropertyRead(ast.receiver.visit(this), ast.name, ast.getter);
	    };
	    AstTransformer.prototype.visitMethodCall = function (ast) {
	        return new MethodCall(ast.receiver.visit(this), ast.name, ast.fn, this.visitAll(ast.args));
	    };
	    AstTransformer.prototype.visitSafeMethodCall = function (ast) {
	        return new SafeMethodCall(ast.receiver.visit(this), ast.name, ast.fn, this.visitAll(ast.args));
	    };
	    AstTransformer.prototype.visitFunctionCall = function (ast) {
	        return new FunctionCall(ast.target.visit(this), this.visitAll(ast.args));
	    };
	    AstTransformer.prototype.visitLiteralArray = function (ast) {
	        return new LiteralArray(this.visitAll(ast.expressions));
	    };
	    AstTransformer.prototype.visitLiteralMap = function (ast) {
	        return new LiteralMap(ast.keys, this.visitAll(ast.values));
	    };
	    AstTransformer.prototype.visitBinary = function (ast) {
	        return new Binary(ast.operation, ast.left.visit(this), ast.right.visit(this));
	    };
	    AstTransformer.prototype.visitPrefixNot = function (ast) { return new PrefixNot(ast.expression.visit(this)); };
	    AstTransformer.prototype.visitConditional = function (ast) {
	        return new Conditional(ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));
	    };
	    AstTransformer.prototype.visitPipe = function (ast) {
	        return new BindingPipe(ast.exp.visit(this), ast.name, this.visitAll(ast.args));
	    };
	    AstTransformer.prototype.visitKeyedRead = function (ast) {
	        return new KeyedRead(ast.obj.visit(this), ast.key.visit(this));
	    };
	    AstTransformer.prototype.visitKeyedWrite = function (ast) {
	        return new KeyedWrite(ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));
	    };
	    AstTransformer.prototype.visitAll = function (asts) {
	        var res = collection_1.ListWrapper.createFixedSize(asts.length);
	        for (var i = 0; i < asts.length; ++i) {
	            res[i] = asts[i].visit(this);
	        }
	        return res;
	    };
	    AstTransformer.prototype.visitChain = function (ast) { return new Chain(this.visitAll(ast.expressions)); };
	    return AstTransformer;
	})();
	exports.AstTransformer = AstTransformer;
	//# sourceMappingURL=ast.js.map

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var decorators_1 = __webpack_require__(198);
	var collection_1 = __webpack_require__(202);
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	(function (TokenType) {
	    TokenType[TokenType["Character"] = 0] = "Character";
	    TokenType[TokenType["Identifier"] = 1] = "Identifier";
	    TokenType[TokenType["Keyword"] = 2] = "Keyword";
	    TokenType[TokenType["String"] = 3] = "String";
	    TokenType[TokenType["Operator"] = 4] = "Operator";
	    TokenType[TokenType["Number"] = 5] = "Number";
	})(exports.TokenType || (exports.TokenType = {}));
	var TokenType = exports.TokenType;
	var Lexer = (function () {
	    function Lexer() {
	    }
	    Lexer.prototype.tokenize = function (text) {
	        var scanner = new _Scanner(text);
	        var tokens = [];
	        var token = scanner.scanToken();
	        while (token != null) {
	            tokens.push(token);
	            token = scanner.scanToken();
	        }
	        return tokens;
	    };
	    Lexer = __decorate([
	        decorators_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], Lexer);
	    return Lexer;
	})();
	exports.Lexer = Lexer;
	var Token = (function () {
	    function Token(index, type, numValue, strValue) {
	        this.index = index;
	        this.type = type;
	        this.numValue = numValue;
	        this.strValue = strValue;
	    }
	    Token.prototype.isCharacter = function (code) {
	        return (this.type == TokenType.Character && this.numValue == code);
	    };
	    Token.prototype.isNumber = function () { return (this.type == TokenType.Number); };
	    Token.prototype.isString = function () { return (this.type == TokenType.String); };
	    Token.prototype.isOperator = function (operater) {
	        return (this.type == TokenType.Operator && this.strValue == operater);
	    };
	    Token.prototype.isIdentifier = function () { return (this.type == TokenType.Identifier); };
	    Token.prototype.isKeyword = function () { return (this.type == TokenType.Keyword); };
	    Token.prototype.isKeywordVar = function () { return (this.type == TokenType.Keyword && this.strValue == "var"); };
	    Token.prototype.isKeywordNull = function () { return (this.type == TokenType.Keyword && this.strValue == "null"); };
	    Token.prototype.isKeywordUndefined = function () {
	        return (this.type == TokenType.Keyword && this.strValue == "undefined");
	    };
	    Token.prototype.isKeywordTrue = function () { return (this.type == TokenType.Keyword && this.strValue == "true"); };
	    Token.prototype.isKeywordFalse = function () { return (this.type == TokenType.Keyword && this.strValue == "false"); };
	    Token.prototype.toNumber = function () {
	        // -1 instead of NULL ok?
	        return (this.type == TokenType.Number) ? this.numValue : -1;
	    };
	    Token.prototype.toString = function () {
	        switch (this.type) {
	            case TokenType.Character:
	            case TokenType.Identifier:
	            case TokenType.Keyword:
	            case TokenType.Operator:
	            case TokenType.String:
	                return this.strValue;
	            case TokenType.Number:
	                return this.numValue.toString();
	            default:
	                return null;
	        }
	    };
	    return Token;
	})();
	exports.Token = Token;
	function newCharacterToken(index, code) {
	    return new Token(index, TokenType.Character, code, lang_1.StringWrapper.fromCharCode(code));
	}
	function newIdentifierToken(index, text) {
	    return new Token(index, TokenType.Identifier, 0, text);
	}
	function newKeywordToken(index, text) {
	    return new Token(index, TokenType.Keyword, 0, text);
	}
	function newOperatorToken(index, text) {
	    return new Token(index, TokenType.Operator, 0, text);
	}
	function newStringToken(index, text) {
	    return new Token(index, TokenType.String, 0, text);
	}
	function newNumberToken(index, n) {
	    return new Token(index, TokenType.Number, n, "");
	}
	exports.EOF = new Token(-1, TokenType.Character, 0, "");
	exports.$EOF = 0;
	exports.$TAB = 9;
	exports.$LF = 10;
	exports.$VTAB = 11;
	exports.$FF = 12;
	exports.$CR = 13;
	exports.$SPACE = 32;
	exports.$BANG = 33;
	exports.$DQ = 34;
	exports.$HASH = 35;
	exports.$$ = 36;
	exports.$PERCENT = 37;
	exports.$AMPERSAND = 38;
	exports.$SQ = 39;
	exports.$LPAREN = 40;
	exports.$RPAREN = 41;
	exports.$STAR = 42;
	exports.$PLUS = 43;
	exports.$COMMA = 44;
	exports.$MINUS = 45;
	exports.$PERIOD = 46;
	exports.$SLASH = 47;
	exports.$COLON = 58;
	exports.$SEMICOLON = 59;
	exports.$LT = 60;
	exports.$EQ = 61;
	exports.$GT = 62;
	exports.$QUESTION = 63;
	var $0 = 48;
	var $9 = 57;
	var $A = 65, $E = 69, $Z = 90;
	exports.$LBRACKET = 91;
	exports.$BACKSLASH = 92;
	exports.$RBRACKET = 93;
	var $CARET = 94;
	var $_ = 95;
	var $a = 97, $e = 101, $f = 102, $n = 110, $r = 114, $t = 116, $u = 117, $v = 118, $z = 122;
	exports.$LBRACE = 123;
	exports.$BAR = 124;
	exports.$RBRACE = 125;
	var $NBSP = 160;
	var ScannerError = (function (_super) {
	    __extends(ScannerError, _super);
	    function ScannerError(message) {
	        _super.call(this);
	        this.message = message;
	    }
	    ScannerError.prototype.toString = function () { return this.message; };
	    return ScannerError;
	})(exceptions_1.BaseException);
	exports.ScannerError = ScannerError;
	var _Scanner = (function () {
	    function _Scanner(input) {
	        this.input = input;
	        this.peek = 0;
	        this.index = -1;
	        this.length = input.length;
	        this.advance();
	    }
	    _Scanner.prototype.advance = function () {
	        this.peek =
	            ++this.index >= this.length ? exports.$EOF : lang_1.StringWrapper.charCodeAt(this.input, this.index);
	    };
	    _Scanner.prototype.scanToken = function () {
	        var input = this.input, length = this.length, peek = this.peek, index = this.index;
	        // Skip whitespace.
	        while (peek <= exports.$SPACE) {
	            if (++index >= length) {
	                peek = exports.$EOF;
	                break;
	            }
	            else {
	                peek = lang_1.StringWrapper.charCodeAt(input, index);
	            }
	        }
	        this.peek = peek;
	        this.index = index;
	        if (index >= length) {
	            return null;
	        }
	        // Handle identifiers and numbers.
	        if (isIdentifierStart(peek))
	            return this.scanIdentifier();
	        if (isDigit(peek))
	            return this.scanNumber(index);
	        var start = index;
	        switch (peek) {
	            case exports.$PERIOD:
	                this.advance();
	                return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, exports.$PERIOD);
	            case exports.$LPAREN:
	            case exports.$RPAREN:
	            case exports.$LBRACE:
	            case exports.$RBRACE:
	            case exports.$LBRACKET:
	            case exports.$RBRACKET:
	            case exports.$COMMA:
	            case exports.$COLON:
	            case exports.$SEMICOLON:
	                return this.scanCharacter(start, peek);
	            case exports.$SQ:
	            case exports.$DQ:
	                return this.scanString();
	            case exports.$HASH:
	            case exports.$PLUS:
	            case exports.$MINUS:
	            case exports.$STAR:
	            case exports.$SLASH:
	            case exports.$PERCENT:
	            case $CARET:
	                return this.scanOperator(start, lang_1.StringWrapper.fromCharCode(peek));
	            case exports.$QUESTION:
	                return this.scanComplexOperator(start, '?', exports.$PERIOD, '.');
	            case exports.$LT:
	            case exports.$GT:
	                return this.scanComplexOperator(start, lang_1.StringWrapper.fromCharCode(peek), exports.$EQ, '=');
	            case exports.$BANG:
	            case exports.$EQ:
	                return this.scanComplexOperator(start, lang_1.StringWrapper.fromCharCode(peek), exports.$EQ, '=', exports.$EQ, '=');
	            case exports.$AMPERSAND:
	                return this.scanComplexOperator(start, '&', exports.$AMPERSAND, '&');
	            case exports.$BAR:
	                return this.scanComplexOperator(start, '|', exports.$BAR, '|');
	            case $NBSP:
	                while (isWhitespace(this.peek))
	                    this.advance();
	                return this.scanToken();
	        }
	        this.error("Unexpected character [" + lang_1.StringWrapper.fromCharCode(peek) + "]", 0);
	        return null;
	    };
	    _Scanner.prototype.scanCharacter = function (start, code) {
	        assert(this.peek == code);
	        this.advance();
	        return newCharacterToken(start, code);
	    };
	    _Scanner.prototype.scanOperator = function (start, str) {
	        assert(this.peek == lang_1.StringWrapper.charCodeAt(str, 0));
	        assert(collection_1.SetWrapper.has(OPERATORS, str));
	        this.advance();
	        return newOperatorToken(start, str);
	    };
	    /**
	     * Tokenize a 2/3 char long operator
	     *
	     * @param start start index in the expression
	     * @param one first symbol (always part of the operator)
	     * @param twoCode code point for the second symbol
	     * @param two second symbol (part of the operator when the second code point matches)
	     * @param threeCode code point for the third symbol
	     * @param three third symbol (part of the operator when provided and matches source expression)
	     * @returns {Token}
	     */
	    _Scanner.prototype.scanComplexOperator = function (start, one, twoCode, two, threeCode, three) {
	        assert(this.peek == lang_1.StringWrapper.charCodeAt(one, 0));
	        this.advance();
	        var str = one;
	        if (this.peek == twoCode) {
	            this.advance();
	            str += two;
	        }
	        if (lang_1.isPresent(threeCode) && this.peek == threeCode) {
	            this.advance();
	            str += three;
	        }
	        assert(collection_1.SetWrapper.has(OPERATORS, str));
	        return newOperatorToken(start, str);
	    };
	    _Scanner.prototype.scanIdentifier = function () {
	        assert(isIdentifierStart(this.peek));
	        var start = this.index;
	        this.advance();
	        while (isIdentifierPart(this.peek))
	            this.advance();
	        var str = this.input.substring(start, this.index);
	        if (collection_1.SetWrapper.has(KEYWORDS, str)) {
	            return newKeywordToken(start, str);
	        }
	        else {
	            return newIdentifierToken(start, str);
	        }
	    };
	    _Scanner.prototype.scanNumber = function (start) {
	        assert(isDigit(this.peek));
	        var simple = (this.index === start);
	        this.advance(); // Skip initial digit.
	        while (true) {
	            if (isDigit(this.peek)) {
	            }
	            else if (this.peek == exports.$PERIOD) {
	                simple = false;
	            }
	            else if (isExponentStart(this.peek)) {
	                this.advance();
	                if (isExponentSign(this.peek))
	                    this.advance();
	                if (!isDigit(this.peek))
	                    this.error('Invalid exponent', -1);
	                simple = false;
	            }
	            else {
	                break;
	            }
	            this.advance();
	        }
	        var str = this.input.substring(start, this.index);
	        // TODO
	        var value = simple ? lang_1.NumberWrapper.parseIntAutoRadix(str) : lang_1.NumberWrapper.parseFloat(str);
	        return newNumberToken(start, value);
	    };
	    _Scanner.prototype.scanString = function () {
	        assert(this.peek == exports.$SQ || this.peek == exports.$DQ);
	        var start = this.index;
	        var quote = this.peek;
	        this.advance(); // Skip initial quote.
	        var buffer;
	        var marker = this.index;
	        var input = this.input;
	        while (this.peek != quote) {
	            if (this.peek == exports.$BACKSLASH) {
	                if (buffer == null)
	                    buffer = new lang_1.StringJoiner();
	                buffer.add(input.substring(marker, this.index));
	                this.advance();
	                var unescapedCode;
	                if (this.peek == $u) {
	                    // 4 character hex code for unicode character.
	                    var hex = input.substring(this.index + 1, this.index + 5);
	                    try {
	                        unescapedCode = lang_1.NumberWrapper.parseInt(hex, 16);
	                    }
	                    catch (e) {
	                        this.error("Invalid unicode escape [\\u" + hex + "]", 0);
	                    }
	                    for (var i = 0; i < 5; i++) {
	                        this.advance();
	                    }
	                }
	                else {
	                    unescapedCode = unescape(this.peek);
	                    this.advance();
	                }
	                buffer.add(lang_1.StringWrapper.fromCharCode(unescapedCode));
	                marker = this.index;
	            }
	            else if (this.peek == exports.$EOF) {
	                this.error('Unterminated quote', 0);
	            }
	            else {
	                this.advance();
	            }
	        }
	        var last = input.substring(marker, this.index);
	        this.advance(); // Skip terminating quote.
	        // Compute the unescaped string value.
	        var unescaped = last;
	        if (buffer != null) {
	            buffer.add(last);
	            unescaped = buffer.toString();
	        }
	        return newStringToken(start, unescaped);
	    };
	    _Scanner.prototype.error = function (message, offset) {
	        var position = this.index + offset;
	        throw new ScannerError("Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
	    };
	    return _Scanner;
	})();
	function isWhitespace(code) {
	    return (code >= exports.$TAB && code <= exports.$SPACE) || (code == $NBSP);
	}
	function isIdentifierStart(code) {
	    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || (code == $_) || (code == exports.$$);
	}
	function isIdentifierPart(code) {
	    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || ($0 <= code && code <= $9) ||
	        (code == $_) || (code == exports.$$);
	}
	function isDigit(code) {
	    return $0 <= code && code <= $9;
	}
	function isExponentStart(code) {
	    return code == $e || code == $E;
	}
	function isExponentSign(code) {
	    return code == exports.$MINUS || code == exports.$PLUS;
	}
	function unescape(code) {
	    switch (code) {
	        case $n:
	            return exports.$LF;
	        case $f:
	            return exports.$FF;
	        case $r:
	            return exports.$CR;
	        case $t:
	            return exports.$TAB;
	        case $v:
	            return exports.$VTAB;
	        default:
	            return code;
	    }
	}
	var OPERATORS = collection_1.SetWrapper.createFromList([
	    '+',
	    '-',
	    '*',
	    '/',
	    '%',
	    '^',
	    '=',
	    '==',
	    '!=',
	    '===',
	    '!==',
	    '<',
	    '>',
	    '<=',
	    '>=',
	    '&&',
	    '||',
	    '&',
	    '|',
	    '!',
	    '?',
	    '#',
	    '?.'
	]);
	var KEYWORDS = collection_1.SetWrapper.createFromList(['var', 'null', 'undefined', 'true', 'false', 'if', 'else']);
	//# sourceMappingURL=lexer.js.map

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var decorators_1 = __webpack_require__(198);
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var collection_1 = __webpack_require__(202);
	var lexer_1 = __webpack_require__(221);
	var reflection_1 = __webpack_require__(206);
	var ast_1 = __webpack_require__(220);
	var _implicitReceiver = new ast_1.ImplicitReceiver();
	// TODO(tbosch): Cannot make this const/final right now because of the transpiler...
	var INTERPOLATION_REGEXP = /\{\{(.*?)\}\}/g;
	var ParseException = (function (_super) {
	    __extends(ParseException, _super);
	    function ParseException(message, input, errLocation, ctxLocation) {
	        _super.call(this, "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation);
	    }
	    return ParseException;
	})(exceptions_1.BaseException);
	var Parser = (function () {
	    function Parser(/** @internal */ _lexer, providedReflector) {
	        if (providedReflector === void 0) { providedReflector = null; }
	        this._lexer = _lexer;
	        this._reflector = lang_1.isPresent(providedReflector) ? providedReflector : reflection_1.reflector;
	    }
	    Parser.prototype.parseAction = function (input, location) {
	        this._checkNoInterpolation(input, location);
	        var tokens = this._lexer.tokenize(input);
	        var ast = new _ParseAST(input, location, tokens, this._reflector, true).parseChain();
	        return new ast_1.ASTWithSource(ast, input, location);
	    };
	    Parser.prototype.parseBinding = function (input, location) {
	        this._checkNoInterpolation(input, location);
	        var tokens = this._lexer.tokenize(input);
	        var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseChain();
	        return new ast_1.ASTWithSource(ast, input, location);
	    };
	    Parser.prototype.parseSimpleBinding = function (input, location) {
	        this._checkNoInterpolation(input, location);
	        var tokens = this._lexer.tokenize(input);
	        var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseSimpleBinding();
	        return new ast_1.ASTWithSource(ast, input, location);
	    };
	    Parser.prototype.parseTemplateBindings = function (input, location) {
	        var tokens = this._lexer.tokenize(input);
	        return new _ParseAST(input, location, tokens, this._reflector, false).parseTemplateBindings();
	    };
	    Parser.prototype.parseInterpolation = function (input, location) {
	        var parts = lang_1.StringWrapper.split(input, INTERPOLATION_REGEXP);
	        if (parts.length <= 1) {
	            return null;
	        }
	        var strings = [];
	        var expressions = [];
	        for (var i = 0; i < parts.length; i++) {
	            var part = parts[i];
	            if (i % 2 === 0) {
	                // fixed string
	                strings.push(part);
	            }
	            else if (part.trim().length > 0) {
	                var tokens = this._lexer.tokenize(part);
	                var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseChain();
	                expressions.push(ast);
	            }
	            else {
	                throw new ParseException('Blank expressions are not allowed in interpolated strings', input, "at column " + this._findInterpolationErrorColumn(parts, i) + " in", location);
	            }
	        }
	        return new ast_1.ASTWithSource(new ast_1.Interpolation(strings, expressions), input, location);
	    };
	    Parser.prototype.wrapLiteralPrimitive = function (input, location) {
	        return new ast_1.ASTWithSource(new ast_1.LiteralPrimitive(input), input, location);
	    };
	    Parser.prototype._checkNoInterpolation = function (input, location) {
	        var parts = lang_1.StringWrapper.split(input, INTERPOLATION_REGEXP);
	        if (parts.length > 1) {
	            throw new ParseException('Got interpolation ({{}}) where expression was expected', input, "at column " + this._findInterpolationErrorColumn(parts, 1) + " in", location);
	        }
	    };
	    Parser.prototype._findInterpolationErrorColumn = function (parts, partInErrIdx) {
	        var errLocation = '';
	        for (var j = 0; j < partInErrIdx; j++) {
	            errLocation += j % 2 === 0 ? parts[j] : "{{" + parts[j] + "}}";
	        }
	        return errLocation.length;
	    };
	    Parser = __decorate([
	        decorators_1.Injectable(), 
	        __metadata('design:paramtypes', [lexer_1.Lexer, reflection_1.Reflector])
	    ], Parser);
	    return Parser;
	})();
	exports.Parser = Parser;
	var _ParseAST = (function () {
	    function _ParseAST(input, location, tokens, reflector, parseAction) {
	        this.input = input;
	        this.location = location;
	        this.tokens = tokens;
	        this.reflector = reflector;
	        this.parseAction = parseAction;
	        this.index = 0;
	    }
	    _ParseAST.prototype.peek = function (offset) {
	        var i = this.index + offset;
	        return i < this.tokens.length ? this.tokens[i] : lexer_1.EOF;
	    };
	    Object.defineProperty(_ParseAST.prototype, "next", {
	        get: function () { return this.peek(0); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(_ParseAST.prototype, "inputIndex", {
	        get: function () {
	            return (this.index < this.tokens.length) ? this.next.index : this.input.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    _ParseAST.prototype.advance = function () { this.index++; };
	    _ParseAST.prototype.optionalCharacter = function (code) {
	        if (this.next.isCharacter(code)) {
	            this.advance();
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    _ParseAST.prototype.optionalKeywordVar = function () {
	        if (this.peekKeywordVar()) {
	            this.advance();
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    _ParseAST.prototype.peekKeywordVar = function () { return this.next.isKeywordVar() || this.next.isOperator('#'); };
	    _ParseAST.prototype.expectCharacter = function (code) {
	        if (this.optionalCharacter(code))
	            return;
	        this.error("Missing expected " + lang_1.StringWrapper.fromCharCode(code));
	    };
	    _ParseAST.prototype.optionalOperator = function (op) {
	        if (this.next.isOperator(op)) {
	            this.advance();
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    _ParseAST.prototype.expectOperator = function (operator) {
	        if (this.optionalOperator(operator))
	            return;
	        this.error("Missing expected operator " + operator);
	    };
	    _ParseAST.prototype.expectIdentifierOrKeyword = function () {
	        var n = this.next;
	        if (!n.isIdentifier() && !n.isKeyword()) {
	            this.error("Unexpected token " + n + ", expected identifier or keyword");
	        }
	        this.advance();
	        return n.toString();
	    };
	    _ParseAST.prototype.expectIdentifierOrKeywordOrString = function () {
	        var n = this.next;
	        if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
	            this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
	        }
	        this.advance();
	        return n.toString();
	    };
	    _ParseAST.prototype.parseSimpleBinding = function () {
	        var ast = this.parseChain();
	        if (!SimpleExpressionChecker.check(ast)) {
	            this.error("Simple binding expression can only contain field access and constants'");
	        }
	        return ast;
	    };
	    _ParseAST.prototype.parseChain = function () {
	        var exprs = [];
	        while (this.index < this.tokens.length) {
	            var expr = this.parsePipe();
	            exprs.push(expr);
	            if (this.optionalCharacter(lexer_1.$SEMICOLON)) {
	                if (!this.parseAction) {
	                    this.error("Binding expression cannot contain chained expression");
	                }
	                while (this.optionalCharacter(lexer_1.$SEMICOLON)) {
	                } // read all semicolons
	            }
	            else if (this.index < this.tokens.length) {
	                this.error("Unexpected token '" + this.next + "'");
	            }
	        }
	        if (exprs.length == 0)
	            return new ast_1.EmptyExpr();
	        if (exprs.length == 1)
	            return exprs[0];
	        return new ast_1.Chain(exprs);
	    };
	    _ParseAST.prototype.parsePipe = function () {
	        var result = this.parseExpression();
	        if (this.optionalOperator("|")) {
	            if (this.parseAction) {
	                this.error("Cannot have a pipe in an action expression");
	            }
	            do {
	                var name = this.expectIdentifierOrKeyword();
	                var args = [];
	                while (this.optionalCharacter(lexer_1.$COLON)) {
	                    args.push(this.parseExpression());
	                }
	                result = new ast_1.BindingPipe(result, name, args);
	            } while (this.optionalOperator("|"));
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseExpression = function () { return this.parseConditional(); };
	    _ParseAST.prototype.parseConditional = function () {
	        var start = this.inputIndex;
	        var result = this.parseLogicalOr();
	        if (this.optionalOperator('?')) {
	            var yes = this.parsePipe();
	            if (!this.optionalCharacter(lexer_1.$COLON)) {
	                var end = this.inputIndex;
	                var expression = this.input.substring(start, end);
	                this.error("Conditional expression " + expression + " requires all 3 expressions");
	            }
	            var no = this.parsePipe();
	            return new ast_1.Conditional(result, yes, no);
	        }
	        else {
	            return result;
	        }
	    };
	    _ParseAST.prototype.parseLogicalOr = function () {
	        // '||'
	        var result = this.parseLogicalAnd();
	        while (this.optionalOperator('||')) {
	            result = new ast_1.Binary('||', result, this.parseLogicalAnd());
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseLogicalAnd = function () {
	        // '&&'
	        var result = this.parseEquality();
	        while (this.optionalOperator('&&')) {
	            result = new ast_1.Binary('&&', result, this.parseEquality());
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseEquality = function () {
	        // '==','!=','===','!=='
	        var result = this.parseRelational();
	        while (true) {
	            if (this.optionalOperator('==')) {
	                result = new ast_1.Binary('==', result, this.parseRelational());
	            }
	            else if (this.optionalOperator('===')) {
	                result = new ast_1.Binary('===', result, this.parseRelational());
	            }
	            else if (this.optionalOperator('!=')) {
	                result = new ast_1.Binary('!=', result, this.parseRelational());
	            }
	            else if (this.optionalOperator('!==')) {
	                result = new ast_1.Binary('!==', result, this.parseRelational());
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parseRelational = function () {
	        // '<', '>', '<=', '>='
	        var result = this.parseAdditive();
	        while (true) {
	            if (this.optionalOperator('<')) {
	                result = new ast_1.Binary('<', result, this.parseAdditive());
	            }
	            else if (this.optionalOperator('>')) {
	                result = new ast_1.Binary('>', result, this.parseAdditive());
	            }
	            else if (this.optionalOperator('<=')) {
	                result = new ast_1.Binary('<=', result, this.parseAdditive());
	            }
	            else if (this.optionalOperator('>=')) {
	                result = new ast_1.Binary('>=', result, this.parseAdditive());
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parseAdditive = function () {
	        // '+', '-'
	        var result = this.parseMultiplicative();
	        while (true) {
	            if (this.optionalOperator('+')) {
	                result = new ast_1.Binary('+', result, this.parseMultiplicative());
	            }
	            else if (this.optionalOperator('-')) {
	                result = new ast_1.Binary('-', result, this.parseMultiplicative());
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parseMultiplicative = function () {
	        // '*', '%', '/'
	        var result = this.parsePrefix();
	        while (true) {
	            if (this.optionalOperator('*')) {
	                result = new ast_1.Binary('*', result, this.parsePrefix());
	            }
	            else if (this.optionalOperator('%')) {
	                result = new ast_1.Binary('%', result, this.parsePrefix());
	            }
	            else if (this.optionalOperator('/')) {
	                result = new ast_1.Binary('/', result, this.parsePrefix());
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parsePrefix = function () {
	        if (this.optionalOperator('+')) {
	            return this.parsePrefix();
	        }
	        else if (this.optionalOperator('-')) {
	            return new ast_1.Binary('-', new ast_1.LiteralPrimitive(0), this.parsePrefix());
	        }
	        else if (this.optionalOperator('!')) {
	            return new ast_1.PrefixNot(this.parsePrefix());
	        }
	        else {
	            return this.parseCallChain();
	        }
	    };
	    _ParseAST.prototype.parseCallChain = function () {
	        var result = this.parsePrimary();
	        while (true) {
	            if (this.optionalCharacter(lexer_1.$PERIOD)) {
	                result = this.parseAccessMemberOrMethodCall(result, false);
	            }
	            else if (this.optionalOperator('?.')) {
	                result = this.parseAccessMemberOrMethodCall(result, true);
	            }
	            else if (this.optionalCharacter(lexer_1.$LBRACKET)) {
	                var key = this.parsePipe();
	                this.expectCharacter(lexer_1.$RBRACKET);
	                if (this.optionalOperator("=")) {
	                    var value = this.parseConditional();
	                    result = new ast_1.KeyedWrite(result, key, value);
	                }
	                else {
	                    result = new ast_1.KeyedRead(result, key);
	                }
	            }
	            else if (this.optionalCharacter(lexer_1.$LPAREN)) {
	                var args = this.parseCallArguments();
	                this.expectCharacter(lexer_1.$RPAREN);
	                result = new ast_1.FunctionCall(result, args);
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parsePrimary = function () {
	        if (this.optionalCharacter(lexer_1.$LPAREN)) {
	            var result = this.parsePipe();
	            this.expectCharacter(lexer_1.$RPAREN);
	            return result;
	        }
	        else if (this.next.isKeywordNull() || this.next.isKeywordUndefined()) {
	            this.advance();
	            return new ast_1.LiteralPrimitive(null);
	        }
	        else if (this.next.isKeywordTrue()) {
	            this.advance();
	            return new ast_1.LiteralPrimitive(true);
	        }
	        else if (this.next.isKeywordFalse()) {
	            this.advance();
	            return new ast_1.LiteralPrimitive(false);
	        }
	        else if (this.optionalCharacter(lexer_1.$LBRACKET)) {
	            var elements = this.parseExpressionList(lexer_1.$RBRACKET);
	            this.expectCharacter(lexer_1.$RBRACKET);
	            return new ast_1.LiteralArray(elements);
	        }
	        else if (this.next.isCharacter(lexer_1.$LBRACE)) {
	            return this.parseLiteralMap();
	        }
	        else if (this.next.isIdentifier()) {
	            return this.parseAccessMemberOrMethodCall(_implicitReceiver, false);
	        }
	        else if (this.next.isNumber()) {
	            var value = this.next.toNumber();
	            this.advance();
	            return new ast_1.LiteralPrimitive(value);
	        }
	        else if (this.next.isString()) {
	            var literalValue = this.next.toString();
	            this.advance();
	            return new ast_1.LiteralPrimitive(literalValue);
	        }
	        else if (this.index >= this.tokens.length) {
	            this.error("Unexpected end of expression: " + this.input);
	        }
	        else {
	            this.error("Unexpected token " + this.next);
	        }
	        // error() throws, so we don't reach here.
	        throw new exceptions_1.BaseException("Fell through all cases in parsePrimary");
	    };
	    _ParseAST.prototype.parseExpressionList = function (terminator) {
	        var result = [];
	        if (!this.next.isCharacter(terminator)) {
	            do {
	                result.push(this.parsePipe());
	            } while (this.optionalCharacter(lexer_1.$COMMA));
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseLiteralMap = function () {
	        var keys = [];
	        var values = [];
	        this.expectCharacter(lexer_1.$LBRACE);
	        if (!this.optionalCharacter(lexer_1.$RBRACE)) {
	            do {
	                var key = this.expectIdentifierOrKeywordOrString();
	                keys.push(key);
	                this.expectCharacter(lexer_1.$COLON);
	                values.push(this.parsePipe());
	            } while (this.optionalCharacter(lexer_1.$COMMA));
	            this.expectCharacter(lexer_1.$RBRACE);
	        }
	        return new ast_1.LiteralMap(keys, values);
	    };
	    _ParseAST.prototype.parseAccessMemberOrMethodCall = function (receiver, isSafe) {
	        if (isSafe === void 0) { isSafe = false; }
	        var id = this.expectIdentifierOrKeyword();
	        if (this.optionalCharacter(lexer_1.$LPAREN)) {
	            var args = this.parseCallArguments();
	            this.expectCharacter(lexer_1.$RPAREN);
	            var fn = this.reflector.method(id);
	            return isSafe ? new ast_1.SafeMethodCall(receiver, id, fn, args) :
	                new ast_1.MethodCall(receiver, id, fn, args);
	        }
	        else {
	            if (isSafe) {
	                if (this.optionalOperator("=")) {
	                    this.error("The '?.' operator cannot be used in the assignment");
	                }
	                else {
	                    return new ast_1.SafePropertyRead(receiver, id, this.reflector.getter(id));
	                }
	            }
	            else {
	                if (this.optionalOperator("=")) {
	                    if (!this.parseAction) {
	                        this.error("Bindings cannot contain assignments");
	                    }
	                    var value = this.parseConditional();
	                    return new ast_1.PropertyWrite(receiver, id, this.reflector.setter(id), value);
	                }
	                else {
	                    return new ast_1.PropertyRead(receiver, id, this.reflector.getter(id));
	                }
	            }
	        }
	        return null;
	    };
	    _ParseAST.prototype.parseCallArguments = function () {
	        if (this.next.isCharacter(lexer_1.$RPAREN))
	            return [];
	        var positionals = [];
	        do {
	            positionals.push(this.parsePipe());
	        } while (this.optionalCharacter(lexer_1.$COMMA));
	        return positionals;
	    };
	    _ParseAST.prototype.parseBlockContent = function () {
	        if (!this.parseAction) {
	            this.error("Binding expression cannot contain chained expression");
	        }
	        var exprs = [];
	        while (this.index < this.tokens.length && !this.next.isCharacter(lexer_1.$RBRACE)) {
	            var expr = this.parseExpression();
	            exprs.push(expr);
	            if (this.optionalCharacter(lexer_1.$SEMICOLON)) {
	                while (this.optionalCharacter(lexer_1.$SEMICOLON)) {
	                } // read all semicolons
	            }
	        }
	        if (exprs.length == 0)
	            return new ast_1.EmptyExpr();
	        if (exprs.length == 1)
	            return exprs[0];
	        return new ast_1.Chain(exprs);
	    };
	    /**
	     * An identifier, a keyword, a string with an optional `-` inbetween.
	     */
	    _ParseAST.prototype.expectTemplateBindingKey = function () {
	        var result = '';
	        var operatorFound = false;
	        do {
	            result += this.expectIdentifierOrKeywordOrString();
	            operatorFound = this.optionalOperator('-');
	            if (operatorFound) {
	                result += '-';
	            }
	        } while (operatorFound);
	        return result.toString();
	    };
	    _ParseAST.prototype.parseTemplateBindings = function () {
	        var bindings = [];
	        var prefix = null;
	        while (this.index < this.tokens.length) {
	            var keyIsVar = this.optionalKeywordVar();
	            var key = this.expectTemplateBindingKey();
	            if (!keyIsVar) {
	                if (prefix == null) {
	                    prefix = key;
	                }
	                else {
	                    key = prefix + '-' + key;
	                }
	            }
	            this.optionalCharacter(lexer_1.$COLON);
	            var name = null;
	            var expression = null;
	            if (keyIsVar) {
	                if (this.optionalOperator("=")) {
	                    name = this.expectTemplateBindingKey();
	                }
	                else {
	                    name = '\$implicit';
	                }
	            }
	            else if (this.next !== lexer_1.EOF && !this.peekKeywordVar()) {
	                var start = this.inputIndex;
	                var ast = this.parsePipe();
	                var source = this.input.substring(start, this.inputIndex);
	                expression = new ast_1.ASTWithSource(ast, source, this.location);
	            }
	            bindings.push(new ast_1.TemplateBinding(key, keyIsVar, name, expression));
	            if (!this.optionalCharacter(lexer_1.$SEMICOLON)) {
	                this.optionalCharacter(lexer_1.$COMMA);
	            }
	        }
	        return bindings;
	    };
	    _ParseAST.prototype.error = function (message, index) {
	        if (index === void 0) { index = null; }
	        if (lang_1.isBlank(index))
	            index = this.index;
	        var location = (index < this.tokens.length) ? "at column " + (this.tokens[index].index + 1) + " in" :
	            "at the end of the expression";
	        throw new ParseException(message, this.input, location, this.location);
	    };
	    return _ParseAST;
	})();
	exports._ParseAST = _ParseAST;
	var SimpleExpressionChecker = (function () {
	    function SimpleExpressionChecker() {
	        this.simple = true;
	    }
	    SimpleExpressionChecker.check = function (ast) {
	        var s = new SimpleExpressionChecker();
	        ast.visit(s);
	        return s.simple;
	    };
	    SimpleExpressionChecker.prototype.visitImplicitReceiver = function (ast) { };
	    SimpleExpressionChecker.prototype.visitInterpolation = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitLiteralPrimitive = function (ast) { };
	    SimpleExpressionChecker.prototype.visitPropertyRead = function (ast) { };
	    SimpleExpressionChecker.prototype.visitPropertyWrite = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitSafePropertyRead = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitMethodCall = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitSafeMethodCall = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitFunctionCall = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitLiteralArray = function (ast) { this.visitAll(ast.expressions); };
	    SimpleExpressionChecker.prototype.visitLiteralMap = function (ast) { this.visitAll(ast.values); };
	    SimpleExpressionChecker.prototype.visitBinary = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitPrefixNot = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitConditional = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitPipe = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitKeyedRead = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitKeyedWrite = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitAll = function (asts) {
	        var res = collection_1.ListWrapper.createFixedSize(asts.length);
	        for (var i = 0; i < asts.length; ++i) {
	            res[i] = asts[i].visit(this);
	        }
	        return res;
	    };
	    SimpleExpressionChecker.prototype.visitChain = function (ast) { this.simple = false; };
	    return SimpleExpressionChecker;
	})();
	//# sourceMappingURL=parser.js.map

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var collection_1 = __webpack_require__(202);
	var Locals = (function () {
	    function Locals(parent, current) {
	        this.parent = parent;
	        this.current = current;
	    }
	    Locals.prototype.contains = function (name) {
	        if (this.current.has(name)) {
	            return true;
	        }
	        if (lang_1.isPresent(this.parent)) {
	            return this.parent.contains(name);
	        }
	        return false;
	    };
	    Locals.prototype.get = function (name) {
	        if (this.current.has(name)) {
	            return this.current.get(name);
	        }
	        if (lang_1.isPresent(this.parent)) {
	            return this.parent.get(name);
	        }
	        throw new exceptions_1.BaseException("Cannot find '" + name + "'");
	    };
	    Locals.prototype.set = function (name, value) {
	        // TODO(rado): consider removing this check if we can guarantee this is not
	        // exposed to the public API.
	        // TODO: vsavkin maybe it should check only the local map
	        if (this.current.has(name)) {
	            this.current.set(name, value);
	        }
	        else {
	            throw new exceptions_1.BaseException("Setting of new keys post-construction is not supported. Key: " + name + ".");
	        }
	    };
	    Locals.prototype.clearValues = function () { collection_1.MapWrapper.clearValues(this.current); };
	    return Locals;
	})();
	exports.Locals = Locals;
	//# sourceMappingURL=locals.js.map

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var exceptions_1 = __webpack_require__(204);
	/**
	 * An error thrown if application changes model breaking the top-down data flow.
	 *
	 * This exception is only thrown in dev mode.
	 *
	 * <!-- TODO: Add a link once the dev mode option is configurable -->
	 *
	 * ### Example
	 *
	 * ```typescript
	 * @Component({
	 *   selector: 'parent',
	 *   template: `
	 *     <child [prop]="parentProp"></child>
	 *   `,
	 *   directives: [forwardRef(() => Child)]
	 * })
	 * class Parent {
	 *   parentProp = "init";
	 * }
	 *
	 * @Directive({selector: 'child', inputs: ['prop']})
	 * class Child {
	 *   constructor(public parent: Parent) {}
	 *
	 *   set prop(v) {
	 *     // this updates the parent property, which is disallowed during change detection
	 *     // this will result in ExpressionChangedAfterItHasBeenCheckedException
	 *     this.parent.parentProp = "updated";
	 *   }
	 * }
	 * ```
	 */
	var ExpressionChangedAfterItHasBeenCheckedException = (function (_super) {
	    __extends(ExpressionChangedAfterItHasBeenCheckedException, _super);
	    function ExpressionChangedAfterItHasBeenCheckedException(exp, oldValue, currValue, context) {
	        _super.call(this, ("Expression '" + exp + "' has changed after it was checked. ") +
	            ("Previous value: '" + oldValue + "'. Current value: '" + currValue + "'"));
	    }
	    return ExpressionChangedAfterItHasBeenCheckedException;
	})(exceptions_1.BaseException);
	exports.ExpressionChangedAfterItHasBeenCheckedException = ExpressionChangedAfterItHasBeenCheckedException;
	/**
	 * Thrown when an expression evaluation raises an exception.
	 *
	 * This error wraps the original exception to attach additional contextual information that can
	 * be useful for debugging.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/2Kywoz?p=preview))
	 *
	 * ```typescript
	 * @Directive({selector: 'child', inputs: ['prop']})
	 * class Child {
	 *   prop;
	 * }
	 *
	 * @Component({
	 *   selector: 'app',
	 *   template: `
	 *     <child [prop]="field.first"></child>
	 *   `,
	 *   directives: [Child]
	 * })
	 * class App {
	 *   field = null;
	 * }
	 *
	 * bootstrap(App);
	 * ```
	 *
	 * You can access the original exception and stack through the `originalException` and
	 * `originalStack` properties.
	 */
	var ChangeDetectionError = (function (_super) {
	    __extends(ChangeDetectionError, _super);
	    function ChangeDetectionError(exp, originalException, originalStack, context) {
	        _super.call(this, originalException + " in [" + exp + "]", originalException, originalStack, context);
	        this.location = exp;
	    }
	    return ChangeDetectionError;
	})(exceptions_1.WrappedException);
	exports.ChangeDetectionError = ChangeDetectionError;
	/**
	 * Thrown when change detector executes on dehydrated view.
	 *
	 * This error indicates a bug in the framework.
	 *
	 * This is an internal Angular error.
	 */
	var DehydratedException = (function (_super) {
	    __extends(DehydratedException, _super);
	    function DehydratedException() {
	        _super.call(this, 'Attempt to detect changes on a dehydrated detector.');
	    }
	    return DehydratedException;
	})(exceptions_1.BaseException);
	exports.DehydratedException = DehydratedException;
	//# sourceMappingURL=exceptions.js.map

/***/ },
/* 225 */
/***/ function(module, exports) {

	'use strict';var DebugContext = (function () {
	    function DebugContext(element, componentElement, directive, context, locals, injector) {
	        this.element = element;
	        this.componentElement = componentElement;
	        this.directive = directive;
	        this.context = context;
	        this.locals = locals;
	        this.injector = injector;
	    }
	    return DebugContext;
	})();
	exports.DebugContext = DebugContext;
	var ChangeDetectorGenConfig = (function () {
	    function ChangeDetectorGenConfig(genDebugInfo, logBindingUpdate, useJit) {
	        this.genDebugInfo = genDebugInfo;
	        this.logBindingUpdate = logBindingUpdate;
	        this.useJit = useJit;
	    }
	    return ChangeDetectorGenConfig;
	})();
	exports.ChangeDetectorGenConfig = ChangeDetectorGenConfig;
	var ChangeDetectorDefinition = (function () {
	    function ChangeDetectorDefinition(id, strategy, variableNames, bindingRecords, eventRecords, directiveRecords, genConfig) {
	        this.id = id;
	        this.strategy = strategy;
	        this.variableNames = variableNames;
	        this.bindingRecords = bindingRecords;
	        this.eventRecords = eventRecords;
	        this.directiveRecords = directiveRecords;
	        this.genConfig = genConfig;
	    }
	    return ChangeDetectorDefinition;
	})();
	exports.ChangeDetectorDefinition = ChangeDetectorDefinition;
	//# sourceMappingURL=interfaces.js.map

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	(function (ChangeDetectorState) {
	    /**
	     * `NeverChecked` means that the change detector has not been checked yet, and
	     * initialization methods should be called during detection.
	     */
	    ChangeDetectorState[ChangeDetectorState["NeverChecked"] = 0] = "NeverChecked";
	    /**
	     * `CheckedBefore` means that the change detector has successfully completed at least
	     * one detection previously.
	     */
	    ChangeDetectorState[ChangeDetectorState["CheckedBefore"] = 1] = "CheckedBefore";
	    /**
	     * `Errored` means that the change detector encountered an error checking a binding
	     * or calling a directive lifecycle method and is now in an inconsistent state. Change
	     * detectors in this state will no longer detect changes.
	     */
	    ChangeDetectorState[ChangeDetectorState["Errored"] = 2] = "Errored";
	})(exports.ChangeDetectorState || (exports.ChangeDetectorState = {}));
	var ChangeDetectorState = exports.ChangeDetectorState;
	(function (ChangeDetectionStrategy) {
	    /**
	     * `CheckedOnce` means that after calling detectChanges the mode of the change detector
	     * will become `Checked`.
	     */
	    ChangeDetectionStrategy[ChangeDetectionStrategy["CheckOnce"] = 0] = "CheckOnce";
	    /**
	     * `Checked` means that the change detector should be skipped until its mode changes to
	     * `CheckOnce`.
	     */
	    ChangeDetectionStrategy[ChangeDetectionStrategy["Checked"] = 1] = "Checked";
	    /**
	     * `CheckAlways` means that after calling detectChanges the mode of the change detector
	     * will remain `CheckAlways`.
	     */
	    ChangeDetectionStrategy[ChangeDetectionStrategy["CheckAlways"] = 2] = "CheckAlways";
	    /**
	     * `Detached` means that the change detector sub tree is not a part of the main tree and
	     * should be skipped.
	     */
	    ChangeDetectionStrategy[ChangeDetectionStrategy["Detached"] = 3] = "Detached";
	    /**
	     * `OnPush` means that the change detector's mode will be set to `CheckOnce` during hydration.
	     */
	    ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 4] = "OnPush";
	    /**
	     * `Default` means that the change detector's mode will be set to `CheckAlways` during hydration.
	     */
	    ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 5] = "Default";
	    /**
	     * This is an experimental feature. Works only in Dart.
	     */
	    ChangeDetectionStrategy[ChangeDetectionStrategy["OnPushObserve"] = 6] = "OnPushObserve";
	})(exports.ChangeDetectionStrategy || (exports.ChangeDetectionStrategy = {}));
	var ChangeDetectionStrategy = exports.ChangeDetectionStrategy;
	exports.CHANGE_DETECTION_STRATEGY_VALUES = [
	    ChangeDetectionStrategy.CheckOnce,
	    ChangeDetectionStrategy.Checked,
	    ChangeDetectionStrategy.CheckAlways,
	    ChangeDetectionStrategy.Detached,
	    ChangeDetectionStrategy.OnPush,
	    ChangeDetectionStrategy.Default,
	    ChangeDetectionStrategy.OnPushObserve
	];
	exports.CHANGE_DETECTOR_STATE_VALUES = [
	    ChangeDetectorState.NeverChecked,
	    ChangeDetectorState.CheckedBefore,
	    ChangeDetectorState.Errored
	];
	function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
	    return lang_1.isBlank(changeDetectionStrategy) ||
	        changeDetectionStrategy === ChangeDetectionStrategy.Default;
	}
	exports.isDefaultChangeDetectionStrategy = isDefaultChangeDetectionStrategy;
	//# sourceMappingURL=constants.js.map

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var collection_1 = __webpack_require__(202);
	var ast_1 = __webpack_require__(220);
	var change_detection_util_1 = __webpack_require__(228);
	var dynamic_change_detector_1 = __webpack_require__(232);
	var directive_record_1 = __webpack_require__(231);
	var event_binding_1 = __webpack_require__(239);
	var coalesce_1 = __webpack_require__(240);
	var proto_record_1 = __webpack_require__(238);
	var DynamicProtoChangeDetector = (function () {
	    function DynamicProtoChangeDetector(_definition) {
	        this._definition = _definition;
	        this._propertyBindingRecords = createPropertyRecords(_definition);
	        this._eventBindingRecords = createEventRecords(_definition);
	        this._propertyBindingTargets = this._definition.bindingRecords.map(function (b) { return b.target; });
	        this._directiveIndices = this._definition.directiveRecords.map(function (d) { return d.directiveIndex; });
	    }
	    DynamicProtoChangeDetector.prototype.instantiate = function (dispatcher) {
	        return new dynamic_change_detector_1.DynamicChangeDetector(this._definition.id, dispatcher, this._propertyBindingRecords.length, this._propertyBindingTargets, this._directiveIndices, this._definition.strategy, this._propertyBindingRecords, this._eventBindingRecords, this._definition.directiveRecords, this._definition.genConfig);
	    };
	    return DynamicProtoChangeDetector;
	})();
	exports.DynamicProtoChangeDetector = DynamicProtoChangeDetector;
	function createPropertyRecords(definition) {
	    var recordBuilder = new ProtoRecordBuilder();
	    collection_1.ListWrapper.forEachWithIndex(definition.bindingRecords, function (b, index) { return recordBuilder.add(b, definition.variableNames, index); });
	    return coalesce_1.coalesce(recordBuilder.records);
	}
	exports.createPropertyRecords = createPropertyRecords;
	function createEventRecords(definition) {
	    // TODO: vsavkin: remove $event when the compiler handles render-side variables properly
	    var varNames = collection_1.ListWrapper.concat(['$event'], definition.variableNames);
	    return definition.eventRecords.map(function (er) {
	        var records = _ConvertAstIntoProtoRecords.create(er, varNames);
	        var dirIndex = er.implicitReceiver instanceof directive_record_1.DirectiveIndex ? er.implicitReceiver : null;
	        return new event_binding_1.EventBinding(er.target.name, er.target.elementIndex, dirIndex, records);
	    });
	}
	exports.createEventRecords = createEventRecords;
	var ProtoRecordBuilder = (function () {
	    function ProtoRecordBuilder() {
	        this.records = [];
	    }
	    ProtoRecordBuilder.prototype.add = function (b, variableNames, bindingIndex) {
	        var oldLast = collection_1.ListWrapper.last(this.records);
	        if (lang_1.isPresent(oldLast) && oldLast.bindingRecord.directiveRecord == b.directiveRecord) {
	            oldLast.lastInDirective = false;
	        }
	        var numberOfRecordsBefore = this.records.length;
	        this._appendRecords(b, variableNames, bindingIndex);
	        var newLast = collection_1.ListWrapper.last(this.records);
	        if (lang_1.isPresent(newLast) && newLast !== oldLast) {
	            newLast.lastInBinding = true;
	            newLast.lastInDirective = true;
	            this._setArgumentToPureFunction(numberOfRecordsBefore);
	        }
	    };
	    /** @internal */
	    ProtoRecordBuilder.prototype._setArgumentToPureFunction = function (startIndex) {
	        var _this = this;
	        for (var i = startIndex; i < this.records.length; ++i) {
	            var rec = this.records[i];
	            if (rec.isPureFunction()) {
	                rec.args.forEach(function (recordIndex) { return _this.records[recordIndex - 1].argumentToPureFunction =
	                    true; });
	            }
	            if (rec.mode === proto_record_1.RecordType.Pipe) {
	                rec.args.forEach(function (recordIndex) { return _this.records[recordIndex - 1].argumentToPureFunction =
	                    true; });
	                this.records[rec.contextIndex - 1].argumentToPureFunction = true;
	            }
	        }
	    };
	    /** @internal */
	    ProtoRecordBuilder.prototype._appendRecords = function (b, variableNames, bindingIndex) {
	        if (b.isDirectiveLifecycle()) {
	            this.records.push(new proto_record_1.ProtoRecord(proto_record_1.RecordType.DirectiveLifecycle, b.lifecycleEvent, null, [], [], -1, null, this.records.length + 1, b, false, false, false, false, null));
	        }
	        else {
	            _ConvertAstIntoProtoRecords.append(this.records, b, variableNames, bindingIndex);
	        }
	    };
	    return ProtoRecordBuilder;
	})();
	exports.ProtoRecordBuilder = ProtoRecordBuilder;
	var _ConvertAstIntoProtoRecords = (function () {
	    function _ConvertAstIntoProtoRecords(_records, _bindingRecord, _variableNames, _bindingIndex) {
	        this._records = _records;
	        this._bindingRecord = _bindingRecord;
	        this._variableNames = _variableNames;
	        this._bindingIndex = _bindingIndex;
	    }
	    _ConvertAstIntoProtoRecords.append = function (records, b, variableNames, bindingIndex) {
	        var c = new _ConvertAstIntoProtoRecords(records, b, variableNames, bindingIndex);
	        b.ast.visit(c);
	    };
	    _ConvertAstIntoProtoRecords.create = function (b, variableNames) {
	        var rec = [];
	        _ConvertAstIntoProtoRecords.append(rec, b, variableNames, null);
	        rec[rec.length - 1].lastInBinding = true;
	        return rec;
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitImplicitReceiver = function (ast) { return this._bindingRecord.implicitReceiver; };
	    _ConvertAstIntoProtoRecords.prototype.visitInterpolation = function (ast) {
	        var args = this._visitAll(ast.expressions);
	        return this._addRecord(proto_record_1.RecordType.Interpolate, "interpolate", _interpolationFn(ast.strings), args, ast.strings, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitLiteralPrimitive = function (ast) {
	        return this._addRecord(proto_record_1.RecordType.Const, "literal", ast.value, [], null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitPropertyRead = function (ast) {
	        var receiver = ast.receiver.visit(this);
	        if (lang_1.isPresent(this._variableNames) && collection_1.ListWrapper.contains(this._variableNames, ast.name) &&
	            ast.receiver instanceof ast_1.ImplicitReceiver) {
	            return this._addRecord(proto_record_1.RecordType.Local, ast.name, ast.name, [], null, receiver);
	        }
	        else {
	            return this._addRecord(proto_record_1.RecordType.PropertyRead, ast.name, ast.getter, [], null, receiver);
	        }
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitPropertyWrite = function (ast) {
	        if (lang_1.isPresent(this._variableNames) && collection_1.ListWrapper.contains(this._variableNames, ast.name) &&
	            ast.receiver instanceof ast_1.ImplicitReceiver) {
	            throw new exceptions_1.BaseException("Cannot reassign a variable binding " + ast.name);
	        }
	        else {
	            var receiver = ast.receiver.visit(this);
	            var value = ast.value.visit(this);
	            return this._addRecord(proto_record_1.RecordType.PropertyWrite, ast.name, ast.setter, [value], null, receiver);
	        }
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitKeyedWrite = function (ast) {
	        var obj = ast.obj.visit(this);
	        var key = ast.key.visit(this);
	        var value = ast.value.visit(this);
	        return this._addRecord(proto_record_1.RecordType.KeyedWrite, null, null, [key, value], null, obj);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitSafePropertyRead = function (ast) {
	        var receiver = ast.receiver.visit(this);
	        return this._addRecord(proto_record_1.RecordType.SafeProperty, ast.name, ast.getter, [], null, receiver);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitMethodCall = function (ast) {
	        var receiver = ast.receiver.visit(this);
	        var args = this._visitAll(ast.args);
	        if (lang_1.isPresent(this._variableNames) && collection_1.ListWrapper.contains(this._variableNames, ast.name)) {
	            var target = this._addRecord(proto_record_1.RecordType.Local, ast.name, ast.name, [], null, receiver);
	            return this._addRecord(proto_record_1.RecordType.InvokeClosure, "closure", null, args, null, target);
	        }
	        else {
	            return this._addRecord(proto_record_1.RecordType.InvokeMethod, ast.name, ast.fn, args, null, receiver);
	        }
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitSafeMethodCall = function (ast) {
	        var receiver = ast.receiver.visit(this);
	        var args = this._visitAll(ast.args);
	        return this._addRecord(proto_record_1.RecordType.SafeMethodInvoke, ast.name, ast.fn, args, null, receiver);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitFunctionCall = function (ast) {
	        var target = ast.target.visit(this);
	        var args = this._visitAll(ast.args);
	        return this._addRecord(proto_record_1.RecordType.InvokeClosure, "closure", null, args, null, target);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitLiteralArray = function (ast) {
	        var primitiveName = "arrayFn" + ast.expressions.length;
	        return this._addRecord(proto_record_1.RecordType.CollectionLiteral, primitiveName, _arrayFn(ast.expressions.length), this._visitAll(ast.expressions), null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitLiteralMap = function (ast) {
	        return this._addRecord(proto_record_1.RecordType.CollectionLiteral, _mapPrimitiveName(ast.keys), change_detection_util_1.ChangeDetectionUtil.mapFn(ast.keys), this._visitAll(ast.values), null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitBinary = function (ast) {
	        var left = ast.left.visit(this);
	        switch (ast.operation) {
	            case '&&':
	                var branchEnd = [null];
	                this._addRecord(proto_record_1.RecordType.SkipRecordsIfNot, "SkipRecordsIfNot", null, [], branchEnd, left);
	                var right = ast.right.visit(this);
	                branchEnd[0] = right;
	                return this._addRecord(proto_record_1.RecordType.PrimitiveOp, "cond", change_detection_util_1.ChangeDetectionUtil.cond, [left, right, left], null, 0);
	            case '||':
	                var branchEnd = [null];
	                this._addRecord(proto_record_1.RecordType.SkipRecordsIf, "SkipRecordsIf", null, [], branchEnd, left);
	                var right = ast.right.visit(this);
	                branchEnd[0] = right;
	                return this._addRecord(proto_record_1.RecordType.PrimitiveOp, "cond", change_detection_util_1.ChangeDetectionUtil.cond, [left, left, right], null, 0);
	            default:
	                var right = ast.right.visit(this);
	                return this._addRecord(proto_record_1.RecordType.PrimitiveOp, _operationToPrimitiveName(ast.operation), _operationToFunction(ast.operation), [left, right], null, 0);
	        }
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitPrefixNot = function (ast) {
	        var exp = ast.expression.visit(this);
	        return this._addRecord(proto_record_1.RecordType.PrimitiveOp, "operation_negate", change_detection_util_1.ChangeDetectionUtil.operation_negate, [exp], null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitConditional = function (ast) {
	        var condition = ast.condition.visit(this);
	        var startOfFalseBranch = [null];
	        var endOfFalseBranch = [null];
	        this._addRecord(proto_record_1.RecordType.SkipRecordsIfNot, "SkipRecordsIfNot", null, [], startOfFalseBranch, condition);
	        var whenTrue = ast.trueExp.visit(this);
	        var skip = this._addRecord(proto_record_1.RecordType.SkipRecords, "SkipRecords", null, [], endOfFalseBranch, 0);
	        var whenFalse = ast.falseExp.visit(this);
	        startOfFalseBranch[0] = skip;
	        endOfFalseBranch[0] = whenFalse;
	        return this._addRecord(proto_record_1.RecordType.PrimitiveOp, "cond", change_detection_util_1.ChangeDetectionUtil.cond, [condition, whenTrue, whenFalse], null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitPipe = function (ast) {
	        var value = ast.exp.visit(this);
	        var args = this._visitAll(ast.args);
	        return this._addRecord(proto_record_1.RecordType.Pipe, ast.name, ast.name, args, null, value);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitKeyedRead = function (ast) {
	        var obj = ast.obj.visit(this);
	        var key = ast.key.visit(this);
	        return this._addRecord(proto_record_1.RecordType.KeyedRead, "keyedAccess", change_detection_util_1.ChangeDetectionUtil.keyedAccess, [key], null, obj);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitChain = function (ast) {
	        var _this = this;
	        var args = ast.expressions.map(function (e) { return e.visit(_this); });
	        return this._addRecord(proto_record_1.RecordType.Chain, "chain", null, args, null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype._visitAll = function (asts) {
	        var res = collection_1.ListWrapper.createFixedSize(asts.length);
	        for (var i = 0; i < asts.length; ++i) {
	            res[i] = asts[i].visit(this);
	        }
	        return res;
	    };
	    /**
	     * Adds a `ProtoRecord` and returns its selfIndex.
	     */
	    _ConvertAstIntoProtoRecords.prototype._addRecord = function (type, name, funcOrValue, args, fixedArgs, context) {
	        var selfIndex = this._records.length + 1;
	        if (context instanceof directive_record_1.DirectiveIndex) {
	            this._records.push(new proto_record_1.ProtoRecord(type, name, funcOrValue, args, fixedArgs, -1, context, selfIndex, this._bindingRecord, false, false, false, false, this._bindingIndex));
	        }
	        else {
	            this._records.push(new proto_record_1.ProtoRecord(type, name, funcOrValue, args, fixedArgs, context, null, selfIndex, this._bindingRecord, false, false, false, false, this._bindingIndex));
	        }
	        return selfIndex;
	    };
	    return _ConvertAstIntoProtoRecords;
	})();
	function _arrayFn(length) {
	    switch (length) {
	        case 0:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn0;
	        case 1:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn1;
	        case 2:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn2;
	        case 3:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn3;
	        case 4:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn4;
	        case 5:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn5;
	        case 6:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn6;
	        case 7:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn7;
	        case 8:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn8;
	        case 9:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn9;
	        default:
	            throw new exceptions_1.BaseException("Does not support literal maps with more than 9 elements");
	    }
	}
	function _mapPrimitiveName(keys) {
	    var stringifiedKeys = keys.map(function (k) { return lang_1.isString(k) ? "\"" + k + "\"" : "" + k; }).join(', ');
	    return "mapFn([" + stringifiedKeys + "])";
	}
	function _operationToPrimitiveName(operation) {
	    switch (operation) {
	        case '+':
	            return "operation_add";
	        case '-':
	            return "operation_subtract";
	        case '*':
	            return "operation_multiply";
	        case '/':
	            return "operation_divide";
	        case '%':
	            return "operation_remainder";
	        case '==':
	            return "operation_equals";
	        case '!=':
	            return "operation_not_equals";
	        case '===':
	            return "operation_identical";
	        case '!==':
	            return "operation_not_identical";
	        case '<':
	            return "operation_less_then";
	        case '>':
	            return "operation_greater_then";
	        case '<=':
	            return "operation_less_or_equals_then";
	        case '>=':
	            return "operation_greater_or_equals_then";
	        default:
	            throw new exceptions_1.BaseException("Unsupported operation " + operation);
	    }
	}
	function _operationToFunction(operation) {
	    switch (operation) {
	        case '+':
	            return change_detection_util_1.ChangeDetectionUtil.operation_add;
	        case '-':
	            return change_detection_util_1.ChangeDetectionUtil.operation_subtract;
	        case '*':
	            return change_detection_util_1.ChangeDetectionUtil.operation_multiply;
	        case '/':
	            return change_detection_util_1.ChangeDetectionUtil.operation_divide;
	        case '%':
	            return change_detection_util_1.ChangeDetectionUtil.operation_remainder;
	        case '==':
	            return change_detection_util_1.ChangeDetectionUtil.operation_equals;
	        case '!=':
	            return change_detection_util_1.ChangeDetectionUtil.operation_not_equals;
	        case '===':
	            return change_detection_util_1.ChangeDetectionUtil.operation_identical;
	        case '!==':
	            return change_detection_util_1.ChangeDetectionUtil.operation_not_identical;
	        case '<':
	            return change_detection_util_1.ChangeDetectionUtil.operation_less_then;
	        case '>':
	            return change_detection_util_1.ChangeDetectionUtil.operation_greater_then;
	        case '<=':
	            return change_detection_util_1.ChangeDetectionUtil.operation_less_or_equals_then;
	        case '>=':
	            return change_detection_util_1.ChangeDetectionUtil.operation_greater_or_equals_then;
	        default:
	            throw new exceptions_1.BaseException("Unsupported operation " + operation);
	    }
	}
	function s(v) {
	    return lang_1.isPresent(v) ? "" + v : '';
	}
	function _interpolationFn(strings) {
	    var length = strings.length;
	    var c0 = length > 0 ? strings[0] : null;
	    var c1 = length > 1 ? strings[1] : null;
	    var c2 = length > 2 ? strings[2] : null;
	    var c3 = length > 3 ? strings[3] : null;
	    var c4 = length > 4 ? strings[4] : null;
	    var c5 = length > 5 ? strings[5] : null;
	    var c6 = length > 6 ? strings[6] : null;
	    var c7 = length > 7 ? strings[7] : null;
	    var c8 = length > 8 ? strings[8] : null;
	    var c9 = length > 9 ? strings[9] : null;
	    switch (length - 1) {
	        case 1:
	            return function (a1) { return c0 + s(a1) + c1; };
	        case 2:
	            return function (a1, a2) { return c0 + s(a1) + c1 + s(a2) + c2; };
	        case 3:
	            return function (a1, a2, a3) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3; };
	        case 4:
	            return function (a1, a2, a3, a4) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4; };
	        case 5:
	            return function (a1, a2, a3, a4, a5) {
	                return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5;
	            };
	        case 6:
	            return function (a1, a2, a3, a4, a5, a6) {
	                return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6;
	            };
	        case 7:
	            return function (a1, a2, a3, a4, a5, a6, a7) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) +
	                c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7; };
	        case 8:
	            return function (a1, a2, a3, a4, a5, a6, a7, a8) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) +
	                c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7 + s(a8) +
	                c8; };
	        case 9:
	            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 +
	                s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) +
	                c7 + s(a8) + c8 + s(a9) + c9; };
	        default:
	            throw new exceptions_1.BaseException("Does not support more than 9 expressions");
	    }
	}
	//# sourceMappingURL=proto_change_detector.js.map

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var collection_1 = __webpack_require__(202);
	var constants_1 = __webpack_require__(226);
	var pipe_lifecycle_reflector_1 = __webpack_require__(229);
	var binding_record_1 = __webpack_require__(230);
	var directive_record_1 = __webpack_require__(231);
	/**
	 * Indicates that the result of a {@link PipeMetadata} transformation has changed even though the
	 * reference
	 * has not changed.
	 *
	 * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.
	 *
	 * Example:
	 *
	 * ```
	 * if (this._latestValue === this._latestReturnedValue) {
	 *    return this._latestReturnedValue;
	 *  } else {
	 *    this._latestReturnedValue = this._latestValue;
	 *    return WrappedValue.wrap(this._latestValue); // this will force update
	 *  }
	 * ```
	 */
	var WrappedValue = (function () {
	    function WrappedValue(wrapped) {
	        this.wrapped = wrapped;
	    }
	    WrappedValue.wrap = function (value) {
	        var w = _wrappedValues[_wrappedIndex++ % 5];
	        w.wrapped = value;
	        return w;
	    };
	    return WrappedValue;
	})();
	exports.WrappedValue = WrappedValue;
	var _wrappedValues = [
	    new WrappedValue(null),
	    new WrappedValue(null),
	    new WrappedValue(null),
	    new WrappedValue(null),
	    new WrappedValue(null)
	];
	var _wrappedIndex = 0;
	var SimpleChange = (function () {
	    function SimpleChange(previousValue, currentValue) {
	        this.previousValue = previousValue;
	        this.currentValue = currentValue;
	    }
	    SimpleChange.prototype.isFirstChange = function () { return this.previousValue === ChangeDetectionUtil.uninitialized; };
	    return SimpleChange;
	})();
	exports.SimpleChange = SimpleChange;
	var _simpleChangesIndex = 0;
	var _simpleChanges = [
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null)
	];
	function _simpleChange(previousValue, currentValue) {
	    var index = _simpleChangesIndex++ % 20;
	    var s = _simpleChanges[index];
	    s.previousValue = previousValue;
	    s.currentValue = currentValue;
	    return s;
	}
	/* tslint:disable:requireParameterType */
	var ChangeDetectionUtil = (function () {
	    function ChangeDetectionUtil() {
	    }
	    ChangeDetectionUtil.arrayFn0 = function () { return []; };
	    ChangeDetectionUtil.arrayFn1 = function (a1) { return [a1]; };
	    ChangeDetectionUtil.arrayFn2 = function (a1, a2) { return [a1, a2]; };
	    ChangeDetectionUtil.arrayFn3 = function (a1, a2, a3) { return [a1, a2, a3]; };
	    ChangeDetectionUtil.arrayFn4 = function (a1, a2, a3, a4) { return [a1, a2, a3, a4]; };
	    ChangeDetectionUtil.arrayFn5 = function (a1, a2, a3, a4, a5) { return [a1, a2, a3, a4, a5]; };
	    ChangeDetectionUtil.arrayFn6 = function (a1, a2, a3, a4, a5, a6) { return [a1, a2, a3, a4, a5, a6]; };
	    ChangeDetectionUtil.arrayFn7 = function (a1, a2, a3, a4, a5, a6, a7) { return [a1, a2, a3, a4, a5, a6, a7]; };
	    ChangeDetectionUtil.arrayFn8 = function (a1, a2, a3, a4, a5, a6, a7, a8) {
	        return [a1, a2, a3, a4, a5, a6, a7, a8];
	    };
	    ChangeDetectionUtil.arrayFn9 = function (a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	        return [a1, a2, a3, a4, a5, a6, a7, a8, a9];
	    };
	    ChangeDetectionUtil.operation_negate = function (value) { return !value; };
	    ChangeDetectionUtil.operation_add = function (left, right) { return left + right; };
	    ChangeDetectionUtil.operation_subtract = function (left, right) { return left - right; };
	    ChangeDetectionUtil.operation_multiply = function (left, right) { return left * right; };
	    ChangeDetectionUtil.operation_divide = function (left, right) { return left / right; };
	    ChangeDetectionUtil.operation_remainder = function (left, right) { return left % right; };
	    ChangeDetectionUtil.operation_equals = function (left, right) { return left == right; };
	    ChangeDetectionUtil.operation_not_equals = function (left, right) { return left != right; };
	    ChangeDetectionUtil.operation_identical = function (left, right) { return left === right; };
	    ChangeDetectionUtil.operation_not_identical = function (left, right) { return left !== right; };
	    ChangeDetectionUtil.operation_less_then = function (left, right) { return left < right; };
	    ChangeDetectionUtil.operation_greater_then = function (left, right) { return left > right; };
	    ChangeDetectionUtil.operation_less_or_equals_then = function (left, right) { return left <= right; };
	    ChangeDetectionUtil.operation_greater_or_equals_then = function (left, right) { return left >= right; };
	    ChangeDetectionUtil.cond = function (cond, trueVal, falseVal) { return cond ? trueVal : falseVal; };
	    ChangeDetectionUtil.mapFn = function (keys) {
	        function buildMap(values) {
	            var res = collection_1.StringMapWrapper.create();
	            for (var i = 0; i < keys.length; ++i) {
	                collection_1.StringMapWrapper.set(res, keys[i], values[i]);
	            }
	            return res;
	        }
	        switch (keys.length) {
	            case 0:
	                return function () { return []; };
	            case 1:
	                return function (a1) { return buildMap([a1]); };
	            case 2:
	                return function (a1, a2) { return buildMap([a1, a2]); };
	            case 3:
	                return function (a1, a2, a3) { return buildMap([a1, a2, a3]); };
	            case 4:
	                return function (a1, a2, a3, a4) { return buildMap([a1, a2, a3, a4]); };
	            case 5:
	                return function (a1, a2, a3, a4, a5) { return buildMap([a1, a2, a3, a4, a5]); };
	            case 6:
	                return function (a1, a2, a3, a4, a5, a6) { return buildMap([a1, a2, a3, a4, a5, a6]); };
	            case 7:
	                return function (a1, a2, a3, a4, a5, a6, a7) { return buildMap([a1, a2, a3, a4, a5, a6, a7]); };
	            case 8:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8) { return buildMap([a1, a2, a3, a4, a5, a6, a7, a8]); };
	            case 9:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	                    return buildMap([a1, a2, a3, a4, a5, a6, a7, a8, a9]);
	                };
	            default:
	                throw new exceptions_1.BaseException("Does not support literal maps with more than 9 elements");
	        }
	    };
	    ChangeDetectionUtil.keyedAccess = function (obj, args) { return obj[args[0]]; };
	    ChangeDetectionUtil.unwrapValue = function (value) {
	        if (value instanceof WrappedValue) {
	            return value.wrapped;
	        }
	        else {
	            return value;
	        }
	    };
	    ChangeDetectionUtil.changeDetectionMode = function (strategy) {
	        return constants_1.isDefaultChangeDetectionStrategy(strategy) ? constants_1.ChangeDetectionStrategy.CheckAlways :
	            constants_1.ChangeDetectionStrategy.CheckOnce;
	    };
	    ChangeDetectionUtil.simpleChange = function (previousValue, currentValue) {
	        return _simpleChange(previousValue, currentValue);
	    };
	    ChangeDetectionUtil.isValueBlank = function (value) { return lang_1.isBlank(value); };
	    ChangeDetectionUtil.s = function (value) { return lang_1.isPresent(value) ? "" + value : ''; };
	    ChangeDetectionUtil.protoByIndex = function (protos, selfIndex) {
	        return selfIndex < 1 ?
	            null :
	            protos[selfIndex - 1]; // self index is shifted by one because of context
	    };
	    ChangeDetectionUtil.callPipeOnDestroy = function (selectedPipe) {
	        if (pipe_lifecycle_reflector_1.implementsOnDestroy(selectedPipe.pipe)) {
	            selectedPipe.pipe.onDestroy();
	        }
	    };
	    ChangeDetectionUtil.bindingTarget = function (mode, elementIndex, name, unit, debug) {
	        return new binding_record_1.BindingTarget(mode, elementIndex, name, unit, debug);
	    };
	    ChangeDetectionUtil.directiveIndex = function (elementIndex, directiveIndex) {
	        return new directive_record_1.DirectiveIndex(elementIndex, directiveIndex);
	    };
	    ChangeDetectionUtil.looseNotIdentical = function (a, b) { return !lang_1.looseIdentical(a, b); };
	    ChangeDetectionUtil.uninitialized = lang_1.CONST_EXPR(new Object());
	    return ChangeDetectionUtil;
	})();
	exports.ChangeDetectionUtil = ChangeDetectionUtil;
	//# sourceMappingURL=change_detection_util.js.map

/***/ },
/* 229 */
/***/ function(module, exports) {

	'use strict';function implementsOnDestroy(pipe) {
	    return pipe.constructor.prototype.onDestroy;
	}
	exports.implementsOnDestroy = implementsOnDestroy;
	//# sourceMappingURL=pipe_lifecycle_reflector.js.map

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var DIRECTIVE_LIFECYCLE = "directiveLifecycle";
	var BINDING = "native";
	var DIRECTIVE = "directive";
	var ELEMENT_PROPERTY = "elementProperty";
	var ELEMENT_ATTRIBUTE = "elementAttribute";
	var ELEMENT_CLASS = "elementClass";
	var ELEMENT_STYLE = "elementStyle";
	var TEXT_NODE = "textNode";
	var EVENT = "event";
	var HOST_EVENT = "hostEvent";
	var BindingTarget = (function () {
	    function BindingTarget(mode, elementIndex, name, unit, debug) {
	        this.mode = mode;
	        this.elementIndex = elementIndex;
	        this.name = name;
	        this.unit = unit;
	        this.debug = debug;
	    }
	    BindingTarget.prototype.isDirective = function () { return this.mode === DIRECTIVE; };
	    BindingTarget.prototype.isElementProperty = function () { return this.mode === ELEMENT_PROPERTY; };
	    BindingTarget.prototype.isElementAttribute = function () { return this.mode === ELEMENT_ATTRIBUTE; };
	    BindingTarget.prototype.isElementClass = function () { return this.mode === ELEMENT_CLASS; };
	    BindingTarget.prototype.isElementStyle = function () { return this.mode === ELEMENT_STYLE; };
	    BindingTarget.prototype.isTextNode = function () { return this.mode === TEXT_NODE; };
	    return BindingTarget;
	})();
	exports.BindingTarget = BindingTarget;
	var BindingRecord = (function () {
	    function BindingRecord(mode, target, implicitReceiver, ast, setter, lifecycleEvent, directiveRecord) {
	        this.mode = mode;
	        this.target = target;
	        this.implicitReceiver = implicitReceiver;
	        this.ast = ast;
	        this.setter = setter;
	        this.lifecycleEvent = lifecycleEvent;
	        this.directiveRecord = directiveRecord;
	    }
	    BindingRecord.prototype.isDirectiveLifecycle = function () { return this.mode === DIRECTIVE_LIFECYCLE; };
	    BindingRecord.prototype.callOnChanges = function () {
	        return lang_1.isPresent(this.directiveRecord) && this.directiveRecord.callOnChanges;
	    };
	    BindingRecord.prototype.isDefaultChangeDetection = function () {
	        return lang_1.isBlank(this.directiveRecord) || this.directiveRecord.isDefaultChangeDetection();
	    };
	    BindingRecord.createDirectiveDoCheck = function (directiveRecord) {
	        return new BindingRecord(DIRECTIVE_LIFECYCLE, null, 0, null, null, "DoCheck", directiveRecord);
	    };
	    BindingRecord.createDirectiveOnInit = function (directiveRecord) {
	        return new BindingRecord(DIRECTIVE_LIFECYCLE, null, 0, null, null, "OnInit", directiveRecord);
	    };
	    BindingRecord.createDirectiveOnChanges = function (directiveRecord) {
	        return new BindingRecord(DIRECTIVE_LIFECYCLE, null, 0, null, null, "OnChanges", directiveRecord);
	    };
	    BindingRecord.createForDirective = function (ast, propertyName, setter, directiveRecord) {
	        var elementIndex = directiveRecord.directiveIndex.elementIndex;
	        var t = new BindingTarget(DIRECTIVE, elementIndex, propertyName, null, ast.toString());
	        return new BindingRecord(DIRECTIVE, t, 0, ast, setter, null, directiveRecord);
	    };
	    BindingRecord.createForElementProperty = function (ast, elementIndex, propertyName) {
	        var t = new BindingTarget(ELEMENT_PROPERTY, elementIndex, propertyName, null, ast.toString());
	        return new BindingRecord(BINDING, t, 0, ast, null, null, null);
	    };
	    BindingRecord.createForElementAttribute = function (ast, elementIndex, attributeName) {
	        var t = new BindingTarget(ELEMENT_ATTRIBUTE, elementIndex, attributeName, null, ast.toString());
	        return new BindingRecord(BINDING, t, 0, ast, null, null, null);
	    };
	    BindingRecord.createForElementClass = function (ast, elementIndex, className) {
	        var t = new BindingTarget(ELEMENT_CLASS, elementIndex, className, null, ast.toString());
	        return new BindingRecord(BINDING, t, 0, ast, null, null, null);
	    };
	    BindingRecord.createForElementStyle = function (ast, elementIndex, styleName, unit) {
	        var t = new BindingTarget(ELEMENT_STYLE, elementIndex, styleName, unit, ast.toString());
	        return new BindingRecord(BINDING, t, 0, ast, null, null, null);
	    };
	    BindingRecord.createForHostProperty = function (directiveIndex, ast, propertyName) {
	        var t = new BindingTarget(ELEMENT_PROPERTY, directiveIndex.elementIndex, propertyName, null, ast.toString());
	        return new BindingRecord(BINDING, t, directiveIndex, ast, null, null, null);
	    };
	    BindingRecord.createForHostAttribute = function (directiveIndex, ast, attributeName) {
	        var t = new BindingTarget(ELEMENT_ATTRIBUTE, directiveIndex.elementIndex, attributeName, null, ast.toString());
	        return new BindingRecord(BINDING, t, directiveIndex, ast, null, null, null);
	    };
	    BindingRecord.createForHostClass = function (directiveIndex, ast, className) {
	        var t = new BindingTarget(ELEMENT_CLASS, directiveIndex.elementIndex, className, null, ast.toString());
	        return new BindingRecord(BINDING, t, directiveIndex, ast, null, null, null);
	    };
	    BindingRecord.createForHostStyle = function (directiveIndex, ast, styleName, unit) {
	        var t = new BindingTarget(ELEMENT_STYLE, directiveIndex.elementIndex, styleName, unit, ast.toString());
	        return new BindingRecord(BINDING, t, directiveIndex, ast, null, null, null);
	    };
	    BindingRecord.createForTextNode = function (ast, elementIndex) {
	        var t = new BindingTarget(TEXT_NODE, elementIndex, null, null, ast.toString());
	        return new BindingRecord(BINDING, t, 0, ast, null, null, null);
	    };
	    BindingRecord.createForEvent = function (ast, eventName, elementIndex) {
	        var t = new BindingTarget(EVENT, elementIndex, eventName, null, ast.toString());
	        return new BindingRecord(EVENT, t, 0, ast, null, null, null);
	    };
	    BindingRecord.createForHostEvent = function (ast, eventName, directiveRecord) {
	        var directiveIndex = directiveRecord.directiveIndex;
	        var t = new BindingTarget(HOST_EVENT, directiveIndex.elementIndex, eventName, null, ast.toString());
	        return new BindingRecord(HOST_EVENT, t, directiveIndex, ast, null, null, directiveRecord);
	    };
	    return BindingRecord;
	})();
	exports.BindingRecord = BindingRecord;
	//# sourceMappingURL=binding_record.js.map

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var constants_1 = __webpack_require__(226);
	var DirectiveIndex = (function () {
	    function DirectiveIndex(elementIndex, directiveIndex) {
	        this.elementIndex = elementIndex;
	        this.directiveIndex = directiveIndex;
	    }
	    Object.defineProperty(DirectiveIndex.prototype, "name", {
	        get: function () { return this.elementIndex + "_" + this.directiveIndex; },
	        enumerable: true,
	        configurable: true
	    });
	    return DirectiveIndex;
	})();
	exports.DirectiveIndex = DirectiveIndex;
	var DirectiveRecord = (function () {
	    function DirectiveRecord(_a) {
	        var _b = _a === void 0 ? {} : _a, directiveIndex = _b.directiveIndex, callAfterContentInit = _b.callAfterContentInit, callAfterContentChecked = _b.callAfterContentChecked, callAfterViewInit = _b.callAfterViewInit, callAfterViewChecked = _b.callAfterViewChecked, callOnChanges = _b.callOnChanges, callDoCheck = _b.callDoCheck, callOnInit = _b.callOnInit, changeDetection = _b.changeDetection;
	        this.directiveIndex = directiveIndex;
	        this.callAfterContentInit = lang_1.normalizeBool(callAfterContentInit);
	        this.callAfterContentChecked = lang_1.normalizeBool(callAfterContentChecked);
	        this.callOnChanges = lang_1.normalizeBool(callOnChanges);
	        this.callAfterViewInit = lang_1.normalizeBool(callAfterViewInit);
	        this.callAfterViewChecked = lang_1.normalizeBool(callAfterViewChecked);
	        this.callDoCheck = lang_1.normalizeBool(callDoCheck);
	        this.callOnInit = lang_1.normalizeBool(callOnInit);
	        this.changeDetection = changeDetection;
	    }
	    DirectiveRecord.prototype.isDefaultChangeDetection = function () {
	        return constants_1.isDefaultChangeDetectionStrategy(this.changeDetection);
	    };
	    return DirectiveRecord;
	})();
	exports.DirectiveRecord = DirectiveRecord;
	//# sourceMappingURL=directive_record.js.map

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var collection_1 = __webpack_require__(202);
	var abstract_change_detector_1 = __webpack_require__(233);
	var change_detection_util_1 = __webpack_require__(228);
	var constants_1 = __webpack_require__(226);
	var proto_record_1 = __webpack_require__(238);
	var DynamicChangeDetector = (function (_super) {
	    __extends(DynamicChangeDetector, _super);
	    function DynamicChangeDetector(id, dispatcher, numberOfPropertyProtoRecords, propertyBindingTargets, directiveIndices, strategy, _records, _eventBindings, _directiveRecords, _genConfig) {
	        _super.call(this, id, dispatcher, numberOfPropertyProtoRecords, propertyBindingTargets, directiveIndices, strategy);
	        this._records = _records;
	        this._eventBindings = _eventBindings;
	        this._directiveRecords = _directiveRecords;
	        this._genConfig = _genConfig;
	        this.directives = null;
	        var len = _records.length + 1;
	        this.values = collection_1.ListWrapper.createFixedSize(len);
	        this.localPipes = collection_1.ListWrapper.createFixedSize(len);
	        this.prevContexts = collection_1.ListWrapper.createFixedSize(len);
	        this.changes = collection_1.ListWrapper.createFixedSize(len);
	        this.dehydrateDirectives(false);
	    }
	    DynamicChangeDetector.prototype.handleEventInternal = function (eventName, elIndex, locals) {
	        var _this = this;
	        var preventDefault = false;
	        this._matchingEventBindings(eventName, elIndex)
	            .forEach(function (rec) {
	            var res = _this._processEventBinding(rec, locals);
	            if (res === false) {
	                preventDefault = true;
	            }
	        });
	        return preventDefault;
	    };
	    /** @internal */
	    DynamicChangeDetector.prototype._processEventBinding = function (eb, locals) {
	        var values = collection_1.ListWrapper.createFixedSize(eb.records.length);
	        values[0] = this.values[0];
	        for (var protoIdx = 0; protoIdx < eb.records.length; ++protoIdx) {
	            var proto = eb.records[protoIdx];
	            if (proto.isSkipRecord()) {
	                protoIdx += this._computeSkipLength(protoIdx, proto, values);
	            }
	            else {
	                var res = this._calculateCurrValue(proto, values, locals);
	                if (proto.lastInBinding) {
	                    this._markPathAsCheckOnce(proto);
	                    return res;
	                }
	                else {
	                    this._writeSelf(proto, res, values);
	                }
	            }
	        }
	        throw new exceptions_1.BaseException("Cannot be reached");
	    };
	    DynamicChangeDetector.prototype._computeSkipLength = function (protoIndex, proto, values) {
	        if (proto.mode === proto_record_1.RecordType.SkipRecords) {
	            return proto.fixedArgs[0] - protoIndex - 1;
	        }
	        if (proto.mode === proto_record_1.RecordType.SkipRecordsIf) {
	            var condition = this._readContext(proto, values);
	            return condition ? proto.fixedArgs[0] - protoIndex - 1 : 0;
	        }
	        if (proto.mode === proto_record_1.RecordType.SkipRecordsIfNot) {
	            var condition = this._readContext(proto, values);
	            return condition ? 0 : proto.fixedArgs[0] - protoIndex - 1;
	        }
	        throw new exceptions_1.BaseException("Cannot be reached");
	    };
	    /** @internal */
	    DynamicChangeDetector.prototype._markPathAsCheckOnce = function (proto) {
	        if (!proto.bindingRecord.isDefaultChangeDetection()) {
	            var dir = proto.bindingRecord.directiveRecord;
	            this._getDetectorFor(dir.directiveIndex).markPathToRootAsCheckOnce();
	        }
	    };
	    /** @internal */
	    DynamicChangeDetector.prototype._matchingEventBindings = function (eventName, elIndex) {
	        return this._eventBindings.filter(function (eb) { return eb.eventName == eventName && eb.elIndex === elIndex; });
	    };
	    DynamicChangeDetector.prototype.hydrateDirectives = function (directives) {
	        this.values[0] = this.context;
	        this.directives = directives;
	        if (this.strategy === constants_1.ChangeDetectionStrategy.OnPushObserve) {
	            for (var i = 0; i < this.directiveIndices.length; ++i) {
	                var index = this.directiveIndices[i];
	                _super.prototype.observeDirective.call(this, directives.getDirectiveFor(index), i);
	            }
	        }
	    };
	    DynamicChangeDetector.prototype.dehydrateDirectives = function (destroyPipes) {
	        if (destroyPipes) {
	            this._destroyPipes();
	        }
	        this.values[0] = null;
	        this.directives = null;
	        collection_1.ListWrapper.fill(this.values, change_detection_util_1.ChangeDetectionUtil.uninitialized, 1);
	        collection_1.ListWrapper.fill(this.changes, false);
	        collection_1.ListWrapper.fill(this.localPipes, null);
	        collection_1.ListWrapper.fill(this.prevContexts, change_detection_util_1.ChangeDetectionUtil.uninitialized);
	    };
	    /** @internal */
	    DynamicChangeDetector.prototype._destroyPipes = function () {
	        for (var i = 0; i < this.localPipes.length; ++i) {
	            if (lang_1.isPresent(this.localPipes[i])) {
	                change_detection_util_1.ChangeDetectionUtil.callPipeOnDestroy(this.localPipes[i]);
	            }
	        }
	    };
	    DynamicChangeDetector.prototype.checkNoChanges = function () { this.runDetectChanges(true); };
	    DynamicChangeDetector.prototype.detectChangesInRecordsInternal = function (throwOnChange) {
	        var protos = this._records;
	        var changes = null;
	        var isChanged = false;
	        for (var protoIdx = 0; protoIdx < protos.length; ++protoIdx) {
	            var proto = protos[protoIdx];
	            var bindingRecord = proto.bindingRecord;
	            var directiveRecord = bindingRecord.directiveRecord;
	            if (this._firstInBinding(proto)) {
	                this.propertyBindingIndex = proto.propertyBindingIndex;
	            }
	            if (proto.isLifeCycleRecord()) {
	                if (proto.name === "DoCheck" && !throwOnChange) {
	                    this._getDirectiveFor(directiveRecord.directiveIndex).doCheck();
	                }
	                else if (proto.name === "OnInit" && !throwOnChange &&
	                    this.state == constants_1.ChangeDetectorState.NeverChecked) {
	                    this._getDirectiveFor(directiveRecord.directiveIndex).onInit();
	                }
	                else if (proto.name === "OnChanges" && lang_1.isPresent(changes) && !throwOnChange) {
	                    this._getDirectiveFor(directiveRecord.directiveIndex).onChanges(changes);
	                }
	            }
	            else if (proto.isSkipRecord()) {
	                protoIdx += this._computeSkipLength(protoIdx, proto, this.values);
	            }
	            else {
	                var change = this._check(proto, throwOnChange, this.values, this.locals);
	                if (lang_1.isPresent(change)) {
	                    this._updateDirectiveOrElement(change, bindingRecord);
	                    isChanged = true;
	                    changes = this._addChange(bindingRecord, change, changes);
	                }
	            }
	            if (proto.lastInDirective) {
	                changes = null;
	                if (isChanged && !bindingRecord.isDefaultChangeDetection()) {
	                    this._getDetectorFor(directiveRecord.directiveIndex).markAsCheckOnce();
	                }
	                isChanged = false;
	            }
	        }
	    };
	    /** @internal */
	    DynamicChangeDetector.prototype._firstInBinding = function (r) {
	        var prev = change_detection_util_1.ChangeDetectionUtil.protoByIndex(this._records, r.selfIndex - 1);
	        return lang_1.isBlank(prev) || prev.bindingRecord !== r.bindingRecord;
	    };
	    DynamicChangeDetector.prototype.afterContentLifecycleCallbacksInternal = function () {
	        var dirs = this._directiveRecords;
	        for (var i = dirs.length - 1; i >= 0; --i) {
	            var dir = dirs[i];
	            if (dir.callAfterContentInit && this.state == constants_1.ChangeDetectorState.NeverChecked) {
	                this._getDirectiveFor(dir.directiveIndex).afterContentInit();
	            }
	            if (dir.callAfterContentChecked) {
	                this._getDirectiveFor(dir.directiveIndex).afterContentChecked();
	            }
	        }
	    };
	    DynamicChangeDetector.prototype.afterViewLifecycleCallbacksInternal = function () {
	        var dirs = this._directiveRecords;
	        for (var i = dirs.length - 1; i >= 0; --i) {
	            var dir = dirs[i];
	            if (dir.callAfterViewInit && this.state == constants_1.ChangeDetectorState.NeverChecked) {
	                this._getDirectiveFor(dir.directiveIndex).afterViewInit();
	            }
	            if (dir.callAfterViewChecked) {
	                this._getDirectiveFor(dir.directiveIndex).afterViewChecked();
	            }
	        }
	    };
	    /** @internal */
	    DynamicChangeDetector.prototype._updateDirectiveOrElement = function (change, bindingRecord) {
	        if (lang_1.isBlank(bindingRecord.directiveRecord)) {
	            _super.prototype.notifyDispatcher.call(this, change.currentValue);
	        }
	        else {
	            var directiveIndex = bindingRecord.directiveRecord.directiveIndex;
	            bindingRecord.setter(this._getDirectiveFor(directiveIndex), change.currentValue);
	        }
	        if (this._genConfig.logBindingUpdate) {
	            _super.prototype.logBindingUpdate.call(this, change.currentValue);
	        }
	    };
	    /** @internal */
	    DynamicChangeDetector.prototype._addChange = function (bindingRecord, change, changes) {
	        if (bindingRecord.callOnChanges()) {
	            return _super.prototype.addChange.call(this, changes, change.previousValue, change.currentValue);
	        }
	        else {
	            return changes;
	        }
	    };
	    /** @internal */
	    DynamicChangeDetector.prototype._getDirectiveFor = function (directiveIndex) {
	        return this.directives.getDirectiveFor(directiveIndex);
	    };
	    /** @internal */
	    DynamicChangeDetector.prototype._getDetectorFor = function (directiveIndex) { return this.directives.getDetectorFor(directiveIndex); };
	    /** @internal */
	    DynamicChangeDetector.prototype._check = function (proto, throwOnChange, values, locals) {
	        if (proto.isPipeRecord()) {
	            return this._pipeCheck(proto, throwOnChange, values);
	        }
	        else {
	            return this._referenceCheck(proto, throwOnChange, values, locals);
	        }
	    };
	    /** @internal */
	    DynamicChangeDetector.prototype._referenceCheck = function (proto, throwOnChange, values, locals) {
	        if (this._pureFuncAndArgsDidNotChange(proto)) {
	            this._setChanged(proto, false);
	            return null;
	        }
	        var currValue = this._calculateCurrValue(proto, values, locals);
	        if (this.strategy === constants_1.ChangeDetectionStrategy.OnPushObserve) {
	            _super.prototype.observeValue.call(this, currValue, proto.selfIndex);
	        }
	        if (proto.shouldBeChecked()) {
	            var prevValue = this._readSelf(proto, values);
	            if (change_detection_util_1.ChangeDetectionUtil.looseNotIdentical(prevValue, currValue)) {
	                if (proto.lastInBinding) {
	                    var change = change_detection_util_1.ChangeDetectionUtil.simpleChange(prevValue, currValue);
	                    if (throwOnChange)
	                        this.throwOnChangeError(prevValue, currValue);
	                    this._writeSelf(proto, currValue, values);
	                    this._setChanged(proto, true);
	                    return change;
	                }
	                else {
	                    this._writeSelf(proto, currValue, values);
	                    this._setChanged(proto, true);
	                    return null;
	                }
	            }
	            else {
	                this._setChanged(proto, false);
	                return null;
	            }
	        }
	        else {
	            this._writeSelf(proto, currValue, values);
	            this._setChanged(proto, true);
	            return null;
	        }
	    };
	    DynamicChangeDetector.prototype._calculateCurrValue = function (proto, values, locals) {
	        switch (proto.mode) {
	            case proto_record_1.RecordType.Self:
	                return this._readContext(proto, values);
	            case proto_record_1.RecordType.Const:
	                return proto.funcOrValue;
	            case proto_record_1.RecordType.PropertyRead:
	                var context = this._readContext(proto, values);
	                return proto.funcOrValue(context);
	            case proto_record_1.RecordType.SafeProperty:
	                var context = this._readContext(proto, values);
	                return lang_1.isBlank(context) ? null : proto.funcOrValue(context);
	            case proto_record_1.RecordType.PropertyWrite:
	                var context = this._readContext(proto, values);
	                var value = this._readArgs(proto, values)[0];
	                proto.funcOrValue(context, value);
	                return value;
	            case proto_record_1.RecordType.KeyedWrite:
	                var context = this._readContext(proto, values);
	                var key = this._readArgs(proto, values)[0];
	                var value = this._readArgs(proto, values)[1];
	                context[key] = value;
	                return value;
	            case proto_record_1.RecordType.Local:
	                return locals.get(proto.name);
	            case proto_record_1.RecordType.InvokeMethod:
	                var context = this._readContext(proto, values);
	                var args = this._readArgs(proto, values);
	                return proto.funcOrValue(context, args);
	            case proto_record_1.RecordType.SafeMethodInvoke:
	                var context = this._readContext(proto, values);
	                if (lang_1.isBlank(context)) {
	                    return null;
	                }
	                var args = this._readArgs(proto, values);
	                return proto.funcOrValue(context, args);
	            case proto_record_1.RecordType.KeyedRead:
	                var arg = this._readArgs(proto, values)[0];
	                return this._readContext(proto, values)[arg];
	            case proto_record_1.RecordType.Chain:
	                var args = this._readArgs(proto, values);
	                return args[args.length - 1];
	            case proto_record_1.RecordType.InvokeClosure:
	                return lang_1.FunctionWrapper.apply(this._readContext(proto, values), this._readArgs(proto, values));
	            case proto_record_1.RecordType.Interpolate:
	            case proto_record_1.RecordType.PrimitiveOp:
	            case proto_record_1.RecordType.CollectionLiteral:
	                return lang_1.FunctionWrapper.apply(proto.funcOrValue, this._readArgs(proto, values));
	            default:
	                throw new exceptions_1.BaseException("Unknown operation " + proto.mode);
	        }
	    };
	    DynamicChangeDetector.prototype._pipeCheck = function (proto, throwOnChange, values) {
	        var context = this._readContext(proto, values);
	        var selectedPipe = this._pipeFor(proto, context);
	        if (!selectedPipe.pure || this._argsOrContextChanged(proto)) {
	            var args = this._readArgs(proto, values);
	            var currValue = selectedPipe.pipe.transform(context, args);
	            if (proto.shouldBeChecked()) {
	                var prevValue = this._readSelf(proto, values);
	                if (change_detection_util_1.ChangeDetectionUtil.looseNotIdentical(prevValue, currValue)) {
	                    currValue = change_detection_util_1.ChangeDetectionUtil.unwrapValue(currValue);
	                    if (proto.lastInBinding) {
	                        var change = change_detection_util_1.ChangeDetectionUtil.simpleChange(prevValue, currValue);
	                        if (throwOnChange)
	                            this.throwOnChangeError(prevValue, currValue);
	                        this._writeSelf(proto, currValue, values);
	                        this._setChanged(proto, true);
	                        return change;
	                    }
	                    else {
	                        this._writeSelf(proto, currValue, values);
	                        this._setChanged(proto, true);
	                        return null;
	                    }
	                }
	                else {
	                    this._setChanged(proto, false);
	                    return null;
	                }
	            }
	            else {
	                this._writeSelf(proto, currValue, values);
	                this._setChanged(proto, true);
	                return null;
	            }
	        }
	    };
	    DynamicChangeDetector.prototype._pipeFor = function (proto, context) {
	        var storedPipe = this._readPipe(proto);
	        if (lang_1.isPresent(storedPipe))
	            return storedPipe;
	        var pipe = this.pipes.get(proto.name);
	        this._writePipe(proto, pipe);
	        return pipe;
	    };
	    DynamicChangeDetector.prototype._readContext = function (proto, values) {
	        if (proto.contextIndex == -1) {
	            return this._getDirectiveFor(proto.directiveIndex);
	        }
	        return values[proto.contextIndex];
	    };
	    DynamicChangeDetector.prototype._readSelf = function (proto, values) { return values[proto.selfIndex]; };
	    DynamicChangeDetector.prototype._writeSelf = function (proto, value, values) { values[proto.selfIndex] = value; };
	    DynamicChangeDetector.prototype._readPipe = function (proto) { return this.localPipes[proto.selfIndex]; };
	    DynamicChangeDetector.prototype._writePipe = function (proto, value) { this.localPipes[proto.selfIndex] = value; };
	    DynamicChangeDetector.prototype._setChanged = function (proto, value) {
	        if (proto.argumentToPureFunction)
	            this.changes[proto.selfIndex] = value;
	    };
	    DynamicChangeDetector.prototype._pureFuncAndArgsDidNotChange = function (proto) {
	        return proto.isPureFunction() && !this._argsChanged(proto);
	    };
	    DynamicChangeDetector.prototype._argsChanged = function (proto) {
	        var args = proto.args;
	        for (var i = 0; i < args.length; ++i) {
	            if (this.changes[args[i]]) {
	                return true;
	            }
	        }
	        return false;
	    };
	    DynamicChangeDetector.prototype._argsOrContextChanged = function (proto) {
	        return this._argsChanged(proto) || this.changes[proto.contextIndex];
	    };
	    DynamicChangeDetector.prototype._readArgs = function (proto, values) {
	        var res = collection_1.ListWrapper.createFixedSize(proto.args.length);
	        var args = proto.args;
	        for (var i = 0; i < args.length; ++i) {
	            res[i] = values[args[i]];
	        }
	        return res;
	    };
	    return DynamicChangeDetector;
	})(abstract_change_detector_1.AbstractChangeDetector);
	exports.DynamicChangeDetector = DynamicChangeDetector;
	//# sourceMappingURL=dynamic_change_detector.js.map

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var collection_1 = __webpack_require__(202);
	var change_detection_util_1 = __webpack_require__(228);
	var change_detector_ref_1 = __webpack_require__(234);
	var exceptions_1 = __webpack_require__(224);
	var constants_1 = __webpack_require__(226);
	var profile_1 = __webpack_require__(235);
	var observable_facade_1 = __webpack_require__(237);
	var _scope_check = profile_1.wtfCreateScope("ChangeDetector#check(ascii id, bool throwOnChange)");
	var _Context = (function () {
	    function _Context(element, componentElement, context, locals, injector, expression) {
	        this.element = element;
	        this.componentElement = componentElement;
	        this.context = context;
	        this.locals = locals;
	        this.injector = injector;
	        this.expression = expression;
	    }
	    return _Context;
	})();
	var AbstractChangeDetector = (function () {
	    function AbstractChangeDetector(id, dispatcher, numberOfPropertyProtoRecords, bindingTargets, directiveIndices, strategy) {
	        this.id = id;
	        this.dispatcher = dispatcher;
	        this.numberOfPropertyProtoRecords = numberOfPropertyProtoRecords;
	        this.bindingTargets = bindingTargets;
	        this.directiveIndices = directiveIndices;
	        this.strategy = strategy;
	        this.contentChildren = [];
	        this.viewChildren = [];
	        // The names of the below fields must be kept in sync with codegen_name_util.ts or
	        // change detection will fail.
	        this.state = constants_1.ChangeDetectorState.NeverChecked;
	        this.locals = null;
	        this.mode = null;
	        this.pipes = null;
	        this.ref = new change_detector_ref_1.ChangeDetectorRef_(this);
	    }
	    AbstractChangeDetector.prototype.addContentChild = function (cd) {
	        this.contentChildren.push(cd);
	        cd.parent = this;
	    };
	    AbstractChangeDetector.prototype.removeContentChild = function (cd) { collection_1.ListWrapper.remove(this.contentChildren, cd); };
	    AbstractChangeDetector.prototype.addViewChild = function (cd) {
	        this.viewChildren.push(cd);
	        cd.parent = this;
	    };
	    AbstractChangeDetector.prototype.removeViewChild = function (cd) { collection_1.ListWrapper.remove(this.viewChildren, cd); };
	    AbstractChangeDetector.prototype.remove = function () { this.parent.removeContentChild(this); };
	    AbstractChangeDetector.prototype.handleEvent = function (eventName, elIndex, locals) {
	        var res = this.handleEventInternal(eventName, elIndex, locals);
	        this.markPathToRootAsCheckOnce();
	        return res;
	    };
	    AbstractChangeDetector.prototype.handleEventInternal = function (eventName, elIndex, locals) { return false; };
	    AbstractChangeDetector.prototype.detectChanges = function () { this.runDetectChanges(false); };
	    AbstractChangeDetector.prototype.checkNoChanges = function () {
	        if (lang_1.assertionsEnabled()) {
	            this.runDetectChanges(true);
	        }
	    };
	    AbstractChangeDetector.prototype.runDetectChanges = function (throwOnChange) {
	        if (this.mode === constants_1.ChangeDetectionStrategy.Detached ||
	            this.mode === constants_1.ChangeDetectionStrategy.Checked || this.state === constants_1.ChangeDetectorState.Errored)
	            return;
	        var s = _scope_check(this.id, throwOnChange);
	        this.detectChangesInRecords(throwOnChange);
	        this._detectChangesContentChildren(throwOnChange);
	        if (!throwOnChange)
	            this.afterContentLifecycleCallbacks();
	        this._detectChangesInViewChildren(throwOnChange);
	        if (!throwOnChange)
	            this.afterViewLifecycleCallbacks();
	        if (this.mode === constants_1.ChangeDetectionStrategy.CheckOnce)
	            this.mode = constants_1.ChangeDetectionStrategy.Checked;
	        this.state = constants_1.ChangeDetectorState.CheckedBefore;
	        profile_1.wtfLeave(s);
	    };
	    // This method is not intended to be overridden. Subclasses should instead provide an
	    // implementation of `detectChangesInRecordsInternal` which does the work of detecting changes
	    // and which this method will call.
	    // This method expects that `detectChangesInRecordsInternal` will set the property
	    // `this.propertyBindingIndex` to the propertyBindingIndex of the first proto record. This is to
	    // facilitate error reporting.
	    AbstractChangeDetector.prototype.detectChangesInRecords = function (throwOnChange) {
	        if (!this.hydrated()) {
	            this.throwDehydratedError();
	        }
	        try {
	            this.detectChangesInRecordsInternal(throwOnChange);
	        }
	        catch (e) {
	            // throwOnChange errors aren't counted as fatal errors.
	            if (!(e instanceof exceptions_1.ExpressionChangedAfterItHasBeenCheckedException)) {
	                this.state = constants_1.ChangeDetectorState.Errored;
	            }
	            this._throwError(e, e.stack);
	        }
	    };
	    // Subclasses should override this method to perform any work necessary to detect and report
	    // changes. For example, changes should be reported via `ChangeDetectionUtil.addChange`, lifecycle
	    // methods should be called, etc.
	    // This implementation should also set `this.propertyBindingIndex` to the propertyBindingIndex of
	    // the
	    // first proto record to facilitate error reporting. See {@link #detectChangesInRecords}.
	    AbstractChangeDetector.prototype.detectChangesInRecordsInternal = function (throwOnChange) { };
	    // This method is not intended to be overridden. Subclasses should instead provide an
	    // implementation of `hydrateDirectives`.
	    AbstractChangeDetector.prototype.hydrate = function (context, locals, directives, pipes) {
	        this.mode = change_detection_util_1.ChangeDetectionUtil.changeDetectionMode(this.strategy);
	        this.context = context;
	        if (this.strategy === constants_1.ChangeDetectionStrategy.OnPushObserve) {
	            this.observeComponent(context);
	        }
	        this.locals = locals;
	        this.pipes = pipes;
	        this.hydrateDirectives(directives);
	        this.state = constants_1.ChangeDetectorState.NeverChecked;
	    };
	    // Subclasses should override this method to hydrate any directives.
	    AbstractChangeDetector.prototype.hydrateDirectives = function (directives) { };
	    // This method is not intended to be overridden. Subclasses should instead provide an
	    // implementation of `dehydrateDirectives`.
	    AbstractChangeDetector.prototype.dehydrate = function () {
	        this.dehydrateDirectives(true);
	        // This is an experimental feature. Works only in Dart.
	        if (this.strategy === constants_1.ChangeDetectionStrategy.OnPushObserve) {
	            this._unsubsribeFromObservables();
	        }
	        this.context = null;
	        this.locals = null;
	        this.pipes = null;
	    };
	    // Subclasses should override this method to dehydrate any directives. This method should reverse
	    // any work done in `hydrateDirectives`.
	    AbstractChangeDetector.prototype.dehydrateDirectives = function (destroyPipes) { };
	    AbstractChangeDetector.prototype.hydrated = function () { return this.context !== null; };
	    AbstractChangeDetector.prototype.afterContentLifecycleCallbacks = function () {
	        this.dispatcher.notifyAfterContentChecked();
	        this.afterContentLifecycleCallbacksInternal();
	    };
	    AbstractChangeDetector.prototype.afterContentLifecycleCallbacksInternal = function () { };
	    AbstractChangeDetector.prototype.afterViewLifecycleCallbacks = function () {
	        this.dispatcher.notifyAfterViewChecked();
	        this.afterViewLifecycleCallbacksInternal();
	    };
	    AbstractChangeDetector.prototype.afterViewLifecycleCallbacksInternal = function () { };
	    /** @internal */
	    AbstractChangeDetector.prototype._detectChangesContentChildren = function (throwOnChange) {
	        var c = this.contentChildren;
	        for (var i = 0; i < c.length; ++i) {
	            c[i].runDetectChanges(throwOnChange);
	        }
	    };
	    /** @internal */
	    AbstractChangeDetector.prototype._detectChangesInViewChildren = function (throwOnChange) {
	        var c = this.viewChildren;
	        for (var i = 0; i < c.length; ++i) {
	            c[i].runDetectChanges(throwOnChange);
	        }
	    };
	    AbstractChangeDetector.prototype.markAsCheckOnce = function () { this.mode = constants_1.ChangeDetectionStrategy.CheckOnce; };
	    AbstractChangeDetector.prototype.markPathToRootAsCheckOnce = function () {
	        var c = this;
	        while (lang_1.isPresent(c) && c.mode !== constants_1.ChangeDetectionStrategy.Detached) {
	            if (c.mode === constants_1.ChangeDetectionStrategy.Checked)
	                c.mode = constants_1.ChangeDetectionStrategy.CheckOnce;
	            c = c.parent;
	        }
	    };
	    // This is an experimental feature. Works only in Dart.
	    AbstractChangeDetector.prototype._unsubsribeFromObservables = function () {
	        if (lang_1.isPresent(this.subscriptions)) {
	            for (var i = 0; i < this.subscriptions.length; ++i) {
	                var s = this.subscriptions[i];
	                if (lang_1.isPresent(this.subscriptions[i])) {
	                    s.cancel();
	                    this.subscriptions[i] = null;
	                }
	            }
	        }
	    };
	    // This is an experimental feature. Works only in Dart.
	    AbstractChangeDetector.prototype.observeValue = function (value, index) {
	        var _this = this;
	        if (observable_facade_1.isObservable(value)) {
	            this._createArrayToStoreObservables();
	            if (lang_1.isBlank(this.subscriptions[index])) {
	                this.streams[index] = value.changes;
	                this.subscriptions[index] = value.changes.listen(function (_) { return _this.ref.markForCheck(); });
	            }
	            else if (this.streams[index] !== value.changes) {
	                this.subscriptions[index].cancel();
	                this.streams[index] = value.changes;
	                this.subscriptions[index] = value.changes.listen(function (_) { return _this.ref.markForCheck(); });
	            }
	        }
	        return value;
	    };
	    // This is an experimental feature. Works only in Dart.
	    AbstractChangeDetector.prototype.observeDirective = function (value, index) {
	        var _this = this;
	        if (observable_facade_1.isObservable(value)) {
	            this._createArrayToStoreObservables();
	            var arrayIndex = this.numberOfPropertyProtoRecords + index + 2; // +1 is component
	            this.streams[arrayIndex] = value.changes;
	            this.subscriptions[arrayIndex] = value.changes.listen(function (_) { return _this.ref.markForCheck(); });
	        }
	        return value;
	    };
	    // This is an experimental feature. Works only in Dart.
	    AbstractChangeDetector.prototype.observeComponent = function (value) {
	        var _this = this;
	        if (observable_facade_1.isObservable(value)) {
	            this._createArrayToStoreObservables();
	            var index = this.numberOfPropertyProtoRecords + 1;
	            this.streams[index] = value.changes;
	            this.subscriptions[index] = value.changes.listen(function (_) { return _this.ref.markForCheck(); });
	        }
	        return value;
	    };
	    AbstractChangeDetector.prototype._createArrayToStoreObservables = function () {
	        if (lang_1.isBlank(this.subscriptions)) {
	            this.subscriptions = collection_1.ListWrapper.createFixedSize(this.numberOfPropertyProtoRecords +
	                this.directiveIndices.length + 2);
	            this.streams = collection_1.ListWrapper.createFixedSize(this.numberOfPropertyProtoRecords +
	                this.directiveIndices.length + 2);
	        }
	    };
	    AbstractChangeDetector.prototype.getDirectiveFor = function (directives, index) {
	        return directives.getDirectiveFor(this.directiveIndices[index]);
	    };
	    AbstractChangeDetector.prototype.getDetectorFor = function (directives, index) {
	        return directives.getDetectorFor(this.directiveIndices[index]);
	    };
	    AbstractChangeDetector.prototype.notifyDispatcher = function (value) {
	        this.dispatcher.notifyOnBinding(this._currentBinding(), value);
	    };
	    AbstractChangeDetector.prototype.logBindingUpdate = function (value) {
	        this.dispatcher.logBindingUpdate(this._currentBinding(), value);
	    };
	    AbstractChangeDetector.prototype.addChange = function (changes, oldValue, newValue) {
	        if (lang_1.isBlank(changes)) {
	            changes = {};
	        }
	        changes[this._currentBinding().name] = change_detection_util_1.ChangeDetectionUtil.simpleChange(oldValue, newValue);
	        return changes;
	    };
	    AbstractChangeDetector.prototype._throwError = function (exception, stack) {
	        var error;
	        try {
	            var c = this.dispatcher.getDebugContext(this._currentBinding().elementIndex, null);
	            var context = lang_1.isPresent(c) ? new _Context(c.element, c.componentElement, c.context, c.locals, c.injector, this._currentBinding().debug) :
	                null;
	            error = new exceptions_1.ChangeDetectionError(this._currentBinding().debug, exception, stack, context);
	        }
	        catch (e) {
	            // if an error happens during getting the debug context, we throw a ChangeDetectionError
	            // without the extra information.
	            error = new exceptions_1.ChangeDetectionError(null, exception, stack, null);
	        }
	        throw error;
	    };
	    AbstractChangeDetector.prototype.throwOnChangeError = function (oldValue, newValue) {
	        throw new exceptions_1.ExpressionChangedAfterItHasBeenCheckedException(this._currentBinding().debug, oldValue, newValue, null);
	    };
	    AbstractChangeDetector.prototype.throwDehydratedError = function () { throw new exceptions_1.DehydratedException(); };
	    AbstractChangeDetector.prototype._currentBinding = function () {
	        return this.bindingTargets[this.propertyBindingIndex];
	    };
	    return AbstractChangeDetector;
	})();
	exports.AbstractChangeDetector = AbstractChangeDetector;
	//# sourceMappingURL=abstract_change_detector.js.map

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var constants_1 = __webpack_require__(226);
	var ChangeDetectorRef = (function () {
	    function ChangeDetectorRef() {
	    }
	    return ChangeDetectorRef;
	})();
	exports.ChangeDetectorRef = ChangeDetectorRef;
	var ChangeDetectorRef_ = (function (_super) {
	    __extends(ChangeDetectorRef_, _super);
	    function ChangeDetectorRef_(_cd) {
	        _super.call(this);
	        this._cd = _cd;
	    }
	    ChangeDetectorRef_.prototype.markForCheck = function () { this._cd.markPathToRootAsCheckOnce(); };
	    ChangeDetectorRef_.prototype.detach = function () { this._cd.mode = constants_1.ChangeDetectionStrategy.Detached; };
	    ChangeDetectorRef_.prototype.detectChanges = function () { this._cd.detectChanges(); };
	    ChangeDetectorRef_.prototype.checkNoChanges = function () { this._cd.checkNoChanges(); };
	    ChangeDetectorRef_.prototype.reattach = function () {
	        this._cd.mode = constants_1.ChangeDetectionStrategy.CheckAlways;
	        this.markForCheck();
	    };
	    return ChangeDetectorRef_;
	})(ChangeDetectorRef);
	exports.ChangeDetectorRef_ = ChangeDetectorRef_;
	//# sourceMappingURL=change_detector_ref.js.map

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var impl = __webpack_require__(236);
	// Change exports to const once https://github.com/angular/ts2dart/issues/150
	/**
	 * True if WTF is enabled.
	 */
	exports.wtfEnabled = impl.detectWTF();
	function noopScope(arg0, arg1) {
	    return null;
	}
	/**
	 * Create trace scope.
	 *
	 * Scopes must be strictly nested and are analogous to stack frames, but
	 * do not have to follow the stack frames. Instead it is recommended that they follow logical
	 * nesting. You may want to use
	 * [Event
	 * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)
	 * as they are defined in WTF.
	 *
	 * Used to mark scope entry. The return value is used to leave the scope.
	 *
	 *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');
	 *
	 *     someMethod() {
	 *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI
	 *        // DO SOME WORK HERE
	 *        return wtfLeave(s, 123); // Return value 123
	 *     }
	 *
	 * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can
	 * negatively impact the performance of your application. For this reason we recommend that
	 * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and
	 * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to
	 * exception, will produce incorrect trace, but presence of exception signifies logic error which
	 * needs to be fixed before the app should be profiled. Add try-finally only when you expect that
	 * an exception is expected during normal execution while profiling.
	 *
	 */
	exports.wtfCreateScope = exports.wtfEnabled ? impl.createScope : function (signature, flags) { return noopScope; };
	/**
	 * Used to mark end of Scope.
	 *
	 * - `scope` to end.
	 * - `returnValue` (optional) to be passed to the WTF.
	 *
	 * Returns the `returnValue for easy chaining.
	 */
	exports.wtfLeave = exports.wtfEnabled ? impl.leave : function (s, r) { return r; };
	/**
	 * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.
	 * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been
	 * enabled.
	 *
	 *     someMethod() {
	 *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');
	 *        var future = new Future.delay(5).then((_) {
	 *          wtfEndTimeRange(s);
	 *        });
	 *     }
	 */
	exports.wtfStartTimeRange = exports.wtfEnabled ? impl.startTimeRange : function (rangeType, action) { return null; };
	/**
	 * Ends a async time range operation.
	 * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been
	 * enabled.
	 */
	exports.wtfEndTimeRange = exports.wtfEnabled ? impl.endTimeRange : function (r) {
	    return null;
	};
	//# sourceMappingURL=profile.js.map

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var trace;
	var events;
	function detectWTF() {
	    var wtf = lang_1.global['wtf'];
	    if (wtf) {
	        trace = wtf['trace'];
	        if (trace) {
	            events = trace['events'];
	            return true;
	        }
	    }
	    return false;
	}
	exports.detectWTF = detectWTF;
	function createScope(signature, flags) {
	    if (flags === void 0) { flags = null; }
	    return events.createScope(signature, flags);
	}
	exports.createScope = createScope;
	function leave(scope, returnValue) {
	    trace.leaveScope(scope, returnValue);
	    return returnValue;
	}
	exports.leave = leave;
	function startTimeRange(rangeType, action) {
	    return trace.beginTimeRange(rangeType, action);
	}
	exports.startTimeRange = startTimeRange;
	function endTimeRange(range) {
	    trace.endTimeRange(range);
	}
	exports.endTimeRange = endTimeRange;
	//# sourceMappingURL=wtf_impl.js.map

/***/ },
/* 237 */
/***/ function(module, exports) {

	'use strict';function isObservable(value) {
	    return false;
	}
	exports.isObservable = isObservable;
	//# sourceMappingURL=observable_facade.js.map

/***/ },
/* 238 */
/***/ function(module, exports) {

	'use strict';(function (RecordType) {
	    RecordType[RecordType["Self"] = 0] = "Self";
	    RecordType[RecordType["Const"] = 1] = "Const";
	    RecordType[RecordType["PrimitiveOp"] = 2] = "PrimitiveOp";
	    RecordType[RecordType["PropertyRead"] = 3] = "PropertyRead";
	    RecordType[RecordType["PropertyWrite"] = 4] = "PropertyWrite";
	    RecordType[RecordType["Local"] = 5] = "Local";
	    RecordType[RecordType["InvokeMethod"] = 6] = "InvokeMethod";
	    RecordType[RecordType["InvokeClosure"] = 7] = "InvokeClosure";
	    RecordType[RecordType["KeyedRead"] = 8] = "KeyedRead";
	    RecordType[RecordType["KeyedWrite"] = 9] = "KeyedWrite";
	    RecordType[RecordType["Pipe"] = 10] = "Pipe";
	    RecordType[RecordType["Interpolate"] = 11] = "Interpolate";
	    RecordType[RecordType["SafeProperty"] = 12] = "SafeProperty";
	    RecordType[RecordType["CollectionLiteral"] = 13] = "CollectionLiteral";
	    RecordType[RecordType["SafeMethodInvoke"] = 14] = "SafeMethodInvoke";
	    RecordType[RecordType["DirectiveLifecycle"] = 15] = "DirectiveLifecycle";
	    RecordType[RecordType["Chain"] = 16] = "Chain";
	    RecordType[RecordType["SkipRecordsIf"] = 17] = "SkipRecordsIf";
	    RecordType[RecordType["SkipRecordsIfNot"] = 18] = "SkipRecordsIfNot";
	    RecordType[RecordType["SkipRecords"] = 19] = "SkipRecords"; // Skip records unconditionally
	})(exports.RecordType || (exports.RecordType = {}));
	var RecordType = exports.RecordType;
	var ProtoRecord = (function () {
	    function ProtoRecord(mode, name, funcOrValue, args, fixedArgs, contextIndex, directiveIndex, selfIndex, bindingRecord, lastInBinding, lastInDirective, argumentToPureFunction, referencedBySelf, propertyBindingIndex) {
	        this.mode = mode;
	        this.name = name;
	        this.funcOrValue = funcOrValue;
	        this.args = args;
	        this.fixedArgs = fixedArgs;
	        this.contextIndex = contextIndex;
	        this.directiveIndex = directiveIndex;
	        this.selfIndex = selfIndex;
	        this.bindingRecord = bindingRecord;
	        this.lastInBinding = lastInBinding;
	        this.lastInDirective = lastInDirective;
	        this.argumentToPureFunction = argumentToPureFunction;
	        this.referencedBySelf = referencedBySelf;
	        this.propertyBindingIndex = propertyBindingIndex;
	    }
	    ProtoRecord.prototype.isPureFunction = function () {
	        return this.mode === RecordType.Interpolate || this.mode === RecordType.CollectionLiteral;
	    };
	    ProtoRecord.prototype.isUsedByOtherRecord = function () { return !this.lastInBinding || this.referencedBySelf; };
	    ProtoRecord.prototype.shouldBeChecked = function () {
	        return this.argumentToPureFunction || this.lastInBinding || this.isPureFunction() ||
	            this.isPipeRecord();
	    };
	    ProtoRecord.prototype.isPipeRecord = function () { return this.mode === RecordType.Pipe; };
	    ProtoRecord.prototype.isConditionalSkipRecord = function () {
	        return this.mode === RecordType.SkipRecordsIfNot || this.mode === RecordType.SkipRecordsIf;
	    };
	    ProtoRecord.prototype.isUnconditionalSkipRecord = function () { return this.mode === RecordType.SkipRecords; };
	    ProtoRecord.prototype.isSkipRecord = function () {
	        return this.isConditionalSkipRecord() || this.isUnconditionalSkipRecord();
	    };
	    ProtoRecord.prototype.isLifeCycleRecord = function () { return this.mode === RecordType.DirectiveLifecycle; };
	    return ProtoRecord;
	})();
	exports.ProtoRecord = ProtoRecord;
	//# sourceMappingURL=proto_record.js.map

/***/ },
/* 239 */
/***/ function(module, exports) {

	'use strict';var EventBinding = (function () {
	    function EventBinding(eventName, elIndex, dirIndex, records) {
	        this.eventName = eventName;
	        this.elIndex = elIndex;
	        this.dirIndex = dirIndex;
	        this.records = records;
	    }
	    return EventBinding;
	})();
	exports.EventBinding = EventBinding;
	//# sourceMappingURL=event_binding.js.map

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var collection_1 = __webpack_require__(202);
	var proto_record_1 = __webpack_require__(238);
	/**
	 * Removes "duplicate" records. It assumes that record evaluation does not have side-effects.
	 *
	 * Records that are not last in bindings are removed and all the indices of the records that depend
	 * on them are updated.
	 *
	 * Records that are last in bindings CANNOT be removed, and instead are replaced with very cheap
	 * SELF records.
	 *
	 * @internal
	 */
	function coalesce(srcRecords) {
	    var dstRecords = [];
	    var excludedIdxs = [];
	    var indexMap = new collection_1.Map();
	    var skipDepth = 0;
	    var skipSources = collection_1.ListWrapper.createFixedSize(srcRecords.length);
	    for (var protoIndex = 0; protoIndex < srcRecords.length; protoIndex++) {
	        var skipRecord = skipSources[protoIndex];
	        if (lang_1.isPresent(skipRecord)) {
	            skipDepth--;
	            skipRecord.fixedArgs[0] = dstRecords.length;
	        }
	        var src = srcRecords[protoIndex];
	        var dst = _cloneAndUpdateIndexes(src, dstRecords, indexMap);
	        if (dst.isSkipRecord()) {
	            dstRecords.push(dst);
	            skipDepth++;
	            skipSources[dst.fixedArgs[0]] = dst;
	        }
	        else {
	            var record = _mayBeAddRecord(dst, dstRecords, excludedIdxs, skipDepth > 0);
	            indexMap.set(src.selfIndex, record.selfIndex);
	        }
	    }
	    return _optimizeSkips(dstRecords);
	}
	exports.coalesce = coalesce;
	/**
	 * - Conditional skip of 1 record followed by an unconditional skip of N are replaced by  a
	 *   conditional skip of N with the negated condition,
	 * - Skips of 0 records are removed
	 */
	function _optimizeSkips(srcRecords) {
	    var dstRecords = [];
	    var skipSources = collection_1.ListWrapper.createFixedSize(srcRecords.length);
	    var indexMap = new collection_1.Map();
	    for (var protoIndex = 0; protoIndex < srcRecords.length; protoIndex++) {
	        var skipRecord = skipSources[protoIndex];
	        if (lang_1.isPresent(skipRecord)) {
	            skipRecord.fixedArgs[0] = dstRecords.length;
	        }
	        var src = srcRecords[protoIndex];
	        if (src.isSkipRecord()) {
	            if (src.isConditionalSkipRecord() && src.fixedArgs[0] === protoIndex + 2 &&
	                protoIndex < srcRecords.length - 1 &&
	                srcRecords[protoIndex + 1].mode === proto_record_1.RecordType.SkipRecords) {
	                src.mode = src.mode === proto_record_1.RecordType.SkipRecordsIf ? proto_record_1.RecordType.SkipRecordsIfNot :
	                    proto_record_1.RecordType.SkipRecordsIf;
	                src.fixedArgs[0] = srcRecords[protoIndex + 1].fixedArgs[0];
	                protoIndex++;
	            }
	            if (src.fixedArgs[0] > protoIndex + 1) {
	                var dst = _cloneAndUpdateIndexes(src, dstRecords, indexMap);
	                dstRecords.push(dst);
	                skipSources[dst.fixedArgs[0]] = dst;
	            }
	        }
	        else {
	            var dst = _cloneAndUpdateIndexes(src, dstRecords, indexMap);
	            dstRecords.push(dst);
	            indexMap.set(src.selfIndex, dst.selfIndex);
	        }
	    }
	    return dstRecords;
	}
	/**
	 * Add a new record or re-use one of the existing records.
	 */
	function _mayBeAddRecord(record, dstRecords, excludedIdxs, excluded) {
	    var match = _findFirstMatch(record, dstRecords, excludedIdxs);
	    if (lang_1.isPresent(match)) {
	        if (record.lastInBinding) {
	            dstRecords.push(_createSelfRecord(record, match.selfIndex, dstRecords.length + 1));
	            match.referencedBySelf = true;
	        }
	        else {
	            if (record.argumentToPureFunction) {
	                match.argumentToPureFunction = true;
	            }
	        }
	        return match;
	    }
	    if (excluded) {
	        excludedIdxs.push(record.selfIndex);
	    }
	    dstRecords.push(record);
	    return record;
	}
	/**
	 * Returns the first `ProtoRecord` that matches the record.
	 */
	function _findFirstMatch(record, dstRecords, excludedIdxs) {
	    return dstRecords.find(
	    // TODO(vicb): optimize excludedIdxs.indexOf (sorted array)
	    function (rr) { return excludedIdxs.indexOf(rr.selfIndex) == -1 && rr.mode !== proto_record_1.RecordType.DirectiveLifecycle &&
	        _haveSameDirIndex(rr, record) && rr.mode === record.mode &&
	        lang_1.looseIdentical(rr.funcOrValue, record.funcOrValue) &&
	        rr.contextIndex === record.contextIndex && lang_1.looseIdentical(rr.name, record.name) &&
	        collection_1.ListWrapper.equals(rr.args, record.args); });
	}
	/**
	 * Clone the `ProtoRecord` and changes the indexes for the ones in the destination array for:
	 * - the arguments,
	 * - the context,
	 * - self
	 */
	function _cloneAndUpdateIndexes(record, dstRecords, indexMap) {
	    var args = record.args.map(function (src) { return _srcToDstSelfIndex(indexMap, src); });
	    var contextIndex = _srcToDstSelfIndex(indexMap, record.contextIndex);
	    var selfIndex = dstRecords.length + 1;
	    return new proto_record_1.ProtoRecord(record.mode, record.name, record.funcOrValue, args, record.fixedArgs, contextIndex, record.directiveIndex, selfIndex, record.bindingRecord, record.lastInBinding, record.lastInDirective, record.argumentToPureFunction, record.referencedBySelf, record.propertyBindingIndex);
	}
	/**
	 * Returns the index in the destination array corresponding to the index in the src array.
	 * When the element is not present in the destination array, return the source index.
	 */
	function _srcToDstSelfIndex(indexMap, srcIdx) {
	    var dstIdx = indexMap.get(srcIdx);
	    return lang_1.isPresent(dstIdx) ? dstIdx : srcIdx;
	}
	function _createSelfRecord(r, contextIndex, selfIndex) {
	    return new proto_record_1.ProtoRecord(proto_record_1.RecordType.Self, "self", null, [], r.fixedArgs, contextIndex, r.directiveIndex, selfIndex, r.bindingRecord, r.lastInBinding, r.lastInDirective, false, false, r.propertyBindingIndex);
	}
	function _haveSameDirIndex(a, b) {
	    var di1 = lang_1.isBlank(a.directiveIndex) ? null : a.directiveIndex.directiveIndex;
	    var ei1 = lang_1.isBlank(a.directiveIndex) ? null : a.directiveIndex.elementIndex;
	    var di2 = lang_1.isBlank(b.directiveIndex) ? null : b.directiveIndex.directiveIndex;
	    var ei2 = lang_1.isBlank(b.directiveIndex) ? null : b.directiveIndex.elementIndex;
	    return di1 === di2 && ei1 === ei2;
	}
	//# sourceMappingURL=coalesce.js.map

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var change_detection_jit_generator_1 = __webpack_require__(242);
	var JitProtoChangeDetector = (function () {
	    function JitProtoChangeDetector(definition) {
	        this.definition = definition;
	        this._factory = this._createFactory(definition);
	    }
	    JitProtoChangeDetector.isSupported = function () { return true; };
	    JitProtoChangeDetector.prototype.instantiate = function (dispatcher) { return this._factory(dispatcher); };
	    /** @internal */
	    JitProtoChangeDetector.prototype._createFactory = function (definition) {
	        return new change_detection_jit_generator_1.ChangeDetectorJITGenerator(definition, 'util', 'AbstractChangeDetector', 'ChangeDetectorStatus')
	            .generate();
	    };
	    return JitProtoChangeDetector;
	})();
	exports.JitProtoChangeDetector = JitProtoChangeDetector;
	//# sourceMappingURL=jit_proto_change_detector.js.map

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var collection_1 = __webpack_require__(202);
	var abstract_change_detector_1 = __webpack_require__(233);
	var change_detection_util_1 = __webpack_require__(228);
	var proto_record_1 = __webpack_require__(238);
	var codegen_name_util_1 = __webpack_require__(243);
	var codegen_logic_util_1 = __webpack_require__(244);
	var codegen_facade_1 = __webpack_require__(245);
	var constants_1 = __webpack_require__(226);
	var proto_change_detector_1 = __webpack_require__(227);
	/**
	 * The code generator takes a list of proto records and creates a function/class
	 * that "emulates" what the developer would write by hand to implement the same
	 * kind of behaviour.
	 *
	 * This code should be kept in sync with the Dart transformer's
	 * `angular2.transform.template_compiler.change_detector_codegen` library. If you make updates
	 * here, please make equivalent changes there.
	*/
	var IS_CHANGED_LOCAL = "isChanged";
	var CHANGES_LOCAL = "changes";
	var ChangeDetectorJITGenerator = (function () {
	    function ChangeDetectorJITGenerator(definition, changeDetectionUtilVarName, abstractChangeDetectorVarName, changeDetectorStateVarName) {
	        this.changeDetectionUtilVarName = changeDetectionUtilVarName;
	        this.abstractChangeDetectorVarName = abstractChangeDetectorVarName;
	        this.changeDetectorStateVarName = changeDetectorStateVarName;
	        var propertyBindingRecords = proto_change_detector_1.createPropertyRecords(definition);
	        var eventBindingRecords = proto_change_detector_1.createEventRecords(definition);
	        var propertyBindingTargets = definition.bindingRecords.map(function (b) { return b.target; });
	        this.id = definition.id;
	        this.changeDetectionStrategy = definition.strategy;
	        this.genConfig = definition.genConfig;
	        this.records = propertyBindingRecords;
	        this.propertyBindingTargets = propertyBindingTargets;
	        this.eventBindings = eventBindingRecords;
	        this.directiveRecords = definition.directiveRecords;
	        this._names = new codegen_name_util_1.CodegenNameUtil(this.records, this.eventBindings, this.directiveRecords, this.changeDetectionUtilVarName);
	        this._logic =
	            new codegen_logic_util_1.CodegenLogicUtil(this._names, this.changeDetectionUtilVarName, this.changeDetectorStateVarName, this.changeDetectionStrategy);
	        this.typeName = codegen_name_util_1.sanitizeName("ChangeDetector_" + this.id);
	    }
	    ChangeDetectorJITGenerator.prototype.generate = function () {
	        var factorySource = "\n      " + this.generateSource() + "\n      return function(dispatcher) {\n        return new " + this.typeName + "(dispatcher);\n      }\n    ";
	        return new Function(this.abstractChangeDetectorVarName, this.changeDetectionUtilVarName, this.changeDetectorStateVarName, factorySource)(abstract_change_detector_1.AbstractChangeDetector, change_detection_util_1.ChangeDetectionUtil, constants_1.ChangeDetectorState);
	    };
	    ChangeDetectorJITGenerator.prototype.generateSource = function () {
	        return "\n      var " + this.typeName + " = function " + this.typeName + "(dispatcher) {\n        " + this.abstractChangeDetectorVarName + ".call(\n            this, " + JSON.stringify(this.id) + ", dispatcher, " + this.records.length + ",\n            " + this.typeName + ".gen_propertyBindingTargets, " + this.typeName + ".gen_directiveIndices,\n            " + codegen_facade_1.codify(this.changeDetectionStrategy) + ");\n        this.dehydrateDirectives(false);\n      }\n\n      " + this.typeName + ".prototype = Object.create(" + this.abstractChangeDetectorVarName + ".prototype);\n\n      " + this.typeName + ".prototype.detectChangesInRecordsInternal = function(throwOnChange) {\n        " + this._names.genInitLocals() + "\n        var " + IS_CHANGED_LOCAL + " = false;\n        var " + CHANGES_LOCAL + " = null;\n\n        " + this._genAllRecords(this.records) + "\n      }\n\n      " + this._maybeGenHandleEventInternal() + "\n\n      " + this._maybeGenAfterContentLifecycleCallbacks() + "\n\n      " + this._maybeGenAfterViewLifecycleCallbacks() + "\n\n      " + this._maybeGenHydrateDirectives() + "\n\n      " + this._maybeGenDehydrateDirectives() + "\n\n      " + this._genPropertyBindingTargets() + "\n\n      " + this._genDirectiveIndices() + "\n    ";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genPropertyBindingTargets = function () {
	        var targets = this._logic.genPropertyBindingTargets(this.propertyBindingTargets, this.genConfig.genDebugInfo);
	        return this.typeName + ".gen_propertyBindingTargets = " + targets + ";";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genDirectiveIndices = function () {
	        var indices = this._logic.genDirectiveIndices(this.directiveRecords);
	        return this.typeName + ".gen_directiveIndices = " + indices + ";";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._maybeGenHandleEventInternal = function () {
	        var _this = this;
	        if (this.eventBindings.length > 0) {
	            var handlers = this.eventBindings.map(function (eb) { return _this._genEventBinding(eb); }).join("\n");
	            return "\n        " + this.typeName + ".prototype.handleEventInternal = function(eventName, elIndex, locals) {\n          var " + this._names.getPreventDefaultAccesor() + " = false;\n          " + this._names.genInitEventLocals() + "\n          " + handlers + "\n          return " + this._names.getPreventDefaultAccesor() + ";\n        }\n      ";
	        }
	        else {
	            return '';
	        }
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genEventBinding = function (eb) {
	        var _this = this;
	        var codes = [];
	        this._endOfBlockIdxs = [];
	        collection_1.ListWrapper.forEachWithIndex(eb.records, function (r, i) {
	            var code;
	            if (r.isConditionalSkipRecord()) {
	                code = _this._genConditionalSkip(r, _this._names.getEventLocalName(eb, i));
	            }
	            else if (r.isUnconditionalSkipRecord()) {
	                code = _this._genUnconditionalSkip(r);
	            }
	            else {
	                code = _this._genEventBindingEval(eb, r);
	            }
	            code += _this._genEndOfSkipBlock(i);
	            codes.push(code);
	        });
	        return "\n    if (eventName === \"" + eb.eventName + "\" && elIndex === " + eb.elIndex + ") {\n      " + codes.join("\n") + "\n    }";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genEventBindingEval = function (eb, r) {
	        if (r.lastInBinding) {
	            var evalRecord = this._logic.genEventBindingEvalValue(eb, r);
	            var markPath = this._genMarkPathToRootAsCheckOnce(r);
	            var prevDefault = this._genUpdatePreventDefault(eb, r);
	            return evalRecord + "\n" + markPath + "\n" + prevDefault;
	        }
	        else {
	            return this._logic.genEventBindingEvalValue(eb, r);
	        }
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genMarkPathToRootAsCheckOnce = function (r) {
	        var br = r.bindingRecord;
	        if (br.isDefaultChangeDetection()) {
	            return "";
	        }
	        else {
	            return this._names.getDetectorName(br.directiveRecord.directiveIndex) + ".markPathToRootAsCheckOnce();";
	        }
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genUpdatePreventDefault = function (eb, r) {
	        var local = this._names.getEventLocalName(eb, r.selfIndex);
	        return "if (" + local + " === false) { " + this._names.getPreventDefaultAccesor() + " = true};";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._maybeGenDehydrateDirectives = function () {
	        var destroyPipesCode = this._names.genPipeOnDestroy();
	        if (destroyPipesCode) {
	            destroyPipesCode = "if (destroyPipes) { " + destroyPipesCode + " }";
	        }
	        var dehydrateFieldsCode = this._names.genDehydrateFields();
	        if (!destroyPipesCode && !dehydrateFieldsCode)
	            return '';
	        return this.typeName + ".prototype.dehydrateDirectives = function(destroyPipes) {\n        " + destroyPipesCode + "\n        " + dehydrateFieldsCode + "\n    }";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._maybeGenHydrateDirectives = function () {
	        var hydrateDirectivesCode = this._logic.genHydrateDirectives(this.directiveRecords);
	        var hydrateDetectorsCode = this._logic.genHydrateDetectors(this.directiveRecords);
	        if (!hydrateDirectivesCode && !hydrateDetectorsCode)
	            return '';
	        return this.typeName + ".prototype.hydrateDirectives = function(directives) {\n      " + hydrateDirectivesCode + "\n      " + hydrateDetectorsCode + "\n    }";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._maybeGenAfterContentLifecycleCallbacks = function () {
	        var notifications = this._logic.genContentLifecycleCallbacks(this.directiveRecords);
	        if (notifications.length > 0) {
	            var directiveNotifications = notifications.join("\n");
	            return "\n        " + this.typeName + ".prototype.afterContentLifecycleCallbacksInternal = function() {\n          " + directiveNotifications + "\n        }\n      ";
	        }
	        else {
	            return '';
	        }
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._maybeGenAfterViewLifecycleCallbacks = function () {
	        var notifications = this._logic.genViewLifecycleCallbacks(this.directiveRecords);
	        if (notifications.length > 0) {
	            var directiveNotifications = notifications.join("\n");
	            return "\n        " + this.typeName + ".prototype.afterViewLifecycleCallbacksInternal = function() {\n          " + directiveNotifications + "\n        }\n      ";
	        }
	        else {
	            return '';
	        }
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genAllRecords = function (rs) {
	        var codes = [];
	        this._endOfBlockIdxs = [];
	        for (var i = 0; i < rs.length; i++) {
	            var code = void 0;
	            var r = rs[i];
	            if (r.isLifeCycleRecord()) {
	                code = this._genDirectiveLifecycle(r);
	            }
	            else if (r.isPipeRecord()) {
	                code = this._genPipeCheck(r);
	            }
	            else if (r.isConditionalSkipRecord()) {
	                code = this._genConditionalSkip(r, this._names.getLocalName(r.contextIndex));
	            }
	            else if (r.isUnconditionalSkipRecord()) {
	                code = this._genUnconditionalSkip(r);
	            }
	            else {
	                code = this._genReferenceCheck(r);
	            }
	            code = "\n        " + this._maybeFirstInBinding(r) + "\n        " + code + "\n        " + this._maybeGenLastInDirective(r) + "\n        " + this._genEndOfSkipBlock(i) + "\n      ";
	            codes.push(code);
	        }
	        return codes.join("\n");
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genConditionalSkip = function (r, condition) {
	        var maybeNegate = r.mode === proto_record_1.RecordType.SkipRecordsIf ? '!' : '';
	        this._endOfBlockIdxs.push(r.fixedArgs[0] - 1);
	        return "if (" + maybeNegate + condition + ") {";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genUnconditionalSkip = function (r) {
	        this._endOfBlockIdxs.pop();
	        this._endOfBlockIdxs.push(r.fixedArgs[0] - 1);
	        return "} else {";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genEndOfSkipBlock = function (protoIndex) {
	        if (!collection_1.ListWrapper.isEmpty(this._endOfBlockIdxs)) {
	            var endOfBlock = collection_1.ListWrapper.last(this._endOfBlockIdxs);
	            if (protoIndex === endOfBlock) {
	                this._endOfBlockIdxs.pop();
	                return '}';
	            }
	        }
	        return '';
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genDirectiveLifecycle = function (r) {
	        if (r.name === "DoCheck") {
	            return this._genOnCheck(r);
	        }
	        else if (r.name === "OnInit") {
	            return this._genOnInit(r);
	        }
	        else if (r.name === "OnChanges") {
	            return this._genOnChange(r);
	        }
	        else {
	            throw new exceptions_1.BaseException("Unknown lifecycle event '" + r.name + "'");
	        }
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genPipeCheck = function (r) {
	        var _this = this;
	        var context = this._names.getLocalName(r.contextIndex);
	        var argString = r.args.map(function (arg) { return _this._names.getLocalName(arg); }).join(", ");
	        var oldValue = this._names.getFieldName(r.selfIndex);
	        var newValue = this._names.getLocalName(r.selfIndex);
	        var pipe = this._names.getPipeName(r.selfIndex);
	        var pipeName = r.name;
	        var init = "\n      if (" + pipe + " === " + this.changeDetectionUtilVarName + ".uninitialized) {\n        " + pipe + " = " + this._names.getPipesAccessorName() + ".get('" + pipeName + "');\n      }\n    ";
	        var read = newValue + " = " + pipe + ".pipe.transform(" + context + ", [" + argString + "]);";
	        var contexOrArgCheck = r.args.map(function (a) { return _this._names.getChangeName(a); });
	        contexOrArgCheck.push(this._names.getChangeName(r.contextIndex));
	        var condition = "!" + pipe + ".pure || (" + contexOrArgCheck.join(" || ") + ")";
	        var check = "\n      if (" + this.changeDetectionUtilVarName + ".looseNotIdentical(" + oldValue + ", " + newValue + ")) {\n        " + newValue + " = " + this.changeDetectionUtilVarName + ".unwrapValue(" + newValue + ")\n        " + this._genChangeMarker(r) + "\n        " + this._genUpdateDirectiveOrElement(r) + "\n        " + this._genAddToChanges(r) + "\n        " + oldValue + " = " + newValue + ";\n      }\n    ";
	        var genCode = r.shouldBeChecked() ? "" + read + check : read;
	        if (r.isUsedByOtherRecord()) {
	            return init + " if (" + condition + ") { " + genCode + " } else { " + newValue + " = " + oldValue + "; }";
	        }
	        else {
	            return init + " if (" + condition + ") { " + genCode + " }";
	        }
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genReferenceCheck = function (r) {
	        var _this = this;
	        var oldValue = this._names.getFieldName(r.selfIndex);
	        var newValue = this._names.getLocalName(r.selfIndex);
	        var read = "\n      " + this._logic.genPropertyBindingEvalValue(r) + "\n    ";
	        var check = "\n      if (" + this.changeDetectionUtilVarName + ".looseNotIdentical(" + oldValue + ", " + newValue + ")) {\n        " + this._genChangeMarker(r) + "\n        " + this._genUpdateDirectiveOrElement(r) + "\n        " + this._genAddToChanges(r) + "\n        " + oldValue + " = " + newValue + ";\n      }\n    ";
	        var genCode = r.shouldBeChecked() ? "" + read + check : read;
	        if (r.isPureFunction()) {
	            var condition = r.args.map(function (a) { return _this._names.getChangeName(a); }).join(" || ");
	            if (r.isUsedByOtherRecord()) {
	                return "if (" + condition + ") { " + genCode + " } else { " + newValue + " = " + oldValue + "; }";
	            }
	            else {
	                return "if (" + condition + ") { " + genCode + " }";
	            }
	        }
	        else {
	            return genCode;
	        }
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genChangeMarker = function (r) {
	        return r.argumentToPureFunction ? this._names.getChangeName(r.selfIndex) + " = true" : "";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genUpdateDirectiveOrElement = function (r) {
	        if (!r.lastInBinding)
	            return "";
	        var newValue = this._names.getLocalName(r.selfIndex);
	        var oldValue = this._names.getFieldName(r.selfIndex);
	        var notifyDebug = this.genConfig.logBindingUpdate ? "this.logBindingUpdate(" + newValue + ");" : "";
	        var br = r.bindingRecord;
	        if (br.target.isDirective()) {
	            var directiveProperty = this._names.getDirectiveName(br.directiveRecord.directiveIndex) + "." + br.target.name;
	            return "\n        " + this._genThrowOnChangeCheck(oldValue, newValue) + "\n        " + directiveProperty + " = " + newValue + ";\n        " + notifyDebug + "\n        " + IS_CHANGED_LOCAL + " = true;\n      ";
	        }
	        else {
	            return "\n        " + this._genThrowOnChangeCheck(oldValue, newValue) + "\n        this.notifyDispatcher(" + newValue + ");\n        " + notifyDebug + "\n      ";
	        }
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genThrowOnChangeCheck = function (oldValue, newValue) {
	        if (lang_1.assertionsEnabled()) {
	            return "\n        if(throwOnChange) {\n          this.throwOnChangeError(" + oldValue + ", " + newValue + ");\n        }\n        ";
	        }
	        else {
	            return '';
	        }
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genAddToChanges = function (r) {
	        var newValue = this._names.getLocalName(r.selfIndex);
	        var oldValue = this._names.getFieldName(r.selfIndex);
	        if (!r.bindingRecord.callOnChanges())
	            return "";
	        return CHANGES_LOCAL + " = this.addChange(" + CHANGES_LOCAL + ", " + oldValue + ", " + newValue + ");";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._maybeFirstInBinding = function (r) {
	        var prev = change_detection_util_1.ChangeDetectionUtil.protoByIndex(this.records, r.selfIndex - 1);
	        var firstInBinding = lang_1.isBlank(prev) || prev.bindingRecord !== r.bindingRecord;
	        return firstInBinding && !r.bindingRecord.isDirectiveLifecycle() ?
	            this._names.getPropertyBindingIndex() + " = " + r.propertyBindingIndex + ";" :
	            '';
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._maybeGenLastInDirective = function (r) {
	        if (!r.lastInDirective)
	            return "";
	        return "\n      " + CHANGES_LOCAL + " = null;\n      " + this._genNotifyOnPushDetectors(r) + "\n      " + IS_CHANGED_LOCAL + " = false;\n    ";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genOnCheck = function (r) {
	        var br = r.bindingRecord;
	        return "if (!throwOnChange) " + this._names.getDirectiveName(br.directiveRecord.directiveIndex) + ".doCheck();";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genOnInit = function (r) {
	        var br = r.bindingRecord;
	        return "if (!throwOnChange && " + this._names.getStateName() + " === " + this.changeDetectorStateVarName + ".NeverChecked) " + this._names.getDirectiveName(br.directiveRecord.directiveIndex) + ".onInit();";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genOnChange = function (r) {
	        var br = r.bindingRecord;
	        return "if (!throwOnChange && " + CHANGES_LOCAL + ") " + this._names.getDirectiveName(br.directiveRecord.directiveIndex) + ".onChanges(" + CHANGES_LOCAL + ");";
	    };
	    /** @internal */
	    ChangeDetectorJITGenerator.prototype._genNotifyOnPushDetectors = function (r) {
	        var br = r.bindingRecord;
	        if (!r.lastInDirective || br.isDefaultChangeDetection())
	            return "";
	        var retVal = "\n      if(" + IS_CHANGED_LOCAL + ") {\n        " + this._names.getDetectorName(br.directiveRecord.directiveIndex) + ".markAsCheckOnce();\n      }\n    ";
	        return retVal;
	    };
	    return ChangeDetectorJITGenerator;
	})();
	exports.ChangeDetectorJITGenerator = ChangeDetectorJITGenerator;
	//# sourceMappingURL=change_detection_jit_generator.js.map

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var collection_1 = __webpack_require__(202);
	// The names of these fields must be kept in sync with abstract_change_detector.ts or change
	// detection will fail.
	var _STATE_ACCESSOR = "state";
	var _CONTEXT_ACCESSOR = "context";
	var _PROP_BINDING_INDEX = "propertyBindingIndex";
	var _DIRECTIVES_ACCESSOR = "directiveIndices";
	var _DISPATCHER_ACCESSOR = "dispatcher";
	var _LOCALS_ACCESSOR = "locals";
	var _MODE_ACCESSOR = "mode";
	var _PIPES_ACCESSOR = "pipes";
	var _PROTOS_ACCESSOR = "protos";
	exports.CONTEXT_ACCESSOR = "context";
	// `context` is always first.
	exports.CONTEXT_INDEX = 0;
	var _FIELD_PREFIX = 'this.';
	var _whiteSpaceRegExp = /\W/g;
	/**
	 * Returns `s` with all non-identifier characters removed.
	 */
	function sanitizeName(s) {
	    return lang_1.StringWrapper.replaceAll(s, _whiteSpaceRegExp, '');
	}
	exports.sanitizeName = sanitizeName;
	/**
	 * Class responsible for providing field and local variable names for change detector classes.
	 * Also provides some convenience functions, for example, declaring variables, destroying pipes,
	 * and dehydrating the detector.
	 */
	var CodegenNameUtil = (function () {
	    function CodegenNameUtil(_records, _eventBindings, _directiveRecords, _utilName) {
	        this._records = _records;
	        this._eventBindings = _eventBindings;
	        this._directiveRecords = _directiveRecords;
	        this._utilName = _utilName;
	        /** @internal */
	        this._sanitizedEventNames = new collection_1.Map();
	        this._sanitizedNames = collection_1.ListWrapper.createFixedSize(this._records.length + 1);
	        this._sanitizedNames[exports.CONTEXT_INDEX] = exports.CONTEXT_ACCESSOR;
	        for (var i = 0, iLen = this._records.length; i < iLen; ++i) {
	            this._sanitizedNames[i + 1] = sanitizeName("" + this._records[i].name + i);
	        }
	        for (var ebIndex = 0; ebIndex < _eventBindings.length; ++ebIndex) {
	            var eb = _eventBindings[ebIndex];
	            var names = [exports.CONTEXT_ACCESSOR];
	            for (var i = 0, iLen = eb.records.length; i < iLen; ++i) {
	                names.push(sanitizeName("" + eb.records[i].name + i + "_" + ebIndex));
	            }
	            this._sanitizedEventNames.set(eb, names);
	        }
	    }
	    /** @internal */
	    CodegenNameUtil.prototype._addFieldPrefix = function (name) { return "" + _FIELD_PREFIX + name; };
	    CodegenNameUtil.prototype.getDispatcherName = function () { return this._addFieldPrefix(_DISPATCHER_ACCESSOR); };
	    CodegenNameUtil.prototype.getPipesAccessorName = function () { return this._addFieldPrefix(_PIPES_ACCESSOR); };
	    CodegenNameUtil.prototype.getProtosName = function () { return this._addFieldPrefix(_PROTOS_ACCESSOR); };
	    CodegenNameUtil.prototype.getDirectivesAccessorName = function () { return this._addFieldPrefix(_DIRECTIVES_ACCESSOR); };
	    CodegenNameUtil.prototype.getLocalsAccessorName = function () { return this._addFieldPrefix(_LOCALS_ACCESSOR); };
	    CodegenNameUtil.prototype.getStateName = function () { return this._addFieldPrefix(_STATE_ACCESSOR); };
	    CodegenNameUtil.prototype.getModeName = function () { return this._addFieldPrefix(_MODE_ACCESSOR); };
	    CodegenNameUtil.prototype.getPropertyBindingIndex = function () { return this._addFieldPrefix(_PROP_BINDING_INDEX); };
	    CodegenNameUtil.prototype.getLocalName = function (idx) { return "l_" + this._sanitizedNames[idx]; };
	    CodegenNameUtil.prototype.getEventLocalName = function (eb, idx) {
	        return "l_" + this._sanitizedEventNames.get(eb)[idx];
	    };
	    CodegenNameUtil.prototype.getChangeName = function (idx) { return "c_" + this._sanitizedNames[idx]; };
	    /**
	     * Generate a statement initializing local variables used when detecting changes.
	     */
	    CodegenNameUtil.prototype.genInitLocals = function () {
	        var declarations = [];
	        var assignments = [];
	        for (var i = 0, iLen = this.getFieldCount(); i < iLen; ++i) {
	            if (i == exports.CONTEXT_INDEX) {
	                declarations.push(this.getLocalName(i) + " = " + this.getFieldName(i));
	            }
	            else {
	                var rec = this._records[i - 1];
	                if (rec.argumentToPureFunction) {
	                    var changeName = this.getChangeName(i);
	                    declarations.push(this.getLocalName(i) + "," + changeName);
	                    assignments.push(changeName);
	                }
	                else {
	                    declarations.push("" + this.getLocalName(i));
	                }
	            }
	        }
	        var assignmentsCode = collection_1.ListWrapper.isEmpty(assignments) ? '' : assignments.join('=') + " = false;";
	        return "var " + declarations.join(',') + ";" + assignmentsCode;
	    };
	    /**
	     * Generate a statement initializing local variables for event handlers.
	     */
	    CodegenNameUtil.prototype.genInitEventLocals = function () {
	        var _this = this;
	        var res = [(this.getLocalName(exports.CONTEXT_INDEX) + " = " + this.getFieldName(exports.CONTEXT_INDEX))];
	        this._sanitizedEventNames.forEach(function (names, eb) {
	            for (var i = 0; i < names.length; ++i) {
	                if (i !== exports.CONTEXT_INDEX) {
	                    res.push("" + _this.getEventLocalName(eb, i));
	                }
	            }
	        });
	        return res.length > 1 ? "var " + res.join(',') + ";" : '';
	    };
	    CodegenNameUtil.prototype.getPreventDefaultAccesor = function () { return "preventDefault"; };
	    CodegenNameUtil.prototype.getFieldCount = function () { return this._sanitizedNames.length; };
	    CodegenNameUtil.prototype.getFieldName = function (idx) { return this._addFieldPrefix(this._sanitizedNames[idx]); };
	    CodegenNameUtil.prototype.getAllFieldNames = function () {
	        var fieldList = [];
	        for (var k = 0, kLen = this.getFieldCount(); k < kLen; ++k) {
	            if (k === 0 || this._records[k - 1].shouldBeChecked()) {
	                fieldList.push(this.getFieldName(k));
	            }
	        }
	        for (var i = 0, iLen = this._records.length; i < iLen; ++i) {
	            var rec = this._records[i];
	            if (rec.isPipeRecord()) {
	                fieldList.push(this.getPipeName(rec.selfIndex));
	            }
	        }
	        for (var j = 0, jLen = this._directiveRecords.length; j < jLen; ++j) {
	            var dRec = this._directiveRecords[j];
	            fieldList.push(this.getDirectiveName(dRec.directiveIndex));
	            if (!dRec.isDefaultChangeDetection()) {
	                fieldList.push(this.getDetectorName(dRec.directiveIndex));
	            }
	        }
	        return fieldList;
	    };
	    /**
	     * Generates statements which clear all fields so that the change detector is dehydrated.
	     */
	    CodegenNameUtil.prototype.genDehydrateFields = function () {
	        var fields = this.getAllFieldNames();
	        collection_1.ListWrapper.removeAt(fields, exports.CONTEXT_INDEX);
	        if (collection_1.ListWrapper.isEmpty(fields))
	            return '';
	        // At least one assignment.
	        fields.push(this._utilName + ".uninitialized;");
	        return fields.join(' = ');
	    };
	    /**
	     * Generates statements destroying all pipe variables.
	     */
	    CodegenNameUtil.prototype.genPipeOnDestroy = function () {
	        var _this = this;
	        return this._records.filter(function (r) { return r.isPipeRecord(); })
	            .map(function (r) { return (_this._utilName + ".callPipeOnDestroy(" + _this.getPipeName(r.selfIndex) + ");"); })
	            .join('\n');
	    };
	    CodegenNameUtil.prototype.getPipeName = function (idx) {
	        return this._addFieldPrefix(this._sanitizedNames[idx] + "_pipe");
	    };
	    CodegenNameUtil.prototype.getDirectiveName = function (d) {
	        return this._addFieldPrefix("directive_" + d.name);
	    };
	    CodegenNameUtil.prototype.getDetectorName = function (d) { return this._addFieldPrefix("detector_" + d.name); };
	    return CodegenNameUtil;
	})();
	exports.CodegenNameUtil = CodegenNameUtil;
	//# sourceMappingURL=codegen_name_util.js.map

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var codegen_facade_1 = __webpack_require__(245);
	var proto_record_1 = __webpack_require__(238);
	var constants_1 = __webpack_require__(226);
	var exceptions_1 = __webpack_require__(204);
	/**
	 * Class responsible for providing change detection logic for change detector classes.
	 */
	var CodegenLogicUtil = (function () {
	    function CodegenLogicUtil(_names, _utilName, _changeDetectorStateName, _changeDetection) {
	        this._names = _names;
	        this._utilName = _utilName;
	        this._changeDetectorStateName = _changeDetectorStateName;
	        this._changeDetection = _changeDetection;
	    }
	    /**
	     * Generates a statement which updates the local variable representing `protoRec` with the current
	     * value of the record. Used by property bindings.
	     */
	    CodegenLogicUtil.prototype.genPropertyBindingEvalValue = function (protoRec) {
	        var _this = this;
	        return this._genEvalValue(protoRec, function (idx) { return _this._names.getLocalName(idx); }, this._names.getLocalsAccessorName());
	    };
	    /**
	     * Generates a statement which updates the local variable representing `protoRec` with the current
	     * value of the record. Used by event bindings.
	     */
	    CodegenLogicUtil.prototype.genEventBindingEvalValue = function (eventRecord, protoRec) {
	        var _this = this;
	        return this._genEvalValue(protoRec, function (idx) { return _this._names.getEventLocalName(eventRecord, idx); }, "locals");
	    };
	    CodegenLogicUtil.prototype._genEvalValue = function (protoRec, getLocalName, localsAccessor) {
	        var context = (protoRec.contextIndex == -1) ?
	            this._names.getDirectiveName(protoRec.directiveIndex) :
	            getLocalName(protoRec.contextIndex);
	        var argString = protoRec.args.map(function (arg) { return getLocalName(arg); }).join(", ");
	        var rhs;
	        switch (protoRec.mode) {
	            case proto_record_1.RecordType.Self:
	                rhs = context;
	                break;
	            case proto_record_1.RecordType.Const:
	                rhs = codegen_facade_1.codify(protoRec.funcOrValue);
	                break;
	            case proto_record_1.RecordType.PropertyRead:
	                rhs = this._observe(context + "." + protoRec.name, protoRec);
	                break;
	            case proto_record_1.RecordType.SafeProperty:
	                var read = this._observe(context + "." + protoRec.name, protoRec);
	                rhs =
	                    this._utilName + ".isValueBlank(" + context + ") ? null : " + this._observe(read, protoRec);
	                break;
	            case proto_record_1.RecordType.PropertyWrite:
	                rhs = context + "." + protoRec.name + " = " + getLocalName(protoRec.args[0]);
	                break;
	            case proto_record_1.RecordType.Local:
	                rhs = this._observe(localsAccessor + ".get(" + codegen_facade_1.rawString(protoRec.name) + ")", protoRec);
	                break;
	            case proto_record_1.RecordType.InvokeMethod:
	                rhs = this._observe(context + "." + protoRec.name + "(" + argString + ")", protoRec);
	                break;
	            case proto_record_1.RecordType.SafeMethodInvoke:
	                var invoke = context + "." + protoRec.name + "(" + argString + ")";
	                rhs =
	                    this._utilName + ".isValueBlank(" + context + ") ? null : " + this._observe(invoke, protoRec);
	                break;
	            case proto_record_1.RecordType.InvokeClosure:
	                rhs = context + "(" + argString + ")";
	                break;
	            case proto_record_1.RecordType.PrimitiveOp:
	                rhs = this._utilName + "." + protoRec.name + "(" + argString + ")";
	                break;
	            case proto_record_1.RecordType.CollectionLiteral:
	                rhs = this._utilName + "." + protoRec.name + "(" + argString + ")";
	                break;
	            case proto_record_1.RecordType.Interpolate:
	                rhs = this._genInterpolation(protoRec);
	                break;
	            case proto_record_1.RecordType.KeyedRead:
	                rhs = this._observe(context + "[" + getLocalName(protoRec.args[0]) + "]", protoRec);
	                break;
	            case proto_record_1.RecordType.KeyedWrite:
	                rhs = context + "[" + getLocalName(protoRec.args[0]) + "] = " + getLocalName(protoRec.args[1]);
	                break;
	            case proto_record_1.RecordType.Chain:
	                rhs = 'null';
	                break;
	            default:
	                throw new exceptions_1.BaseException("Unknown operation " + protoRec.mode);
	        }
	        return getLocalName(protoRec.selfIndex) + " = " + rhs + ";";
	    };
	    /** @internal */
	    CodegenLogicUtil.prototype._observe = function (exp, rec) {
	        // This is an experimental feature. Works only in Dart.
	        if (this._changeDetection === constants_1.ChangeDetectionStrategy.OnPushObserve) {
	            return "this.observeValue(" + exp + ", " + rec.selfIndex + ")";
	        }
	        else {
	            return exp;
	        }
	    };
	    CodegenLogicUtil.prototype.genPropertyBindingTargets = function (propertyBindingTargets, genDebugInfo) {
	        var _this = this;
	        var bs = propertyBindingTargets.map(function (b) {
	            if (lang_1.isBlank(b))
	                return "null";
	            var debug = genDebugInfo ? codegen_facade_1.codify(b.debug) : "null";
	            return _this._utilName + ".bindingTarget(" + codegen_facade_1.codify(b.mode) + ", " + b.elementIndex + ", " + codegen_facade_1.codify(b.name) + ", " + codegen_facade_1.codify(b.unit) + ", " + debug + ")";
	        });
	        return "[" + bs.join(", ") + "]";
	    };
	    CodegenLogicUtil.prototype.genDirectiveIndices = function (directiveRecords) {
	        var _this = this;
	        var bs = directiveRecords.map(function (b) {
	            return (_this._utilName + ".directiveIndex(" + b.directiveIndex.elementIndex + ", " + b.directiveIndex.directiveIndex + ")");
	        });
	        return "[" + bs.join(", ") + "]";
	    };
	    /** @internal */
	    CodegenLogicUtil.prototype._genInterpolation = function (protoRec) {
	        var iVals = [];
	        for (var i = 0; i < protoRec.args.length; ++i) {
	            iVals.push(codegen_facade_1.codify(protoRec.fixedArgs[i]));
	            iVals.push(this._utilName + ".s(" + this._names.getLocalName(protoRec.args[i]) + ")");
	        }
	        iVals.push(codegen_facade_1.codify(protoRec.fixedArgs[protoRec.args.length]));
	        return codegen_facade_1.combineGeneratedStrings(iVals);
	    };
	    CodegenLogicUtil.prototype.genHydrateDirectives = function (directiveRecords) {
	        var res = [];
	        for (var i = 0; i < directiveRecords.length; ++i) {
	            var r = directiveRecords[i];
	            res.push(this._names.getDirectiveName(r.directiveIndex) + " = " + this._genReadDirective(i) + ";");
	        }
	        return res.join("\n");
	    };
	    CodegenLogicUtil.prototype._genReadDirective = function (index) {
	        // This is an experimental feature. Works only in Dart.
	        if (this._changeDetection === constants_1.ChangeDetectionStrategy.OnPushObserve) {
	            return "this.observeDirective(this.getDirectiveFor(directives, " + index + "), " + index + ")";
	        }
	        else {
	            return "this.getDirectiveFor(directives, " + index + ")";
	        }
	    };
	    CodegenLogicUtil.prototype.genHydrateDetectors = function (directiveRecords) {
	        var res = [];
	        for (var i = 0; i < directiveRecords.length; ++i) {
	            var r = directiveRecords[i];
	            if (!r.isDefaultChangeDetection()) {
	                res.push(this._names.getDetectorName(r.directiveIndex) + " = this.getDetectorFor(directives, " + i + ");");
	            }
	        }
	        return res.join("\n");
	    };
	    CodegenLogicUtil.prototype.genContentLifecycleCallbacks = function (directiveRecords) {
	        var res = [];
	        var eq = lang_1.IS_DART ? '==' : '===';
	        // NOTE(kegluneq): Order is important!
	        for (var i = directiveRecords.length - 1; i >= 0; --i) {
	            var dir = directiveRecords[i];
	            if (dir.callAfterContentInit) {
	                res.push("if(" + this._names.getStateName() + " " + eq + " " + this._changeDetectorStateName + ".NeverChecked) " + this._names.getDirectiveName(dir.directiveIndex) + ".afterContentInit();");
	            }
	            if (dir.callAfterContentChecked) {
	                res.push(this._names.getDirectiveName(dir.directiveIndex) + ".afterContentChecked();");
	            }
	        }
	        return res;
	    };
	    CodegenLogicUtil.prototype.genViewLifecycleCallbacks = function (directiveRecords) {
	        var res = [];
	        var eq = lang_1.IS_DART ? '==' : '===';
	        // NOTE(kegluneq): Order is important!
	        for (var i = directiveRecords.length - 1; i >= 0; --i) {
	            var dir = directiveRecords[i];
	            if (dir.callAfterViewInit) {
	                res.push("if(" + this._names.getStateName() + " " + eq + " " + this._changeDetectorStateName + ".NeverChecked) " + this._names.getDirectiveName(dir.directiveIndex) + ".afterViewInit();");
	            }
	            if (dir.callAfterViewChecked) {
	                res.push(this._names.getDirectiveName(dir.directiveIndex) + ".afterViewChecked();");
	            }
	        }
	        return res;
	    };
	    return CodegenLogicUtil;
	})();
	exports.CodegenLogicUtil = CodegenLogicUtil;
	//# sourceMappingURL=codegen_logic_util.js.map

/***/ },
/* 245 */
/***/ function(module, exports) {

	'use strict';/**
	 * Converts `funcOrValue` to a string which can be used in generated code.
	 */
	function codify(obj) {
	    return JSON.stringify(obj);
	}
	exports.codify = codify;
	function rawString(str) {
	    return "'" + str + "'";
	}
	exports.rawString = rawString;
	/**
	 * Combine the strings of generated code into a single interpolated string.
	 * Each element of `vals` is expected to be a string literal or a codegen'd
	 * call to a method returning a string.
	 */
	function combineGeneratedStrings(vals) {
	    return vals.join(' + ');
	}
	exports.combineGeneratedStrings = combineGeneratedStrings;
	//# sourceMappingURL=codegen_facade.js.map

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(49);
	/**
	 * Defines template and style encapsulation options available for Component's {@link View}.
	 *
	 * See {@link ViewMetadata#encapsulation}.
	 */
	(function (ViewEncapsulation) {
	    /**
	     * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host
	     * Element and pre-processing the style rules provided via
	     * {@link ViewMetadata#styles} or {@link ViewMetadata#stylesUrls}, and adding the new Host Element
	     * attribute to all selectors.
	     *
	     * This is the default option.
	     */
	    ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
	    /**
	     * Use the native encapsulation mechanism of the renderer.
	     *
	     * For the DOM this means using [Shadow DOM](https://w3c.github.io/webcomponents/spec/shadow/) and
	     * creating a ShadowRoot for Component's Host Element.
	     */
	    ViewEncapsulation[ViewEncapsulation["Native"] = 1] = "Native";
	    /**
	     * Don't provide any template or style encapsulation.
	     */
	    ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
	})(exports.ViewEncapsulation || (exports.ViewEncapsulation = {}));
	var ViewEncapsulation = exports.ViewEncapsulation;
	exports.VIEW_ENCAPSULATION_VALUES = [ViewEncapsulation.Emulated, ViewEncapsulation.Native, ViewEncapsulation.None];
	/**
	 * Metadata properties available for configuring Views.
	 *
	 * Each Angular component requires a single `@Component` and at least one `@View` annotation. The
	 * `@View` annotation specifies the HTML template to use, and lists the directives that are active
	 * within the template.
	 *
	 * When a component is instantiated, the template is loaded into the component's shadow root, and
	 * the expressions and statements in the template are evaluated against the component.
	 *
	 * For details on the `@Component` annotation, see {@link ComponentMetadata}.
	 *
	 * ### Example
	 *
	 * ```
	 * @Component({
	 *   selector: 'greet',
	 *   template: 'Hello {{name}}!',
	 *   directives: [GreetUser, Bold]
	 * })
	 * class Greet {
	 *   name: string;
	 *
	 *   constructor() {
	 *     this.name = 'World';
	 *   }
	 * }
	 * ```
	 */
	var ViewMetadata = (function () {
	    function ViewMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, templateUrl = _b.templateUrl, template = _b.template, directives = _b.directives, pipes = _b.pipes, encapsulation = _b.encapsulation, styles = _b.styles, styleUrls = _b.styleUrls;
	        this.templateUrl = templateUrl;
	        this.template = template;
	        this.styleUrls = styleUrls;
	        this.styles = styles;
	        this.directives = directives;
	        this.pipes = pipes;
	        this.encapsulation = encapsulation;
	    }
	    ViewMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], ViewMetadata);
	    return ViewMetadata;
	})();
	exports.ViewMetadata = ViewMetadata;
	//# sourceMappingURL=view.js.map

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var exceptions_1 = __webpack_require__(204);
	var InvalidPipeArgumentException = (function (_super) {
	    __extends(InvalidPipeArgumentException, _super);
	    function InvalidPipeArgumentException(type, value) {
	        _super.call(this, "Invalid argument '" + value + "' for pipe '" + type + "'");
	    }
	    return InvalidPipeArgumentException;
	})(exceptions_1.BaseException);
	exports.InvalidPipeArgumentException = InvalidPipeArgumentException;
	//# sourceMappingURL=invalid_pipe_argument_exception.js.map

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(49);
	var metadata_1 = __webpack_require__(194);
	var di_1 = __webpack_require__(196);
	var invalid_pipe_argument_exception_1 = __webpack_require__(247);
	/**
	 * Implements uppercase transforms to text.
	 *
	 * ### Example
	 *
	 * In this example we transform the user text uppercase.
	 *
	 *  ```
	 * @Component({
	 *   selector: "username-cmp",
	 *   template: "Username: {{ user | uppercase }}"
	 * })
	 * class Username {
	 *   user:string;
	 * }
	 *
	 * ```
	 */
	var UpperCasePipe = (function () {
	    function UpperCasePipe() {
	    }
	    UpperCasePipe.prototype.transform = function (value, args) {
	        if (args === void 0) { args = null; }
	        if (lang_1.isBlank(value))
	            return value;
	        if (!lang_1.isString(value)) {
	            throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(UpperCasePipe, value);
	        }
	        return value.toUpperCase();
	    };
	    UpperCasePipe = __decorate([
	        lang_1.CONST(),
	        metadata_1.Pipe({ name: 'uppercase' }),
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], UpperCasePipe);
	    return UpperCasePipe;
	})();
	exports.UpperCasePipe = UpperCasePipe;
	//# sourceMappingURL=uppercase_pipe.js.map

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(49);
	var di_1 = __webpack_require__(196);
	var metadata_1 = __webpack_require__(194);
	var invalid_pipe_argument_exception_1 = __webpack_require__(247);
	/**
	 * Implements lowercase transforms to text.
	 *
	 * ### Example
	 *
	 * In this example we transform the user text lowercase.
	 *
	 *  ```
	 * @Component({
	 *   selector: "username-cmp",
	 *   template: "Username: {{ user | lowercase }}"
	 * })
	 * class Username {
	 *   user:string;
	 * }
	 *
	 * ```
	 */
	var LowerCasePipe = (function () {
	    function LowerCasePipe() {
	    }
	    LowerCasePipe.prototype.transform = function (value, args) {
	        if (args === void 0) { args = null; }
	        if (lang_1.isBlank(value))
	            return value;
	        if (!lang_1.isString(value)) {
	            throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(LowerCasePipe, value);
	        }
	        return value.toLowerCase();
	    };
	    LowerCasePipe = __decorate([
	        lang_1.CONST(),
	        metadata_1.Pipe({ name: 'lowercase' }),
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], LowerCasePipe);
	    return LowerCasePipe;
	})();
	exports.LowerCasePipe = LowerCasePipe;
	//# sourceMappingURL=lowercase_pipe.js.map

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(49);
	var di_1 = __webpack_require__(196);
	var metadata_1 = __webpack_require__(194);
	/**
	 * Implements json transforms to any object.
	 *
	 * ### Example
	 *
	 * In this example we transform the user object to json.
	 *
	 *  ```
	 * @Component({
	 *   selector: "user-cmp",
	 *   template: "User: {{ user | json }}"
	 * })
	 * class Username {
	 *  user:Object
	 *  constructor() {
	 *    this.user = { name: "PatrickJS" };
	 *  }
	 * }
	 *
	 * ```
	 */
	var JsonPipe = (function () {
	    function JsonPipe() {
	    }
	    JsonPipe.prototype.transform = function (value, args) {
	        if (args === void 0) { args = null; }
	        return lang_1.Json.stringify(value);
	    };
	    JsonPipe = __decorate([
	        lang_1.CONST(),
	        metadata_1.Pipe({ name: 'json', pure: false }),
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], JsonPipe);
	    return JsonPipe;
	})();
	exports.JsonPipe = JsonPipe;
	//# sourceMappingURL=json_pipe.js.map

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var collection_1 = __webpack_require__(202);
	var di_1 = __webpack_require__(196);
	var invalid_pipe_argument_exception_1 = __webpack_require__(247);
	var metadata_1 = __webpack_require__(194);
	/**
	 * Creates a new List or String containing only a subset (slice) of the
	 * elements.
	 *
	 * The starting index of the subset to return is specified by the `start` parameter.
	 *
	 * The ending index of the subset to return is specified by the optional `end` parameter.
	 *
	 *##Usage
	 *
	 *     expression | slice:start[:end]
	 *
	 * All behavior is based on the expected behavior of the JavaScript API
	 * Array.prototype.slice() and String.prototype.slice()
	 *
	 * Where the input expression is a [List] or [String], and `start` is:
	 *
	 * - **a positive integer**: return the item at _start_ index and all items after
	 * in the list or string expression.
	 * - **a negative integer**: return the item at _start_ index from the end and all items after
	 * in the list or string expression.
	 * - **`|start|` greater than the size of the expression**: return an empty list or string.
	 * - **`|start|` negative greater than the size of the expression**: return entire list or
	 * string expression.
	 *
	 * and where `end` is:
	 *
	 * - **omitted**: return all items until the end of the input
	 * - **a positive integer**: return all items before _end_ index of the list or string
	 * expression.
	 * - **a negative integer**: return all items before _end_ index from the end of the list
	 * or string expression.
	 *
	 * When operating on a [List], the returned list is always a copy even when all
	 * the elements are being returned.
	 *
	 * ### Examples
	 *
	 * ## List Example
	 *
	 * Assuming `var collection = ['a', 'b', 'c', 'd']`, this `ng-for` directive:
	 *
	 *     <li *ng-for="var i of collection | slice:1:3">{{i}}</li>
	 *
	 * produces the following:
	 *
	 *     <li>b</li>
	 *     <li>c</li>
	 *
	 * ## String Examples
	 *
	 *     {{ 'abcdefghij' | slice:0:4 }}       // output is 'abcd'
	 *     {{ 'abcdefghij' | slice:4:0 }}       // output is ''
	 *     {{ 'abcdefghij' | slice:-4 }}      // output is 'ghij'
	 *     {{ 'abcdefghij' | slice:-4,-2 }}      // output is 'gh'
	 *     {{ 'abcdefghij' | slice: -100 }}    // output is 'abcdefghij'
	 *     {{ 'abcdefghij' | slice: 100 }}    // output is ''
	 */
	var SlicePipe = (function () {
	    function SlicePipe() {
	    }
	    SlicePipe.prototype.transform = function (value, args) {
	        if (args === void 0) { args = null; }
	        if (lang_1.isBlank(args) || args.length == 0) {
	            throw new exceptions_1.BaseException('Slice pipe requires one argument');
	        }
	        if (!this.supports(value)) {
	            throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(SlicePipe, value);
	        }
	        if (lang_1.isBlank(value))
	            return value;
	        var start = args[0];
	        var end = args.length > 1 ? args[1] : null;
	        if (lang_1.isString(value)) {
	            return lang_1.StringWrapper.slice(value, start, end);
	        }
	        return collection_1.ListWrapper.slice(value, start, end);
	    };
	    SlicePipe.prototype.supports = function (obj) { return lang_1.isString(obj) || lang_1.isArray(obj); };
	    SlicePipe = __decorate([
	        metadata_1.Pipe({ name: 'slice', pure: false }),
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], SlicePipe);
	    return SlicePipe;
	})();
	exports.SlicePipe = SlicePipe;
	//# sourceMappingURL=slice_pipe.js.map

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(49);
	var intl_1 = __webpack_require__(253);
	var di_1 = __webpack_require__(196);
	var metadata_1 = __webpack_require__(194);
	var collection_1 = __webpack_require__(202);
	var invalid_pipe_argument_exception_1 = __webpack_require__(247);
	// TODO: move to a global configurable location along with other i18n components.
	var defaultLocale = 'en-US';
	/**
	 * Formats a date value to a string based on the requested format.
	 *
	 * WARNINGS:
	 * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.
	 *   Instead users should treat the date as an immutable object and change the reference when the
	 *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run
	 *   which would be an expensive operation).
	 * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera
	 *   browsers.
	 *
	 * ## Usage
	 *
	 *     expression | date[:format]
	 *
	 * where `expression` is a date object or a number (milliseconds since UTC epoch) and
	 * `format` indicates which date/time components to include:
	 *
	 *  | Component | Symbol | Short Form   | Long Form         | Numeric   | 2-digit   |
	 *  |-----------|:------:|--------------|-------------------|-----------|-----------|
	 *  | era       |   G    | G (AD)       | GGGG (Anno Domini)| -         | -         |
	 *  | year      |   y    | -            | -                 | y (2015)  | yy (15)   |
	 *  | month     |   M    | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |
	 *  | day       |   d    | -            | -                 | d (3)     | dd (03)   |
	 *  | weekday   |   E    | EEE (Sun)    | EEEE (Sunday)     | -         | -         |
	 *  | hour      |   j    | -            | -                 | j (13)    | jj (13)   |
	 *  | hour12    |   h    | -            | -                 | h (1 PM)  | hh (01 PM)|
	 *  | hour24    |   H    | -            | -                 | H (13)    | HH (13)   |
	 *  | minute    |   m    | -            | -                 | m (5)     | mm (05)   |
	 *  | second    |   s    | -            | -                 | s (9)     | ss (09)   |
	 *  | timezone  |   z    | -            | z (Pacific Standard Time)| -  | -         |
	 *  | timezone  |   Z    | Z (GMT-8:00) | -                 | -         | -         |
	 *
	 * In javascript, only the components specified will be respected (not the ordering,
	 * punctuations, ...) and details of the formatting will be dependent on the locale.
	 * On the other hand in Dart version, you can also include quoted text as well as some extra
	 * date/time components such as quarter. For more information see:
	 * https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/intl/intl.DateFormat.
	 *
	 * `format` can also be one of the following predefined formats:
	 *
	 *  - `'medium'`: equivalent to `'yMMMdjms'` (e.g. Sep 3, 2010, 12:05:08 PM for en-US)
	 *  - `'short'`: equivalent to `'yMdjm'` (e.g. 9/3/2010, 12:05 PM for en-US)
	 *  - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. Friday, September 3, 2010 for en-US)
	 *  - `'longDate'`: equivalent to `'yMMMMd'` (e.g. September 3, 2010)
	 *  - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. Sep 3, 2010 for en-US)
	 *  - `'shortDate'`: equivalent to `'yMd'` (e.g. 9/3/2010 for en-US)
	 *  - `'mediumTime'`: equivalent to `'jms'` (e.g. 12:05:08 PM for en-US)
	 *  - `'shortTime'`: equivalent to `'jm'` (e.g. 12:05 PM for en-US)
	 *
	 * Timezone of the formatted text will be the local system timezone of the end-users machine.
	 *
	 * ### Examples
	 *
	 * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)
	 * in the _local_ time and locale is 'en-US':
	 *
	 *     {{ dateObj | date }}               // output is 'Jun 15, 2015'
	 *     {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'
	 *     {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'
	 *     {{ dateObj | date:'mmss' }}        // output is '43:11'
	 */
	var DatePipe = (function () {
	    function DatePipe() {
	    }
	    DatePipe.prototype.transform = function (value, args) {
	        if (lang_1.isBlank(value))
	            return null;
	        if (!this.supports(value)) {
	            throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(DatePipe, value);
	        }
	        var pattern = lang_1.isPresent(args) && args.length > 0 ? args[0] : 'mediumDate';
	        if (lang_1.isNumber(value)) {
	            value = lang_1.DateWrapper.fromMillis(value);
	        }
	        if (collection_1.StringMapWrapper.contains(DatePipe._ALIASES, pattern)) {
	            pattern = collection_1.StringMapWrapper.get(DatePipe._ALIASES, pattern);
	        }
	        return intl_1.DateFormatter.format(value, defaultLocale, pattern);
	    };
	    DatePipe.prototype.supports = function (obj) { return lang_1.isDate(obj) || lang_1.isNumber(obj); };
	    /** @internal */
	    DatePipe._ALIASES = {
	        'medium': 'yMMMdjms',
	        'short': 'yMdjm',
	        'fullDate': 'yMMMMEEEEd',
	        'longDate': 'yMMMMd',
	        'mediumDate': 'yMMMd',
	        'shortDate': 'yMd',
	        'mediumTime': 'jms',
	        'shortTime': 'jm'
	    };
	    DatePipe = __decorate([
	        lang_1.CONST(),
	        metadata_1.Pipe({ name: 'date', pure: true }),
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], DatePipe);
	    return DatePipe;
	})();
	exports.DatePipe = DatePipe;
	//# sourceMappingURL=date_pipe.js.map

/***/ },
/* 253 */
/***/ function(module, exports) {

	'use strict';(function (NumberFormatStyle) {
	    NumberFormatStyle[NumberFormatStyle["Decimal"] = 0] = "Decimal";
	    NumberFormatStyle[NumberFormatStyle["Percent"] = 1] = "Percent";
	    NumberFormatStyle[NumberFormatStyle["Currency"] = 2] = "Currency";
	})(exports.NumberFormatStyle || (exports.NumberFormatStyle = {}));
	var NumberFormatStyle = exports.NumberFormatStyle;
	var NumberFormatter = (function () {
	    function NumberFormatter() {
	    }
	    NumberFormatter.format = function (num, locale, style, _a) {
	        var _b = _a === void 0 ? {} : _a, _c = _b.minimumIntegerDigits, minimumIntegerDigits = _c === void 0 ? 1 : _c, _d = _b.minimumFractionDigits, minimumFractionDigits = _d === void 0 ? 0 : _d, _e = _b.maximumFractionDigits, maximumFractionDigits = _e === void 0 ? 3 : _e, currency = _b.currency, _f = _b.currencyAsSymbol, currencyAsSymbol = _f === void 0 ? false : _f;
	        var intlOptions = {
	            minimumIntegerDigits: minimumIntegerDigits,
	            minimumFractionDigits: minimumFractionDigits,
	            maximumFractionDigits: maximumFractionDigits
	        };
	        intlOptions.style = NumberFormatStyle[style].toLowerCase();
	        if (style == NumberFormatStyle.Currency) {
	            intlOptions.currency = currency;
	            intlOptions.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
	        }
	        return new Intl.NumberFormat(locale, intlOptions).format(num);
	    };
	    return NumberFormatter;
	})();
	exports.NumberFormatter = NumberFormatter;
	function digitCondition(len) {
	    return len == 2 ? '2-digit' : 'numeric';
	}
	function nameCondition(len) {
	    return len < 4 ? 'short' : 'long';
	}
	function extractComponents(pattern) {
	    var ret = {};
	    var i = 0, j;
	    while (i < pattern.length) {
	        j = i;
	        while (j < pattern.length && pattern[j] == pattern[i])
	            j++;
	        var len = j - i;
	        switch (pattern[i]) {
	            case 'G':
	                ret.era = nameCondition(len);
	                break;
	            case 'y':
	                ret.year = digitCondition(len);
	                break;
	            case 'M':
	                if (len >= 3)
	                    ret.month = nameCondition(len);
	                else
	                    ret.month = digitCondition(len);
	                break;
	            case 'd':
	                ret.day = digitCondition(len);
	                break;
	            case 'E':
	                ret.weekday = nameCondition(len);
	                break;
	            case 'j':
	                ret.hour = digitCondition(len);
	                break;
	            case 'h':
	                ret.hour = digitCondition(len);
	                ret.hour12 = true;
	                break;
	            case 'H':
	                ret.hour = digitCondition(len);
	                ret.hour12 = false;
	                break;
	            case 'm':
	                ret.minute = digitCondition(len);
	                break;
	            case 's':
	                ret.second = digitCondition(len);
	                break;
	            case 'z':
	                ret.timeZoneName = 'long';
	                break;
	            case 'Z':
	                ret.timeZoneName = 'short';
	                break;
	        }
	        i = j;
	    }
	    return ret;
	}
	var dateFormatterCache = new Map();
	var DateFormatter = (function () {
	    function DateFormatter() {
	    }
	    DateFormatter.format = function (date, locale, pattern) {
	        var key = locale + pattern;
	        if (dateFormatterCache.has(key)) {
	            return dateFormatterCache.get(key).format(date);
	        }
	        var formatter = new Intl.DateTimeFormat(locale, extractComponents(pattern));
	        dateFormatterCache.set(key, formatter);
	        return formatter.format(date);
	    };
	    return DateFormatter;
	})();
	exports.DateFormatter = DateFormatter;
	//# sourceMappingURL=intl.js.map

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var intl_1 = __webpack_require__(253);
	var di_1 = __webpack_require__(196);
	var metadata_1 = __webpack_require__(194);
	var collection_1 = __webpack_require__(202);
	var invalid_pipe_argument_exception_1 = __webpack_require__(247);
	var defaultLocale = 'en-US';
	var _re = lang_1.RegExpWrapper.create('^(\\d+)?\\.((\\d+)(\\-(\\d+))?)?$');
	var NumberPipe = (function () {
	    function NumberPipe() {
	    }
	    /** @internal */
	    NumberPipe._format = function (value, style, digits, currency, currencyAsSymbol) {
	        if (currency === void 0) { currency = null; }
	        if (currencyAsSymbol === void 0) { currencyAsSymbol = false; }
	        if (lang_1.isBlank(value))
	            return null;
	        if (!lang_1.isNumber(value)) {
	            throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(NumberPipe, value);
	        }
	        var minInt = 1, minFraction = 0, maxFraction = 3;
	        if (lang_1.isPresent(digits)) {
	            var parts = lang_1.RegExpWrapper.firstMatch(_re, digits);
	            if (lang_1.isBlank(parts)) {
	                throw new exceptions_1.BaseException(digits + " is not a valid digit info for number pipes");
	            }
	            if (lang_1.isPresent(parts[1])) {
	                minInt = lang_1.NumberWrapper.parseIntAutoRadix(parts[1]);
	            }
	            if (lang_1.isPresent(parts[3])) {
	                minFraction = lang_1.NumberWrapper.parseIntAutoRadix(parts[3]);
	            }
	            if (lang_1.isPresent(parts[5])) {
	                maxFraction = lang_1.NumberWrapper.parseIntAutoRadix(parts[5]);
	            }
	        }
	        return intl_1.NumberFormatter.format(value, defaultLocale, style, {
	            minimumIntegerDigits: minInt,
	            minimumFractionDigits: minFraction,
	            maximumFractionDigits: maxFraction,
	            currency: currency,
	            currencyAsSymbol: currencyAsSymbol
	        });
	    };
	    NumberPipe = __decorate([
	        lang_1.CONST(),
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NumberPipe);
	    return NumberPipe;
	})();
	exports.NumberPipe = NumberPipe;
	/**
	 * WARNING: this pipe uses the Internationalization API.
	 * Therefore it is only reliable in Chrome and Opera browsers.
	 *
	 * Formats a number as local text. i.e. group sizing and separator and other locale-specific
	 * configurations are based on the active locale.
	 *
	 *##Usage
	 *
	 *     expression | number[:digitInfo]
	 *
	 * where `expression` is a number and `digitInfo` has the following format:
	 *
	 *     {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}
	 *
	 * - minIntegerDigits is the minimum number of integer digits to use. Defaults to 1.
	 * - minFractionDigits is the minimum number of digits after fraction. Defaults to 0.
	 * - maxFractionDigits is the maximum number of digits after fraction. Defaults to 3.
	 *
	 * For more information on the acceptable range for each of these numbers and other
	 * details see your native internationalization library.
	 *
	 * ### Examples
	 *
	 *     {{ 123 | number }}              // output is 123
	 *     {{ 123.1 | number: '.2-3' }}    // output is 123.10
	 *     {{ 1 | number: '2.2' }}         // output is 01.00
	 */
	var DecimalPipe = (function (_super) {
	    __extends(DecimalPipe, _super);
	    function DecimalPipe() {
	        _super.apply(this, arguments);
	    }
	    DecimalPipe.prototype.transform = function (value, args) {
	        var digits = collection_1.ListWrapper.first(args);
	        return NumberPipe._format(value, intl_1.NumberFormatStyle.Decimal, digits);
	    };
	    DecimalPipe = __decorate([
	        lang_1.CONST(),
	        metadata_1.Pipe({ name: 'number' }),
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], DecimalPipe);
	    return DecimalPipe;
	})(NumberPipe);
	exports.DecimalPipe = DecimalPipe;
	/**
	 * WARNING: this pipe uses the Internationalization API.
	 * Therefore it is only reliable in Chrome and Opera browsers.
	 *
	 * Formats a number as local percent.
	 *
	 *##Usage
	 *
	 *     expression | percent[:digitInfo]
	 *
	 * For more information about `digitInfo` see {@link DecimalPipe}
	 */
	var PercentPipe = (function (_super) {
	    __extends(PercentPipe, _super);
	    function PercentPipe() {
	        _super.apply(this, arguments);
	    }
	    PercentPipe.prototype.transform = function (value, args) {
	        var digits = collection_1.ListWrapper.first(args);
	        return NumberPipe._format(value, intl_1.NumberFormatStyle.Percent, digits);
	    };
	    PercentPipe = __decorate([
	        lang_1.CONST(),
	        metadata_1.Pipe({ name: 'percent' }),
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], PercentPipe);
	    return PercentPipe;
	})(NumberPipe);
	exports.PercentPipe = PercentPipe;
	/**
	 * WARNING: this pipe uses the Internationalization API.
	 * Therefore it is only reliable in Chrome and Opera browsers.
	 *
	 * Formats a number as local currency.
	 *
	 *##Usage
	 *
	 *     expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]
	 *
	 * where `currencyCode` is the ISO 4217 currency code, such as "USD" for the US dollar and
	 * "EUR" for the euro. `symbolDisplay` is a boolean indicating whether to use the currency
	 * symbol (e.g. $) or the currency code (e.g. USD) in the output. The default for this value
	 * is `false`.
	 * For more information about `digitInfo` see {@link DecimalPipe}
	 */
	var CurrencyPipe = (function (_super) {
	    __extends(CurrencyPipe, _super);
	    function CurrencyPipe() {
	        _super.apply(this, arguments);
	    }
	    CurrencyPipe.prototype.transform = function (value, args) {
	        var currencyCode = lang_1.isPresent(args) && args.length > 0 ? args[0] : 'USD';
	        var symbolDisplay = lang_1.isPresent(args) && args.length > 1 ? args[1] : false;
	        var digits = lang_1.isPresent(args) && args.length > 2 ? args[2] : null;
	        return NumberPipe._format(value, intl_1.NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
	    };
	    CurrencyPipe = __decorate([
	        lang_1.CONST(),
	        metadata_1.Pipe({ name: 'currency' }),
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], CurrencyPipe);
	    return CurrencyPipe;
	})(NumberPipe);
	exports.CurrencyPipe = CurrencyPipe;
	//# sourceMappingURL=number_pipe.js.map

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	/**
	 * @module
	 * @description
	 * Common directives shipped with Angular.
	 */
	var ng_class_1 = __webpack_require__(256);
	exports.NgClass = ng_class_1.NgClass;
	var ng_for_1 = __webpack_require__(304);
	exports.NgFor = ng_for_1.NgFor;
	var ng_if_1 = __webpack_require__(305);
	exports.NgIf = ng_if_1.NgIf;
	var ng_style_1 = __webpack_require__(306);
	exports.NgStyle = ng_style_1.NgStyle;
	var ng_switch_1 = __webpack_require__(307);
	exports.NgSwitch = ng_switch_1.NgSwitch;
	exports.NgSwitchWhen = ng_switch_1.NgSwitchWhen;
	exports.NgSwitchDefault = ng_switch_1.NgSwitchDefault;
	__export(__webpack_require__(308));
	var core_directives_1 = __webpack_require__(309);
	exports.CORE_DIRECTIVES = core_directives_1.CORE_DIRECTIVES;
	//# sourceMappingURL=directives.js.map

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(49);
	var metadata_1 = __webpack_require__(194);
	var linker_1 = __webpack_require__(257);
	var change_detection_1 = __webpack_require__(214);
	var render_1 = __webpack_require__(301);
	var collection_1 = __webpack_require__(202);
	/**
	 * The `NgClass` directive conditionally adds and removes CSS classes on an HTML element based on
	 * an expression's evaluation result.
	 *
	 * The result of an expression evaluation is interpreted differently depending on type of
	 * the expression evaluation result:
	 * - `string` - all the CSS classes listed in a string (space delimited) are added
	 * - `Array` - all the CSS classes (Array elements) are added
	 * - `Object` - each key corresponds to a CSS class name while values are interpreted as expressions
	 * evaluating to `Boolean`. If a given expression evaluates to `true` a corresponding CSS class
	 * is added - otherwise it is removed.
	 *
	 * While the `NgClass` directive can interpret expressions evaluating to `string`, `Array`
	 * or `Object`, the `Object`-based version is the most often used and has an advantage of keeping
	 * all the CSS class names in a template.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/a4YdtmWywhJ33uqfpPPn?p=preview)):
	 *
	 * ```
	 * import {Component, NgClass} from 'angular2/angular2';
	 *
	 * @Component({
	 *   selector: 'toggle-button',
	 *   inputs: ['isDisabled'],
	 *   template: `
	 *      <div class="button" [ng-class]="{active: isOn, disabled: isDisabled}"
	 *          (click)="toggle(!isOn)">
	 *          Click me!
	 *      </div>`,
	 *   styles: [`
	 *     .button {
	 *       width: 120px;
	 *       border: medium solid black;
	 *     }
	 *
	 *     .active {
	 *       background-color: red;
	 *    }
	 *
	 *     .disabled {
	 *       color: gray;
	 *       border: medium solid gray;
	 *     }
	 *   `]
	 *   directives: [NgClass]
	 * })
	 * class ToggleButton {
	 *   isOn = false;
	 *   isDisabled = false;
	 *
	 *   toggle(newState) {
	 *     if (!this.isDisabled) {
	 *       this.isOn = newState;
	 *     }
	 *   }
	 * }
	 * ```
	 */
	var NgClass = (function () {
	    function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
	        this._iterableDiffers = _iterableDiffers;
	        this._keyValueDiffers = _keyValueDiffers;
	        this._ngEl = _ngEl;
	        this._renderer = _renderer;
	        this._initialClasses = [];
	    }
	    Object.defineProperty(NgClass.prototype, "initialClasses", {
	        set: function (v) {
	            this._applyInitialClasses(true);
	            this._initialClasses = lang_1.isPresent(v) && lang_1.isString(v) ? v.split(' ') : [];
	            this._applyInitialClasses(false);
	            this._applyClasses(this._rawClass, false);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgClass.prototype, "rawClass", {
	        set: function (v) {
	            this._cleanupClasses(this._rawClass);
	            if (lang_1.isString(v)) {
	                v = v.split(' ');
	            }
	            this._rawClass = v;
	            if (lang_1.isPresent(v)) {
	                if (collection_1.isListLikeIterable(v)) {
	                    this._differ = this._iterableDiffers.find(v).create(null);
	                    this._mode = 'iterable';
	                }
	                else {
	                    this._differ = this._keyValueDiffers.find(v).create(null);
	                    this._mode = 'keyValue';
	                }
	            }
	            else {
	                this._differ = null;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgClass.prototype.doCheck = function () {
	        if (lang_1.isPresent(this._differ)) {
	            var changes = this._differ.diff(this._rawClass);
	            if (lang_1.isPresent(changes)) {
	                if (this._mode == 'iterable') {
	                    this._applyIterableChanges(changes);
	                }
	                else {
	                    this._applyKeyValueChanges(changes);
	                }
	            }
	        }
	    };
	    NgClass.prototype.onDestroy = function () { this._cleanupClasses(this._rawClass); };
	    NgClass.prototype._cleanupClasses = function (rawClassVal) {
	        this._applyClasses(rawClassVal, true);
	        this._applyInitialClasses(false);
	    };
	    NgClass.prototype._applyKeyValueChanges = function (changes) {
	        var _this = this;
	        changes.forEachAddedItem(function (record) { _this._toggleClass(record.key, record.currentValue); });
	        changes.forEachChangedItem(function (record) { _this._toggleClass(record.key, record.currentValue); });
	        changes.forEachRemovedItem(function (record) {
	            if (record.previousValue) {
	                _this._toggleClass(record.key, false);
	            }
	        });
	    };
	    NgClass.prototype._applyIterableChanges = function (changes) {
	        var _this = this;
	        changes.forEachAddedItem(function (record) { _this._toggleClass(record.item, true); });
	        changes.forEachRemovedItem(function (record) { _this._toggleClass(record.item, false); });
	    };
	    NgClass.prototype._applyInitialClasses = function (isCleanup) {
	        var _this = this;
	        this._initialClasses.forEach(function (className) { return _this._toggleClass(className, !isCleanup); });
	    };
	    NgClass.prototype._applyClasses = function (rawClassVal, isCleanup) {
	        var _this = this;
	        if (lang_1.isPresent(rawClassVal)) {
	            if (lang_1.isArray(rawClassVal)) {
	                rawClassVal.forEach(function (className) { return _this._toggleClass(className, !isCleanup); });
	            }
	            else if (rawClassVal instanceof Set) {
	                rawClassVal.forEach(function (className) { return _this._toggleClass(className, !isCleanup); });
	            }
	            else {
	                collection_1.StringMapWrapper.forEach(rawClassVal, function (expVal, className) {
	                    if (expVal)
	                        _this._toggleClass(className, !isCleanup);
	                });
	            }
	        }
	    };
	    NgClass.prototype._toggleClass = function (className, enabled) {
	        className = className.trim();
	        if (className.length > 0) {
	            this._renderer.setElementClass(this._ngEl, className, enabled);
	        }
	    };
	    NgClass = __decorate([
	        metadata_1.Directive({ selector: '[ng-class]', inputs: ['rawClass: ng-class', 'initialClasses: class'] }), 
	        __metadata('design:paramtypes', [change_detection_1.IterableDiffers, change_detection_1.KeyValueDiffers, linker_1.ElementRef, render_1.Renderer])
	    ], NgClass);
	    return NgClass;
	})();
	exports.NgClass = NgClass;
	//# sourceMappingURL=ng_class.js.map

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';// Public API for compiler
	var directive_resolver_1 = __webpack_require__(258);
	exports.DirectiveResolver = directive_resolver_1.DirectiveResolver;
	var view_resolver_1 = __webpack_require__(259);
	exports.ViewResolver = view_resolver_1.ViewResolver;
	var compiler_1 = __webpack_require__(260);
	exports.Compiler = compiler_1.Compiler;
	var view_manager_1 = __webpack_require__(271);
	exports.AppViewManager = view_manager_1.AppViewManager;
	var query_list_1 = __webpack_require__(280);
	exports.QueryList = query_list_1.QueryList;
	var dynamic_component_loader_1 = __webpack_require__(303);
	exports.DynamicComponentLoader = dynamic_component_loader_1.DynamicComponentLoader;
	var element_ref_1 = __webpack_require__(273);
	exports.ElementRef = element_ref_1.ElementRef;
	var template_ref_1 = __webpack_require__(274);
	exports.TemplateRef = template_ref_1.TemplateRef;
	var view_ref_1 = __webpack_require__(267);
	exports.ViewRef = view_ref_1.ViewRef;
	exports.ProtoViewRef = view_ref_1.ProtoViewRef;
	var view_container_ref_1 = __webpack_require__(277);
	exports.ViewContainerRef = view_container_ref_1.ViewContainerRef;
	var dynamic_component_loader_2 = __webpack_require__(303);
	exports.ComponentRef = dynamic_component_loader_2.ComponentRef;
	//# sourceMappingURL=linker.js.map

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(196);
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var collection_1 = __webpack_require__(202);
	var metadata_1 = __webpack_require__(194);
	var reflection_1 = __webpack_require__(206);
	function _isDirectiveMetadata(type) {
	    return type instanceof metadata_1.DirectiveMetadata;
	}
	/*
	 * Resolve a `Type` for {@link DirectiveMetadata}.
	 *
	 * This interface can be overridden by the application developer to create custom behavior.
	 *
	 * See {@link Compiler}
	 */
	var DirectiveResolver = (function () {
	    function DirectiveResolver() {
	    }
	    /**
	     * Return {@link DirectiveMetadata} for a given `Type`.
	     */
	    DirectiveResolver.prototype.resolve = function (type) {
	        var typeMetadata = reflection_1.reflector.annotations(di_1.resolveForwardRef(type));
	        if (lang_1.isPresent(typeMetadata)) {
	            var metadata = typeMetadata.find(_isDirectiveMetadata);
	            if (lang_1.isPresent(metadata)) {
	                var propertyMetadata = reflection_1.reflector.propMetadata(type);
	                return this._mergeWithPropertyMetadata(metadata, propertyMetadata);
	            }
	        }
	        throw new exceptions_1.BaseException("No Directive annotation found on " + lang_1.stringify(type));
	    };
	    DirectiveResolver.prototype._mergeWithPropertyMetadata = function (dm, propertyMetadata) {
	        var inputs = [];
	        var outputs = [];
	        var host = {};
	        var queries = {};
	        collection_1.StringMapWrapper.forEach(propertyMetadata, function (metadata, propName) {
	            metadata.forEach(function (a) {
	                if (a instanceof metadata_1.InputMetadata) {
	                    if (lang_1.isPresent(a.bindingPropertyName)) {
	                        inputs.push(propName + ": " + a.bindingPropertyName);
	                    }
	                    else {
	                        inputs.push(propName);
	                    }
	                }
	                if (a instanceof metadata_1.OutputMetadata) {
	                    if (lang_1.isPresent(a.bindingPropertyName)) {
	                        outputs.push(propName + ": " + a.bindingPropertyName);
	                    }
	                    else {
	                        outputs.push(propName);
	                    }
	                }
	                if (a instanceof metadata_1.HostBindingMetadata) {
	                    if (lang_1.isPresent(a.hostPropertyName)) {
	                        host[("[" + a.hostPropertyName + "]")] = propName;
	                    }
	                    else {
	                        host[("[" + propName + "]")] = propName;
	                    }
	                }
	                if (a instanceof metadata_1.HostListenerMetadata) {
	                    var args = lang_1.isPresent(a.args) ? a.args.join(', ') : '';
	                    host[("(" + a.eventName + ")")] = propName + "(" + args + ")";
	                }
	                if (a instanceof metadata_1.ContentChildrenMetadata) {
	                    queries[propName] = a;
	                }
	                if (a instanceof metadata_1.ViewChildrenMetadata) {
	                    queries[propName] = a;
	                }
	                if (a instanceof metadata_1.ContentChildMetadata) {
	                    queries[propName] = a;
	                }
	                if (a instanceof metadata_1.ViewChildMetadata) {
	                    queries[propName] = a;
	                }
	            });
	        });
	        return this._merge(dm, inputs, outputs, host, queries);
	    };
	    DirectiveResolver.prototype._merge = function (dm, inputs, outputs, host, queries) {
	        var mergedInputs = lang_1.isPresent(dm.inputs) ? collection_1.ListWrapper.concat(dm.inputs, inputs) : inputs;
	        var mergedOutputs = lang_1.isPresent(dm.outputs) ? collection_1.ListWrapper.concat(dm.outputs, outputs) : outputs;
	        var mergedHost = lang_1.isPresent(dm.host) ? collection_1.StringMapWrapper.merge(dm.host, host) : host;
	        var mergedQueries = lang_1.isPresent(dm.queries) ? collection_1.StringMapWrapper.merge(dm.queries, queries) : queries;
	        if (dm instanceof metadata_1.ComponentMetadata) {
	            return new metadata_1.ComponentMetadata({
	                selector: dm.selector,
	                inputs: mergedInputs,
	                outputs: mergedOutputs,
	                host: mergedHost,
	                exportAs: dm.exportAs,
	                moduleId: dm.moduleId,
	                queries: mergedQueries,
	                changeDetection: dm.changeDetection,
	                providers: dm.providers,
	                viewProviders: dm.viewProviders
	            });
	        }
	        else {
	            return new metadata_1.DirectiveMetadata({
	                selector: dm.selector,
	                inputs: mergedInputs,
	                outputs: mergedOutputs,
	                host: mergedHost,
	                exportAs: dm.exportAs,
	                moduleId: dm.moduleId,
	                queries: mergedQueries,
	                providers: dm.providers
	            });
	        }
	    };
	    DirectiveResolver = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], DirectiveResolver);
	    return DirectiveResolver;
	})();
	exports.DirectiveResolver = DirectiveResolver;
	//# sourceMappingURL=directive_resolver.js.map

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(196);
	var view_1 = __webpack_require__(246);
	var directives_1 = __webpack_require__(213);
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var collection_1 = __webpack_require__(202);
	var reflection_1 = __webpack_require__(206);
	var ViewResolver = (function () {
	    function ViewResolver() {
	        /** @internal */
	        this._cache = new collection_1.Map();
	    }
	    ViewResolver.prototype.resolve = function (component) {
	        var view = this._cache.get(component);
	        if (lang_1.isBlank(view)) {
	            view = this._resolve(component);
	            this._cache.set(component, view);
	        }
	        return view;
	    };
	    /** @internal */
	    ViewResolver.prototype._resolve = function (component) {
	        var compMeta;
	        var viewMeta;
	        reflection_1.reflector.annotations(component).forEach(function (m) {
	            if (m instanceof view_1.ViewMetadata) {
	                viewMeta = m;
	            }
	            if (m instanceof directives_1.ComponentMetadata) {
	                compMeta = m;
	            }
	        });
	        if (lang_1.isPresent(compMeta)) {
	            if (lang_1.isBlank(compMeta.template) && lang_1.isBlank(compMeta.templateUrl) && lang_1.isBlank(viewMeta)) {
	                throw new exceptions_1.BaseException("Component '" + lang_1.stringify(component) + "' must have either 'template', 'templateUrl', or '@View' set.");
	            }
	            else if (lang_1.isPresent(compMeta.template) && lang_1.isPresent(viewMeta)) {
	                this._throwMixingViewAndComponent("template", component);
	            }
	            else if (lang_1.isPresent(compMeta.templateUrl) && lang_1.isPresent(viewMeta)) {
	                this._throwMixingViewAndComponent("templateUrl", component);
	            }
	            else if (lang_1.isPresent(compMeta.directives) && lang_1.isPresent(viewMeta)) {
	                this._throwMixingViewAndComponent("directives", component);
	            }
	            else if (lang_1.isPresent(compMeta.pipes) && lang_1.isPresent(viewMeta)) {
	                this._throwMixingViewAndComponent("pipes", component);
	            }
	            else if (lang_1.isPresent(compMeta.encapsulation) && lang_1.isPresent(viewMeta)) {
	                this._throwMixingViewAndComponent("encapsulation", component);
	            }
	            else if (lang_1.isPresent(compMeta.styles) && lang_1.isPresent(viewMeta)) {
	                this._throwMixingViewAndComponent("styles", component);
	            }
	            else if (lang_1.isPresent(compMeta.styleUrls) && lang_1.isPresent(viewMeta)) {
	                this._throwMixingViewAndComponent("styleUrls", component);
	            }
	            else if (lang_1.isPresent(viewMeta)) {
	                return viewMeta;
	            }
	            else {
	                return new view_1.ViewMetadata({
	                    templateUrl: compMeta.templateUrl,
	                    template: compMeta.template,
	                    directives: compMeta.directives,
	                    pipes: compMeta.pipes,
	                    encapsulation: compMeta.encapsulation,
	                    styles: compMeta.styles,
	                    styleUrls: compMeta.styleUrls
	                });
	            }
	        }
	        else {
	            if (lang_1.isBlank(viewMeta)) {
	                throw new exceptions_1.BaseException("No View decorator found on component '" + lang_1.stringify(component) + "'");
	            }
	            else {
	                return viewMeta;
	            }
	        }
	        return null;
	    };
	    /** @internal */
	    ViewResolver.prototype._throwMixingViewAndComponent = function (propertyName, component) {
	        throw new exceptions_1.BaseException("Component '" + lang_1.stringify(component) + "' cannot have both '" + propertyName + "' and '@View' set at the same time\"");
	    };
	    ViewResolver = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], ViewResolver);
	    return ViewResolver;
	})();
	exports.ViewResolver = ViewResolver;
	//# sourceMappingURL=view_resolver.js.map

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var proto_view_factory_1 = __webpack_require__(261);
	var di_1 = __webpack_require__(196);
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var async_1 = __webpack_require__(50);
	var reflection_1 = __webpack_require__(206);
	var template_commands_1 = __webpack_require__(284);
	/**
	 * Low-level service for compiling {@link Component}s into {@link ProtoViewRef ProtoViews}s, which
	 * can later be used to create and render a Component instance.
	 *
	 * Most applications should instead use higher-level {@link DynamicComponentLoader} service, which
	 * both compiles and instantiates a Component.
	 */
	var Compiler = (function () {
	    function Compiler() {
	    }
	    return Compiler;
	})();
	exports.Compiler = Compiler;
	function _isCompiledHostTemplate(type) {
	    return type instanceof template_commands_1.CompiledHostTemplate;
	}
	var Compiler_ = (function (_super) {
	    __extends(Compiler_, _super);
	    function Compiler_(_protoViewFactory) {
	        _super.call(this);
	        this._protoViewFactory = _protoViewFactory;
	    }
	    Compiler_.prototype.compileInHost = function (componentType) {
	        var metadatas = reflection_1.reflector.annotations(componentType);
	        var compiledHostTemplate = metadatas.find(_isCompiledHostTemplate);
	        if (lang_1.isBlank(compiledHostTemplate)) {
	            throw new exceptions_1.BaseException("No precompiled template for component " + lang_1.stringify(componentType) + " found");
	        }
	        return async_1.PromiseWrapper.resolve(this._createProtoView(compiledHostTemplate));
	    };
	    Compiler_.prototype._createProtoView = function (compiledHostTemplate) {
	        return this._protoViewFactory.createHost(compiledHostTemplate).ref;
	    };
	    Compiler_.prototype.clearCache = function () { this._protoViewFactory.clearCache(); };
	    Compiler_ = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [proto_view_factory_1.ProtoViewFactory])
	    ], Compiler_);
	    return Compiler_;
	})(Compiler);
	exports.Compiler_ = Compiler_;
	function internalCreateProtoView(compiler, compiledHostTemplate) {
	    return compiler._createProtoView(compiledHostTemplate);
	}
	exports.internalCreateProtoView = internalCreateProtoView;
	//# sourceMappingURL=compiler.js.map

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var lang_1 = __webpack_require__(49);
	var api_1 = __webpack_require__(262);
	var di_1 = __webpack_require__(196);
	var pipe_provider_1 = __webpack_require__(263);
	var pipes_1 = __webpack_require__(264);
	var view_1 = __webpack_require__(266);
	var element_binder_1 = __webpack_require__(269);
	var element_injector_1 = __webpack_require__(270);
	var directive_resolver_1 = __webpack_require__(258);
	var view_resolver_1 = __webpack_require__(259);
	var pipe_resolver_1 = __webpack_require__(282);
	var view_2 = __webpack_require__(246);
	var platform_directives_and_pipes_1 = __webpack_require__(283);
	var template_commands_1 = __webpack_require__(284);
	var render_1 = __webpack_require__(300);
	var application_tokens_1 = __webpack_require__(302);
	var ProtoViewFactory = (function () {
	    function ProtoViewFactory(_renderer, _platformPipes, _directiveResolver, _viewResolver, _pipeResolver, _appId) {
	        this._renderer = _renderer;
	        this._platformPipes = _platformPipes;
	        this._directiveResolver = _directiveResolver;
	        this._viewResolver = _viewResolver;
	        this._pipeResolver = _pipeResolver;
	        this._appId = _appId;
	        this._cache = new Map();
	        this._nextTemplateId = 0;
	    }
	    ProtoViewFactory.prototype.clearCache = function () { this._cache.clear(); };
	    ProtoViewFactory.prototype.createHost = function (compiledHostTemplate) {
	        var compiledTemplate = compiledHostTemplate.template;
	        var result = this._cache.get(compiledTemplate.id);
	        if (lang_1.isBlank(result)) {
	            var emptyMap = {};
	            var shortId = this._appId + "-" + this._nextTemplateId++;
	            this._renderer.registerComponentTemplate(new api_1.RenderComponentTemplate(compiledTemplate.id, shortId, view_2.ViewEncapsulation.None, compiledTemplate.commands, []));
	            result =
	                new view_1.AppProtoView(compiledTemplate.id, compiledTemplate.commands, view_1.ViewType.HOST, true, compiledTemplate.changeDetectorFactory, null, new pipes_1.ProtoPipes(emptyMap));
	            this._cache.set(compiledTemplate.id, result);
	        }
	        return result;
	    };
	    ProtoViewFactory.prototype._createComponent = function (cmd) {
	        var _this = this;
	        var nestedProtoView = this._cache.get(cmd.templateId);
	        if (lang_1.isBlank(nestedProtoView)) {
	            var component = cmd.directives[0];
	            var view = this._viewResolver.resolve(component);
	            var compiledTemplate = cmd.templateGetter();
	            var styles = _flattenStyleArr(compiledTemplate.styles, []);
	            var shortId = this._appId + "-" + this._nextTemplateId++;
	            this._renderer.registerComponentTemplate(new api_1.RenderComponentTemplate(compiledTemplate.id, shortId, cmd.encapsulation, compiledTemplate.commands, styles));
	            var boundPipes = this._flattenPipes(view).map(function (pipe) { return _this._bindPipe(pipe); });
	            nestedProtoView = new view_1.AppProtoView(compiledTemplate.id, compiledTemplate.commands, view_1.ViewType.COMPONENT, true, compiledTemplate.changeDetectorFactory, null, pipes_1.ProtoPipes.fromProviders(boundPipes));
	            // Note: The cache is updated before recursing
	            // to be able to resolve cycles
	            this._cache.set(compiledTemplate.id, nestedProtoView);
	            this._initializeProtoView(nestedProtoView, null);
	        }
	        return nestedProtoView;
	    };
	    ProtoViewFactory.prototype._createEmbeddedTemplate = function (cmd, parent) {
	        var nestedProtoView = new view_1.AppProtoView(parent.templateId, cmd.children, view_1.ViewType.EMBEDDED, cmd.isMerged, cmd.changeDetectorFactory, arrayToMap(cmd.variableNameAndValues, true), new pipes_1.ProtoPipes(parent.pipes.config));
	        if (cmd.isMerged) {
	            this.initializeProtoViewIfNeeded(nestedProtoView);
	        }
	        return nestedProtoView;
	    };
	    ProtoViewFactory.prototype.initializeProtoViewIfNeeded = function (protoView) {
	        if (!protoView.isInitialized()) {
	            var render = this._renderer.createProtoView(protoView.templateId, protoView.templateCmds);
	            this._initializeProtoView(protoView, render);
	        }
	    };
	    ProtoViewFactory.prototype._initializeProtoView = function (protoView, render) {
	        var initializer = new _ProtoViewInitializer(protoView, this._directiveResolver, this);
	        template_commands_1.visitAllCommands(initializer, protoView.templateCmds);
	        var mergeInfo = new view_1.AppProtoViewMergeInfo(initializer.mergeEmbeddedViewCount, initializer.mergeElementCount, initializer.mergeViewCount);
	        protoView.init(render, initializer.elementBinders, initializer.boundTextCount, mergeInfo, initializer.variableLocations);
	    };
	    ProtoViewFactory.prototype._bindPipe = function (typeOrProvider) {
	        var meta = this._pipeResolver.resolve(typeOrProvider);
	        return pipe_provider_1.PipeProvider.createFromType(typeOrProvider, meta);
	    };
	    ProtoViewFactory.prototype._flattenPipes = function (view) {
	        var pipes = [];
	        if (lang_1.isPresent(this._platformPipes)) {
	            _flattenArray(this._platformPipes, pipes);
	        }
	        if (lang_1.isPresent(view.pipes)) {
	            _flattenArray(view.pipes, pipes);
	        }
	        return pipes;
	    };
	    ProtoViewFactory = __decorate([
	        di_1.Injectable(),
	        __param(1, di_1.Optional()),
	        __param(1, di_1.Inject(platform_directives_and_pipes_1.PLATFORM_PIPES)),
	        __param(5, di_1.Inject(application_tokens_1.APP_ID)), 
	        __metadata('design:paramtypes', [render_1.Renderer, Array, directive_resolver_1.DirectiveResolver, view_resolver_1.ViewResolver, pipe_resolver_1.PipeResolver, String])
	    ], ProtoViewFactory);
	    return ProtoViewFactory;
	})();
	exports.ProtoViewFactory = ProtoViewFactory;
	function createComponent(protoViewFactory, cmd) {
	    return protoViewFactory._createComponent(cmd);
	}
	function createEmbeddedTemplate(protoViewFactory, cmd, parent) {
	    return protoViewFactory._createEmbeddedTemplate(cmd, parent);
	}
	var _ProtoViewInitializer = (function () {
	    function _ProtoViewInitializer(_protoView, _directiveResolver, _protoViewFactory) {
	        this._protoView = _protoView;
	        this._directiveResolver = _directiveResolver;
	        this._protoViewFactory = _protoViewFactory;
	        this.variableLocations = new Map();
	        this.boundTextCount = 0;
	        this.boundElementIndex = 0;
	        this.elementBinderStack = [];
	        this.distanceToParentElementBinder = 0;
	        this.distanceToParentProtoElementInjector = 0;
	        this.elementBinders = [];
	        this.mergeEmbeddedViewCount = 0;
	        this.mergeElementCount = 0;
	        this.mergeViewCount = 1;
	    }
	    _ProtoViewInitializer.prototype.visitText = function (cmd, context) {
	        if (cmd.isBound) {
	            this.boundTextCount++;
	        }
	        return null;
	    };
	    _ProtoViewInitializer.prototype.visitNgContent = function (cmd, context) { return null; };
	    _ProtoViewInitializer.prototype.visitBeginElement = function (cmd, context) {
	        if (cmd.isBound) {
	            this._visitBeginBoundElement(cmd, null);
	        }
	        else {
	            this._visitBeginElement(cmd, null, null);
	        }
	        return null;
	    };
	    _ProtoViewInitializer.prototype.visitEndElement = function (context) { return this._visitEndElement(); };
	    _ProtoViewInitializer.prototype.visitBeginComponent = function (cmd, context) {
	        var nestedProtoView = createComponent(this._protoViewFactory, cmd);
	        return this._visitBeginBoundElement(cmd, nestedProtoView);
	    };
	    _ProtoViewInitializer.prototype.visitEndComponent = function (context) { return this._visitEndElement(); };
	    _ProtoViewInitializer.prototype.visitEmbeddedTemplate = function (cmd, context) {
	        var nestedProtoView = createEmbeddedTemplate(this._protoViewFactory, cmd, this._protoView);
	        if (cmd.isMerged) {
	            this.mergeEmbeddedViewCount++;
	        }
	        this._visitBeginBoundElement(cmd, nestedProtoView);
	        return this._visitEndElement();
	    };
	    _ProtoViewInitializer.prototype._visitBeginBoundElement = function (cmd, nestedProtoView) {
	        if (lang_1.isPresent(nestedProtoView) && nestedProtoView.isMergable) {
	            this.mergeElementCount += nestedProtoView.mergeInfo.elementCount;
	            this.mergeViewCount += nestedProtoView.mergeInfo.viewCount;
	            this.mergeEmbeddedViewCount += nestedProtoView.mergeInfo.embeddedViewCount;
	        }
	        var elementBinder = _createElementBinder(this._directiveResolver, nestedProtoView, this.elementBinderStack, this.boundElementIndex, this.distanceToParentElementBinder, this.distanceToParentProtoElementInjector, cmd);
	        this.elementBinders.push(elementBinder);
	        var protoElementInjector = elementBinder.protoElementInjector;
	        for (var i = 0; i < cmd.variableNameAndValues.length; i += 2) {
	            this.variableLocations.set(cmd.variableNameAndValues[i], this.boundElementIndex);
	        }
	        this.boundElementIndex++;
	        this.mergeElementCount++;
	        return this._visitBeginElement(cmd, elementBinder, protoElementInjector);
	    };
	    _ProtoViewInitializer.prototype._visitBeginElement = function (cmd, elementBinder, protoElementInjector) {
	        this.distanceToParentElementBinder =
	            lang_1.isPresent(elementBinder) ? 1 : this.distanceToParentElementBinder + 1;
	        this.distanceToParentProtoElementInjector =
	            lang_1.isPresent(protoElementInjector) ? 1 : this.distanceToParentProtoElementInjector + 1;
	        this.elementBinderStack.push(elementBinder);
	        return null;
	    };
	    _ProtoViewInitializer.prototype._visitEndElement = function () {
	        var parentElementBinder = this.elementBinderStack.pop();
	        var parentProtoElementInjector = lang_1.isPresent(parentElementBinder) ? parentElementBinder.protoElementInjector : null;
	        this.distanceToParentElementBinder = lang_1.isPresent(parentElementBinder) ?
	            parentElementBinder.distanceToParent :
	            this.distanceToParentElementBinder - 1;
	        this.distanceToParentProtoElementInjector = lang_1.isPresent(parentProtoElementInjector) ?
	            parentProtoElementInjector.distanceToParent :
	            this.distanceToParentProtoElementInjector - 1;
	        return null;
	    };
	    return _ProtoViewInitializer;
	})();
	function _createElementBinder(directiveResolver, nestedProtoView, elementBinderStack, boundElementIndex, distanceToParentBinder, distanceToParentPei, beginElementCmd) {
	    var parentElementBinder = null;
	    var parentProtoElementInjector = null;
	    if (distanceToParentBinder > 0) {
	        parentElementBinder = elementBinderStack[elementBinderStack.length - distanceToParentBinder];
	    }
	    if (lang_1.isBlank(parentElementBinder)) {
	        distanceToParentBinder = -1;
	    }
	    if (distanceToParentPei > 0) {
	        var peiBinder = elementBinderStack[elementBinderStack.length - distanceToParentPei];
	        if (lang_1.isPresent(peiBinder)) {
	            parentProtoElementInjector = peiBinder.protoElementInjector;
	        }
	    }
	    if (lang_1.isBlank(parentProtoElementInjector)) {
	        distanceToParentPei = -1;
	    }
	    var componentDirectiveProvider = null;
	    var isEmbeddedTemplate = false;
	    var directiveProviders = beginElementCmd.directives.map(function (type) { return provideDirective(directiveResolver, type); });
	    if (beginElementCmd instanceof template_commands_1.BeginComponentCmd) {
	        componentDirectiveProvider = directiveProviders[0];
	    }
	    else if (beginElementCmd instanceof template_commands_1.EmbeddedTemplateCmd) {
	        isEmbeddedTemplate = true;
	    }
	    var protoElementInjector = null;
	    // Create a protoElementInjector for any element that either has bindings *or* has one
	    // or more var- defined *or* for <template> elements:
	    // - Elements with a var- defined need a their own element injector
	    //   so that, when hydrating, $implicit can be set to the element.
	    // - <template> elements need their own ElementInjector so that we can query their TemplateRef
	    var hasVariables = beginElementCmd.variableNameAndValues.length > 0;
	    if (directiveProviders.length > 0 || hasVariables || isEmbeddedTemplate) {
	        var directiveVariableBindings = new Map();
	        if (!isEmbeddedTemplate) {
	            directiveVariableBindings = createDirectiveVariableBindings(beginElementCmd.variableNameAndValues, directiveProviders);
	        }
	        protoElementInjector = element_injector_1.ProtoElementInjector.create(parentProtoElementInjector, boundElementIndex, directiveProviders, lang_1.isPresent(componentDirectiveProvider), distanceToParentPei, directiveVariableBindings);
	        protoElementInjector.attributes = arrayToMap(beginElementCmd.attrNameAndValues, false);
	    }
	    return new element_binder_1.ElementBinder(boundElementIndex, parentElementBinder, distanceToParentBinder, protoElementInjector, componentDirectiveProvider, nestedProtoView);
	}
	function provideDirective(directiveResolver, type) {
	    var annotation = directiveResolver.resolve(type);
	    return element_injector_1.DirectiveProvider.createFromType(type, annotation);
	}
	function createDirectiveVariableBindings(variableNameAndValues, directiveProviders) {
	    var directiveVariableBindings = new Map();
	    for (var i = 0; i < variableNameAndValues.length; i += 2) {
	        var templateName = variableNameAndValues[i];
	        var dirIndex = variableNameAndValues[i + 1];
	        if (lang_1.isNumber(dirIndex)) {
	            directiveVariableBindings.set(templateName, dirIndex);
	        }
	        else {
	            // a variable without a directive index -> reference the element
	            directiveVariableBindings.set(templateName, null);
	        }
	    }
	    return directiveVariableBindings;
	}
	exports.createDirectiveVariableBindings = createDirectiveVariableBindings;
	function arrayToMap(arr, inverse) {
	    var result = new Map();
	    for (var i = 0; i < arr.length; i += 2) {
	        if (inverse) {
	            result.set(arr[i + 1], arr[i]);
	        }
	        else {
	            result.set(arr[i], arr[i + 1]);
	        }
	    }
	    return result;
	}
	function _flattenArray(tree, out) {
	    for (var i = 0; i < tree.length; i++) {
	        var item = di_1.resolveForwardRef(tree[i]);
	        if (lang_1.isArray(item)) {
	            _flattenArray(item, out);
	        }
	        else {
	            out.push(item);
	        }
	    }
	}
	function _flattenStyleArr(arr, out) {
	    for (var i = 0; i < arr.length; i++) {
	        var entry = arr[i];
	        if (lang_1.isArray(entry)) {
	            _flattenStyleArr(entry, out);
	        }
	        else {
	            out.push(entry);
	        }
	    }
	    return out;
	}
	//# sourceMappingURL=proto_view_factory.js.map

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var exceptions_1 = __webpack_require__(204);
	/**
	 * Represents an Angular ProtoView in the Rendering Context.
	 *
	 * When you implement a custom {@link Renderer}, `RenderProtoViewRef` specifies what Render View
	 * your renderer should create.
	 *
	 * `RenderProtoViewRef` is a counterpart to {@link ProtoViewRef} available in the Application
	 * Context. But unlike `ProtoViewRef`, `RenderProtoViewRef` contains all static nested Proto Views
	 * that are recursively merged into a single Render Proto View.

	 *
	 * <!-- TODO: this is created by Renderer#createProtoView in the new compiler -->
	 */
	var RenderProtoViewRef = (function () {
	    function RenderProtoViewRef() {
	    }
	    return RenderProtoViewRef;
	})();
	exports.RenderProtoViewRef = RenderProtoViewRef;
	/**
	 * Represents a list of sibling Nodes that can be moved by the {@link Renderer} independently of
	 * other Render Fragments.
	 *
	 * Any {@link RenderView} has one Render Fragment.
	 *
	 * Additionally any View with an Embedded View that contains a {@link NgContent View Projection}
	 * results in additional Render Fragment.
	 */
	/*
	  <div>foo</div>
	  {{bar}}


	  <div>foo</div> -> view 1 / fragment 1
	  <ul>
	    <template ng-for>
	      <li>{{fg}}</li> -> view 2 / fragment 1
	    </template>
	  </ul>
	  {{bar}}


	  <div>foo</div> -> view 1 / fragment 1
	  <ul>
	    <template ng-if>
	      <li><ng-content></></li> -> view 1 / fragment 2
	    </template>
	    <template ng-for>
	      <li><ng-content></></li> ->
	      <li></li>                -> view 1 / fragment 2 + view 2 / fragment 1..n-1
	    </template>
	  </ul>
	  {{bar}}
	 */
	// TODO(i): refactor into an interface
	var RenderFragmentRef = (function () {
	    function RenderFragmentRef() {
	    }
	    return RenderFragmentRef;
	})();
	exports.RenderFragmentRef = RenderFragmentRef;
	/**
	 * Represents an Angular View in the Rendering Context.
	 *
	 * `RenderViewRef` specifies to the {@link Renderer} what View to update or destroy.
	 *
	 * Unlike a {@link ViewRef} available in the Application Context, Render View contains all the
	 * static Component Views that have been recursively merged into a single Render View.
	 *
	 * Each `RenderViewRef` contains one or more {@link RenderFragmentRef Render Fragments}, these
	 * Fragments are created, hydrated, dehydrated and destroyed as a single unit together with the
	 * View.
	 */
	// TODO(i): refactor into an interface
	var RenderViewRef = (function () {
	    function RenderViewRef() {
	    }
	    return RenderViewRef;
	})();
	exports.RenderViewRef = RenderViewRef;
	var RenderTemplateCmd = (function () {
	    function RenderTemplateCmd() {
	    }
	    return RenderTemplateCmd;
	})();
	exports.RenderTemplateCmd = RenderTemplateCmd;
	var RenderBeginCmd = (function (_super) {
	    __extends(RenderBeginCmd, _super);
	    function RenderBeginCmd() {
	        _super.apply(this, arguments);
	    }
	    Object.defineProperty(RenderBeginCmd.prototype, "ngContentIndex", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(RenderBeginCmd.prototype, "isBound", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    return RenderBeginCmd;
	})(RenderTemplateCmd);
	exports.RenderBeginCmd = RenderBeginCmd;
	var RenderTextCmd = (function (_super) {
	    __extends(RenderTextCmd, _super);
	    function RenderTextCmd() {
	        _super.apply(this, arguments);
	    }
	    Object.defineProperty(RenderTextCmd.prototype, "value", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    return RenderTextCmd;
	})(RenderBeginCmd);
	exports.RenderTextCmd = RenderTextCmd;
	var RenderNgContentCmd = (function (_super) {
	    __extends(RenderNgContentCmd, _super);
	    function RenderNgContentCmd() {
	        _super.apply(this, arguments);
	    }
	    Object.defineProperty(RenderNgContentCmd.prototype, "index", {
	        // The index of this NgContent element
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(RenderNgContentCmd.prototype, "ngContentIndex", {
	        // The index of the NgContent element into which this
	        // NgContent element should be projected (if any)
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    return RenderNgContentCmd;
	})(RenderTemplateCmd);
	exports.RenderNgContentCmd = RenderNgContentCmd;
	var RenderBeginElementCmd = (function (_super) {
	    __extends(RenderBeginElementCmd, _super);
	    function RenderBeginElementCmd() {
	        _super.apply(this, arguments);
	    }
	    Object.defineProperty(RenderBeginElementCmd.prototype, "name", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(RenderBeginElementCmd.prototype, "attrNameAndValues", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(RenderBeginElementCmd.prototype, "eventTargetAndNames", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    return RenderBeginElementCmd;
	})(RenderBeginCmd);
	exports.RenderBeginElementCmd = RenderBeginElementCmd;
	var RenderBeginComponentCmd = (function (_super) {
	    __extends(RenderBeginComponentCmd, _super);
	    function RenderBeginComponentCmd() {
	        _super.apply(this, arguments);
	    }
	    Object.defineProperty(RenderBeginComponentCmd.prototype, "templateId", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    return RenderBeginComponentCmd;
	})(RenderBeginElementCmd);
	exports.RenderBeginComponentCmd = RenderBeginComponentCmd;
	var RenderEmbeddedTemplateCmd = (function (_super) {
	    __extends(RenderEmbeddedTemplateCmd, _super);
	    function RenderEmbeddedTemplateCmd() {
	        _super.apply(this, arguments);
	    }
	    Object.defineProperty(RenderEmbeddedTemplateCmd.prototype, "isMerged", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(RenderEmbeddedTemplateCmd.prototype, "children", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    return RenderEmbeddedTemplateCmd;
	})(RenderBeginElementCmd);
	exports.RenderEmbeddedTemplateCmd = RenderEmbeddedTemplateCmd;
	/**
	 * Container class produced by a {@link Renderer} when creating a Render View.
	 *
	 * An instance of `RenderViewWithFragments` contains a {@link RenderViewRef} and an array of
	 * {@link RenderFragmentRef}s belonging to this Render View.
	 */
	// TODO(i): refactor this by RenderViewWithFragments and adding fragments directly to RenderViewRef
	var RenderViewWithFragments = (function () {
	    function RenderViewWithFragments(
	        /**
	         * Reference to the {@link RenderViewRef}.
	         */
	        viewRef, 
	        /**
	         * Array of {@link RenderFragmentRef}s ordered in the depth-first order.
	         */
	        fragmentRefs) {
	        this.viewRef = viewRef;
	        this.fragmentRefs = fragmentRefs;
	    }
	    return RenderViewWithFragments;
	})();
	exports.RenderViewWithFragments = RenderViewWithFragments;
	var RenderComponentTemplate = (function () {
	    function RenderComponentTemplate(id, shortId, encapsulation, commands, styles) {
	        this.id = id;
	        this.shortId = shortId;
	        this.encapsulation = encapsulation;
	        this.commands = commands;
	        this.styles = styles;
	    }
	    return RenderComponentTemplate;
	})();
	exports.RenderComponentTemplate = RenderComponentTemplate;
	/**
	 * Injectable service that provides a low-level interface for modifying the UI.
	 *
	 * Use this service to bypass Angular's templating and make custom UI changes that can't be
	 * expressed declaratively. For example if you need to set a property or an attribute whose name is
	 * not statically known, use {@link #setElementProperty} or {@link #setElementAttribute}
	 * respectively.
	 *
	 * If you are implementing a custom renderer, you must implement this interface.
	 *
	 * The default Renderer implementation is {@link DomRenderer}. Also see {@link WebWorkerRenderer}.
	 */
	var Renderer = (function () {
	    function Renderer() {
	    }
	    return Renderer;
	})();
	exports.Renderer = Renderer;
	//# sourceMappingURL=api.js.map

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var provider_1 = __webpack_require__(203);
	var di_1 = __webpack_require__(196);
	var PipeProvider = (function (_super) {
	    __extends(PipeProvider, _super);
	    function PipeProvider(name, pure, key, resolvedFactories, multiBinding) {
	        _super.call(this, key, resolvedFactories, multiBinding);
	        this.name = name;
	        this.pure = pure;
	    }
	    PipeProvider.createFromType = function (type, metadata) {
	        var provider = new di_1.Provider(type, { useClass: type });
	        var rb = provider_1.resolveProvider(provider);
	        return new PipeProvider(metadata.name, metadata.pure, rb.key, rb.resolvedFactories, rb.multiProvider);
	    };
	    return PipeProvider;
	})(provider_1.ResolvedProvider_);
	exports.PipeProvider = PipeProvider;
	//# sourceMappingURL=pipe_provider.js.map

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var collection_1 = __webpack_require__(202);
	var cd = __webpack_require__(265);
	var ProtoPipes = (function () {
	    function ProtoPipes(
	        /**
	        * Map of {@link PipeMetadata} names to {@link PipeMetadata} implementations.
	        */
	        config) {
	        this.config = config;
	        this.config = config;
	    }
	    ProtoPipes.fromProviders = function (providers) {
	        var config = {};
	        providers.forEach(function (b) { return config[b.name] = b; });
	        return new ProtoPipes(config);
	    };
	    ProtoPipes.prototype.get = function (name) {
	        var provider = this.config[name];
	        if (lang_1.isBlank(provider))
	            throw new exceptions_1.BaseException("Cannot find pipe '" + name + "'.");
	        return provider;
	    };
	    return ProtoPipes;
	})();
	exports.ProtoPipes = ProtoPipes;
	var Pipes = (function () {
	    function Pipes(proto, injector) {
	        this.proto = proto;
	        this.injector = injector;
	        /** @internal */
	        this._config = {};
	    }
	    Pipes.prototype.get = function (name) {
	        var cached = collection_1.StringMapWrapper.get(this._config, name);
	        if (lang_1.isPresent(cached))
	            return cached;
	        var p = this.proto.get(name);
	        var transform = this.injector.instantiateResolved(p);
	        var res = new cd.SelectedPipe(transform, p.pure);
	        if (p.pure) {
	            collection_1.StringMapWrapper.set(this._config, name, res);
	        }
	        return res;
	    };
	    return Pipes;
	})();
	exports.Pipes = Pipes;
	//# sourceMappingURL=pipes.js.map

/***/ },
/* 265 */
/***/ function(module, exports) {

	'use strict';var SelectedPipe = (function () {
	    function SelectedPipe(pipe, pure) {
	        this.pipe = pipe;
	        this.pure = pure;
	    }
	    return SelectedPipe;
	})();
	exports.SelectedPipe = SelectedPipe;
	//# sourceMappingURL=pipes.js.map

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var collection_1 = __webpack_require__(202);
	var change_detection_1 = __webpack_require__(215);
	var interfaces_1 = __webpack_require__(225);
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var view_ref_1 = __webpack_require__(267);
	var util_1 = __webpack_require__(268);
	var view_ref_2 = __webpack_require__(267);
	var interfaces_2 = __webpack_require__(225);
	exports.DebugContext = interfaces_2.DebugContext;
	var REFLECT_PREFIX = 'ng-reflect-';
	(function (ViewType) {
	    // A view that contains the host element with bound component directive.
	    // Contains a COMPONENT view
	    ViewType[ViewType["HOST"] = 0] = "HOST";
	    // The view of the component
	    // Can contain 0 to n EMBEDDED views
	    ViewType[ViewType["COMPONENT"] = 1] = "COMPONENT";
	    // A view that is embedded into another View via a <template> element
	    // inside of a COMPONENT view
	    ViewType[ViewType["EMBEDDED"] = 2] = "EMBEDDED";
	})(exports.ViewType || (exports.ViewType = {}));
	var ViewType = exports.ViewType;
	var AppViewContainer = (function () {
	    function AppViewContainer() {
	        // The order in this list matches the DOM order.
	        this.views = [];
	    }
	    return AppViewContainer;
	})();
	exports.AppViewContainer = AppViewContainer;
	/**
	 * Cost of making objects: http://jsperf.com/instantiate-size-of-object
	 *
	 */
	var AppView = (function () {
	    function AppView(renderer, proto, viewOffset, elementOffset, textOffset, protoLocals, render, renderFragment, containerElementInjector) {
	        this.renderer = renderer;
	        this.proto = proto;
	        this.viewOffset = viewOffset;
	        this.elementOffset = elementOffset;
	        this.textOffset = textOffset;
	        this.render = render;
	        this.renderFragment = renderFragment;
	        this.containerElementInjector = containerElementInjector;
	        // AppViews that have been merged in depth first order.
	        // This list is shared between all merged views. Use this.elementOffset to get the local
	        // entries.
	        this.views = null;
	        // ElementInjectors of all AppViews in views grouped by view.
	        // This list is shared between all merged views. Use this.elementOffset to get the local
	        // entries.
	        this.elementInjectors = null;
	        // ViewContainers of all AppViews in views grouped by view.
	        // This list is shared between all merged views. Use this.elementOffset to get the local
	        // entries.
	        this.viewContainers = null;
	        // PreBuiltObjects of all AppViews in views grouped by view.
	        // This list is shared between all merged views. Use this.elementOffset to get the local
	        // entries.
	        this.preBuiltObjects = null;
	        this.changeDetector = null;
	        /**
	         * The context against which data-binding expressions in this view are evaluated against.
	         * This is always a component instance.
	         */
	        this.context = null;
	        this.ref = new view_ref_2.ViewRef_(this);
	        this.locals = new change_detection_1.Locals(null, collection_1.MapWrapper.clone(protoLocals)); // TODO optimize this
	    }
	    AppView.prototype.init = function (changeDetector, elementInjectors, rootElementInjectors, preBuiltObjects, views, elementRefs, viewContainers) {
	        this.changeDetector = changeDetector;
	        this.elementInjectors = elementInjectors;
	        this.rootElementInjectors = rootElementInjectors;
	        this.preBuiltObjects = preBuiltObjects;
	        this.views = views;
	        this.elementRefs = elementRefs;
	        this.viewContainers = viewContainers;
	    };
	    AppView.prototype.setLocal = function (contextName, value) {
	        if (!this.hydrated())
	            throw new exceptions_1.BaseException('Cannot set locals on dehydrated view.');
	        if (!this.proto.templateVariableBindings.has(contextName)) {
	            return;
	        }
	        var templateName = this.proto.templateVariableBindings.get(contextName);
	        this.locals.set(templateName, value);
	    };
	    AppView.prototype.hydrated = function () { return lang_1.isPresent(this.context); };
	    /**
	     * Triggers the event handlers for the element and the directives.
	     *
	     * This method is intended to be called from directive EventEmitters.
	     *
	     * @param {string} eventName
	     * @param {*} eventObj
	     * @param {number} boundElementIndex
	     */
	    AppView.prototype.triggerEventHandlers = function (eventName, eventObj, boundElementIndex) {
	        var locals = new collection_1.Map();
	        locals.set('$event', eventObj);
	        this.dispatchEvent(boundElementIndex, eventName, locals);
	    };
	    // dispatch to element injector or text nodes based on context
	    AppView.prototype.notifyOnBinding = function (b, currentValue) {
	        if (b.isTextNode()) {
	            this.renderer.setText(this.render, b.elementIndex + this.textOffset, currentValue);
	        }
	        else {
	            var elementRef = this.elementRefs[this.elementOffset + b.elementIndex];
	            if (b.isElementProperty()) {
	                this.renderer.setElementProperty(elementRef, b.name, currentValue);
	            }
	            else if (b.isElementAttribute()) {
	                this.renderer.setElementAttribute(elementRef, b.name, lang_1.isPresent(currentValue) ? "" + currentValue : null);
	            }
	            else if (b.isElementClass()) {
	                this.renderer.setElementClass(elementRef, b.name, currentValue);
	            }
	            else if (b.isElementStyle()) {
	                var unit = lang_1.isPresent(b.unit) ? b.unit : '';
	                this.renderer.setElementStyle(elementRef, b.name, lang_1.isPresent(currentValue) ? "" + currentValue + unit : null);
	            }
	            else {
	                throw new exceptions_1.BaseException('Unsupported directive record');
	            }
	        }
	    };
	    AppView.prototype.logBindingUpdate = function (b, value) {
	        if (b.isDirective() || b.isElementProperty()) {
	            var elementRef = this.elementRefs[this.elementOffset + b.elementIndex];
	            this.renderer.setElementAttribute(elementRef, "" + REFLECT_PREFIX + util_1.camelCaseToDashCase(b.name), "" + value);
	        }
	    };
	    AppView.prototype.notifyAfterContentChecked = function () {
	        var eiCount = this.proto.elementBinders.length;
	        var ei = this.elementInjectors;
	        for (var i = eiCount - 1; i >= 0; i--) {
	            if (lang_1.isPresent(ei[i + this.elementOffset]))
	                ei[i + this.elementOffset].afterContentChecked();
	        }
	    };
	    AppView.prototype.notifyAfterViewChecked = function () {
	        var eiCount = this.proto.elementBinders.length;
	        var ei = this.elementInjectors;
	        for (var i = eiCount - 1; i >= 0; i--) {
	            if (lang_1.isPresent(ei[i + this.elementOffset]))
	                ei[i + this.elementOffset].afterViewChecked();
	        }
	    };
	    AppView.prototype.getDirectiveFor = function (directive) {
	        var elementInjector = this.elementInjectors[this.elementOffset + directive.elementIndex];
	        return elementInjector.getDirectiveAtIndex(directive.directiveIndex);
	    };
	    AppView.prototype.getNestedView = function (boundElementIndex) {
	        var eli = this.elementInjectors[boundElementIndex];
	        return lang_1.isPresent(eli) ? eli.getNestedView() : null;
	    };
	    AppView.prototype.getContainerElement = function () {
	        return lang_1.isPresent(this.containerElementInjector) ?
	            this.containerElementInjector.getElementRef() :
	            null;
	    };
	    AppView.prototype.getDebugContext = function (elementIndex, directiveIndex) {
	        try {
	            var offsettedIndex = this.elementOffset + elementIndex;
	            var hasRefForIndex = offsettedIndex < this.elementRefs.length;
	            var elementRef = hasRefForIndex ? this.elementRefs[this.elementOffset + elementIndex] : null;
	            var container = this.getContainerElement();
	            var ei = hasRefForIndex ? this.elementInjectors[this.elementOffset + elementIndex] : null;
	            var element = lang_1.isPresent(elementRef) ? elementRef.nativeElement : null;
	            var componentElement = lang_1.isPresent(container) ? container.nativeElement : null;
	            var directive = lang_1.isPresent(directiveIndex) ? this.getDirectiveFor(directiveIndex) : null;
	            var injector = lang_1.isPresent(ei) ? ei.getInjector() : null;
	            return new interfaces_1.DebugContext(element, componentElement, directive, this.context, _localsToStringMap(this.locals), injector);
	        }
	        catch (e) {
	            // TODO: vsavkin log the exception once we have a good way to log errors and warnings
	            // if an error happens during getting the debug context, we return null.
	            return null;
	        }
	    };
	    AppView.prototype.getDetectorFor = function (directive) {
	        var childView = this.getNestedView(this.elementOffset + directive.elementIndex);
	        return lang_1.isPresent(childView) ? childView.changeDetector : null;
	    };
	    AppView.prototype.invokeElementMethod = function (elementIndex, methodName, args) {
	        this.renderer.invokeElementMethod(this.elementRefs[elementIndex], methodName, args);
	    };
	    // implementation of RenderEventDispatcher#dispatchRenderEvent
	    AppView.prototype.dispatchRenderEvent = function (boundElementIndex, eventName, locals) {
	        var elementRef = this.elementRefs[boundElementIndex];
	        var view = view_ref_1.internalView(elementRef.parentView);
	        return view.dispatchEvent(elementRef.boundElementIndex, eventName, locals);
	    };
	    // returns false if preventDefault must be applied to the DOM event
	    AppView.prototype.dispatchEvent = function (boundElementIndex, eventName, locals) {
	        try {
	            if (this.hydrated()) {
	                return !this.changeDetector.handleEvent(eventName, boundElementIndex - this.elementOffset, new change_detection_1.Locals(this.locals, locals));
	            }
	            else {
	                return true;
	            }
	        }
	        catch (e) {
	            var c = this.getDebugContext(boundElementIndex - this.elementOffset, null);
	            var context = lang_1.isPresent(c) ? new _Context(c.element, c.componentElement, c.context, c.locals, c.injector) :
	                null;
	            throw new EventEvaluationError(eventName, e, e.stack, context);
	        }
	    };
	    Object.defineProperty(AppView.prototype, "ownBindersCount", {
	        get: function () { return this.proto.elementBinders.length; },
	        enumerable: true,
	        configurable: true
	    });
	    return AppView;
	})();
	exports.AppView = AppView;
	function _localsToStringMap(locals) {
	    var res = {};
	    var c = locals;
	    while (lang_1.isPresent(c)) {
	        res = collection_1.StringMapWrapper.merge(res, collection_1.MapWrapper.toStringMap(c.current));
	        c = c.parent;
	    }
	    return res;
	}
	/**
	 * Error context included when an event handler throws an exception.
	 */
	var _Context = (function () {
	    function _Context(element, componentElement, context, locals, injector) {
	        this.element = element;
	        this.componentElement = componentElement;
	        this.context = context;
	        this.locals = locals;
	        this.injector = injector;
	    }
	    return _Context;
	})();
	/**
	 * Wraps an exception thrown by an event handler.
	 */
	var EventEvaluationError = (function (_super) {
	    __extends(EventEvaluationError, _super);
	    function EventEvaluationError(eventName, originalException, originalStack, context) {
	        _super.call(this, "Error during evaluation of \"" + eventName + "\"", originalException, originalStack, context);
	    }
	    return EventEvaluationError;
	})(exceptions_1.WrappedException);
	var AppProtoViewMergeInfo = (function () {
	    function AppProtoViewMergeInfo(embeddedViewCount, elementCount, viewCount) {
	        this.embeddedViewCount = embeddedViewCount;
	        this.elementCount = elementCount;
	        this.viewCount = viewCount;
	    }
	    return AppProtoViewMergeInfo;
	})();
	exports.AppProtoViewMergeInfo = AppProtoViewMergeInfo;
	/**
	 *
	 */
	var AppProtoView = (function () {
	    function AppProtoView(templateId, templateCmds, type, isMergable, changeDetectorFactory, templateVariableBindings, pipes) {
	        this.templateId = templateId;
	        this.templateCmds = templateCmds;
	        this.type = type;
	        this.isMergable = isMergable;
	        this.changeDetectorFactory = changeDetectorFactory;
	        this.templateVariableBindings = templateVariableBindings;
	        this.pipes = pipes;
	        this.elementBinders = null;
	        this.mergeInfo = null;
	        this.variableLocations = null;
	        this.textBindingCount = null;
	        this.render = null;
	        this.ref = new view_ref_2.ProtoViewRef_(this);
	    }
	    AppProtoView.prototype.init = function (render, elementBinders, textBindingCount, mergeInfo, variableLocations) {
	        var _this = this;
	        this.render = render;
	        this.elementBinders = elementBinders;
	        this.textBindingCount = textBindingCount;
	        this.mergeInfo = mergeInfo;
	        this.variableLocations = variableLocations;
	        this.protoLocals = new collection_1.Map();
	        if (lang_1.isPresent(this.templateVariableBindings)) {
	            this.templateVariableBindings.forEach(function (templateName, _) { _this.protoLocals.set(templateName, null); });
	        }
	        if (lang_1.isPresent(variableLocations)) {
	            // The view's locals needs to have a full set of variable names at construction time
	            // in order to prevent new variables from being set later in the lifecycle. Since we don't
	            // want
	            // to actually create variable bindings for the $implicit bindings, add to the
	            // protoLocals manually.
	            variableLocations.forEach(function (_, templateName) { _this.protoLocals.set(templateName, null); });
	        }
	    };
	    AppProtoView.prototype.isInitialized = function () { return lang_1.isPresent(this.elementBinders); };
	    return AppProtoView;
	})();
	exports.AppProtoView = AppProtoView;
	//# sourceMappingURL=view.js.map

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	// This is a workaround for privacy in Dart as we don't have library parts
	function internalView(viewRef) {
	    return viewRef._view;
	}
	exports.internalView = internalView;
	// This is a workaround for privacy in Dart as we don't have library parts
	function internalProtoView(protoViewRef) {
	    return lang_1.isPresent(protoViewRef) ? protoViewRef._protoView : null;
	}
	exports.internalProtoView = internalProtoView;
	/**
	 * Represents an Angular View.
	 *
	 * <!-- TODO: move the next two paragraphs to the dev guide -->
	 * A View is a fundamental building block of the application UI. It is the smallest grouping of
	 * Elements which are created and destroyed together.
	 *
	 * Properties of elements in a View can change, but the structure (number and order) of elements in
	 * a View cannot. Changing the structure of Elements can only be done by inserting, moving or
	 * removing nested Views via a {@link ViewContainer}. Each View can contain many View Containers.
	 * <!-- /TODO -->
	 *
	 * ### Example
	 *
	 * Given this template...
	 *
	 * ```
	 * Count: {{items.length}}
	 * <ul>
	 *   <li *ng-for="var item of items">{{item}}</li>
	 * </ul>
	 * ```
	 *
	 * ... we have two {@link ProtoViewRef}s:
	 *
	 * Outer {@link ProtoViewRef}:
	 * ```
	 * Count: {{items.length}}
	 * <ul>
	 *   <template ng-for var-item [ng-for-of]="items"></template>
	 * </ul>
	 * ```
	 *
	 * Inner {@link ProtoViewRef}:
	 * ```
	 *   <li>{{item}}</li>
	 * ```
	 *
	 * Notice that the original template is broken down into two separate {@link ProtoViewRef}s.
	 *
	 * The outer/inner {@link ProtoViewRef}s are then assembled into views like so:
	 *
	 * ```
	 * <!-- ViewRef: outer-0 -->
	 * Count: 2
	 * <ul>
	 *   <template view-container-ref></template>
	 *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
	 *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
	 * </ul>
	 * <!-- /ViewRef: outer-0 -->
	 * ```
	 */
	var ViewRef = (function () {
	    function ViewRef() {
	    }
	    Object.defineProperty(ViewRef.prototype, "changeDetectorRef", {
	        get: function () { return exceptions_1.unimplemented(); },
	        set: function (value) {
	            exceptions_1.unimplemented(); // TODO: https://github.com/Microsoft/TypeScript/issues/12
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return ViewRef;
	})();
	exports.ViewRef = ViewRef;
	var ViewRef_ = (function (_super) {
	    __extends(ViewRef_, _super);
	    function ViewRef_(_view) {
	        _super.call(this);
	        this._changeDetectorRef = null;
	        this._view = _view;
	    }
	    Object.defineProperty(ViewRef_.prototype, "render", {
	        /**
	         * Return `RenderViewRef`
	         */
	        get: function () { return this._view.render; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewRef_.prototype, "renderFragment", {
	        /**
	         * Return `RenderFragmentRef`
	         */
	        get: function () { return this._view.renderFragment; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewRef_.prototype, "changeDetectorRef", {
	        /**
	         * Return `ChangeDetectorRef`
	         */
	        get: function () {
	            if (this._changeDetectorRef === null) {
	                this._changeDetectorRef = this._view.changeDetector.ref;
	            }
	            return this._changeDetectorRef;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ViewRef_.prototype.setLocal = function (variableName, value) { this._view.setLocal(variableName, value); };
	    return ViewRef_;
	})(ViewRef);
	exports.ViewRef_ = ViewRef_;
	/**
	 * Represents an Angular ProtoView.
	 *
	 * A ProtoView is a prototypical {@link ViewRef View} that is the result of Template compilation and
	 * is used by Angular to efficiently create an instance of this View based on the compiled Template.
	 *
	 * Most ProtoViews are created and used internally by Angular and you don't need to know about them,
	 * except in advanced use-cases where you compile components yourself via the low-level
	 * {@link Compiler#compileInHost} API.
	 *
	 *
	 * ### Example
	 *
	 * Given this template:
	 *
	 * ```
	 * Count: {{items.length}}
	 * <ul>
	 *   <li *ng-for="var item of items">{{item}}</li>
	 * </ul>
	 * ```
	 *
	 * Angular desugars and compiles the template into two ProtoViews:
	 *
	 * Outer ProtoView:
	 * ```
	 * Count: {{items.length}}
	 * <ul>
	 *   <template ng-for var-item [ng-for-of]="items"></template>
	 * </ul>
	 * ```
	 *
	 * Inner ProtoView:
	 * ```
	 *   <li>{{item}}</li>
	 * ```
	 *
	 * Notice that the original template is broken down into two separate ProtoViews.
	 */
	var ProtoViewRef = (function () {
	    function ProtoViewRef() {
	    }
	    return ProtoViewRef;
	})();
	exports.ProtoViewRef = ProtoViewRef;
	var ProtoViewRef_ = (function (_super) {
	    __extends(ProtoViewRef_, _super);
	    function ProtoViewRef_(_protoView) {
	        _super.call(this);
	        this._protoView = _protoView;
	    }
	    return ProtoViewRef_;
	})(ProtoViewRef);
	exports.ProtoViewRef_ = ProtoViewRef_;
	//# sourceMappingURL=view_ref.js.map

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var CAMEL_CASE_REGEXP = /([A-Z])/g;
	var DASH_CASE_REGEXP = /-([a-z])/g;
	function camelCaseToDashCase(input) {
	    return lang_1.StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function (m) { return '-' + m[1].toLowerCase(); });
	}
	exports.camelCaseToDashCase = camelCaseToDashCase;
	function dashCaseToCamelCase(input) {
	    return lang_1.StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function (m) { return m[1].toUpperCase(); });
	}
	exports.dashCaseToCamelCase = dashCaseToCamelCase;
	//# sourceMappingURL=util.js.map

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var ElementBinder = (function () {
	    function ElementBinder(index, parent, distanceToParent, protoElementInjector, componentDirective, nestedProtoView) {
	        this.index = index;
	        this.parent = parent;
	        this.distanceToParent = distanceToParent;
	        this.protoElementInjector = protoElementInjector;
	        this.componentDirective = componentDirective;
	        this.nestedProtoView = nestedProtoView;
	        if (lang_1.isBlank(index)) {
	            throw new exceptions_1.BaseException('null index not allowed.');
	        }
	    }
	    return ElementBinder;
	})();
	exports.ElementBinder = ElementBinder;
	//# sourceMappingURL=element_binder.js.map

/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var async_1 = __webpack_require__(50);
	var collection_1 = __webpack_require__(202);
	var di_1 = __webpack_require__(196);
	var injector_1 = __webpack_require__(201);
	var provider_1 = __webpack_require__(203);
	var di_2 = __webpack_require__(195);
	var avmModule = __webpack_require__(271);
	var view_container_ref_1 = __webpack_require__(277);
	var element_ref_1 = __webpack_require__(273);
	var template_ref_1 = __webpack_require__(274);
	var directives_1 = __webpack_require__(213);
	var directive_lifecycle_reflector_1 = __webpack_require__(278);
	var change_detection_1 = __webpack_require__(215);
	var query_list_1 = __webpack_require__(280);
	var reflection_1 = __webpack_require__(206);
	var event_config_1 = __webpack_require__(281);
	var pipe_provider_1 = __webpack_require__(263);
	var interfaces_1 = __webpack_require__(279);
	var view_container_ref_2 = __webpack_require__(277);
	var _staticKeys;
	var StaticKeys = (function () {
	    function StaticKeys() {
	        this.viewManagerId = di_1.Key.get(avmModule.AppViewManager).id;
	        this.templateRefId = di_1.Key.get(template_ref_1.TemplateRef).id;
	        this.viewContainerId = di_1.Key.get(view_container_ref_1.ViewContainerRef).id;
	        this.changeDetectorRefId = di_1.Key.get(change_detection_1.ChangeDetectorRef).id;
	        this.elementRefId = di_1.Key.get(element_ref_1.ElementRef).id;
	    }
	    StaticKeys.instance = function () {
	        if (lang_1.isBlank(_staticKeys))
	            _staticKeys = new StaticKeys();
	        return _staticKeys;
	    };
	    return StaticKeys;
	})();
	exports.StaticKeys = StaticKeys;
	var TreeNode = (function () {
	    function TreeNode(parent) {
	        if (lang_1.isPresent(parent)) {
	            parent.addChild(this);
	        }
	        else {
	            this._parent = null;
	        }
	    }
	    TreeNode.prototype.addChild = function (child) { child._parent = this; };
	    TreeNode.prototype.remove = function () { this._parent = null; };
	    Object.defineProperty(TreeNode.prototype, "parent", {
	        get: function () { return this._parent; },
	        enumerable: true,
	        configurable: true
	    });
	    return TreeNode;
	})();
	exports.TreeNode = TreeNode;
	var DirectiveDependency = (function (_super) {
	    __extends(DirectiveDependency, _super);
	    function DirectiveDependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties, attributeName, queryDecorator) {
	        _super.call(this, key, optional, lowerBoundVisibility, upperBoundVisibility, properties);
	        this.attributeName = attributeName;
	        this.queryDecorator = queryDecorator;
	        this._verify();
	    }
	    /** @internal */
	    DirectiveDependency.prototype._verify = function () {
	        var count = 0;
	        if (lang_1.isPresent(this.queryDecorator))
	            count++;
	        if (lang_1.isPresent(this.attributeName))
	            count++;
	        if (count > 1)
	            throw new exceptions_1.BaseException('A directive injectable can contain only one of the following @Attribute or @Query.');
	    };
	    DirectiveDependency.createFrom = function (d) {
	        return new DirectiveDependency(d.key, d.optional, d.lowerBoundVisibility, d.upperBoundVisibility, d.properties, DirectiveDependency._attributeName(d.properties), DirectiveDependency._query(d.properties));
	    };
	    /** @internal */
	    DirectiveDependency._attributeName = function (properties) {
	        var p = properties.find(function (p) { return p instanceof di_2.AttributeMetadata; });
	        return lang_1.isPresent(p) ? p.attributeName : null;
	    };
	    /** @internal */
	    DirectiveDependency._query = function (properties) {
	        return properties.find(function (p) { return p instanceof di_2.QueryMetadata; });
	    };
	    return DirectiveDependency;
	})(di_1.Dependency);
	exports.DirectiveDependency = DirectiveDependency;
	var DirectiveProvider = (function (_super) {
	    __extends(DirectiveProvider, _super);
	    function DirectiveProvider(key, factory, deps, metadata, providers, viewProviders) {
	        _super.call(this, key, [new provider_1.ResolvedFactory(factory, deps)], false);
	        this.metadata = metadata;
	        this.providers = providers;
	        this.viewProviders = viewProviders;
	        this.callOnDestroy = directive_lifecycle_reflector_1.hasLifecycleHook(interfaces_1.LifecycleHooks.OnDestroy, key.token);
	    }
	    Object.defineProperty(DirectiveProvider.prototype, "displayName", {
	        get: function () { return this.key.displayName; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveProvider.prototype, "queries", {
	        get: function () {
	            if (lang_1.isBlank(this.metadata.queries))
	                return [];
	            var res = [];
	            collection_1.StringMapWrapper.forEach(this.metadata.queries, function (meta, fieldName) {
	                var setter = reflection_1.reflector.setter(fieldName);
	                res.push(new QueryMetadataWithSetter(setter, meta));
	            });
	            return res;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveProvider.prototype, "eventEmitters", {
	        get: function () {
	            return lang_1.isPresent(this.metadata) && lang_1.isPresent(this.metadata.outputs) ? this.metadata.outputs :
	                [];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DirectiveProvider.createFromProvider = function (provider, meta) {
	        if (lang_1.isBlank(meta)) {
	            meta = new directives_1.DirectiveMetadata();
	        }
	        var rb = provider_1.resolveProvider(provider);
	        var rf = rb.resolvedFactories[0];
	        var deps = rf.dependencies.map(DirectiveDependency.createFrom);
	        var providers = lang_1.isPresent(meta.providers) ? meta.providers : [];
	        var viewBindigs = meta instanceof directives_1.ComponentMetadata && lang_1.isPresent(meta.viewProviders) ?
	            meta.viewProviders :
	            [];
	        return new DirectiveProvider(rb.key, rf.factory, deps, meta, providers, viewBindigs);
	    };
	    DirectiveProvider.createFromType = function (type, annotation) {
	        var provider = new di_1.Provider(type, { useClass: type });
	        return DirectiveProvider.createFromProvider(provider, annotation);
	    };
	    return DirectiveProvider;
	})(provider_1.ResolvedProvider_);
	exports.DirectiveProvider = DirectiveProvider;
	// TODO(rado): benchmark and consider rolling in as ElementInjector fields.
	var PreBuiltObjects = (function () {
	    function PreBuiltObjects(viewManager, view, elementRef, templateRef) {
	        this.viewManager = viewManager;
	        this.view = view;
	        this.elementRef = elementRef;
	        this.templateRef = templateRef;
	        this.nestedView = null;
	    }
	    return PreBuiltObjects;
	})();
	exports.PreBuiltObjects = PreBuiltObjects;
	var QueryMetadataWithSetter = (function () {
	    function QueryMetadataWithSetter(setter, metadata) {
	        this.setter = setter;
	        this.metadata = metadata;
	    }
	    return QueryMetadataWithSetter;
	})();
	exports.QueryMetadataWithSetter = QueryMetadataWithSetter;
	var EventEmitterAccessor = (function () {
	    function EventEmitterAccessor(eventName, getter) {
	        this.eventName = eventName;
	        this.getter = getter;
	    }
	    EventEmitterAccessor.prototype.subscribe = function (view, boundElementIndex, directive) {
	        var _this = this;
	        var eventEmitter = this.getter(directive);
	        return async_1.ObservableWrapper.subscribe(eventEmitter, function (eventObj) { return view.triggerEventHandlers(_this.eventName, eventObj, boundElementIndex); });
	    };
	    return EventEmitterAccessor;
	})();
	exports.EventEmitterAccessor = EventEmitterAccessor;
	function _createEventEmitterAccessors(bwv) {
	    var provider = bwv.provider;
	    if (!(provider instanceof DirectiveProvider))
	        return [];
	    var db = provider;
	    return db.eventEmitters.map(function (eventConfig) {
	        var parsedEvent = event_config_1.EventConfig.parse(eventConfig);
	        return new EventEmitterAccessor(parsedEvent.eventName, reflection_1.reflector.getter(parsedEvent.fieldName));
	    });
	}
	function _createProtoQueryRefs(providers) {
	    var res = [];
	    collection_1.ListWrapper.forEachWithIndex(providers, function (b, i) {
	        if (b.provider instanceof DirectiveProvider) {
	            var directiveProvider = b.provider;
	            // field queries
	            var queries = directiveProvider.queries;
	            queries.forEach(function (q) { return res.push(new ProtoQueryRef(i, q.setter, q.metadata)); });
	            // queries passed into the constructor.
	            // TODO: remove this after constructor queries are no longer supported
	            var deps = directiveProvider.resolvedFactory.dependencies;
	            deps.forEach(function (d) {
	                if (lang_1.isPresent(d.queryDecorator))
	                    res.push(new ProtoQueryRef(i, null, d.queryDecorator));
	            });
	        }
	    });
	    return res;
	}
	var ProtoElementInjector = (function () {
	    function ProtoElementInjector(parent, index, bwv, distanceToParent, _firstProviderIsComponent, directiveVariableBindings) {
	        this.parent = parent;
	        this.index = index;
	        this.distanceToParent = distanceToParent;
	        this.directiveVariableBindings = directiveVariableBindings;
	        this._firstProviderIsComponent = _firstProviderIsComponent;
	        var length = bwv.length;
	        this.protoInjector = new injector_1.ProtoInjector(bwv);
	        this.eventEmitterAccessors = collection_1.ListWrapper.createFixedSize(length);
	        for (var i = 0; i < length; ++i) {
	            this.eventEmitterAccessors[i] = _createEventEmitterAccessors(bwv[i]);
	        }
	        this.protoQueryRefs = _createProtoQueryRefs(bwv);
	    }
	    ProtoElementInjector.create = function (parent, index, providers, firstProviderIsComponent, distanceToParent, directiveVariableBindings) {
	        var bd = [];
	        ProtoElementInjector._createDirectiveProviderWithVisibility(providers, bd, firstProviderIsComponent);
	        if (firstProviderIsComponent) {
	            ProtoElementInjector._createViewProvidersWithVisibility(providers, bd);
	        }
	        ProtoElementInjector._createProvidersWithVisibility(providers, bd);
	        return new ProtoElementInjector(parent, index, bd, distanceToParent, firstProviderIsComponent, directiveVariableBindings);
	    };
	    ProtoElementInjector._createDirectiveProviderWithVisibility = function (dirProviders, bd, firstProviderIsComponent) {
	        dirProviders.forEach(function (dirProvider) {
	            bd.push(ProtoElementInjector._createProviderWithVisibility(firstProviderIsComponent, dirProvider, dirProviders, dirProvider));
	        });
	    };
	    ProtoElementInjector._createProvidersWithVisibility = function (dirProviders, bd) {
	        var providersFromAllDirectives = [];
	        dirProviders.forEach(function (dirProvider) {
	            providersFromAllDirectives =
	                collection_1.ListWrapper.concat(providersFromAllDirectives, dirProvider.providers);
	        });
	        var resolved = di_1.Injector.resolve(providersFromAllDirectives);
	        resolved.forEach(function (b) { return bd.push(new injector_1.ProviderWithVisibility(b, injector_1.Visibility.Public)); });
	    };
	    ProtoElementInjector._createProviderWithVisibility = function (firstProviderIsComponent, dirProvider, dirProviders, provider) {
	        var isComponent = firstProviderIsComponent && dirProviders[0] === dirProvider;
	        return new injector_1.ProviderWithVisibility(provider, isComponent ? injector_1.Visibility.PublicAndPrivate : injector_1.Visibility.Public);
	    };
	    ProtoElementInjector._createViewProvidersWithVisibility = function (dirProviders, bd) {
	        var resolvedViewProviders = di_1.Injector.resolve(dirProviders[0].viewProviders);
	        resolvedViewProviders.forEach(function (b) { return bd.push(new injector_1.ProviderWithVisibility(b, injector_1.Visibility.Private)); });
	    };
	    ProtoElementInjector.prototype.instantiate = function (parent) {
	        return new ElementInjector(this, parent);
	    };
	    ProtoElementInjector.prototype.directParent = function () { return this.distanceToParent < 2 ? this.parent : null; };
	    Object.defineProperty(ProtoElementInjector.prototype, "hasBindings", {
	        get: function () { return this.eventEmitterAccessors.length > 0; },
	        enumerable: true,
	        configurable: true
	    });
	    ProtoElementInjector.prototype.getProviderAtIndex = function (index) { return this.protoInjector.getProviderAtIndex(index); };
	    return ProtoElementInjector;
	})();
	exports.ProtoElementInjector = ProtoElementInjector;
	var _Context = (function () {
	    function _Context(element, componentElement, injector) {
	        this.element = element;
	        this.componentElement = componentElement;
	        this.injector = injector;
	    }
	    return _Context;
	})();
	var ElementInjector = (function (_super) {
	    __extends(ElementInjector, _super);
	    function ElementInjector(_proto, parent) {
	        var _this = this;
	        _super.call(this, parent);
	        this._preBuiltObjects = null;
	        this._proto = _proto;
	        this._injector =
	            new di_1.Injector(this._proto.protoInjector, null, this, function () { return _this._debugContext(); });
	        // we couple ourselves to the injector strategy to avoid polymoprhic calls
	        var injectorStrategy = this._injector.internalStrategy;
	        this._strategy = injectorStrategy instanceof injector_1.InjectorInlineStrategy ?
	            new ElementInjectorInlineStrategy(injectorStrategy, this) :
	            new ElementInjectorDynamicStrategy(injectorStrategy, this);
	        this.hydrated = false;
	        this._queryStrategy = this._buildQueryStrategy();
	    }
	    ElementInjector.prototype.dehydrate = function () {
	        this.hydrated = false;
	        this._host = null;
	        this._preBuiltObjects = null;
	        this._strategy.callOnDestroy();
	        this._strategy.dehydrate();
	        this._queryStrategy.dehydrate();
	    };
	    ElementInjector.prototype.hydrate = function (imperativelyCreatedInjector, host, preBuiltObjects) {
	        this._host = host;
	        this._preBuiltObjects = preBuiltObjects;
	        this._reattachInjectors(imperativelyCreatedInjector);
	        this._queryStrategy.hydrate();
	        this._strategy.hydrate();
	        this.hydrated = true;
	    };
	    ElementInjector.prototype._debugContext = function () {
	        var p = this._preBuiltObjects;
	        var index = p.elementRef.boundElementIndex - p.view.elementOffset;
	        var c = this._preBuiltObjects.view.getDebugContext(index, null);
	        return lang_1.isPresent(c) ? new _Context(c.element, c.componentElement, c.injector) : null;
	    };
	    ElementInjector.prototype._reattachInjectors = function (imperativelyCreatedInjector) {
	        // Dynamically-loaded component in the template. Not a root ElementInjector.
	        if (lang_1.isPresent(this._parent)) {
	            if (lang_1.isPresent(imperativelyCreatedInjector)) {
	                // The imperative injector is similar to having an element between
	                // the dynamic-loaded component and its parent => no boundaries.
	                this._reattachInjector(this._injector, imperativelyCreatedInjector, false);
	                this._reattachInjector(imperativelyCreatedInjector, this._parent._injector, false);
	            }
	            else {
	                this._reattachInjector(this._injector, this._parent._injector, false);
	            }
	        }
	        else if (lang_1.isPresent(this._host)) {
	            // The imperative injector is similar to having an element between
	            // the dynamic-loaded component and its parent => no boundary between
	            // the component and imperativelyCreatedInjector.
	            // But since it is a root ElementInjector, we need to create a boundary
	            // between imperativelyCreatedInjector and _host.
	            if (lang_1.isPresent(imperativelyCreatedInjector)) {
	                this._reattachInjector(this._injector, imperativelyCreatedInjector, false);
	                this._reattachInjector(imperativelyCreatedInjector, this._host._injector, true);
	            }
	            else {
	                this._reattachInjector(this._injector, this._host._injector, true);
	            }
	        }
	        else {
	            if (lang_1.isPresent(imperativelyCreatedInjector)) {
	                this._reattachInjector(this._injector, imperativelyCreatedInjector, true);
	            }
	        }
	    };
	    ElementInjector.prototype._reattachInjector = function (injector, parentInjector, isBoundary) {
	        injector.internalStrategy.attach(parentInjector, isBoundary);
	    };
	    ElementInjector.prototype.hasVariableBinding = function (name) {
	        var vb = this._proto.directiveVariableBindings;
	        return lang_1.isPresent(vb) && vb.has(name);
	    };
	    ElementInjector.prototype.getVariableBinding = function (name) {
	        var index = this._proto.directiveVariableBindings.get(name);
	        return lang_1.isPresent(index) ? this.getDirectiveAtIndex(index) : this.getElementRef();
	    };
	    ElementInjector.prototype.get = function (token) { return this._injector.get(token); };
	    ElementInjector.prototype.hasDirective = function (type) { return lang_1.isPresent(this._injector.getOptional(type)); };
	    ElementInjector.prototype.getEventEmitterAccessors = function () { return this._proto.eventEmitterAccessors; };
	    ElementInjector.prototype.getDirectiveVariableBindings = function () {
	        return this._proto.directiveVariableBindings;
	    };
	    ElementInjector.prototype.getComponent = function () { return this._strategy.getComponent(); };
	    ElementInjector.prototype.getInjector = function () { return this._injector; };
	    ElementInjector.prototype.getElementRef = function () { return this._preBuiltObjects.elementRef; };
	    ElementInjector.prototype.getViewContainerRef = function () {
	        return new view_container_ref_2.ViewContainerRef_(this._preBuiltObjects.viewManager, this.getElementRef());
	    };
	    ElementInjector.prototype.getNestedView = function () { return this._preBuiltObjects.nestedView; };
	    ElementInjector.prototype.getView = function () { return this._preBuiltObjects.view; };
	    ElementInjector.prototype.directParent = function () { return this._proto.distanceToParent < 2 ? this.parent : null; };
	    ElementInjector.prototype.isComponentKey = function (key) { return this._strategy.isComponentKey(key); };
	    ElementInjector.prototype.getDependency = function (injector, provider, dep) {
	        var key = dep.key;
	        if (provider instanceof DirectiveProvider) {
	            var dirDep = dep;
	            var dirProvider = provider;
	            var staticKeys = StaticKeys.instance();
	            if (key.id === staticKeys.viewManagerId)
	                return this._preBuiltObjects.viewManager;
	            if (lang_1.isPresent(dirDep.attributeName))
	                return this._buildAttribute(dirDep);
	            if (lang_1.isPresent(dirDep.queryDecorator))
	                return this._queryStrategy.findQuery(dirDep.queryDecorator).list;
	            if (dirDep.key.id === StaticKeys.instance().changeDetectorRefId) {
	                // We provide the component's view change detector to components and
	                // the surrounding component's change detector to directives.
	                if (dirProvider.metadata instanceof directives_1.ComponentMetadata) {
	                    var componentView = this._preBuiltObjects.view.getNestedView(this._preBuiltObjects.elementRef.boundElementIndex);
	                    return componentView.changeDetector.ref;
	                }
	                else {
	                    return this._preBuiltObjects.view.changeDetector.ref;
	                }
	            }
	            if (dirDep.key.id === StaticKeys.instance().elementRefId) {
	                return this.getElementRef();
	            }
	            if (dirDep.key.id === StaticKeys.instance().viewContainerId) {
	                return this.getViewContainerRef();
	            }
	            if (dirDep.key.id === StaticKeys.instance().templateRefId) {
	                if (lang_1.isBlank(this._preBuiltObjects.templateRef)) {
	                    if (dirDep.optional) {
	                        return null;
	                    }
	                    throw new di_1.NoProviderError(null, dirDep.key);
	                }
	                return this._preBuiltObjects.templateRef;
	            }
	        }
	        else if (provider instanceof pipe_provider_1.PipeProvider) {
	            if (dep.key.id === StaticKeys.instance().changeDetectorRefId) {
	                var componentView = this._preBuiltObjects.view.getNestedView(this._preBuiltObjects.elementRef.boundElementIndex);
	                return componentView.changeDetector.ref;
	            }
	        }
	        return injector_1.UNDEFINED;
	    };
	    ElementInjector.prototype._buildAttribute = function (dep) {
	        var attributes = this._proto.attributes;
	        if (lang_1.isPresent(attributes) && attributes.has(dep.attributeName)) {
	            return attributes.get(dep.attributeName);
	        }
	        else {
	            return null;
	        }
	    };
	    ElementInjector.prototype.addDirectivesMatchingQuery = function (query, list) {
	        var templateRef = lang_1.isBlank(this._preBuiltObjects) ? null : this._preBuiltObjects.templateRef;
	        if (query.selector === template_ref_1.TemplateRef && lang_1.isPresent(templateRef)) {
	            list.push(templateRef);
	        }
	        this._strategy.addDirectivesMatchingQuery(query, list);
	    };
	    ElementInjector.prototype._buildQueryStrategy = function () {
	        if (this._proto.protoQueryRefs.length === 0) {
	            return _emptyQueryStrategy;
	        }
	        else if (this._proto.protoQueryRefs.length <=
	            InlineQueryStrategy.NUMBER_OF_SUPPORTED_QUERIES) {
	            return new InlineQueryStrategy(this);
	        }
	        else {
	            return new DynamicQueryStrategy(this);
	        }
	    };
	    ElementInjector.prototype.link = function (parent) { parent.addChild(this); };
	    ElementInjector.prototype.unlink = function () { this.remove(); };
	    ElementInjector.prototype.getDirectiveAtIndex = function (index) { return this._injector.getAt(index); };
	    ElementInjector.prototype.hasInstances = function () { return this._proto.hasBindings && this.hydrated; };
	    ElementInjector.prototype.getHost = function () { return this._host; };
	    ElementInjector.prototype.getBoundElementIndex = function () { return this._proto.index; };
	    ElementInjector.prototype.getRootViewInjectors = function () {
	        if (!this.hydrated)
	            return [];
	        var view = this._preBuiltObjects.view;
	        var nestedView = view.getNestedView(view.elementOffset + this.getBoundElementIndex());
	        return lang_1.isPresent(nestedView) ? nestedView.rootElementInjectors : [];
	    };
	    ElementInjector.prototype.afterViewChecked = function () { this._queryStrategy.updateViewQueries(); };
	    ElementInjector.prototype.afterContentChecked = function () { this._queryStrategy.updateContentQueries(); };
	    ElementInjector.prototype.traverseAndSetQueriesAsDirty = function () {
	        var inj = this;
	        while (lang_1.isPresent(inj)) {
	            inj._setQueriesAsDirty();
	            inj = inj.parent;
	        }
	    };
	    ElementInjector.prototype._setQueriesAsDirty = function () {
	        this._queryStrategy.setContentQueriesAsDirty();
	        if (lang_1.isPresent(this._host))
	            this._host._queryStrategy.setViewQueriesAsDirty();
	    };
	    return ElementInjector;
	})(TreeNode);
	exports.ElementInjector = ElementInjector;
	var _EmptyQueryStrategy = (function () {
	    function _EmptyQueryStrategy() {
	    }
	    _EmptyQueryStrategy.prototype.setContentQueriesAsDirty = function () { };
	    _EmptyQueryStrategy.prototype.setViewQueriesAsDirty = function () { };
	    _EmptyQueryStrategy.prototype.hydrate = function () { };
	    _EmptyQueryStrategy.prototype.dehydrate = function () { };
	    _EmptyQueryStrategy.prototype.updateContentQueries = function () { };
	    _EmptyQueryStrategy.prototype.updateViewQueries = function () { };
	    _EmptyQueryStrategy.prototype.findQuery = function (query) {
	        throw new exceptions_1.BaseException("Cannot find query for directive " + query + ".");
	    };
	    return _EmptyQueryStrategy;
	})();
	var _emptyQueryStrategy = new _EmptyQueryStrategy();
	var InlineQueryStrategy = (function () {
	    function InlineQueryStrategy(ei) {
	        var protoRefs = ei._proto.protoQueryRefs;
	        if (protoRefs.length > 0)
	            this.query0 = new QueryRef(protoRefs[0], ei);
	        if (protoRefs.length > 1)
	            this.query1 = new QueryRef(protoRefs[1], ei);
	        if (protoRefs.length > 2)
	            this.query2 = new QueryRef(protoRefs[2], ei);
	    }
	    InlineQueryStrategy.prototype.setContentQueriesAsDirty = function () {
	        if (lang_1.isPresent(this.query0) && !this.query0.isViewQuery)
	            this.query0.dirty = true;
	        if (lang_1.isPresent(this.query1) && !this.query1.isViewQuery)
	            this.query1.dirty = true;
	        if (lang_1.isPresent(this.query2) && !this.query2.isViewQuery)
	            this.query2.dirty = true;
	    };
	    InlineQueryStrategy.prototype.setViewQueriesAsDirty = function () {
	        if (lang_1.isPresent(this.query0) && this.query0.isViewQuery)
	            this.query0.dirty = true;
	        if (lang_1.isPresent(this.query1) && this.query1.isViewQuery)
	            this.query1.dirty = true;
	        if (lang_1.isPresent(this.query2) && this.query2.isViewQuery)
	            this.query2.dirty = true;
	    };
	    InlineQueryStrategy.prototype.hydrate = function () {
	        if (lang_1.isPresent(this.query0))
	            this.query0.hydrate();
	        if (lang_1.isPresent(this.query1))
	            this.query1.hydrate();
	        if (lang_1.isPresent(this.query2))
	            this.query2.hydrate();
	    };
	    InlineQueryStrategy.prototype.dehydrate = function () {
	        if (lang_1.isPresent(this.query0))
	            this.query0.dehydrate();
	        if (lang_1.isPresent(this.query1))
	            this.query1.dehydrate();
	        if (lang_1.isPresent(this.query2))
	            this.query2.dehydrate();
	    };
	    InlineQueryStrategy.prototype.updateContentQueries = function () {
	        if (lang_1.isPresent(this.query0) && !this.query0.isViewQuery) {
	            this.query0.update();
	        }
	        if (lang_1.isPresent(this.query1) && !this.query1.isViewQuery) {
	            this.query1.update();
	        }
	        if (lang_1.isPresent(this.query2) && !this.query2.isViewQuery) {
	            this.query2.update();
	        }
	    };
	    InlineQueryStrategy.prototype.updateViewQueries = function () {
	        if (lang_1.isPresent(this.query0) && this.query0.isViewQuery) {
	            this.query0.update();
	        }
	        if (lang_1.isPresent(this.query1) && this.query1.isViewQuery) {
	            this.query1.update();
	        }
	        if (lang_1.isPresent(this.query2) && this.query2.isViewQuery) {
	            this.query2.update();
	        }
	    };
	    InlineQueryStrategy.prototype.findQuery = function (query) {
	        if (lang_1.isPresent(this.query0) && this.query0.protoQueryRef.query === query) {
	            return this.query0;
	        }
	        if (lang_1.isPresent(this.query1) && this.query1.protoQueryRef.query === query) {
	            return this.query1;
	        }
	        if (lang_1.isPresent(this.query2) && this.query2.protoQueryRef.query === query) {
	            return this.query2;
	        }
	        throw new exceptions_1.BaseException("Cannot find query for directive " + query + ".");
	    };
	    InlineQueryStrategy.NUMBER_OF_SUPPORTED_QUERIES = 3;
	    return InlineQueryStrategy;
	})();
	var DynamicQueryStrategy = (function () {
	    function DynamicQueryStrategy(ei) {
	        this.queries = ei._proto.protoQueryRefs.map(function (p) { return new QueryRef(p, ei); });
	    }
	    DynamicQueryStrategy.prototype.setContentQueriesAsDirty = function () {
	        for (var i = 0; i < this.queries.length; ++i) {
	            var q = this.queries[i];
	            if (!q.isViewQuery)
	                q.dirty = true;
	        }
	    };
	    DynamicQueryStrategy.prototype.setViewQueriesAsDirty = function () {
	        for (var i = 0; i < this.queries.length; ++i) {
	            var q = this.queries[i];
	            if (q.isViewQuery)
	                q.dirty = true;
	        }
	    };
	    DynamicQueryStrategy.prototype.hydrate = function () {
	        for (var i = 0; i < this.queries.length; ++i) {
	            var q = this.queries[i];
	            q.hydrate();
	        }
	    };
	    DynamicQueryStrategy.prototype.dehydrate = function () {
	        for (var i = 0; i < this.queries.length; ++i) {
	            var q = this.queries[i];
	            q.dehydrate();
	        }
	    };
	    DynamicQueryStrategy.prototype.updateContentQueries = function () {
	        for (var i = 0; i < this.queries.length; ++i) {
	            var q = this.queries[i];
	            if (!q.isViewQuery) {
	                q.update();
	            }
	        }
	    };
	    DynamicQueryStrategy.prototype.updateViewQueries = function () {
	        for (var i = 0; i < this.queries.length; ++i) {
	            var q = this.queries[i];
	            if (q.isViewQuery) {
	                q.update();
	            }
	        }
	    };
	    DynamicQueryStrategy.prototype.findQuery = function (query) {
	        for (var i = 0; i < this.queries.length; ++i) {
	            var q = this.queries[i];
	            if (q.protoQueryRef.query === query) {
	                return q;
	            }
	        }
	        throw new exceptions_1.BaseException("Cannot find query for directive " + query + ".");
	    };
	    return DynamicQueryStrategy;
	})();
	/**
	 * Strategy used by the `ElementInjector` when the number of providers is 10 or less.
	 * In such a case, inlining fields is beneficial for performances.
	 */
	var ElementInjectorInlineStrategy = (function () {
	    function ElementInjectorInlineStrategy(injectorStrategy, _ei) {
	        this.injectorStrategy = injectorStrategy;
	        this._ei = _ei;
	    }
	    ElementInjectorInlineStrategy.prototype.hydrate = function () {
	        var i = this.injectorStrategy;
	        var p = i.protoStrategy;
	        i.resetConstructionCounter();
	        if (p.provider0 instanceof DirectiveProvider && lang_1.isPresent(p.keyId0) && i.obj0 === injector_1.UNDEFINED)
	            i.obj0 = i.instantiateProvider(p.provider0, p.visibility0);
	        if (p.provider1 instanceof DirectiveProvider && lang_1.isPresent(p.keyId1) && i.obj1 === injector_1.UNDEFINED)
	            i.obj1 = i.instantiateProvider(p.provider1, p.visibility1);
	        if (p.provider2 instanceof DirectiveProvider && lang_1.isPresent(p.keyId2) && i.obj2 === injector_1.UNDEFINED)
	            i.obj2 = i.instantiateProvider(p.provider2, p.visibility2);
	        if (p.provider3 instanceof DirectiveProvider && lang_1.isPresent(p.keyId3) && i.obj3 === injector_1.UNDEFINED)
	            i.obj3 = i.instantiateProvider(p.provider3, p.visibility3);
	        if (p.provider4 instanceof DirectiveProvider && lang_1.isPresent(p.keyId4) && i.obj4 === injector_1.UNDEFINED)
	            i.obj4 = i.instantiateProvider(p.provider4, p.visibility4);
	        if (p.provider5 instanceof DirectiveProvider && lang_1.isPresent(p.keyId5) && i.obj5 === injector_1.UNDEFINED)
	            i.obj5 = i.instantiateProvider(p.provider5, p.visibility5);
	        if (p.provider6 instanceof DirectiveProvider && lang_1.isPresent(p.keyId6) && i.obj6 === injector_1.UNDEFINED)
	            i.obj6 = i.instantiateProvider(p.provider6, p.visibility6);
	        if (p.provider7 instanceof DirectiveProvider && lang_1.isPresent(p.keyId7) && i.obj7 === injector_1.UNDEFINED)
	            i.obj7 = i.instantiateProvider(p.provider7, p.visibility7);
	        if (p.provider8 instanceof DirectiveProvider && lang_1.isPresent(p.keyId8) && i.obj8 === injector_1.UNDEFINED)
	            i.obj8 = i.instantiateProvider(p.provider8, p.visibility8);
	        if (p.provider9 instanceof DirectiveProvider && lang_1.isPresent(p.keyId9) && i.obj9 === injector_1.UNDEFINED)
	            i.obj9 = i.instantiateProvider(p.provider9, p.visibility9);
	    };
	    ElementInjectorInlineStrategy.prototype.dehydrate = function () {
	        var i = this.injectorStrategy;
	        i.obj0 = injector_1.UNDEFINED;
	        i.obj1 = injector_1.UNDEFINED;
	        i.obj2 = injector_1.UNDEFINED;
	        i.obj3 = injector_1.UNDEFINED;
	        i.obj4 = injector_1.UNDEFINED;
	        i.obj5 = injector_1.UNDEFINED;
	        i.obj6 = injector_1.UNDEFINED;
	        i.obj7 = injector_1.UNDEFINED;
	        i.obj8 = injector_1.UNDEFINED;
	        i.obj9 = injector_1.UNDEFINED;
	    };
	    ElementInjectorInlineStrategy.prototype.callOnDestroy = function () {
	        var i = this.injectorStrategy;
	        var p = i.protoStrategy;
	        if (p.provider0 instanceof DirectiveProvider &&
	            p.provider0.callOnDestroy) {
	            i.obj0.onDestroy();
	        }
	        if (p.provider1 instanceof DirectiveProvider &&
	            p.provider1.callOnDestroy) {
	            i.obj1.onDestroy();
	        }
	        if (p.provider2 instanceof DirectiveProvider &&
	            p.provider2.callOnDestroy) {
	            i.obj2.onDestroy();
	        }
	        if (p.provider3 instanceof DirectiveProvider &&
	            p.provider3.callOnDestroy) {
	            i.obj3.onDestroy();
	        }
	        if (p.provider4 instanceof DirectiveProvider &&
	            p.provider4.callOnDestroy) {
	            i.obj4.onDestroy();
	        }
	        if (p.provider5 instanceof DirectiveProvider &&
	            p.provider5.callOnDestroy) {
	            i.obj5.onDestroy();
	        }
	        if (p.provider6 instanceof DirectiveProvider &&
	            p.provider6.callOnDestroy) {
	            i.obj6.onDestroy();
	        }
	        if (p.provider7 instanceof DirectiveProvider &&
	            p.provider7.callOnDestroy) {
	            i.obj7.onDestroy();
	        }
	        if (p.provider8 instanceof DirectiveProvider &&
	            p.provider8.callOnDestroy) {
	            i.obj8.onDestroy();
	        }
	        if (p.provider9 instanceof DirectiveProvider &&
	            p.provider9.callOnDestroy) {
	            i.obj9.onDestroy();
	        }
	    };
	    ElementInjectorInlineStrategy.prototype.getComponent = function () { return this.injectorStrategy.obj0; };
	    ElementInjectorInlineStrategy.prototype.isComponentKey = function (key) {
	        return this._ei._proto._firstProviderIsComponent && lang_1.isPresent(key) &&
	            key.id === this.injectorStrategy.protoStrategy.keyId0;
	    };
	    ElementInjectorInlineStrategy.prototype.addDirectivesMatchingQuery = function (query, list) {
	        var i = this.injectorStrategy;
	        var p = i.protoStrategy;
	        if (lang_1.isPresent(p.provider0) && p.provider0.key.token === query.selector) {
	            if (i.obj0 === injector_1.UNDEFINED)
	                i.obj0 = i.instantiateProvider(p.provider0, p.visibility0);
	            list.push(i.obj0);
	        }
	        if (lang_1.isPresent(p.provider1) && p.provider1.key.token === query.selector) {
	            if (i.obj1 === injector_1.UNDEFINED)
	                i.obj1 = i.instantiateProvider(p.provider1, p.visibility1);
	            list.push(i.obj1);
	        }
	        if (lang_1.isPresent(p.provider2) && p.provider2.key.token === query.selector) {
	            if (i.obj2 === injector_1.UNDEFINED)
	                i.obj2 = i.instantiateProvider(p.provider2, p.visibility2);
	            list.push(i.obj2);
	        }
	        if (lang_1.isPresent(p.provider3) && p.provider3.key.token === query.selector) {
	            if (i.obj3 === injector_1.UNDEFINED)
	                i.obj3 = i.instantiateProvider(p.provider3, p.visibility3);
	            list.push(i.obj3);
	        }
	        if (lang_1.isPresent(p.provider4) && p.provider4.key.token === query.selector) {
	            if (i.obj4 === injector_1.UNDEFINED)
	                i.obj4 = i.instantiateProvider(p.provider4, p.visibility4);
	            list.push(i.obj4);
	        }
	        if (lang_1.isPresent(p.provider5) && p.provider5.key.token === query.selector) {
	            if (i.obj5 === injector_1.UNDEFINED)
	                i.obj5 = i.instantiateProvider(p.provider5, p.visibility5);
	            list.push(i.obj5);
	        }
	        if (lang_1.isPresent(p.provider6) && p.provider6.key.token === query.selector) {
	            if (i.obj6 === injector_1.UNDEFINED)
	                i.obj6 = i.instantiateProvider(p.provider6, p.visibility6);
	            list.push(i.obj6);
	        }
	        if (lang_1.isPresent(p.provider7) && p.provider7.key.token === query.selector) {
	            if (i.obj7 === injector_1.UNDEFINED)
	                i.obj7 = i.instantiateProvider(p.provider7, p.visibility7);
	            list.push(i.obj7);
	        }
	        if (lang_1.isPresent(p.provider8) && p.provider8.key.token === query.selector) {
	            if (i.obj8 === injector_1.UNDEFINED)
	                i.obj8 = i.instantiateProvider(p.provider8, p.visibility8);
	            list.push(i.obj8);
	        }
	        if (lang_1.isPresent(p.provider9) && p.provider9.key.token === query.selector) {
	            if (i.obj9 === injector_1.UNDEFINED)
	                i.obj9 = i.instantiateProvider(p.provider9, p.visibility9);
	            list.push(i.obj9);
	        }
	    };
	    return ElementInjectorInlineStrategy;
	})();
	/**
	 * Strategy used by the `ElementInjector` when the number of bindings is 11 or more.
	 * In such a case, there are too many fields to inline (see ElementInjectorInlineStrategy).
	 */
	var ElementInjectorDynamicStrategy = (function () {
	    function ElementInjectorDynamicStrategy(injectorStrategy, _ei) {
	        this.injectorStrategy = injectorStrategy;
	        this._ei = _ei;
	    }
	    ElementInjectorDynamicStrategy.prototype.hydrate = function () {
	        var inj = this.injectorStrategy;
	        var p = inj.protoStrategy;
	        inj.resetConstructionCounter();
	        for (var i = 0; i < p.keyIds.length; i++) {
	            if (p.providers[i] instanceof DirectiveProvider && lang_1.isPresent(p.keyIds[i]) &&
	                inj.objs[i] === injector_1.UNDEFINED) {
	                inj.objs[i] = inj.instantiateProvider(p.providers[i], p.visibilities[i]);
	            }
	        }
	    };
	    ElementInjectorDynamicStrategy.prototype.dehydrate = function () {
	        var inj = this.injectorStrategy;
	        collection_1.ListWrapper.fill(inj.objs, injector_1.UNDEFINED);
	    };
	    ElementInjectorDynamicStrategy.prototype.callOnDestroy = function () {
	        var ist = this.injectorStrategy;
	        var p = ist.protoStrategy;
	        for (var i = 0; i < p.providers.length; i++) {
	            if (p.providers[i] instanceof DirectiveProvider &&
	                p.providers[i].callOnDestroy) {
	                ist.objs[i].onDestroy();
	            }
	        }
	    };
	    ElementInjectorDynamicStrategy.prototype.getComponent = function () { return this.injectorStrategy.objs[0]; };
	    ElementInjectorDynamicStrategy.prototype.isComponentKey = function (key) {
	        var p = this.injectorStrategy.protoStrategy;
	        return this._ei._proto._firstProviderIsComponent && lang_1.isPresent(key) && key.id === p.keyIds[0];
	    };
	    ElementInjectorDynamicStrategy.prototype.addDirectivesMatchingQuery = function (query, list) {
	        var ist = this.injectorStrategy;
	        var p = ist.protoStrategy;
	        for (var i = 0; i < p.providers.length; i++) {
	            if (p.providers[i].key.token === query.selector) {
	                if (ist.objs[i] === injector_1.UNDEFINED) {
	                    ist.objs[i] = ist.instantiateProvider(p.providers[i], p.visibilities[i]);
	                }
	                list.push(ist.objs[i]);
	            }
	        }
	    };
	    return ElementInjectorDynamicStrategy;
	})();
	var ProtoQueryRef = (function () {
	    function ProtoQueryRef(dirIndex, setter, query) {
	        this.dirIndex = dirIndex;
	        this.setter = setter;
	        this.query = query;
	    }
	    Object.defineProperty(ProtoQueryRef.prototype, "usesPropertySyntax", {
	        get: function () { return lang_1.isPresent(this.setter); },
	        enumerable: true,
	        configurable: true
	    });
	    return ProtoQueryRef;
	})();
	exports.ProtoQueryRef = ProtoQueryRef;
	var QueryRef = (function () {
	    function QueryRef(protoQueryRef, originator) {
	        this.protoQueryRef = protoQueryRef;
	        this.originator = originator;
	    }
	    Object.defineProperty(QueryRef.prototype, "isViewQuery", {
	        get: function () { return this.protoQueryRef.query.isViewQuery; },
	        enumerable: true,
	        configurable: true
	    });
	    QueryRef.prototype.update = function () {
	        if (!this.dirty)
	            return;
	        this._update();
	        this.dirty = false;
	        // TODO delete the check once only field queries are supported
	        if (this.protoQueryRef.usesPropertySyntax) {
	            var dir = this.originator.getDirectiveAtIndex(this.protoQueryRef.dirIndex);
	            if (this.protoQueryRef.query.first) {
	                this.protoQueryRef.setter(dir, this.list.length > 0 ? this.list.first : null);
	            }
	            else {
	                this.protoQueryRef.setter(dir, this.list);
	            }
	        }
	        this.list.notifyOnChanges();
	    };
	    QueryRef.prototype._update = function () {
	        var aggregator = [];
	        if (this.protoQueryRef.query.isViewQuery) {
	            var view = this.originator.getView();
	            // intentionally skipping originator for view queries.
	            var nestedView = view.getNestedView(view.elementOffset + this.originator.getBoundElementIndex());
	            if (lang_1.isPresent(nestedView))
	                this._visitView(nestedView, aggregator);
	        }
	        else {
	            this._visit(this.originator, aggregator);
	        }
	        this.list.reset(aggregator);
	    };
	    ;
	    QueryRef.prototype._visit = function (inj, aggregator) {
	        var view = inj.getView();
	        var startIdx = view.elementOffset + inj._proto.index;
	        for (var i = startIdx; i < view.elementOffset + view.ownBindersCount; i++) {
	            var curInj = view.elementInjectors[i];
	            if (lang_1.isBlank(curInj))
	                continue;
	            // The first injector after inj, that is outside the subtree rooted at
	            // inj has to have a null parent or a parent that is an ancestor of inj.
	            if (i > startIdx && (lang_1.isBlank(curInj) || lang_1.isBlank(curInj.parent) ||
	                view.elementOffset + curInj.parent._proto.index < startIdx)) {
	                break;
	            }
	            if (!this.protoQueryRef.query.descendants &&
	                !(curInj.parent == this.originator || curInj == this.originator))
	                continue;
	            // We visit the view container(VC) views right after the injector that contains
	            // the VC. Theoretically, that might not be the right order if there are
	            // child injectors of said injector. Not clear whether if such case can
	            // even be constructed with the current apis.
	            this._visitInjector(curInj, aggregator);
	            var vc = view.viewContainers[i];
	            if (lang_1.isPresent(vc))
	                this._visitViewContainer(vc, aggregator);
	        }
	    };
	    QueryRef.prototype._visitInjector = function (inj, aggregator) {
	        if (this.protoQueryRef.query.isVarBindingQuery) {
	            this._aggregateVariableBinding(inj, aggregator);
	        }
	        else {
	            this._aggregateDirective(inj, aggregator);
	        }
	    };
	    QueryRef.prototype._visitViewContainer = function (vc, aggregator) {
	        for (var j = 0; j < vc.views.length; j++) {
	            this._visitView(vc.views[j], aggregator);
	        }
	    };
	    QueryRef.prototype._visitView = function (view, aggregator) {
	        for (var i = view.elementOffset; i < view.elementOffset + view.ownBindersCount; i++) {
	            var inj = view.elementInjectors[i];
	            if (lang_1.isBlank(inj))
	                continue;
	            this._visitInjector(inj, aggregator);
	            var vc = view.viewContainers[i];
	            if (lang_1.isPresent(vc))
	                this._visitViewContainer(vc, aggregator);
	        }
	    };
	    QueryRef.prototype._aggregateVariableBinding = function (inj, aggregator) {
	        var vb = this.protoQueryRef.query.varBindings;
	        for (var i = 0; i < vb.length; ++i) {
	            if (inj.hasVariableBinding(vb[i])) {
	                aggregator.push(inj.getVariableBinding(vb[i]));
	            }
	        }
	    };
	    QueryRef.prototype._aggregateDirective = function (inj, aggregator) {
	        inj.addDirectivesMatchingQuery(this.protoQueryRef.query, aggregator);
	    };
	    QueryRef.prototype.dehydrate = function () { this.list = null; };
	    QueryRef.prototype.hydrate = function () {
	        this.list = new query_list_1.QueryList();
	        this.dirty = true;
	    };
	    return QueryRef;
	})();
	exports.QueryRef = QueryRef;
	//# sourceMappingURL=element_injector.js.map

/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var di_1 = __webpack_require__(196);
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var viewModule = __webpack_require__(266);
	var view_ref_1 = __webpack_require__(267);
	var api_1 = __webpack_require__(262);
	var view_manager_utils_1 = __webpack_require__(272);
	var view_pool_1 = __webpack_require__(275);
	var view_listener_1 = __webpack_require__(276);
	var profile_1 = __webpack_require__(235);
	var proto_view_factory_1 = __webpack_require__(261);
	/**
	 * Service exposing low level API for creating, moving and destroying Views.
	 *
	 * Most applications should use higher-level abstractions like {@link DynamicComponentLoader} and
	 * {@link ViewContainerRef} instead.
	 */
	var AppViewManager = (function () {
	    function AppViewManager() {
	    }
	    /**
	     * Returns the {@link ElementRef} that makes up the specified Host View.
	     */
	    AppViewManager.prototype.getHostElement = function (hostViewRef) {
	        var hostView = view_ref_1.internalView(hostViewRef);
	        if (hostView.proto.type !== viewModule.ViewType.HOST) {
	            throw new exceptions_1.BaseException('This operation is only allowed on host views');
	        }
	        return hostView.elementRefs[hostView.elementOffset];
	    };
	    return AppViewManager;
	})();
	exports.AppViewManager = AppViewManager;
	var AppViewManager_ = (function (_super) {
	    __extends(AppViewManager_, _super);
	    function AppViewManager_(_viewPool, _viewListener, _utils, _renderer, _protoViewFactory) {
	        _super.call(this);
	        this._viewPool = _viewPool;
	        this._viewListener = _viewListener;
	        this._utils = _utils;
	        this._renderer = _renderer;
	        /** @internal */
	        this._createRootHostViewScope = profile_1.wtfCreateScope('AppViewManager#createRootHostView()');
	        /** @internal */
	        this._destroyRootHostViewScope = profile_1.wtfCreateScope('AppViewManager#destroyRootHostView()');
	        /** @internal */
	        this._createEmbeddedViewInContainerScope = profile_1.wtfCreateScope('AppViewManager#createEmbeddedViewInContainer()');
	        /** @internal */
	        this._createHostViewInContainerScope = profile_1.wtfCreateScope('AppViewManager#createHostViewInContainer()');
	        /** @internal */
	        this._destroyViewInContainerScope = profile_1.wtfCreateScope('AppViewMananger#destroyViewInContainer()');
	        /** @internal */
	        this._attachViewInContainerScope = profile_1.wtfCreateScope('AppViewMananger#attachViewInContainer()');
	        /** @internal */
	        this._detachViewInContainerScope = profile_1.wtfCreateScope('AppViewMananger#detachViewInContainer()');
	        this._protoViewFactory = _protoViewFactory;
	    }
	    AppViewManager_.prototype.getViewContainer = function (location) {
	        var hostView = view_ref_1.internalView(location.parentView);
	        return hostView.elementInjectors[location.boundElementIndex]
	            .getViewContainerRef();
	    };
	    AppViewManager_.prototype.getNamedElementInComponentView = function (hostLocation, variableName) {
	        var hostView = view_ref_1.internalView(hostLocation.parentView);
	        var boundElementIndex = hostLocation.boundElementIndex;
	        var componentView = hostView.getNestedView(boundElementIndex);
	        if (lang_1.isBlank(componentView)) {
	            throw new exceptions_1.BaseException("There is no component directive at element " + boundElementIndex);
	        }
	        var binderIdx = componentView.proto.variableLocations.get(variableName);
	        if (lang_1.isBlank(binderIdx)) {
	            throw new exceptions_1.BaseException("Could not find variable " + variableName);
	        }
	        return componentView.elementRefs[componentView.elementOffset + binderIdx];
	    };
	    AppViewManager_.prototype.getComponent = function (hostLocation) {
	        var hostView = view_ref_1.internalView(hostLocation.parentView);
	        var boundElementIndex = hostLocation.boundElementIndex;
	        return this._utils.getComponentInstance(hostView, boundElementIndex);
	    };
	    AppViewManager_.prototype.createRootHostView = function (hostProtoViewRef, overrideSelector, injector) {
	        var s = this._createRootHostViewScope();
	        var hostProtoView = view_ref_1.internalProtoView(hostProtoViewRef);
	        this._protoViewFactory.initializeProtoViewIfNeeded(hostProtoView);
	        var hostElementSelector = overrideSelector;
	        if (lang_1.isBlank(hostElementSelector)) {
	            hostElementSelector = hostProtoView.elementBinders[0].componentDirective.metadata.selector;
	        }
	        var renderViewWithFragments = this._renderer.createRootHostView(hostProtoView.render, hostProtoView.mergeInfo.embeddedViewCount + 1, hostElementSelector);
	        var hostView = this._createMainView(hostProtoView, renderViewWithFragments);
	        this._renderer.hydrateView(hostView.render);
	        this._utils.hydrateRootHostView(hostView, injector);
	        return profile_1.wtfLeave(s, hostView.ref);
	    };
	    AppViewManager_.prototype.destroyRootHostView = function (hostViewRef) {
	        // Note: Don't put the hostView into the view pool
	        // as it is depending on the element for which it was created.
	        var s = this._destroyRootHostViewScope();
	        var hostView = view_ref_1.internalView(hostViewRef);
	        this._renderer.detachFragment(hostView.renderFragment);
	        this._renderer.dehydrateView(hostView.render);
	        this._viewDehydrateRecurse(hostView);
	        this._viewListener.onViewDestroyed(hostView);
	        this._renderer.destroyView(hostView.render);
	        profile_1.wtfLeave(s);
	    };
	    AppViewManager_.prototype.createEmbeddedViewInContainer = function (viewContainerLocation, index, templateRef) {
	        var s = this._createEmbeddedViewInContainerScope();
	        var protoView = view_ref_1.internalProtoView(templateRef.protoViewRef);
	        if (protoView.type !== viewModule.ViewType.EMBEDDED) {
	            throw new exceptions_1.BaseException('This method can only be called with embedded ProtoViews!');
	        }
	        this._protoViewFactory.initializeProtoViewIfNeeded(protoView);
	        return profile_1.wtfLeave(s, this._createViewInContainer(viewContainerLocation, index, protoView, templateRef.elementRef, null));
	    };
	    AppViewManager_.prototype.createHostViewInContainer = function (viewContainerLocation, index, protoViewRef, imperativelyCreatedInjector) {
	        var s = this._createHostViewInContainerScope();
	        var protoView = view_ref_1.internalProtoView(protoViewRef);
	        if (protoView.type !== viewModule.ViewType.HOST) {
	            throw new exceptions_1.BaseException('This method can only be called with host ProtoViews!');
	        }
	        this._protoViewFactory.initializeProtoViewIfNeeded(protoView);
	        return profile_1.wtfLeave(s, this._createViewInContainer(viewContainerLocation, index, protoView, viewContainerLocation, imperativelyCreatedInjector));
	    };
	    /**
	     *
	     * See {@link AppViewManager#destroyViewInContainer}.
	     * @internal
	     */
	    AppViewManager_.prototype._createViewInContainer = function (viewContainerLocation, index, protoView, context, imperativelyCreatedInjector) {
	        var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
	        var boundElementIndex = viewContainerLocation.boundElementIndex;
	        var contextView = view_ref_1.internalView(context.parentView);
	        var contextBoundElementIndex = context.boundElementIndex;
	        var embeddedFragmentView = contextView.getNestedView(contextBoundElementIndex);
	        var view;
	        if (protoView.type === viewModule.ViewType.EMBEDDED && lang_1.isPresent(embeddedFragmentView) &&
	            !embeddedFragmentView.hydrated()) {
	            // Case 1: instantiate the first view of a template that has been merged into a parent
	            view = embeddedFragmentView;
	            this._attachRenderView(parentView, boundElementIndex, index, view);
	        }
	        else {
	            // Case 2: instantiate another copy of the template or a host ProtoView.
	            // This is a separate case
	            // as we only inline one copy of the template into the parent view.
	            view = this._createPooledView(protoView);
	            this._attachRenderView(parentView, boundElementIndex, index, view);
	            this._renderer.hydrateView(view.render);
	        }
	        this._utils.attachViewInContainer(parentView, boundElementIndex, contextView, contextBoundElementIndex, index, view);
	        this._utils.hydrateViewInContainer(parentView, boundElementIndex, contextView, contextBoundElementIndex, index, imperativelyCreatedInjector);
	        return view.ref;
	    };
	    /** @internal */
	    AppViewManager_.prototype._attachRenderView = function (parentView, boundElementIndex, index, view) {
	        var elementRef = parentView.elementRefs[boundElementIndex];
	        if (index === 0) {
	            this._renderer.attachFragmentAfterElement(elementRef, view.renderFragment);
	        }
	        else {
	            var prevView = parentView.viewContainers[boundElementIndex].views[index - 1];
	            this._renderer.attachFragmentAfterFragment(prevView.renderFragment, view.renderFragment);
	        }
	    };
	    AppViewManager_.prototype.destroyViewInContainer = function (viewContainerLocation, index) {
	        var s = this._destroyViewInContainerScope();
	        var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
	        var boundElementIndex = viewContainerLocation.boundElementIndex;
	        this._destroyViewInContainer(parentView, boundElementIndex, index);
	        profile_1.wtfLeave(s);
	    };
	    // TODO(i): refactor detachViewInContainer+attachViewInContainer to moveViewInContainer
	    AppViewManager_.prototype.attachViewInContainer = function (viewContainerLocation, index, viewRef) {
	        var s = this._attachViewInContainerScope();
	        var view = view_ref_1.internalView(viewRef);
	        var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
	        var boundElementIndex = viewContainerLocation.boundElementIndex;
	        // TODO(tbosch): the public methods attachViewInContainer/detachViewInContainer
	        // are used for moving elements without the same container.
	        // We will change this into an atomic `move` operation, which should preserve the
	        // previous parent injector (see https://github.com/angular/angular/issues/1377).
	        // Right now we are destroying any special
	        // context view that might have been used.
	        this._utils.attachViewInContainer(parentView, boundElementIndex, null, null, index, view);
	        this._attachRenderView(parentView, boundElementIndex, index, view);
	        return profile_1.wtfLeave(s, viewRef);
	    };
	    // TODO(i): refactor detachViewInContainer+attachViewInContainer to moveViewInContainer
	    AppViewManager_.prototype.detachViewInContainer = function (viewContainerLocation, index) {
	        var s = this._detachViewInContainerScope();
	        var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
	        var boundElementIndex = viewContainerLocation.boundElementIndex;
	        var viewContainer = parentView.viewContainers[boundElementIndex];
	        var view = viewContainer.views[index];
	        this._utils.detachViewInContainer(parentView, boundElementIndex, index);
	        this._renderer.detachFragment(view.renderFragment);
	        return profile_1.wtfLeave(s, view.ref);
	    };
	    /** @internal */
	    AppViewManager_.prototype._createMainView = function (protoView, renderViewWithFragments) {
	        var mergedParentView = this._utils.createView(protoView, renderViewWithFragments, this, this._renderer);
	        this._renderer.setEventDispatcher(mergedParentView.render, mergedParentView);
	        this._viewListener.onViewCreated(mergedParentView);
	        return mergedParentView;
	    };
	    /** @internal */
	    AppViewManager_.prototype._createPooledView = function (protoView) {
	        var view = this._viewPool.getView(protoView);
	        if (lang_1.isBlank(view)) {
	            view = this._createMainView(protoView, this._renderer.createView(protoView.render, protoView.mergeInfo.embeddedViewCount + 1));
	        }
	        return view;
	    };
	    /** @internal */
	    AppViewManager_.prototype._destroyPooledView = function (view) {
	        var wasReturned = this._viewPool.returnView(view);
	        if (!wasReturned) {
	            this._viewListener.onViewDestroyed(view);
	            this._renderer.destroyView(view.render);
	        }
	    };
	    /** @internal */
	    AppViewManager_.prototype._destroyViewInContainer = function (parentView, boundElementIndex, index) {
	        var viewContainer = parentView.viewContainers[boundElementIndex];
	        var view = viewContainer.views[index];
	        this._viewDehydrateRecurse(view);
	        this._utils.detachViewInContainer(parentView, boundElementIndex, index);
	        if (view.viewOffset > 0) {
	            // Case 1: a view that is part of another view.
	            // Just detach the fragment
	            this._renderer.detachFragment(view.renderFragment);
	        }
	        else {
	            // Case 2: a view that is not part of another view.
	            // dehydrate and destroy it.
	            this._renderer.dehydrateView(view.render);
	            this._renderer.detachFragment(view.renderFragment);
	            this._destroyPooledView(view);
	        }
	    };
	    /** @internal */
	    AppViewManager_.prototype._viewDehydrateRecurse = function (view) {
	        if (view.hydrated()) {
	            this._utils.dehydrateView(view);
	        }
	        var viewContainers = view.viewContainers;
	        var startViewOffset = view.viewOffset;
	        var endViewOffset = view.viewOffset + view.proto.mergeInfo.viewCount - 1;
	        var elementOffset = view.elementOffset;
	        for (var viewIdx = startViewOffset; viewIdx <= endViewOffset; viewIdx++) {
	            var currView = view.views[viewIdx];
	            for (var binderIdx = 0; binderIdx < currView.proto.elementBinders.length; binderIdx++, elementOffset++) {
	                var vc = viewContainers[elementOffset];
	                if (lang_1.isPresent(vc)) {
	                    for (var j = vc.views.length - 1; j >= 0; j--) {
	                        this._destroyViewInContainer(currView, elementOffset, j);
	                    }
	                }
	            }
	        }
	    };
	    AppViewManager_ = __decorate([
	        di_1.Injectable(),
	        __param(4, di_1.Inject(di_1.forwardRef(function () { return proto_view_factory_1.ProtoViewFactory; }))), 
	        __metadata('design:paramtypes', [view_pool_1.AppViewPool, view_listener_1.AppViewListener, view_manager_utils_1.AppViewManagerUtils, api_1.Renderer, Object])
	    ], AppViewManager_);
	    return AppViewManager_;
	})(AppViewManager);
	exports.AppViewManager_ = AppViewManager_;
	//# sourceMappingURL=view_manager.js.map

/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(196);
	var collection_1 = __webpack_require__(202);
	var eli = __webpack_require__(270);
	var lang_1 = __webpack_require__(49);
	var viewModule = __webpack_require__(266);
	var element_ref_1 = __webpack_require__(273);
	var template_ref_1 = __webpack_require__(274);
	var pipes_1 = __webpack_require__(264);
	var AppViewManagerUtils = (function () {
	    function AppViewManagerUtils() {
	    }
	    AppViewManagerUtils.prototype.getComponentInstance = function (parentView, boundElementIndex) {
	        var eli = parentView.elementInjectors[boundElementIndex];
	        return eli.getComponent();
	    };
	    AppViewManagerUtils.prototype.createView = function (mergedParentViewProto, renderViewWithFragments, viewManager, renderer) {
	        var renderFragments = renderViewWithFragments.fragmentRefs;
	        var renderView = renderViewWithFragments.viewRef;
	        var elementCount = mergedParentViewProto.mergeInfo.elementCount;
	        var viewCount = mergedParentViewProto.mergeInfo.viewCount;
	        var elementRefs = collection_1.ListWrapper.createFixedSize(elementCount);
	        var viewContainers = collection_1.ListWrapper.createFixedSize(elementCount);
	        var preBuiltObjects = collection_1.ListWrapper.createFixedSize(elementCount);
	        var elementInjectors = collection_1.ListWrapper.createFixedSize(elementCount);
	        var views = collection_1.ListWrapper.createFixedSize(viewCount);
	        var elementOffset = 0;
	        var textOffset = 0;
	        var fragmentIdx = 0;
	        var containerElementIndicesByViewIndex = collection_1.ListWrapper.createFixedSize(viewCount);
	        for (var viewOffset = 0; viewOffset < viewCount; viewOffset++) {
	            var containerElementIndex = containerElementIndicesByViewIndex[viewOffset];
	            var containerElementInjector = lang_1.isPresent(containerElementIndex) ? elementInjectors[containerElementIndex] : null;
	            var parentView = lang_1.isPresent(containerElementInjector) ? preBuiltObjects[containerElementIndex].view : null;
	            var protoView = lang_1.isPresent(containerElementIndex) ?
	                parentView.proto.elementBinders[containerElementIndex - parentView.elementOffset]
	                    .nestedProtoView :
	                mergedParentViewProto;
	            var renderFragment = null;
	            if (viewOffset === 0 || protoView.type === viewModule.ViewType.EMBEDDED) {
	                renderFragment = renderFragments[fragmentIdx++];
	            }
	            var currentView = new viewModule.AppView(renderer, protoView, viewOffset, elementOffset, textOffset, protoView.protoLocals, renderView, renderFragment, containerElementInjector);
	            views[viewOffset] = currentView;
	            if (lang_1.isPresent(containerElementIndex)) {
	                preBuiltObjects[containerElementIndex].nestedView = currentView;
	            }
	            var rootElementInjectors = [];
	            var nestedViewOffset = viewOffset + 1;
	            for (var binderIdx = 0; binderIdx < protoView.elementBinders.length; binderIdx++) {
	                var binder = protoView.elementBinders[binderIdx];
	                var boundElementIndex = elementOffset + binderIdx;
	                var elementInjector = null;
	                if (lang_1.isPresent(binder.nestedProtoView) && binder.nestedProtoView.isMergable) {
	                    containerElementIndicesByViewIndex[nestedViewOffset] = boundElementIndex;
	                    nestedViewOffset += binder.nestedProtoView.mergeInfo.viewCount;
	                }
	                // elementInjectors and rootElementInjectors
	                var protoElementInjector = binder.protoElementInjector;
	                if (lang_1.isPresent(protoElementInjector)) {
	                    if (lang_1.isPresent(protoElementInjector.parent)) {
	                        var parentElementInjector = elementInjectors[elementOffset + protoElementInjector.parent.index];
	                        elementInjector = protoElementInjector.instantiate(parentElementInjector);
	                    }
	                    else {
	                        elementInjector = protoElementInjector.instantiate(null);
	                        rootElementInjectors.push(elementInjector);
	                    }
	                }
	                elementInjectors[boundElementIndex] = elementInjector;
	                // elementRefs
	                var el = new element_ref_1.ElementRef_(currentView.ref, boundElementIndex, renderer);
	                elementRefs[el.boundElementIndex] = el;
	                // preBuiltObjects
	                if (lang_1.isPresent(elementInjector)) {
	                    var templateRef = lang_1.isPresent(binder.nestedProtoView) &&
	                        binder.nestedProtoView.type === viewModule.ViewType.EMBEDDED ?
	                        new template_ref_1.TemplateRef_(el) :
	                        null;
	                    preBuiltObjects[boundElementIndex] =
	                        new eli.PreBuiltObjects(viewManager, currentView, el, templateRef);
	                }
	            }
	            currentView.init(protoView.changeDetectorFactory(currentView), elementInjectors, rootElementInjectors, preBuiltObjects, views, elementRefs, viewContainers);
	            if (lang_1.isPresent(parentView) && protoView.type === viewModule.ViewType.COMPONENT) {
	                parentView.changeDetector.addViewChild(currentView.changeDetector);
	            }
	            elementOffset += protoView.elementBinders.length;
	            textOffset += protoView.textBindingCount;
	        }
	        return views[0];
	    };
	    AppViewManagerUtils.prototype.hydrateRootHostView = function (hostView, injector) {
	        this._hydrateView(hostView, injector, null, new Object(), null);
	    };
	    // Misnomer: this method is attaching next to the view container.
	    AppViewManagerUtils.prototype.attachViewInContainer = function (parentView, boundElementIndex, contextView, contextBoundElementIndex, index, view) {
	        if (lang_1.isBlank(contextView)) {
	            contextView = parentView;
	            contextBoundElementIndex = boundElementIndex;
	        }
	        parentView.changeDetector.addContentChild(view.changeDetector);
	        var viewContainer = parentView.viewContainers[boundElementIndex];
	        if (lang_1.isBlank(viewContainer)) {
	            viewContainer = new viewModule.AppViewContainer();
	            parentView.viewContainers[boundElementIndex] = viewContainer;
	        }
	        collection_1.ListWrapper.insert(viewContainer.views, index, view);
	        var elementInjector = contextView.elementInjectors[contextBoundElementIndex];
	        for (var i = view.rootElementInjectors.length - 1; i >= 0; i--) {
	            if (lang_1.isPresent(elementInjector.parent)) {
	                view.rootElementInjectors[i].link(elementInjector.parent);
	            }
	        }
	        elementInjector.traverseAndSetQueriesAsDirty();
	    };
	    AppViewManagerUtils.prototype.detachViewInContainer = function (parentView, boundElementIndex, index) {
	        var viewContainer = parentView.viewContainers[boundElementIndex];
	        var view = viewContainer.views[index];
	        parentView.elementInjectors[boundElementIndex].traverseAndSetQueriesAsDirty();
	        view.changeDetector.remove();
	        collection_1.ListWrapper.removeAt(viewContainer.views, index);
	        for (var i = 0; i < view.rootElementInjectors.length; ++i) {
	            var inj = view.rootElementInjectors[i];
	            inj.unlink();
	        }
	    };
	    AppViewManagerUtils.prototype.hydrateViewInContainer = function (parentView, boundElementIndex, contextView, contextBoundElementIndex, index, imperativelyCreatedProviders) {
	        if (lang_1.isBlank(contextView)) {
	            contextView = parentView;
	            contextBoundElementIndex = boundElementIndex;
	        }
	        var viewContainer = parentView.viewContainers[boundElementIndex];
	        var view = viewContainer.views[index];
	        var elementInjector = contextView.elementInjectors[contextBoundElementIndex];
	        var injector = lang_1.isPresent(imperativelyCreatedProviders) ?
	            di_1.Injector.fromResolvedProviders(imperativelyCreatedProviders) :
	            null;
	        this._hydrateView(view, injector, elementInjector.getHost(), contextView.context, contextView.locals);
	    };
	    /** @internal */
	    AppViewManagerUtils.prototype._hydrateView = function (initView, imperativelyCreatedInjector, hostElementInjector, context, parentLocals) {
	        var viewIdx = initView.viewOffset;
	        var endViewOffset = viewIdx + initView.proto.mergeInfo.viewCount - 1;
	        while (viewIdx <= endViewOffset) {
	            var currView = initView.views[viewIdx];
	            var currProtoView = currView.proto;
	            if (currView !== initView && currView.proto.type === viewModule.ViewType.EMBEDDED) {
	                // Don't hydrate components of embedded fragment views.
	                viewIdx += currView.proto.mergeInfo.viewCount;
	            }
	            else {
	                if (currView !== initView) {
	                    // hydrate a nested component view
	                    imperativelyCreatedInjector = null;
	                    parentLocals = null;
	                    hostElementInjector = currView.containerElementInjector;
	                    context = hostElementInjector.getComponent();
	                }
	                currView.context = context;
	                currView.locals.parent = parentLocals;
	                var binders = currProtoView.elementBinders;
	                for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
	                    var boundElementIndex = binderIdx + currView.elementOffset;
	                    var elementInjector = initView.elementInjectors[boundElementIndex];
	                    if (lang_1.isPresent(elementInjector)) {
	                        elementInjector.hydrate(imperativelyCreatedInjector, hostElementInjector, currView.preBuiltObjects[boundElementIndex]);
	                        this._populateViewLocals(currView, elementInjector, boundElementIndex);
	                        this._setUpEventEmitters(currView, elementInjector, boundElementIndex);
	                    }
	                }
	                var pipes = lang_1.isPresent(hostElementInjector) ?
	                    new pipes_1.Pipes(currView.proto.pipes, hostElementInjector.getInjector()) :
	                    null;
	                currView.changeDetector.hydrate(currView.context, currView.locals, currView, pipes);
	                viewIdx++;
	            }
	        }
	    };
	    /** @internal */
	    AppViewManagerUtils.prototype._populateViewLocals = function (view, elementInjector, boundElementIdx) {
	        if (lang_1.isPresent(elementInjector.getDirectiveVariableBindings())) {
	            elementInjector.getDirectiveVariableBindings().forEach(function (directiveIndex, name) {
	                if (lang_1.isBlank(directiveIndex)) {
	                    view.locals.set(name, view.elementRefs[boundElementIdx].nativeElement);
	                }
	                else {
	                    view.locals.set(name, elementInjector.getDirectiveAtIndex(directiveIndex));
	                }
	            });
	        }
	    };
	    /** @internal */
	    AppViewManagerUtils.prototype._setUpEventEmitters = function (view, elementInjector, boundElementIndex) {
	        var emitters = elementInjector.getEventEmitterAccessors();
	        for (var directiveIndex = 0; directiveIndex < emitters.length; ++directiveIndex) {
	            var directiveEmitters = emitters[directiveIndex];
	            var directive = elementInjector.getDirectiveAtIndex(directiveIndex);
	            for (var eventIndex = 0; eventIndex < directiveEmitters.length; ++eventIndex) {
	                var eventEmitterAccessor = directiveEmitters[eventIndex];
	                eventEmitterAccessor.subscribe(view, boundElementIndex, directive);
	            }
	        }
	    };
	    AppViewManagerUtils.prototype.dehydrateView = function (initView) {
	        var endViewOffset = initView.viewOffset + initView.proto.mergeInfo.viewCount - 1;
	        for (var viewIdx = initView.viewOffset; viewIdx <= endViewOffset; viewIdx++) {
	            var currView = initView.views[viewIdx];
	            if (currView.hydrated()) {
	                if (lang_1.isPresent(currView.locals)) {
	                    currView.locals.clearValues();
	                }
	                currView.context = null;
	                currView.changeDetector.dehydrate();
	                var binders = currView.proto.elementBinders;
	                for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
	                    var eli = initView.elementInjectors[currView.elementOffset + binderIdx];
	                    if (lang_1.isPresent(eli)) {
	                        eli.dehydrate();
	                    }
	                }
	            }
	        }
	    };
	    AppViewManagerUtils = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], AppViewManagerUtils);
	    return AppViewManagerUtils;
	})();
	exports.AppViewManagerUtils = AppViewManagerUtils;
	//# sourceMappingURL=view_manager_utils.js.map

/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var exceptions_1 = __webpack_require__(204);
	/**
	 * Represents a location in a View that has an injection, change-detection and render context
	 * associated with it.
	 *
	 * An `ElementRef` is created for each element in the Template that contains a Directive, Component
	 * or data-binding.
	 *
	 * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM
	 * element.
	 */
	var ElementRef = (function () {
	    function ElementRef() {
	    }
	    Object.defineProperty(ElementRef.prototype, "nativeElement", {
	        /**
	         * The underlying native element or `null` if direct access to native elements is not supported
	         * (e.g. when the application runs in a web worker).
	         *
	         * <div class="callout is-critical">
	         *   <header>Use with caution</header>
	         *   <p>
	         *    Use this API as the last resort when direct access to DOM is needed. Use templating and
	         *    data-binding provided by Angular instead. Alternatively you take a look at {@link Renderer}
	         *    which provides API that can safely be used even when direct access to native elements is not
	         *    supported.
	         *   </p>
	         *   <p>
	         *    Relying on direct DOM access creates tight coupling between your application and rendering
	         *    layers which will make it impossible to separate the two and deploy your application into a
	         *    web worker.
	         *   </p>
	         * </div>
	         */
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(ElementRef.prototype, "renderView", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    return ElementRef;
	})();
	exports.ElementRef = ElementRef;
	var ElementRef_ = (function (_super) {
	    __extends(ElementRef_, _super);
	    function ElementRef_(parentView, 
	        /**
	         * Index of the element inside the {@link ViewRef}.
	         *
	         * This is used internally by the Angular framework to locate elements.
	         */
	        boundElementIndex, _renderer) {
	        _super.call(this);
	        this.parentView = parentView;
	        this.boundElementIndex = boundElementIndex;
	        this._renderer = _renderer;
	    }
	    Object.defineProperty(ElementRef_.prototype, "renderView", {
	        get: function () { return this.parentView.render; },
	        set: function (value) { exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ElementRef_.prototype, "nativeElement", {
	        get: function () { return this._renderer.getNativeElementSync(this); },
	        enumerable: true,
	        configurable: true
	    });
	    return ElementRef_;
	})(ElementRef);
	exports.ElementRef_ = ElementRef_;
	//# sourceMappingURL=element_ref.js.map

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var view_ref_1 = __webpack_require__(267);
	/**
	 * Represents an Embedded Template that can be used to instantiate Embedded Views.
	 *
	 * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<template>` element (or
	 * directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into the
	 * constructor of the directive using the `TemplateRef` Token. Alternatively you can query for the
	 * `TemplateRef` from a Component or a Directive via {@link Query}.
	 *
	 * To instantiate Embedded Views based on a Template, use
	 * {@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the
	 * View Container.
	 */
	var TemplateRef = (function () {
	    function TemplateRef() {
	    }
	    return TemplateRef;
	})();
	exports.TemplateRef = TemplateRef;
	var TemplateRef_ = (function (_super) {
	    __extends(TemplateRef_, _super);
	    function TemplateRef_(elementRef) {
	        _super.call(this);
	        this.elementRef = elementRef;
	    }
	    TemplateRef_.prototype._getProtoView = function () {
	        var elementRef = this.elementRef;
	        var parentView = view_ref_1.internalView(elementRef.parentView);
	        return parentView.proto.elementBinders[elementRef.boundElementIndex - parentView.elementOffset]
	            .nestedProtoView;
	    };
	    Object.defineProperty(TemplateRef_.prototype, "protoViewRef", {
	        /**
	         * Reference to the ProtoView used for creating Embedded Views that are based on the compiled
	         * Embedded Template.
	         */
	        get: function () { return this._getProtoView().ref; },
	        enumerable: true,
	        configurable: true
	    });
	    TemplateRef_.prototype.hasLocal = function (name) {
	        return this._getProtoView().templateVariableBindings.has(name);
	    };
	    return TemplateRef_;
	})(TemplateRef);
	exports.TemplateRef_ = TemplateRef_;
	//# sourceMappingURL=template_ref.js.map

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var di_1 = __webpack_require__(196);
	var lang_1 = __webpack_require__(49);
	var collection_1 = __webpack_require__(202);
	exports.APP_VIEW_POOL_CAPACITY = lang_1.CONST_EXPR(new di_1.OpaqueToken('AppViewPool.viewPoolCapacity'));
	var AppViewPool = (function () {
	    function AppViewPool(poolCapacityPerProtoView) {
	        /** @internal */
	        this._pooledViewsPerProtoView = new collection_1.Map();
	        this._poolCapacityPerProtoView = poolCapacityPerProtoView;
	    }
	    AppViewPool.prototype.getView = function (protoView) {
	        var pooledViews = this._pooledViewsPerProtoView.get(protoView);
	        if (lang_1.isPresent(pooledViews) && pooledViews.length > 0) {
	            return pooledViews.pop();
	        }
	        return null;
	    };
	    AppViewPool.prototype.returnView = function (view) {
	        var protoView = view.proto;
	        var pooledViews = this._pooledViewsPerProtoView.get(protoView);
	        if (lang_1.isBlank(pooledViews)) {
	            pooledViews = [];
	            this._pooledViewsPerProtoView.set(protoView, pooledViews);
	        }
	        var haveRemainingCapacity = pooledViews.length < this._poolCapacityPerProtoView;
	        if (haveRemainingCapacity) {
	            pooledViews.push(view);
	        }
	        return haveRemainingCapacity;
	    };
	    AppViewPool = __decorate([
	        di_1.Injectable(),
	        __param(0, di_1.Inject(exports.APP_VIEW_POOL_CAPACITY)), 
	        __metadata('design:paramtypes', [Object])
	    ], AppViewPool);
	    return AppViewPool;
	})();
	exports.AppViewPool = AppViewPool;
	//# sourceMappingURL=view_pool.js.map

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(196);
	/**
	 * Listener for view creation / destruction.
	 */
	var AppViewListener = (function () {
	    function AppViewListener() {
	    }
	    AppViewListener.prototype.onViewCreated = function (view) { };
	    AppViewListener.prototype.onViewDestroyed = function (view) { };
	    AppViewListener = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], AppViewListener);
	    return AppViewListener;
	})();
	exports.AppViewListener = AppViewListener;
	//# sourceMappingURL=view_listener.js.map

/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var collection_1 = __webpack_require__(202);
	var exceptions_1 = __webpack_require__(204);
	var lang_1 = __webpack_require__(49);
	var view_ref_1 = __webpack_require__(267);
	/**
	 * Represents a container where one or more Views can be attached.
	 *
	 * The container can contain two kinds of Views. Host Views, created by instantiating a
	 * {@link Component} via {@link #createHostView}, and Embedded Views, created by instantiating an
	 * {@link TemplateRef Embedded Template} via {@link #createEmbeddedView}.
	 *
	 * The location of the View Container within the containing View is specified by the Anchor
	 * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only
	 * have a single View Container.
	 *
	 * Root elements of Views attached to this container become siblings of the Anchor Element in
	 * the Rendered View.
	 *
	 * To access a `ViewContainerRef` of an Element, you can either place a {@link Directive} injected
	 * with `ViewContainerRef` on the Element, or you obtain it via
	 * {@link AppViewManager#getViewContainer}.
	 *
	 * <!-- TODO(i): we are also considering ElementRef#viewContainer api -->
	 */
	var ViewContainerRef = (function () {
	    function ViewContainerRef() {
	    }
	    /**
	     * Destroys all Views in this container.
	     */
	    ViewContainerRef.prototype.clear = function () {
	        for (var i = this.length - 1; i >= 0; i--) {
	            this.remove(i);
	        }
	    };
	    Object.defineProperty(ViewContainerRef.prototype, "length", {
	        /**
	         * Returns the number of Views currently attached to this container.
	         */
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    return ViewContainerRef;
	})();
	exports.ViewContainerRef = ViewContainerRef;
	var ViewContainerRef_ = (function (_super) {
	    __extends(ViewContainerRef_, _super);
	    function ViewContainerRef_(viewManager, element) {
	        _super.call(this);
	        this.viewManager = viewManager;
	        this.element = element;
	    }
	    ViewContainerRef_.prototype._getViews = function () {
	        var element = this.element;
	        var vc = view_ref_1.internalView(element.parentView).viewContainers[element.boundElementIndex];
	        return lang_1.isPresent(vc) ? vc.views : [];
	    };
	    ViewContainerRef_.prototype.get = function (index) { return this._getViews()[index].ref; };
	    Object.defineProperty(ViewContainerRef_.prototype, "length", {
	        get: function () { return this._getViews().length; },
	        enumerable: true,
	        configurable: true
	    });
	    // TODO(rado): profile and decide whether bounds checks should be added
	    // to the methods below.
	    ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, index) {
	        if (index === void 0) { index = -1; }
	        if (index == -1)
	            index = this.length;
	        return this.viewManager.createEmbeddedViewInContainer(this.element, index, templateRef);
	    };
	    ViewContainerRef_.prototype.createHostView = function (protoViewRef, index, dynamicallyCreatedProviders) {
	        if (protoViewRef === void 0) { protoViewRef = null; }
	        if (index === void 0) { index = -1; }
	        if (dynamicallyCreatedProviders === void 0) { dynamicallyCreatedProviders = null; }
	        if (index == -1)
	            index = this.length;
	        return this.viewManager.createHostViewInContainer(this.element, index, protoViewRef, dynamicallyCreatedProviders);
	    };
	    // TODO(i): refactor insert+remove into move
	    ViewContainerRef_.prototype.insert = function (viewRef, index) {
	        if (index === void 0) { index = -1; }
	        if (index == -1)
	            index = this.length;
	        return this.viewManager.attachViewInContainer(this.element, index, viewRef);
	    };
	    ViewContainerRef_.prototype.indexOf = function (viewRef) {
	        return collection_1.ListWrapper.indexOf(this._getViews(), view_ref_1.internalView(viewRef));
	    };
	    // TODO(i): rename to destroy
	    ViewContainerRef_.prototype.remove = function (index) {
	        if (index === void 0) { index = -1; }
	        if (index == -1)
	            index = this.length - 1;
	        this.viewManager.destroyViewInContainer(this.element, index);
	        // view is intentionally not returned to the client.
	    };
	    // TODO(i): refactor insert+remove into move
	    ViewContainerRef_.prototype.detach = function (index) {
	        if (index === void 0) { index = -1; }
	        if (index == -1)
	            index = this.length - 1;
	        return this.viewManager.detachViewInContainer(this.element, index);
	    };
	    return ViewContainerRef_;
	})(ViewContainerRef);
	exports.ViewContainerRef_ = ViewContainerRef_;
	//# sourceMappingURL=view_container_ref.js.map

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var interfaces_1 = __webpack_require__(279);
	function hasLifecycleHook(lcInterface, token) {
	    if (!(token instanceof lang_1.Type))
	        return false;
	    var proto = token.prototype;
	    switch (lcInterface) {
	        case interfaces_1.LifecycleHooks.AfterContentInit:
	            return !!proto.afterContentInit;
	        case interfaces_1.LifecycleHooks.AfterContentChecked:
	            return !!proto.afterContentChecked;
	        case interfaces_1.LifecycleHooks.AfterViewInit:
	            return !!proto.afterViewInit;
	        case interfaces_1.LifecycleHooks.AfterViewChecked:
	            return !!proto.afterViewChecked;
	        case interfaces_1.LifecycleHooks.OnChanges:
	            return !!proto.onChanges;
	        case interfaces_1.LifecycleHooks.DoCheck:
	            return !!proto.doCheck;
	        case interfaces_1.LifecycleHooks.OnDestroy:
	            return !!proto.onDestroy;
	        case interfaces_1.LifecycleHooks.OnInit:
	            return !!proto.onInit;
	        default:
	            return false;
	    }
	}
	exports.hasLifecycleHook = hasLifecycleHook;
	//# sourceMappingURL=directive_lifecycle_reflector.js.map

/***/ },
/* 279 */
/***/ function(module, exports) {

	'use strict';(function (LifecycleHooks) {
	    LifecycleHooks[LifecycleHooks["OnInit"] = 0] = "OnInit";
	    LifecycleHooks[LifecycleHooks["OnDestroy"] = 1] = "OnDestroy";
	    LifecycleHooks[LifecycleHooks["DoCheck"] = 2] = "DoCheck";
	    LifecycleHooks[LifecycleHooks["OnChanges"] = 3] = "OnChanges";
	    LifecycleHooks[LifecycleHooks["AfterContentInit"] = 4] = "AfterContentInit";
	    LifecycleHooks[LifecycleHooks["AfterContentChecked"] = 5] = "AfterContentChecked";
	    LifecycleHooks[LifecycleHooks["AfterViewInit"] = 6] = "AfterViewInit";
	    LifecycleHooks[LifecycleHooks["AfterViewChecked"] = 7] = "AfterViewChecked";
	})(exports.LifecycleHooks || (exports.LifecycleHooks = {}));
	var LifecycleHooks = exports.LifecycleHooks;
	/**
	 * @internal
	 */
	exports.LIFECYCLE_HOOKS_VALUES = [
	    LifecycleHooks.OnInit,
	    LifecycleHooks.OnDestroy,
	    LifecycleHooks.DoCheck,
	    LifecycleHooks.OnChanges,
	    LifecycleHooks.AfterContentInit,
	    LifecycleHooks.AfterContentChecked,
	    LifecycleHooks.AfterViewInit,
	    LifecycleHooks.AfterViewChecked
	];
	//# sourceMappingURL=interfaces.js.map

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var collection_1 = __webpack_require__(202);
	var lang_1 = __webpack_require__(49);
	var async_1 = __webpack_require__(50);
	/**
	 * An unmodifiable list of items that Angular keeps up to date when the state
	 * of the application changes.
	 *
	 * The type of object that {@link QueryMetadata} and {@link ViewQueryMetadata} provide.
	 *
	 * Implements an iterable interface, therefore it can be used in both ES6
	 * javascript `for (var i of items)` loops as well as in Angular templates with
	 * `*ng-for="#i of myList"`.
	 *
	 * Changes can be observed by subscribing to the changes `Observable`.
	 *
	 * NOTE: In the future this class will implement an `Observable` interface.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))
	 * ```typescript
	 * @Component({...})
	 * class Container {
	 *   constructor(@Query(Item) items: QueryList<Item>) {
	 *     items.changes.subscribe(_ => console.log(items.length));
	 *   }
	 * }
	 * ```
	 */
	var QueryList = (function () {
	    function QueryList() {
	        this._results = [];
	        this._emitter = new async_1.EventEmitter();
	    }
	    Object.defineProperty(QueryList.prototype, "changes", {
	        get: function () { return this._emitter; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QueryList.prototype, "length", {
	        get: function () { return this._results.length; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QueryList.prototype, "first", {
	        get: function () { return collection_1.ListWrapper.first(this._results); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QueryList.prototype, "last", {
	        get: function () { return collection_1.ListWrapper.last(this._results); },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * returns a new array with the passed in function applied to each element.
	     */
	    QueryList.prototype.map = function (fn) { return this._results.map(fn); };
	    /**
	     * returns a filtered array.
	     */
	    QueryList.prototype.filter = function (fn) { return this._results.filter(fn); };
	    /**
	     * returns a reduced value.
	     */
	    QueryList.prototype.reduce = function (fn, init) { return this._results.reduce(fn, init); };
	    /**
	     * converts QueryList into an array
	     */
	    QueryList.prototype.toArray = function () { return collection_1.ListWrapper.clone(this._results); };
	    QueryList.prototype[lang_1.getSymbolIterator()] = function () { return this._results[lang_1.getSymbolIterator()](); };
	    QueryList.prototype.toString = function () { return this._results.toString(); };
	    /**
	     * @internal
	     */
	    QueryList.prototype.reset = function (res) { this._results = res; };
	    /** @internal */
	    QueryList.prototype.notifyOnChanges = function () { this._emitter.next(this); };
	    return QueryList;
	})();
	exports.QueryList = QueryList;
	//# sourceMappingURL=query_list.js.map

/***/ },
/* 281 */
/***/ function(module, exports) {

	'use strict';exports.EVENT_TARGET_SEPARATOR = ':';
	var EventConfig = (function () {
	    function EventConfig(fieldName, eventName, isLongForm) {
	        this.fieldName = fieldName;
	        this.eventName = eventName;
	        this.isLongForm = isLongForm;
	    }
	    EventConfig.parse = function (eventConfig) {
	        var fieldName = eventConfig, eventName = eventConfig, isLongForm = false;
	        var separatorIdx = eventConfig.indexOf(exports.EVENT_TARGET_SEPARATOR);
	        if (separatorIdx > -1) {
	            // long format: 'fieldName: eventName'
	            fieldName = eventConfig.substring(0, separatorIdx).trim();
	            eventName = eventConfig.substring(separatorIdx + 1).trim();
	            isLongForm = true;
	        }
	        return new EventConfig(fieldName, eventName, isLongForm);
	    };
	    EventConfig.prototype.getFullName = function () {
	        return this.isLongForm ? "" + this.fieldName + exports.EVENT_TARGET_SEPARATOR + this.eventName :
	            this.eventName;
	    };
	    return EventConfig;
	})();
	exports.EventConfig = EventConfig;
	//# sourceMappingURL=event_config.js.map

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(196);
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var metadata_1 = __webpack_require__(194);
	var reflection_1 = __webpack_require__(206);
	function _isPipeMetadata(type) {
	    return type instanceof metadata_1.PipeMetadata;
	}
	/**
	 * Resolve a `Type` for {@link PipeMetadata}.
	 *
	 * This interface can be overridden by the application developer to create custom behavior.
	 *
	 * See {@link Compiler}
	 */
	var PipeResolver = (function () {
	    function PipeResolver() {
	    }
	    /**
	     * Return {@link PipeMetadata} for a given `Type`.
	     */
	    PipeResolver.prototype.resolve = function (type) {
	        var metas = reflection_1.reflector.annotations(di_1.resolveForwardRef(type));
	        if (lang_1.isPresent(metas)) {
	            var annotation = metas.find(_isPipeMetadata);
	            if (lang_1.isPresent(annotation)) {
	                return annotation;
	            }
	        }
	        throw new exceptions_1.BaseException("No Pipe decorator found on " + lang_1.stringify(type));
	    };
	    PipeResolver = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], PipeResolver);
	    return PipeResolver;
	})();
	exports.PipeResolver = PipeResolver;
	//# sourceMappingURL=pipe_resolver.js.map

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var di_1 = __webpack_require__(196);
	var lang_1 = __webpack_require__(49);
	/**
	 * A token that can be provided when bootstraping an application to make an array of directives
	 * available in every component of the application.
	 *
	 * ### Example
	 *
	 * ```typescript
	 * import {PLATFORM_DIRECTIVES} from 'angular2/angular2';
	 * import {OtherDirective} from './myDirectives';
	 *
	 * @Component({
	 *   selector: 'my-component',
	 *   template: `
	 *     <!-- can use other directive even though the component does not list it in `directives` -->
	 *     <other-directive></other-directive>
	 *   `
	 * })
	 * export class MyComponent {
	 *   ...
	 * }
	 *
	 * bootstrap(MyComponent, [provide(PLATFORM_DIRECTIVES, {useValue: [OtherDirective], multi:true})]);
	 * ```
	 */
	exports.PLATFORM_DIRECTIVES = lang_1.CONST_EXPR(new di_1.OpaqueToken("Platform Directives"));
	/**
	 * A token that can be provided when bootstraping an application to make an array of pipes
	 * available in every component of the application.
	 *
	 * ### Example
	 *
	 * ```typescript
	 * import {PLATFORM_PIPES} from 'angular2/angular2';
	 * import {OtherPipe} from './myPipe';
	 *
	 * @Component({
	 *   selector: 'my-component',
	 *   template: `
	 *     {{123 | other-pipe}}
	 *   `
	 * })
	 * export class MyComponent {
	 *   ...
	 * }
	 *
	 * bootstrap(MyComponent, [provide(PLATFORM_PIPES, {useValue: [OtherPipe], multi:true})]);
	 * ```
	 */
	exports.PLATFORM_PIPES = lang_1.CONST_EXPR(new di_1.OpaqueToken("Platform Pipes"));
	//# sourceMappingURL=platform_directives_and_pipes.js.map

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var render_1 = __webpack_require__(285);
	var metadata_1 = __webpack_require__(194);
	// Export ViewEncapsulation so that compiled templates only need to depend
	// on template_commands.
	var metadata_2 = __webpack_require__(194);
	exports.ViewEncapsulation = metadata_2.ViewEncapsulation;
	/**
	 * A compiled host template.
	 *
	 * This is const as we are storing it as annotation
	 * for the compiled component type.
	 */
	var CompiledHostTemplate = (function () {
	    function CompiledHostTemplate(template) {
	        this.template = template;
	    }
	    CompiledHostTemplate = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [CompiledComponentTemplate])
	    ], CompiledHostTemplate);
	    return CompiledHostTemplate;
	})();
	exports.CompiledHostTemplate = CompiledHostTemplate;
	/**
	 * A compiled template.
	 */
	var CompiledComponentTemplate = (function () {
	    function CompiledComponentTemplate(id, changeDetectorFactory, commands, styles) {
	        this.id = id;
	        this.changeDetectorFactory = changeDetectorFactory;
	        this.commands = commands;
	        this.styles = styles;
	    }
	    CompiledComponentTemplate = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [String, Function, Array, Array])
	    ], CompiledComponentTemplate);
	    return CompiledComponentTemplate;
	})();
	exports.CompiledComponentTemplate = CompiledComponentTemplate;
	var EMPTY_ARR = lang_1.CONST_EXPR([]);
	var TextCmd = (function () {
	    function TextCmd(value, isBound, ngContentIndex) {
	        this.value = value;
	        this.isBound = isBound;
	        this.ngContentIndex = ngContentIndex;
	    }
	    TextCmd.prototype.visit = function (visitor, context) {
	        return visitor.visitText(this, context);
	    };
	    TextCmd = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [String, Boolean, Number])
	    ], TextCmd);
	    return TextCmd;
	})();
	exports.TextCmd = TextCmd;
	var NgContentCmd = (function () {
	    function NgContentCmd(index, ngContentIndex) {
	        this.index = index;
	        this.ngContentIndex = ngContentIndex;
	        this.isBound = false;
	    }
	    NgContentCmd.prototype.visit = function (visitor, context) {
	        return visitor.visitNgContent(this, context);
	    };
	    NgContentCmd = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Number, Number])
	    ], NgContentCmd);
	    return NgContentCmd;
	})();
	exports.NgContentCmd = NgContentCmd;
	var IBeginElementCmd = (function (_super) {
	    __extends(IBeginElementCmd, _super);
	    function IBeginElementCmd() {
	        _super.apply(this, arguments);
	    }
	    Object.defineProperty(IBeginElementCmd.prototype, "variableNameAndValues", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(IBeginElementCmd.prototype, "eventTargetAndNames", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(IBeginElementCmd.prototype, "directives", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    return IBeginElementCmd;
	})(render_1.RenderBeginElementCmd);
	exports.IBeginElementCmd = IBeginElementCmd;
	var BeginElementCmd = (function () {
	    function BeginElementCmd(name, attrNameAndValues, eventTargetAndNames, variableNameAndValues, directives, isBound, ngContentIndex) {
	        this.name = name;
	        this.attrNameAndValues = attrNameAndValues;
	        this.eventTargetAndNames = eventTargetAndNames;
	        this.variableNameAndValues = variableNameAndValues;
	        this.directives = directives;
	        this.isBound = isBound;
	        this.ngContentIndex = ngContentIndex;
	    }
	    BeginElementCmd.prototype.visit = function (visitor, context) {
	        return visitor.visitBeginElement(this, context);
	    };
	    BeginElementCmd = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [String, Array, Array, Array, Array, Boolean, Number])
	    ], BeginElementCmd);
	    return BeginElementCmd;
	})();
	exports.BeginElementCmd = BeginElementCmd;
	var EndElementCmd = (function () {
	    function EndElementCmd() {
	    }
	    EndElementCmd.prototype.visit = function (visitor, context) {
	        return visitor.visitEndElement(context);
	    };
	    EndElementCmd = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], EndElementCmd);
	    return EndElementCmd;
	})();
	exports.EndElementCmd = EndElementCmd;
	var BeginComponentCmd = (function () {
	    function BeginComponentCmd(name, attrNameAndValues, eventTargetAndNames, variableNameAndValues, directives, encapsulation, ngContentIndex, 
	        // Note: the template needs to be stored as a function
	        // so that we can resolve cycles
	        templateGetter /*() => CompiledComponentTemplate*/) {
	        this.name = name;
	        this.attrNameAndValues = attrNameAndValues;
	        this.eventTargetAndNames = eventTargetAndNames;
	        this.variableNameAndValues = variableNameAndValues;
	        this.directives = directives;
	        this.encapsulation = encapsulation;
	        this.ngContentIndex = ngContentIndex;
	        this.templateGetter = templateGetter;
	        this.isBound = true;
	    }
	    Object.defineProperty(BeginComponentCmd.prototype, "templateId", {
	        get: function () { return this.templateGetter().id; },
	        enumerable: true,
	        configurable: true
	    });
	    BeginComponentCmd.prototype.visit = function (visitor, context) {
	        return visitor.visitBeginComponent(this, context);
	    };
	    BeginComponentCmd = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [String, Array, Array, Array, Array, Number, Number, Function])
	    ], BeginComponentCmd);
	    return BeginComponentCmd;
	})();
	exports.BeginComponentCmd = BeginComponentCmd;
	var EndComponentCmd = (function () {
	    function EndComponentCmd() {
	    }
	    EndComponentCmd.prototype.visit = function (visitor, context) {
	        return visitor.visitEndComponent(context);
	    };
	    EndComponentCmd = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], EndComponentCmd);
	    return EndComponentCmd;
	})();
	exports.EndComponentCmd = EndComponentCmd;
	var EmbeddedTemplateCmd = (function () {
	    function EmbeddedTemplateCmd(attrNameAndValues, variableNameAndValues, directives, isMerged, ngContentIndex, changeDetectorFactory, children) {
	        this.attrNameAndValues = attrNameAndValues;
	        this.variableNameAndValues = variableNameAndValues;
	        this.directives = directives;
	        this.isMerged = isMerged;
	        this.ngContentIndex = ngContentIndex;
	        this.changeDetectorFactory = changeDetectorFactory;
	        this.children = children;
	        this.isBound = true;
	        this.name = null;
	        this.eventTargetAndNames = EMPTY_ARR;
	    }
	    EmbeddedTemplateCmd.prototype.visit = function (visitor, context) {
	        return visitor.visitEmbeddedTemplate(this, context);
	    };
	    EmbeddedTemplateCmd = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Array, Array, Array, Boolean, Number, Function, Array])
	    ], EmbeddedTemplateCmd);
	    return EmbeddedTemplateCmd;
	})();
	exports.EmbeddedTemplateCmd = EmbeddedTemplateCmd;
	function visitAllCommands(visitor, cmds, context) {
	    if (context === void 0) { context = null; }
	    for (var i = 0; i < cmds.length; i++) {
	        cmds[i].visit(visitor, context);
	    }
	}
	exports.visitAllCommands = visitAllCommands;
	//# sourceMappingURL=template_commands.js.map

/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * @module
	 * @description
	 * This module provides advanced support for extending dom strategy.
	 */
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(286));
	__export(__webpack_require__(289));
	__export(__webpack_require__(288));
	__export(__webpack_require__(262));
	//# sourceMappingURL=render.js.map

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var dom_adapter_1 = __webpack_require__(287);
	var di_1 = __webpack_require__(196);
	var collection_1 = __webpack_require__(202);
	var dom_tokens_1 = __webpack_require__(288);
	var SharedStylesHost = (function () {
	    function SharedStylesHost() {
	        /** @internal */
	        this._styles = [];
	        /** @internal */
	        this._stylesSet = new Set();
	    }
	    SharedStylesHost.prototype.addStyles = function (styles) {
	        var _this = this;
	        var additions = [];
	        styles.forEach(function (style) {
	            if (!collection_1.SetWrapper.has(_this._stylesSet, style)) {
	                _this._stylesSet.add(style);
	                _this._styles.push(style);
	                additions.push(style);
	            }
	        });
	        this.onStylesAdded(additions);
	    };
	    SharedStylesHost.prototype.onStylesAdded = function (additions) { };
	    SharedStylesHost.prototype.getAllStyles = function () { return this._styles; };
	    SharedStylesHost = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], SharedStylesHost);
	    return SharedStylesHost;
	})();
	exports.SharedStylesHost = SharedStylesHost;
	var DomSharedStylesHost = (function (_super) {
	    __extends(DomSharedStylesHost, _super);
	    function DomSharedStylesHost(doc) {
	        _super.call(this);
	        this._hostNodes = new Set();
	        this._hostNodes.add(doc.head);
	    }
	    /** @internal */
	    DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {
	        for (var i = 0; i < styles.length; i++) {
	            var style = styles[i];
	            dom_adapter_1.DOM.appendChild(host, dom_adapter_1.DOM.createStyleElement(style));
	        }
	    };
	    DomSharedStylesHost.prototype.addHost = function (hostNode) {
	        this._addStylesToHost(this._styles, hostNode);
	        this._hostNodes.add(hostNode);
	    };
	    DomSharedStylesHost.prototype.removeHost = function (hostNode) { collection_1.SetWrapper.delete(this._hostNodes, hostNode); };
	    DomSharedStylesHost.prototype.onStylesAdded = function (additions) {
	        var _this = this;
	        this._hostNodes.forEach(function (hostNode) { _this._addStylesToHost(additions, hostNode); });
	    };
	    DomSharedStylesHost = __decorate([
	        di_1.Injectable(),
	        __param(0, di_1.Inject(dom_tokens_1.DOCUMENT)), 
	        __metadata('design:paramtypes', [Object])
	    ], DomSharedStylesHost);
	    return DomSharedStylesHost;
	})(SharedStylesHost);
	exports.DomSharedStylesHost = DomSharedStylesHost;
	//# sourceMappingURL=shared_styles_host.js.map

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	function setRootDomAdapter(adapter) {
	    if (lang_1.isBlank(exports.DOM)) {
	        exports.DOM = adapter;
	    }
	}
	exports.setRootDomAdapter = setRootDomAdapter;
	/* tslint:disable:requireParameterType */
	/**
	 * Provides DOM operations in an environment-agnostic way.
	 */
	var DomAdapter = (function () {
	    function DomAdapter() {
	    }
	    return DomAdapter;
	})();
	exports.DomAdapter = DomAdapter;
	//# sourceMappingURL=dom_adapter.js.map

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var di_1 = __webpack_require__(196);
	var lang_1 = __webpack_require__(49);
	/**
	 * A DI Token representing the main rendering context. In a browser this is the DOM Document.
	 *
	 * Note: Document might not be available in the Application Context when Application and Rendering
	 * Contexts are not the same (e.g. when running the application into a Web Worker).
	 */
	exports.DOCUMENT = lang_1.CONST_EXPR(new di_1.OpaqueToken('DocumentToken'));
	//# sourceMappingURL=dom_tokens.js.map

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var di_1 = __webpack_require__(196);
	var animation_builder_1 = __webpack_require__(290);
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var dom_adapter_1 = __webpack_require__(287);
	var event_manager_1 = __webpack_require__(296);
	var shared_styles_host_1 = __webpack_require__(286);
	var profile_1 = __webpack_require__(235);
	var api_1 = __webpack_require__(262);
	var dom_tokens_1 = __webpack_require__(288);
	var view_factory_1 = __webpack_require__(298);
	var view_1 = __webpack_require__(299);
	var util_1 = __webpack_require__(268);
	var metadata_1 = __webpack_require__(194);
	// TODO(tbosch): solve SVG properly once https://github.com/angular/angular/issues/4417 is done
	var XLINK_NAMESPACE = 'http://www.w3.org/1999/xlink';
	var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
	var SVG_ELEMENT_NAMES = lang_1.CONST_EXPR({
	    'altGlyph': true,
	    'altGlyphDef': true,
	    'altGlyphItem': true,
	    'animate': true,
	    'animateColor': true,
	    'animateMotion': true,
	    'animateTransform': true,
	    'circle': true,
	    'clipPath': true,
	    'color-profile': true,
	    'cursor': true,
	    'defs': true,
	    'desc': true,
	    'ellipse': true,
	    'feBlend': true,
	    'feColorMatrix': true,
	    'feComponentTransfer': true,
	    'feComposite': true,
	    'feConvolveMatrix': true,
	    'feDiffuseLighting': true,
	    'feDisplacementMap': true,
	    'feDistantLight': true,
	    'feFlood': true,
	    'feFuncA': true,
	    'feFuncB': true,
	    'feFuncG': true,
	    'feFuncR': true,
	    'feGaussianBlur': true,
	    'feImage': true,
	    'feMerge': true,
	    'feMergeNode': true,
	    'feMorphology': true,
	    'feOffset': true,
	    'fePointLight': true,
	    'feSpecularLighting': true,
	    'feSpotLight': true,
	    'feTile': true,
	    'feTurbulence': true,
	    'filter': true,
	    'font': true,
	    'font-face': true,
	    'font-face-format': true,
	    'font-face-name': true,
	    'font-face-src': true,
	    'font-face-uri': true,
	    'foreignObject': true,
	    'g': true,
	    // TODO(tbosch): this needs to be disabled
	    // because of an internal project.
	    // We will fix SVG soon, so this will go away...
	    // 'glyph': true,
	    'glyphRef': true,
	    'hkern': true,
	    'image': true,
	    'line': true,
	    'linearGradient': true,
	    'marker': true,
	    'mask': true,
	    'metadata': true,
	    'missing-glyph': true,
	    'mpath': true,
	    'path': true,
	    'pattern': true,
	    'polygon': true,
	    'polyline': true,
	    'radialGradient': true,
	    'rect': true,
	    'set': true,
	    'stop': true,
	    'style': true,
	    'svg': true,
	    'switch': true,
	    'symbol': true,
	    'text': true,
	    'textPath': true,
	    'title': true,
	    'tref': true,
	    'tspan': true,
	    'use': true,
	    'view': true,
	    'vkern': true
	});
	var SVG_ATTR_NAMESPACES = lang_1.CONST_EXPR({ 'href': XLINK_NAMESPACE, 'xlink:href': XLINK_NAMESPACE });
	var DomRenderer = (function (_super) {
	    __extends(DomRenderer, _super);
	    function DomRenderer() {
	        _super.apply(this, arguments);
	    }
	    DomRenderer.prototype.getNativeElementSync = function (location) {
	        return resolveInternalDomView(location.renderView).boundElements[location.boundElementIndex];
	    };
	    DomRenderer.prototype.getRootNodes = function (fragment) { return resolveInternalDomFragment(fragment); };
	    DomRenderer.prototype.attachFragmentAfterFragment = function (previousFragmentRef, fragmentRef) {
	        var previousFragmentNodes = resolveInternalDomFragment(previousFragmentRef);
	        if (previousFragmentNodes.length > 0) {
	            var sibling = previousFragmentNodes[previousFragmentNodes.length - 1];
	            var nodes = resolveInternalDomFragment(fragmentRef);
	            moveNodesAfterSibling(sibling, nodes);
	            this.animateNodesEnter(nodes);
	        }
	    };
	    /**
	     * Iterates through all nodes being added to the DOM and animates them if necessary
	     * @param nodes
	     */
	    DomRenderer.prototype.animateNodesEnter = function (nodes) {
	        for (var i = 0; i < nodes.length; i++)
	            this.animateNodeEnter(nodes[i]);
	    };
	    DomRenderer.prototype.attachFragmentAfterElement = function (elementRef, fragmentRef) {
	        var parentView = resolveInternalDomView(elementRef.renderView);
	        var element = parentView.boundElements[elementRef.boundElementIndex];
	        var nodes = resolveInternalDomFragment(fragmentRef);
	        moveNodesAfterSibling(element, nodes);
	        this.animateNodesEnter(nodes);
	    };
	    DomRenderer.prototype.hydrateView = function (viewRef) { resolveInternalDomView(viewRef).hydrate(); };
	    DomRenderer.prototype.dehydrateView = function (viewRef) { resolveInternalDomView(viewRef).dehydrate(); };
	    DomRenderer.prototype.createTemplateAnchor = function (attrNameAndValues) {
	        return this.createElement('script', attrNameAndValues);
	    };
	    DomRenderer.prototype.createText = function (value) { return dom_adapter_1.DOM.createTextNode(lang_1.isPresent(value) ? value : ''); };
	    DomRenderer.prototype.appendChild = function (parent, child) { dom_adapter_1.DOM.appendChild(parent, child); };
	    DomRenderer.prototype.setElementProperty = function (location, propertyName, propertyValue) {
	        var view = resolveInternalDomView(location.renderView);
	        dom_adapter_1.DOM.setProperty(view.boundElements[location.boundElementIndex], propertyName, propertyValue);
	    };
	    DomRenderer.prototype.setElementAttribute = function (location, attributeName, attributeValue) {
	        var view = resolveInternalDomView(location.renderView);
	        var element = view.boundElements[location.boundElementIndex];
	        var dashCasedAttributeName = util_1.camelCaseToDashCase(attributeName);
	        if (lang_1.isPresent(attributeValue)) {
	            dom_adapter_1.DOM.setAttribute(element, dashCasedAttributeName, lang_1.stringify(attributeValue));
	        }
	        else {
	            dom_adapter_1.DOM.removeAttribute(element, dashCasedAttributeName);
	        }
	    };
	    DomRenderer.prototype.setElementClass = function (location, className, isAdd) {
	        var view = resolveInternalDomView(location.renderView);
	        var element = view.boundElements[location.boundElementIndex];
	        if (isAdd) {
	            dom_adapter_1.DOM.addClass(element, className);
	        }
	        else {
	            dom_adapter_1.DOM.removeClass(element, className);
	        }
	    };
	    DomRenderer.prototype.setElementStyle = function (location, styleName, styleValue) {
	        var view = resolveInternalDomView(location.renderView);
	        var element = view.boundElements[location.boundElementIndex];
	        var dashCasedStyleName = util_1.camelCaseToDashCase(styleName);
	        if (lang_1.isPresent(styleValue)) {
	            dom_adapter_1.DOM.setStyle(element, dashCasedStyleName, lang_1.stringify(styleValue));
	        }
	        else {
	            dom_adapter_1.DOM.removeStyle(element, dashCasedStyleName);
	        }
	    };
	    DomRenderer.prototype.invokeElementMethod = function (location, methodName, args) {
	        var view = resolveInternalDomView(location.renderView);
	        var element = view.boundElements[location.boundElementIndex];
	        dom_adapter_1.DOM.invoke(element, methodName, args);
	    };
	    DomRenderer.prototype.setText = function (viewRef, textNodeIndex, text) {
	        var view = resolveInternalDomView(viewRef);
	        dom_adapter_1.DOM.setText(view.boundTextNodes[textNodeIndex], text);
	    };
	    DomRenderer.prototype.setEventDispatcher = function (viewRef, dispatcher) {
	        resolveInternalDomView(viewRef).setEventDispatcher(dispatcher);
	    };
	    return DomRenderer;
	})(api_1.Renderer);
	exports.DomRenderer = DomRenderer;
	var DomRenderer_ = (function (_super) {
	    __extends(DomRenderer_, _super);
	    function DomRenderer_(_eventManager, _domSharedStylesHost, _animate, document) {
	        _super.call(this);
	        this._eventManager = _eventManager;
	        this._domSharedStylesHost = _domSharedStylesHost;
	        this._animate = _animate;
	        this._componentTpls = new Map();
	        /** @internal */
	        this._createRootHostViewScope = profile_1.wtfCreateScope('DomRenderer#createRootHostView()');
	        /** @internal */
	        this._createViewScope = profile_1.wtfCreateScope('DomRenderer#createView()');
	        /** @internal */
	        this._detachFragmentScope = profile_1.wtfCreateScope('DomRenderer#detachFragment()');
	        this._document = document;
	    }
	    DomRenderer_.prototype.registerComponentTemplate = function (template) {
	        this._componentTpls.set(template.id, template);
	        if (template.encapsulation !== metadata_1.ViewEncapsulation.Native) {
	            var encapsulatedStyles = view_factory_1.encapsulateStyles(template);
	            this._domSharedStylesHost.addStyles(encapsulatedStyles);
	        }
	    };
	    DomRenderer_.prototype.createProtoView = function (componentTemplateId, cmds) {
	        return new view_1.DefaultProtoViewRef(this._componentTpls.get(componentTemplateId), cmds);
	    };
	    DomRenderer_.prototype.resolveComponentTemplate = function (templateId) {
	        return this._componentTpls.get(templateId);
	    };
	    DomRenderer_.prototype.createRootHostView = function (hostProtoViewRef, fragmentCount, hostElementSelector) {
	        var s = this._createRootHostViewScope();
	        var element = dom_adapter_1.DOM.querySelector(this._document, hostElementSelector);
	        if (lang_1.isBlank(element)) {
	            profile_1.wtfLeave(s);
	            throw new exceptions_1.BaseException("The selector \"" + hostElementSelector + "\" did not match any elements");
	        }
	        return profile_1.wtfLeave(s, this._createView(hostProtoViewRef, element));
	    };
	    DomRenderer_.prototype.createView = function (protoViewRef, fragmentCount) {
	        var s = this._createViewScope();
	        return profile_1.wtfLeave(s, this._createView(protoViewRef, null));
	    };
	    DomRenderer_.prototype._createView = function (protoViewRef, inplaceElement) {
	        var dpvr = protoViewRef;
	        var view = view_factory_1.createRenderView(dpvr.template, dpvr.cmds, inplaceElement, this);
	        var sdRoots = view.nativeShadowRoots;
	        for (var i = 0; i < sdRoots.length; i++) {
	            this._domSharedStylesHost.addHost(sdRoots[i]);
	        }
	        return new api_1.RenderViewWithFragments(view, view.fragments);
	    };
	    DomRenderer_.prototype.destroyView = function (viewRef) {
	        var view = viewRef;
	        var sdRoots = view.nativeShadowRoots;
	        for (var i = 0; i < sdRoots.length; i++) {
	            this._domSharedStylesHost.removeHost(sdRoots[i]);
	        }
	    };
	    DomRenderer_.prototype.animateNodeEnter = function (node) {
	        if (dom_adapter_1.DOM.isElementNode(node) && dom_adapter_1.DOM.hasClass(node, 'ng-animate')) {
	            dom_adapter_1.DOM.addClass(node, 'ng-enter');
	            this._animate.css()
	                .addAnimationClass('ng-enter-active')
	                .start(node)
	                .onComplete(function () { dom_adapter_1.DOM.removeClass(node, 'ng-enter'); });
	        }
	    };
	    DomRenderer_.prototype.animateNodeLeave = function (node) {
	        if (dom_adapter_1.DOM.isElementNode(node) && dom_adapter_1.DOM.hasClass(node, 'ng-animate')) {
	            dom_adapter_1.DOM.addClass(node, 'ng-leave');
	            this._animate.css()
	                .addAnimationClass('ng-leave-active')
	                .start(node)
	                .onComplete(function () {
	                dom_adapter_1.DOM.removeClass(node, 'ng-leave');
	                dom_adapter_1.DOM.remove(node);
	            });
	        }
	        else {
	            dom_adapter_1.DOM.remove(node);
	        }
	    };
	    DomRenderer_.prototype.detachFragment = function (fragmentRef) {
	        var s = this._detachFragmentScope();
	        var fragmentNodes = resolveInternalDomFragment(fragmentRef);
	        for (var i = 0; i < fragmentNodes.length; i++) {
	            this.animateNodeLeave(fragmentNodes[i]);
	        }
	        profile_1.wtfLeave(s);
	    };
	    DomRenderer_.prototype.createElement = function (name, attrNameAndValues) {
	        var isSvg = SVG_ELEMENT_NAMES[name] == true;
	        var el = isSvg ? dom_adapter_1.DOM.createElementNS(SVG_NAMESPACE, name) : dom_adapter_1.DOM.createElement(name);
	        this._setAttributes(el, attrNameAndValues, isSvg);
	        return el;
	    };
	    DomRenderer_.prototype.mergeElement = function (existing, attrNameAndValues) {
	        dom_adapter_1.DOM.clearNodes(existing);
	        this._setAttributes(existing, attrNameAndValues, false);
	    };
	    DomRenderer_.prototype._setAttributes = function (node, attrNameAndValues, isSvg) {
	        for (var attrIdx = 0; attrIdx < attrNameAndValues.length; attrIdx += 2) {
	            var attrName = attrNameAndValues[attrIdx];
	            var attrValue = attrNameAndValues[attrIdx + 1];
	            var attrNs = isSvg ? SVG_ATTR_NAMESPACES[attrName] : null;
	            if (lang_1.isPresent(attrNs)) {
	                dom_adapter_1.DOM.setAttributeNS(node, XLINK_NAMESPACE, attrName, attrValue);
	            }
	            else {
	                dom_adapter_1.DOM.setAttribute(node, attrName, attrValue);
	            }
	        }
	    };
	    DomRenderer_.prototype.createRootContentInsertionPoint = function () {
	        return dom_adapter_1.DOM.createComment('root-content-insertion-point');
	    };
	    DomRenderer_.prototype.createShadowRoot = function (host, templateId) {
	        var sr = dom_adapter_1.DOM.createShadowRoot(host);
	        var tpl = this._componentTpls.get(templateId);
	        for (var i = 0; i < tpl.styles.length; i++) {
	            dom_adapter_1.DOM.appendChild(sr, dom_adapter_1.DOM.createStyleElement(tpl.styles[i]));
	        }
	        return sr;
	    };
	    DomRenderer_.prototype.on = function (element, eventName, callback) {
	        this._eventManager.addEventListener(element, eventName, decoratePreventDefault(callback));
	    };
	    DomRenderer_.prototype.globalOn = function (target, eventName, callback) {
	        return this._eventManager.addGlobalEventListener(target, eventName, decoratePreventDefault(callback));
	    };
	    DomRenderer_ = __decorate([
	        di_1.Injectable(),
	        __param(3, di_1.Inject(dom_tokens_1.DOCUMENT)),
	        __metadata('design:paramtypes', [event_manager_1.EventManager, shared_styles_host_1.DomSharedStylesHost, animation_builder_1.AnimationBuilder, Object])
	    ], DomRenderer_);
	    return DomRenderer_;
	})(DomRenderer);
	exports.DomRenderer_ = DomRenderer_;
	function resolveInternalDomView(viewRef) {
	    return viewRef;
	}
	function resolveInternalDomFragment(fragmentRef) {
	    return fragmentRef.nodes;
	}
	function moveNodesAfterSibling(sibling, nodes) {
	  var sib = sibling;

	  if (nodes.length > 0 && lang_1.isPresent(dom_adapter_1.DOM.parentElement(sibling))) {
	    for (var i = 0; i < nodes.length; i++) {
	      dom_adapter_1.DOM.insertAfter(sib, nodes[i]);
	      sib = nodes[i];
	    }
	  }
	}
	function decoratePreventDefault(eventHandler) {
	    return function (event) {
	        var allowDefaultBehavior = eventHandler(event);
	        if (!allowDefaultBehavior) {
	            // TODO(tbosch): move preventDefault into event plugins...
	            dom_adapter_1.DOM.preventDefault(event);
	        }
	    };
	}
	//# sourceMappingURL=dom_renderer.js.map

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(196);
	var css_animation_builder_1 = __webpack_require__(291);
	var browser_details_1 = __webpack_require__(295);
	var AnimationBuilder = (function () {
	    /**
	     * Used for DI
	     * @param browserDetails
	     */
	    function AnimationBuilder(browserDetails) {
	        this.browserDetails = browserDetails;
	    }
	    /**
	     * Creates a new CSS Animation
	     * @returns {CssAnimationBuilder}
	     */
	    AnimationBuilder.prototype.css = function () { return new css_animation_builder_1.CssAnimationBuilder(this.browserDetails); };
	    AnimationBuilder = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [browser_details_1.BrowserDetails])
	    ], AnimationBuilder);
	    return AnimationBuilder;
	})();
	exports.AnimationBuilder = AnimationBuilder;
	//# sourceMappingURL=animation_builder.js.map

/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var css_animation_options_1 = __webpack_require__(292);
	var animation_1 = __webpack_require__(293);
	var CssAnimationBuilder = (function () {
	    /**
	     * Accepts public properties for CssAnimationBuilder
	     */
	    function CssAnimationBuilder(browserDetails) {
	        this.browserDetails = browserDetails;
	        /** @type {CssAnimationOptions} */
	        this.data = new css_animation_options_1.CssAnimationOptions();
	    }
	    /**
	     * Adds a temporary class that will be removed at the end of the animation
	     * @param className
	     */
	    CssAnimationBuilder.prototype.addAnimationClass = function (className) {
	        this.data.animationClasses.push(className);
	        return this;
	    };
	    /**
	     * Adds a class that will remain on the element after the animation has finished
	     * @param className
	     */
	    CssAnimationBuilder.prototype.addClass = function (className) {
	        this.data.classesToAdd.push(className);
	        return this;
	    };
	    /**
	     * Removes a class from the element
	     * @param className
	     */
	    CssAnimationBuilder.prototype.removeClass = function (className) {
	        this.data.classesToRemove.push(className);
	        return this;
	    };
	    /**
	     * Sets the animation duration (and overrides any defined through CSS)
	     * @param duration
	     */
	    CssAnimationBuilder.prototype.setDuration = function (duration) {
	        this.data.duration = duration;
	        return this;
	    };
	    /**
	     * Sets the animation delay (and overrides any defined through CSS)
	     * @param delay
	     */
	    CssAnimationBuilder.prototype.setDelay = function (delay) {
	        this.data.delay = delay;
	        return this;
	    };
	    /**
	     * Sets styles for both the initial state and the destination state
	     * @param from
	     * @param to
	     */
	    CssAnimationBuilder.prototype.setStyles = function (from, to) {
	        return this.setFromStyles(from).setToStyles(to);
	    };
	    /**
	     * Sets the initial styles for the animation
	     * @param from
	     */
	    CssAnimationBuilder.prototype.setFromStyles = function (from) {
	        this.data.fromStyles = from;
	        return this;
	    };
	    /**
	     * Sets the destination styles for the animation
	     * @param to
	     */
	    CssAnimationBuilder.prototype.setToStyles = function (to) {
	        this.data.toStyles = to;
	        return this;
	    };
	    /**
	     * Starts the animation and returns a promise
	     * @param element
	     */
	    CssAnimationBuilder.prototype.start = function (element) {
	        return new animation_1.Animation(element, this.data, this.browserDetails);
	    };
	    return CssAnimationBuilder;
	})();
	exports.CssAnimationBuilder = CssAnimationBuilder;
	//# sourceMappingURL=css_animation_builder.js.map

/***/ },
/* 292 */
/***/ function(module, exports) {

	'use strict';var CssAnimationOptions = (function () {
	    function CssAnimationOptions() {
	        /** classes to be added to the element */
	        this.classesToAdd = [];
	        /** classes to be removed from the element */
	        this.classesToRemove = [];
	        /** classes to be added for the duration of the animation */
	        this.animationClasses = [];
	    }
	    return CssAnimationOptions;
	})();
	exports.CssAnimationOptions = CssAnimationOptions;
	//# sourceMappingURL=css_animation_options.js.map

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var math_1 = __webpack_require__(294);
	var util_1 = __webpack_require__(268);
	var collection_1 = __webpack_require__(202);
	var dom_adapter_1 = __webpack_require__(287);
	var Animation = (function () {
	    /**
	     * Stores the start time and starts the animation
	     * @param element
	     * @param data
	     * @param browserDetails
	     */
	    function Animation(element, data, browserDetails) {
	        var _this = this;
	        this.element = element;
	        this.data = data;
	        this.browserDetails = browserDetails;
	        /** functions to be called upon completion */
	        this.callbacks = [];
	        /** functions for removing event listeners */
	        this.eventClearFunctions = [];
	        /** flag used to track whether or not the animation has finished */
	        this.completed = false;
	        this._stringPrefix = '';
	        this.startTime = lang_1.DateWrapper.toMillis(lang_1.DateWrapper.now());
	        this._stringPrefix = dom_adapter_1.DOM.getAnimationPrefix();
	        this.setup();
	        this.wait(function (timestamp) { return _this.start(); });
	    }
	    Object.defineProperty(Animation.prototype, "totalTime", {
	        /** total amount of time that the animation should take including delay */
	        get: function () {
	            var delay = this.computedDelay != null ? this.computedDelay : 0;
	            var duration = this.computedDuration != null ? this.computedDuration : 0;
	            return delay + duration;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Animation.prototype.wait = function (callback) {
	        // Firefox requires 2 frames for some reason
	        this.browserDetails.raf(callback, 2);
	    };
	    /**
	     * Sets up the initial styles before the animation is started
	     */
	    Animation.prototype.setup = function () {
	        if (this.data.fromStyles != null)
	            this.applyStyles(this.data.fromStyles);
	        if (this.data.duration != null)
	            this.applyStyles({ 'transitionDuration': this.data.duration.toString() + 'ms' });
	        if (this.data.delay != null)
	            this.applyStyles({ 'transitionDelay': this.data.delay.toString() + 'ms' });
	    };
	    /**
	     * After the initial setup has occurred, this method adds the animation styles
	     */
	    Animation.prototype.start = function () {
	        this.addClasses(this.data.classesToAdd);
	        this.addClasses(this.data.animationClasses);
	        this.removeClasses(this.data.classesToRemove);
	        if (this.data.toStyles != null)
	            this.applyStyles(this.data.toStyles);
	        var computedStyles = dom_adapter_1.DOM.getComputedStyle(this.element);
	        this.computedDelay =
	            math_1.Math.max(this.parseDurationString(computedStyles.getPropertyValue(this._stringPrefix + 'transition-delay')), this.parseDurationString(this.element.style.getPropertyValue(this._stringPrefix + 'transition-delay')));
	        this.computedDuration = math_1.Math.max(this.parseDurationString(computedStyles.getPropertyValue(this._stringPrefix + 'transition-duration')), this.parseDurationString(this.element.style.getPropertyValue(this._stringPrefix + 'transition-duration')));
	        this.addEvents();
	    };
	    /**
	     * Applies the provided styles to the element
	     * @param styles
	     */
	    Animation.prototype.applyStyles = function (styles) {
	        var _this = this;
	        collection_1.StringMapWrapper.forEach(styles, function (value, key) {
	            var dashCaseKey = util_1.camelCaseToDashCase(key);
	            if (lang_1.isPresent(dom_adapter_1.DOM.getStyle(_this.element, dashCaseKey))) {
	                dom_adapter_1.DOM.setStyle(_this.element, dashCaseKey, value.toString());
	            }
	            else {
	                dom_adapter_1.DOM.setStyle(_this.element, _this._stringPrefix + dashCaseKey, value.toString());
	            }
	        });
	    };
	    /**
	     * Adds the provided classes to the element
	     * @param classes
	     */
	    Animation.prototype.addClasses = function (classes) {
	        for (var i = 0, len = classes.length; i < len; i++)
	            dom_adapter_1.DOM.addClass(this.element, classes[i]);
	    };
	    /**
	     * Removes the provided classes from the element
	     * @param classes
	     */
	    Animation.prototype.removeClasses = function (classes) {
	        for (var i = 0, len = classes.length; i < len; i++)
	            dom_adapter_1.DOM.removeClass(this.element, classes[i]);
	    };
	    /**
	     * Adds events to track when animations have finished
	     */
	    Animation.prototype.addEvents = function () {
	        var _this = this;
	        if (this.totalTime > 0) {
	            this.eventClearFunctions.push(dom_adapter_1.DOM.onAndCancel(this.element, dom_adapter_1.DOM.getTransitionEnd(), function (event) { return _this.handleAnimationEvent(event); }));
	        }
	        else {
	            this.handleAnimationCompleted();
	        }
	    };
	    Animation.prototype.handleAnimationEvent = function (event) {
	        var elapsedTime = math_1.Math.round(event.elapsedTime * 1000);
	        if (!this.browserDetails.elapsedTimeIncludesDelay)
	            elapsedTime += this.computedDelay;
	        event.stopPropagation();
	        if (elapsedTime >= this.totalTime)
	            this.handleAnimationCompleted();
	    };
	    /**
	     * Runs all animation callbacks and removes temporary classes
	     */
	    Animation.prototype.handleAnimationCompleted = function () {
	        this.removeClasses(this.data.animationClasses);
	        this.callbacks.forEach(function (callback) { return callback(); });
	        this.callbacks = [];
	        this.eventClearFunctions.forEach(function (fn) { return fn(); });
	        this.eventClearFunctions = [];
	        this.completed = true;
	    };
	    /**
	     * Adds animation callbacks to be called upon completion
	     * @param callback
	     * @returns {Animation}
	     */
	    Animation.prototype.onComplete = function (callback) {
	        if (this.completed) {
	            callback();
	        }
	        else {
	            this.callbacks.push(callback);
	        }
	        return this;
	    };
	    /**
	     * Converts the duration string to the number of milliseconds
	     * @param duration
	     * @returns {number}
	     */
	    Animation.prototype.parseDurationString = function (duration) {
	        var maxValue = 0;
	        // duration must have at least 2 characters to be valid. (number + type)
	        if (duration == null || duration.length < 2) {
	            return maxValue;
	        }
	        else if (duration.substring(duration.length - 2) == 'ms') {
	            var value = lang_1.NumberWrapper.parseInt(this.stripLetters(duration), 10);
	            if (value > maxValue)
	                maxValue = value;
	        }
	        else if (duration.substring(duration.length - 1) == 's') {
	            var ms = lang_1.NumberWrapper.parseFloat(this.stripLetters(duration)) * 1000;
	            var value = math_1.Math.floor(ms);
	            if (value > maxValue)
	                maxValue = value;
	        }
	        return maxValue;
	    };
	    /**
	     * Strips the letters from the duration string
	     * @param str
	     * @returns {string}
	     */
	    Animation.prototype.stripLetters = function (str) {
	        return lang_1.StringWrapper.replaceAll(str, lang_1.RegExpWrapper.create('[^0-9]+$', ''), '');
	    };
	    return Animation;
	})();
	exports.Animation = Animation;
	//# sourceMappingURL=animation.js.map

/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	exports.Math = lang_1.global.Math;
	exports.NaN = typeof exports.NaN;
	//# sourceMappingURL=math.js.map

/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(196);
	var math_1 = __webpack_require__(294);
	var dom_adapter_1 = __webpack_require__(287);
	var BrowserDetails = (function () {
	    function BrowserDetails() {
	        this.elapsedTimeIncludesDelay = false;
	        this.doesElapsedTimeIncludesDelay();
	    }
	    /**
	     * Determines if `event.elapsedTime` includes transition delay in the current browser.  At this
	     * time, Chrome and Opera seem to be the only browsers that include this.
	     */
	    BrowserDetails.prototype.doesElapsedTimeIncludesDelay = function () {
	        var _this = this;
	        var div = dom_adapter_1.DOM.createElement('div');
	        dom_adapter_1.DOM.setAttribute(div, 'style', "position: absolute; top: -9999px; left: -9999px; width: 1px;\n      height: 1px; transition: all 1ms linear 1ms;");
	        // Firefox requires that we wait for 2 frames for some reason
	        this.raf(function (timestamp) {
	            dom_adapter_1.DOM.on(div, 'transitionend', function (event) {
	                var elapsed = math_1.Math.round(event.elapsedTime * 1000);
	                _this.elapsedTimeIncludesDelay = elapsed == 2;
	                dom_adapter_1.DOM.remove(div);
	            });
	            dom_adapter_1.DOM.setStyle(div, 'width', '2px');
	        }, 2);
	    };
	    BrowserDetails.prototype.raf = function (callback, frames) {
	        if (frames === void 0) { frames = 1; }
	        var queue = new RafQueue(callback, frames);
	        return function () { return queue.cancel(); };
	    };
	    BrowserDetails = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], BrowserDetails);
	    return BrowserDetails;
	})();
	exports.BrowserDetails = BrowserDetails;
	var RafQueue = (function () {
	    function RafQueue(callback, frames) {
	        this.callback = callback;
	        this.frames = frames;
	        this._raf();
	    }
	    RafQueue.prototype._raf = function () {
	        var _this = this;
	        this.currentFrameId = dom_adapter_1.DOM.requestAnimationFrame(function (timestamp) { return _this._nextFrame(timestamp); });
	    };
	    RafQueue.prototype._nextFrame = function (timestamp) {
	        this.frames--;
	        if (this.frames > 0) {
	            this._raf();
	        }
	        else {
	            this.callback(timestamp);
	        }
	    };
	    RafQueue.prototype.cancel = function () {
	        dom_adapter_1.DOM.cancelAnimationFrame(this.currentFrameId);
	        this.currentFrameId = null;
	    };
	    return RafQueue;
	})();
	//# sourceMappingURL=browser_details.js.map

/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var collection_1 = __webpack_require__(202);
	var dom_adapter_1 = __webpack_require__(287);
	var ng_zone_1 = __webpack_require__(297);
	var di_1 = __webpack_require__(196);
	exports.EVENT_MANAGER_PLUGINS = lang_1.CONST_EXPR(new di_1.OpaqueToken("EventManagerPlugins"));
	var EventManager = (function () {
	    function EventManager(plugins, _zone) {
	        var _this = this;
	        this._zone = _zone;
	        plugins.forEach(function (p) { return p.manager = _this; });
	        this._plugins = collection_1.ListWrapper.reversed(plugins);
	    }
	    EventManager.prototype.addEventListener = function (element, eventName, handler) {
	        var plugin = this._findPluginFor(eventName);
	        plugin.addEventListener(element, eventName, handler);
	    };
	    EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {
	        var plugin = this._findPluginFor(eventName);
	        return plugin.addGlobalEventListener(target, eventName, handler);
	    };
	    EventManager.prototype.getZone = function () { return this._zone; };
	    /** @internal */
	    EventManager.prototype._findPluginFor = function (eventName) {
	        var plugins = this._plugins;
	        for (var i = 0; i < plugins.length; i++) {
	            var plugin = plugins[i];
	            if (plugin.supports(eventName)) {
	                return plugin;
	            }
	        }
	        throw new exceptions_1.BaseException("No event manager plugin found for event " + eventName);
	    };
	    EventManager = __decorate([
	        di_1.Injectable(),
	        __param(0, di_1.Inject(exports.EVENT_MANAGER_PLUGINS)), 
	        __metadata('design:paramtypes', [Array, ng_zone_1.NgZone])
	    ], EventManager);
	    return EventManager;
	})();
	exports.EventManager = EventManager;
	var EventManagerPlugin = (function () {
	    function EventManagerPlugin() {
	    }
	    // That is equivalent to having supporting $event.target
	    EventManagerPlugin.prototype.supports = function (eventName) { return false; };
	    EventManagerPlugin.prototype.addEventListener = function (element, eventName, handler) {
	        throw "not implemented";
	    };
	    EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {
	        throw "not implemented";
	    };
	    return EventManagerPlugin;
	})();
	exports.EventManagerPlugin = EventManagerPlugin;
	var DomEventsPlugin = (function (_super) {
	    __extends(DomEventsPlugin, _super);
	    function DomEventsPlugin() {
	        _super.apply(this, arguments);
	    }
	    // This plugin should come last in the list of plugins, because it accepts all
	    // events.
	    DomEventsPlugin.prototype.supports = function (eventName) { return true; };
	    DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
	        var zone = this.manager.getZone();
	        var outsideHandler = function (event) { return zone.run(function () { return handler(event); }); };
	        this.manager.getZone().runOutsideAngular(function () { dom_adapter_1.DOM.on(element, eventName, outsideHandler); });
	    };
	    DomEventsPlugin.prototype.addGlobalEventListener = function (target, eventName, handler) {
	        var element = dom_adapter_1.DOM.getGlobalEventTarget(target);
	        var zone = this.manager.getZone();
	        var outsideHandler = function (event) { return zone.run(function () { return handler(event); }); };
	        return this.manager.getZone().runOutsideAngular(function () { return dom_adapter_1.DOM.onAndCancel(element, eventName, outsideHandler); });
	    };
	    DomEventsPlugin = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], DomEventsPlugin);
	    return DomEventsPlugin;
	})(EventManagerPlugin);
	exports.DomEventsPlugin = DomEventsPlugin;
	//# sourceMappingURL=event_manager.js.map

/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var collection_1 = __webpack_require__(202);
	var lang_1 = __webpack_require__(49);
	var async_1 = __webpack_require__(50);
	var profile_1 = __webpack_require__(235);
	/**
	 * Stores error information; delivered via [NgZone.onError] stream.
	 */
	var NgZoneError = (function () {
	    function NgZoneError(error, stackTrace) {
	        this.error = error;
	        this.stackTrace = stackTrace;
	    }
	    return NgZoneError;
	})();
	exports.NgZoneError = NgZoneError;
	/**
	 * An injectable service for executing work inside or outside of the Angular zone.
	 *
	 * The most common use of this service is to optimize performance when starting a work consisting of
	 * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
	 * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks
	 * can reenter the Angular zone via {@link #run}.
	 *
	 * <!-- TODO: add/fix links to:
	 *   - docs explaining zones and the use of zones in Angular and change-detection
	 *   - link to runOutsideAngular/run (throughout this file!)
	 *   -->
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/lY9m8HLy7z06vDoUaSN2?p=preview))
	 * ```
	 * import {Component, View, NgIf, NgZone} from 'angular2/angular2';
	 *
	 * @Component({
	 *   selector: 'ng-zone-demo'.
	 *   template: `
	 *     <h2>Demo: NgZone</h2>
	 *
	 *     <p>Progress: {{progress}}%</p>
	 *     <p *ng-if="progress >= 100">Done processing {{label}} of Angular zone!</p>
	 *
	 *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
	 *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
	 *   `,
	 *   directives: [NgIf]
	 * })
	 * export class NgZoneDemo {
	 *   progress: number = 0;
	 *   label: string;
	 *
	 *   constructor(private _ngZone: NgZone) {}
	 *
	 *   // Loop inside the Angular zone
	 *   // so the UI DOES refresh after each setTimeout cycle
	 *   processWithinAngularZone() {
	 *     this.label = 'inside';
	 *     this.progress = 0;
	 *     this._increaseProgress(() => console.log('Inside Done!'));
	 *   }
	 *
	 *   // Loop outside of the Angular zone
	 *   // so the UI DOES NOT refresh after each setTimeout cycle
	 *   processOutsideOfAngularZone() {
	 *     this.label = 'outside';
	 *     this.progress = 0;
	 *     this._ngZone.runOutsideAngular(() => {
	 *       this._increaseProgress(() => {
	 *       // reenter the Angular zone and display done
	 *       this._ngZone.run(() => {console.log('Outside Done!') });
	 *     }}));
	 *   }
	 *
	 *
	 *   _increaseProgress(doneCallback: () => void) {
	 *     this.progress += 1;
	 *     console.log(`Current progress: ${this.progress}%`);
	 *
	 *     if (this.progress < 100) {
	 *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)
	 *     } else {
	 *       doneCallback();
	 *     }
	 *   }
	 * }
	 * ```
	 */
	var NgZone = (function () {
	    /**
	     * @param {bool} enableLongStackTrace whether to enable long stack trace. They should only be
	     *               enabled in development mode as they significantly impact perf.
	     */
	    function NgZone(_a) {
	        var enableLongStackTrace = _a.enableLongStackTrace;
	        /** @internal */
	        this._runScope = profile_1.wtfCreateScope("NgZone#run()");
	        /** @internal */
	        this._microtaskScope = profile_1.wtfCreateScope("NgZone#microtask()");
	        // Number of microtasks pending from _innerZone (& descendants)
	        /** @internal */
	        this._pendingMicrotasks = 0;
	        // Whether some code has been executed in the _innerZone (& descendants) in the current turn
	        /** @internal */
	        this._hasExecutedCodeInInnerZone = false;
	        // run() call depth in _mountZone. 0 at the end of a macrotask
	        // zone.run(() => {         // top-level call
	        //   zone.run(() => {});    // nested call -> in-turn
	        // });
	        /** @internal */
	        this._nestedRun = 0;
	        /** @internal */
	        this._inVmTurnDone = false;
	        /** @internal */
	        this._pendingTimeouts = [];
	        if (lang_1.global.zone) {
	            this._disabled = false;
	            this._mountZone = lang_1.global.zone;
	            this._innerZone = this._createInnerZone(this._mountZone, enableLongStackTrace);
	        }
	        else {
	            this._disabled = true;
	            this._mountZone = null;
	        }
	        this._onTurnStartEvents = new async_1.EventEmitter(false);
	        this._onTurnDoneEvents = new async_1.EventEmitter(false);
	        this._onEventDoneEvents = new async_1.EventEmitter(false);
	        this._onErrorEvents = new async_1.EventEmitter(false);
	    }
	    /**
	     * Sets the zone hook that is called just before a browser task that is handled by Angular
	     * executes.
	     *
	     * The hook is called once per browser task that is handled by Angular.
	     *
	     * Setting the hook overrides any previously set hook.
	     *
	     * @deprecated this API will be removed in the future. Use `onTurnStart` instead.
	     */
	    NgZone.prototype.overrideOnTurnStart = function (onTurnStartHook) {
	        this._onTurnStart = lang_1.normalizeBlank(onTurnStartHook);
	    };
	    Object.defineProperty(NgZone.prototype, "onTurnStart", {
	        /**
	         * Notifies subscribers just before Angular event turn starts.
	         *
	         * Emits an event once per browser task that is handled by Angular.
	         */
	        get: function () { return this._onTurnStartEvents; },
	        enumerable: true,
	        configurable: true
	    });
	    /** @internal */
	    NgZone.prototype._notifyOnTurnStart = function (parentRun) {
	        var _this = this;
	        parentRun.call(this._innerZone, function () { _this._onTurnStartEvents.next(null); });
	    };
	    /**
	     * Sets the zone hook that is called immediately after Angular zone is done processing the current
	     * task and any microtasks scheduled from that task.
	     *
	     * This is where we typically do change-detection.
	     *
	     * The hook is called once per browser task that is handled by Angular.
	     *
	     * Setting the hook overrides any previously set hook.
	     *
	     * @deprecated this API will be removed in the future. Use `onTurnDone` instead.
	     */
	    NgZone.prototype.overrideOnTurnDone = function (onTurnDoneHook) {
	        this._onTurnDone = lang_1.normalizeBlank(onTurnDoneHook);
	    };
	    Object.defineProperty(NgZone.prototype, "onTurnDone", {
	        /**
	         * Notifies subscribers immediately after Angular zone is done processing
	         * the current turn and any microtasks scheduled from that turn.
	         *
	         * Used by Angular as a signal to kick off change-detection.
	         */
	        get: function () { return this._onTurnDoneEvents; },
	        enumerable: true,
	        configurable: true
	    });
	    /** @internal */
	    NgZone.prototype._notifyOnTurnDone = function (parentRun) {
	        var _this = this;
	        parentRun.call(this._innerZone, function () { _this._onTurnDoneEvents.next(null); });
	    };
	    /**
	     * Sets the zone hook that is called immediately after the `onTurnDone` callback is called and any
	     * microstasks scheduled from within that callback are drained.
	     *
	     * `onEventDoneFn` is executed outside Angular zone, which means that we will no longer attempt to
	     * sync the UI with any model changes that occur within this callback.
	     *
	     * This hook is useful for validating application state (e.g. in a test).
	     *
	     * Setting the hook overrides any previously set hook.
	     *
	     * @deprecated this API will be removed in the future. Use `onEventDone` instead.
	     */
	    NgZone.prototype.overrideOnEventDone = function (onEventDoneFn, opt_waitForAsync) {
	        var _this = this;
	        if (opt_waitForAsync === void 0) { opt_waitForAsync = false; }
	        var normalizedOnEventDone = lang_1.normalizeBlank(onEventDoneFn);
	        if (opt_waitForAsync) {
	            this._onEventDone = function () {
	                if (!_this._pendingTimeouts.length) {
	                    normalizedOnEventDone();
	                }
	            };
	        }
	        else {
	            this._onEventDone = normalizedOnEventDone;
	        }
	    };
	    Object.defineProperty(NgZone.prototype, "onEventDone", {
	        /**
	         * Notifies subscribers immediately after the final `onTurnDone` callback
	         * before ending VM event.
	         *
	         * This event is useful for validating application state (e.g. in a test).
	         */
	        get: function () { return this._onEventDoneEvents; },
	        enumerable: true,
	        configurable: true
	    });
	    /** @internal */
	    NgZone.prototype._notifyOnEventDone = function () {
	        var _this = this;
	        this.runOutsideAngular(function () { _this._onEventDoneEvents.next(null); });
	    };
	    Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", {
	        /**
	         * Whether there are any outstanding microtasks.
	         */
	        get: function () { return this._pendingMicrotasks > 0; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "hasPendingTimers", {
	        /**
	         * Whether there are any outstanding timers.
	         */
	        get: function () { return this._pendingTimeouts.length > 0; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgZone.prototype, "hasPendingAsyncTasks", {
	        /**
	         * Whether there are any outstanding asychnronous tasks of any kind that are
	         * scheduled to run within Angular zone.
	         *
	         * Useful as a signal of UI stability. For example, when a test reaches a
	         * point when [hasPendingAsyncTasks] is `false` it might be a good time to run
	         * test expectations.
	         */
	        get: function () { return this.hasPendingMicrotasks || this.hasPendingTimers; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Sets the zone hook that is called when an error is thrown in the Angular zone.
	     *
	     * Setting the hook overrides any previously set hook.
	     *
	     * @deprecated this API will be removed in the future. Use `onError` instead.
	     */
	    NgZone.prototype.overrideOnErrorHandler = function (errorHandler) {
	        this._onErrorHandler = lang_1.normalizeBlank(errorHandler);
	    };
	    Object.defineProperty(NgZone.prototype, "onError", {
	        get: function () { return this._onErrorEvents; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Executes the `fn` function synchronously within the Angular zone and returns value returned by
	     * the function.
	     *
	     * Running functions via `run` allows you to reenter Angular zone from a task that was executed
	     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
	     *
	     * Any future tasks or microtasks scheduled from within this function will continue executing from
	     * within the Angular zone.
	     */
	    NgZone.prototype.run = function (fn) {
	        if (this._disabled) {
	            return fn();
	        }
	        else {
	            var s = this._runScope();
	            try {
	                return this._innerZone.run(fn);
	            }
	            finally {
	                profile_1.wtfLeave(s);
	            }
	        }
	    };
	    /**
	     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
	     * the function.
	     *
	     * Running functions via `runOutsideAngular` allows you to escape Angular's zone and do work that
	     * doesn't trigger Angular change-detection or is subject to Angular's error handling.
	     *
	     * Any future tasks or microtasks scheduled from within this function will continue executing from
	     * outside of the Angular zone.
	     *
	     * Use {@link #run} to reenter the Angular zone and do work that updates the application model.
	     */
	    NgZone.prototype.runOutsideAngular = function (fn) {
	        if (this._disabled) {
	            return fn();
	        }
	        else {
	            return this._mountZone.run(fn);
	        }
	    };
	    /** @internal */
	    NgZone.prototype._createInnerZone = function (zone, enableLongStackTrace) {
	        var microtaskScope = this._microtaskScope;
	        var ngZone = this;
	        var errorHandling;
	        if (enableLongStackTrace) {
	            errorHandling = collection_1.StringMapWrapper.merge(Zone.longStackTraceZone, { onError: function (e) { ngZone._notifyOnError(this, e); } });
	        }
	        else {
	            errorHandling = { onError: function (e) { ngZone._notifyOnError(this, e); } };
	        }
	        return zone.fork(errorHandling)
	            .fork({
	            '$run': function (parentRun) {
	                return function () {
	                    try {
	                        ngZone._nestedRun++;
	                        if (!ngZone._hasExecutedCodeInInnerZone) {
	                            ngZone._hasExecutedCodeInInnerZone = true;
	                            ngZone._notifyOnTurnStart(parentRun);
	                            if (ngZone._onTurnStart) {
	                                parentRun.call(ngZone._innerZone, ngZone._onTurnStart);
	                            }
	                        }
	                        return parentRun.apply(this, arguments);
	                    }
	                    finally {
	                        ngZone._nestedRun--;
	                        // If there are no more pending microtasks, we are at the end of a VM turn (or in
	                        // onTurnStart)
	                        // _nestedRun will be 0 at the end of a macrotasks (it could be > 0 when there are
	                        // nested calls
	                        // to run()).
	                        if (ngZone._pendingMicrotasks == 0 && ngZone._nestedRun == 0 &&
	                            !this._inVmTurnDone) {
	                            if (ngZone._hasExecutedCodeInInnerZone) {
	                                try {
	                                    this._inVmTurnDone = true;
	                                    ngZone._notifyOnTurnDone(parentRun);
	                                    if (ngZone._onTurnDone) {
	                                        parentRun.call(ngZone._innerZone, ngZone._onTurnDone);
	                                    }
	                                }
	                                finally {
	                                    this._inVmTurnDone = false;
	                                    ngZone._hasExecutedCodeInInnerZone = false;
	                                }
	                            }
	                            if (ngZone._pendingMicrotasks === 0) {
	                                ngZone._notifyOnEventDone();
	                                if (lang_1.isPresent(ngZone._onEventDone)) {
	                                    ngZone.runOutsideAngular(ngZone._onEventDone);
	                                }
	                            }
	                        }
	                    }
	                };
	            },
	            '$scheduleMicrotask': function (parentScheduleMicrotask) {
	                return function (fn) {
	                    ngZone._pendingMicrotasks++;
	                    var microtask = function () {
	                        var s = microtaskScope();
	                        try {
	                            fn();
	                        }
	                        finally {
	                            ngZone._pendingMicrotasks--;
	                            profile_1.wtfLeave(s);
	                        }
	                    };
	                    parentScheduleMicrotask.call(this, microtask);
	                };
	            },
	            '$setTimeout': function (parentSetTimeout) {
	                return function (fn, delay) {
	                    var args = [];
	                    for (var _i = 2; _i < arguments.length; _i++) {
	                        args[_i - 2] = arguments[_i];
	                    }
	                    var id;
	                    var cb = function () {
	                        fn();
	                        collection_1.ListWrapper.remove(ngZone._pendingTimeouts, id);
	                    };
	                    id = parentSetTimeout(cb, delay, args);
	                    ngZone._pendingTimeouts.push(id);
	                    return id;
	                };
	            },
	            '$clearTimeout': function (parentClearTimeout) {
	                return function (id) {
	                    parentClearTimeout(id);
	                    collection_1.ListWrapper.remove(ngZone._pendingTimeouts, id);
	                };
	            },
	            _innerZone: true
	        });
	    };
	    /** @internal */
	    NgZone.prototype._notifyOnError = function (zone, e) {
	        if (lang_1.isPresent(this._onErrorHandler) || async_1.ObservableWrapper.hasSubscribers(this._onErrorEvents)) {
	            var trace = [lang_1.normalizeBlank(e.stack)];
	            while (zone && zone.constructedAtException) {
	                trace.push(zone.constructedAtException.get());
	                zone = zone.parent;
	            }
	            if (async_1.ObservableWrapper.hasSubscribers(this._onErrorEvents)) {
	                async_1.ObservableWrapper.callNext(this._onErrorEvents, new NgZoneError(e, trace));
	            }
	            if (lang_1.isPresent(this._onErrorHandler)) {
	                this._onErrorHandler(e, trace);
	            }
	        }
	        else {
	            console.log('## _notifyOnError ##');
	            console.log(e.stack);
	            throw e;
	        }
	    };
	    return NgZone;
	})();
	exports.NgZone = NgZone;
	//# sourceMappingURL=ng_zone.js.map

/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var view_1 = __webpack_require__(299);
	var metadata_1 = __webpack_require__(194);
	var collection_1 = __webpack_require__(202);
	function encapsulateStyles(componentTemplate) {
	    var processedStyles = componentTemplate.styles;
	    if (componentTemplate.encapsulation === metadata_1.ViewEncapsulation.Emulated) {
	        processedStyles = collection_1.ListWrapper.createFixedSize(componentTemplate.styles.length);
	        for (var i = 0; i < componentTemplate.styles.length; i++) {
	            processedStyles[i] = lang_1.StringWrapper.replaceAll(componentTemplate.styles[i], COMPONENT_REGEX, componentTemplate.shortId);
	        }
	    }
	    return processedStyles;
	}
	exports.encapsulateStyles = encapsulateStyles;
	function createRenderView(componentTemplate, cmds, inplaceElement, nodeFactory) {
	    var view;
	    var eventDispatcher = function (boundElementIndex, eventName, event) {
	        return view.dispatchRenderEvent(boundElementIndex, eventName, event);
	    };
	    var context = new BuildContext(eventDispatcher, nodeFactory, inplaceElement);
	    context.build(componentTemplate, cmds);
	    var fragments = [];
	    for (var i = 0; i < context.fragments.length; i++) {
	        fragments.push(new view_1.DefaultRenderFragmentRef(context.fragments[i]));
	    }
	    view = new view_1.DefaultRenderView(fragments, context.boundTextNodes, context.boundElements, context.nativeShadowRoots, context.globalEventAdders, context.rootContentInsertionPoints);
	    return view;
	}
	exports.createRenderView = createRenderView;
	var BuildContext = (function () {
	    function BuildContext(_eventDispatcher, factory, _inplaceElement) {
	        this._eventDispatcher = _eventDispatcher;
	        this.factory = factory;
	        this._inplaceElement = _inplaceElement;
	        this._builders = [];
	        this.globalEventAdders = [];
	        this.boundElements = [];
	        this.boundTextNodes = [];
	        this.nativeShadowRoots = [];
	        this.fragments = [];
	        this.rootContentInsertionPoints = [];
	        this.componentCount = 0;
	        this.isHost = lang_1.isPresent((_inplaceElement));
	    }
	    BuildContext.prototype.build = function (template, cmds) {
	        this.enqueueRootBuilder(template, cmds);
	        this._build(this._builders[0]);
	    };
	    BuildContext.prototype._build = function (builder) {
	        this._builders = [];
	        builder.build(this);
	        var enqueuedBuilders = this._builders;
	        for (var i = 0; i < enqueuedBuilders.length; i++) {
	            this._build(enqueuedBuilders[i]);
	        }
	    };
	    BuildContext.prototype.enqueueComponentBuilder = function (component) {
	        this.componentCount++;
	        this._builders.push(new RenderViewBuilder(component, null, component.template, component.template.commands));
	    };
	    BuildContext.prototype.enqueueFragmentBuilder = function (parentComponent, parentTemplate, commands) {
	        var rootNodes = [];
	        this.fragments.push(rootNodes);
	        this._builders.push(new RenderViewBuilder(parentComponent, rootNodes, parentTemplate, commands));
	    };
	    BuildContext.prototype.enqueueRootBuilder = function (template, cmds) {
	        var rootNodes = [];
	        this.fragments.push(rootNodes);
	        this._builders.push(new RenderViewBuilder(null, rootNodes, template, cmds));
	    };
	    BuildContext.prototype.consumeInplaceElement = function () {
	        var result = this._inplaceElement;
	        this._inplaceElement = null;
	        return result;
	    };
	    BuildContext.prototype.addEventListener = function (boundElementIndex, target, eventName) {
	        if (lang_1.isPresent(target)) {
	            var handler = createEventHandler(boundElementIndex, target + ":" + eventName, this._eventDispatcher);
	            this.globalEventAdders.push(createGlobalEventAdder(target, eventName, handler, this.factory));
	        }
	        else {
	            var handler = createEventHandler(boundElementIndex, eventName, this._eventDispatcher);
	            this.factory.on(this.boundElements[boundElementIndex], eventName, handler);
	        }
	    };
	    return BuildContext;
	})();
	function createEventHandler(boundElementIndex, eventName, eventDispatcher) {
	    return function ($event) { return eventDispatcher(boundElementIndex, eventName, $event); };
	}
	function createGlobalEventAdder(target, eventName, eventHandler, nodeFactory) {
	    return function () { return nodeFactory.globalOn(target, eventName, eventHandler); };
	}
	var RenderViewBuilder = (function () {
	    function RenderViewBuilder(parentComponent, fragmentRootNodes, template, cmds) {
	        this.parentComponent = parentComponent;
	        this.fragmentRootNodes = fragmentRootNodes;
	        this.template = template;
	        this.cmds = cmds;
	        var rootNodesParent = lang_1.isPresent(fragmentRootNodes) ? null : parentComponent.shadowRoot;
	        this.parentStack = [rootNodesParent];
	    }
	    RenderViewBuilder.prototype.build = function (context) {
	        var cmds = this.cmds;
	        for (var i = 0; i < cmds.length; i++) {
	            cmds[i].visit(this, context);
	        }
	    };
	    Object.defineProperty(RenderViewBuilder.prototype, "parent", {
	        get: function () { return this.parentStack[this.parentStack.length - 1]; },
	        enumerable: true,
	        configurable: true
	    });
	    RenderViewBuilder.prototype.visitText = function (cmd, context) {
	        var text = context.factory.createText(cmd.value);
	        this._addChild(text, cmd.ngContentIndex, context);
	        if (cmd.isBound) {
	            context.boundTextNodes.push(text);
	        }
	        return null;
	    };
	    RenderViewBuilder.prototype.visitNgContent = function (cmd, context) {
	        if (lang_1.isPresent(this.parentComponent)) {
	            if (this.parentComponent.isRoot) {
	                var insertionPoint = context.factory.createRootContentInsertionPoint();
	                if (this.parent instanceof Component) {
	                    context.factory.appendChild(this.parent.shadowRoot, insertionPoint);
	                }
	                else {
	                    context.factory.appendChild(this.parent, insertionPoint);
	                }
	                context.rootContentInsertionPoints.push(insertionPoint);
	            }
	            else {
	                var projectedNodes = this.parentComponent.project(cmd.index);
	                for (var i = 0; i < projectedNodes.length; i++) {
	                    var node = projectedNodes[i];
	                    this._addChild(node, cmd.ngContentIndex, context);
	                }
	            }
	        }
	        return null;
	    };
	    RenderViewBuilder.prototype.visitBeginElement = function (cmd, context) {
	        this.parentStack.push(this._beginElement(cmd, context, null));
	        return null;
	    };
	    RenderViewBuilder.prototype.visitEndElement = function (context) {
	        this._endElement();
	        return null;
	    };
	    RenderViewBuilder.prototype.visitBeginComponent = function (cmd, context) {
	        var templateId = cmd.templateId;
	        var tpl = context.factory.resolveComponentTemplate(templateId);
	        var el = this._beginElement(cmd, context, tpl);
	        var root = el;
	        if (tpl.encapsulation === metadata_1.ViewEncapsulation.Native) {
	            root = context.factory.createShadowRoot(el, templateId);
	            context.nativeShadowRoots.push(root);
	        }
	        var isRoot = context.componentCount === 0 && context.isHost;
	        var component = new Component(el, root, isRoot, tpl);
	        context.enqueueComponentBuilder(component);
	        this.parentStack.push(component);
	        return null;
	    };
	    RenderViewBuilder.prototype.visitEndComponent = function (context) {
	        this._endElement();
	        return null;
	    };
	    RenderViewBuilder.prototype.visitEmbeddedTemplate = function (cmd, context) {
	        var el = context.factory.createTemplateAnchor(cmd.attrNameAndValues);
	        this._addChild(el, cmd.ngContentIndex, context);
	        context.boundElements.push(el);
	        if (cmd.isMerged) {
	            context.enqueueFragmentBuilder(this.parentComponent, this.template, cmd.children);
	        }
	        return null;
	    };
	    RenderViewBuilder.prototype._beginElement = function (cmd, context, componentTemplate) {
	        var el = context.consumeInplaceElement();
	        var attrNameAndValues = cmd.attrNameAndValues;
	        var templateEmulatedEncapsulation = this.template.encapsulation === metadata_1.ViewEncapsulation.Emulated;
	        var componentEmulatedEncapsulation = lang_1.isPresent(componentTemplate) &&
	            componentTemplate.encapsulation === metadata_1.ViewEncapsulation.Emulated;
	        var newAttrLength = attrNameAndValues.length + (templateEmulatedEncapsulation ? 2 : 0) +
	            (componentEmulatedEncapsulation ? 2 : 0);
	        if (newAttrLength > attrNameAndValues.length) {
	            // Note: Need to clone attrNameAndValues to make it writable!
	            var newAttrNameAndValues = collection_1.ListWrapper.createFixedSize(newAttrLength);
	            var attrIndex;
	            for (attrIndex = 0; attrIndex < attrNameAndValues.length; attrIndex++) {
	                newAttrNameAndValues[attrIndex] = attrNameAndValues[attrIndex];
	            }
	            if (templateEmulatedEncapsulation) {
	                newAttrNameAndValues[attrIndex++] = _shimContentAttribute(this.template.shortId);
	                newAttrNameAndValues[attrIndex++] = '';
	            }
	            if (componentEmulatedEncapsulation) {
	                newAttrNameAndValues[attrIndex++] = _shimHostAttribute(componentTemplate.shortId);
	                newAttrNameAndValues[attrIndex++] = '';
	            }
	            attrNameAndValues = newAttrNameAndValues;
	        }
	        if (lang_1.isPresent(el)) {
	            context.factory.mergeElement(el, attrNameAndValues);
	            this.fragmentRootNodes.push(el);
	        }
	        else {
	            el = context.factory.createElement(cmd.name, attrNameAndValues);
	            this._addChild(el, cmd.ngContentIndex, context);
	        }
	        if (cmd.isBound) {
	            var boundElementIndex = context.boundElements.length;
	            context.boundElements.push(el);
	            for (var i = 0; i < cmd.eventTargetAndNames.length; i += 2) {
	                var target = cmd.eventTargetAndNames[i];
	                var eventName = cmd.eventTargetAndNames[i + 1];
	                context.addEventListener(boundElementIndex, target, eventName);
	            }
	        }
	        return el;
	    };
	    RenderViewBuilder.prototype._endElement = function () { this.parentStack.pop(); };
	    RenderViewBuilder.prototype._addChild = function (node, ngContentIndex, context) {
	        var parent = this.parent;
	        if (lang_1.isPresent(parent)) {
	            if (parent instanceof Component) {
	                parent.addContentNode(ngContentIndex, node, context);
	            }
	            else {
	                context.factory.appendChild(parent, node);
	            }
	        }
	        else {
	            this.fragmentRootNodes.push(node);
	        }
	    };
	    return RenderViewBuilder;
	})();
	var Component = (function () {
	    function Component(hostElement, shadowRoot, isRoot, template) {
	        this.hostElement = hostElement;
	        this.shadowRoot = shadowRoot;
	        this.isRoot = isRoot;
	        this.template = template;
	        this.contentNodesByNgContentIndex = [];
	    }
	    Component.prototype.addContentNode = function (ngContentIndex, node, context) {
	        if (lang_1.isBlank(ngContentIndex)) {
	            if (this.template.encapsulation === metadata_1.ViewEncapsulation.Native) {
	                context.factory.appendChild(this.hostElement, node);
	            }
	        }
	        else {
	            while (this.contentNodesByNgContentIndex.length <= ngContentIndex) {
	                this.contentNodesByNgContentIndex.push([]);
	            }
	            this.contentNodesByNgContentIndex[ngContentIndex].push(node);
	        }
	    };
	    Component.prototype.project = function (ngContentIndex) {
	        return ngContentIndex < this.contentNodesByNgContentIndex.length ?
	            this.contentNodesByNgContentIndex[ngContentIndex] :
	            [];
	    };
	    return Component;
	})();
	var COMPONENT_REGEX = /%COMP%/g;
	exports.COMPONENT_VARIABLE = '%COMP%';
	exports.HOST_ATTR = "_nghost-" + exports.COMPONENT_VARIABLE;
	exports.CONTENT_ATTR = "_ngcontent-" + exports.COMPONENT_VARIABLE;
	function _shimContentAttribute(componentShortId) {
	    return lang_1.StringWrapper.replaceAll(exports.CONTENT_ATTR, COMPONENT_REGEX, componentShortId);
	}
	function _shimHostAttribute(componentShortId) {
	    return lang_1.StringWrapper.replaceAll(exports.HOST_ATTR, COMPONENT_REGEX, componentShortId);
	}
	//# sourceMappingURL=view_factory.js.map

/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var exceptions_1 = __webpack_require__(204);
	var collection_1 = __webpack_require__(202);
	var lang_1 = __webpack_require__(49);
	var api_1 = __webpack_require__(262);
	var DefaultProtoViewRef = (function (_super) {
	    __extends(DefaultProtoViewRef, _super);
	    function DefaultProtoViewRef(template, cmds) {
	        _super.call(this);
	        this.template = template;
	        this.cmds = cmds;
	    }
	    return DefaultProtoViewRef;
	})(api_1.RenderProtoViewRef);
	exports.DefaultProtoViewRef = DefaultProtoViewRef;
	var DefaultRenderFragmentRef = (function (_super) {
	    __extends(DefaultRenderFragmentRef, _super);
	    function DefaultRenderFragmentRef(nodes) {
	        _super.call(this);
	        this.nodes = nodes;
	    }
	    return DefaultRenderFragmentRef;
	})(api_1.RenderFragmentRef);
	exports.DefaultRenderFragmentRef = DefaultRenderFragmentRef;
	var DefaultRenderView = (function (_super) {
	    __extends(DefaultRenderView, _super);
	    function DefaultRenderView(fragments, boundTextNodes, boundElements, nativeShadowRoots, globalEventAdders, rootContentInsertionPoints) {
	        _super.call(this);
	        this.fragments = fragments;
	        this.boundTextNodes = boundTextNodes;
	        this.boundElements = boundElements;
	        this.nativeShadowRoots = nativeShadowRoots;
	        this.globalEventAdders = globalEventAdders;
	        this.rootContentInsertionPoints = rootContentInsertionPoints;
	        this.hydrated = false;
	        this.eventDispatcher = null;
	        this.globalEventRemovers = null;
	    }
	    DefaultRenderView.prototype.hydrate = function () {
	        if (this.hydrated)
	            throw new exceptions_1.BaseException('The view is already hydrated.');
	        this.hydrated = true;
	        this.globalEventRemovers = collection_1.ListWrapper.createFixedSize(this.globalEventAdders.length);
	        for (var i = 0; i < this.globalEventAdders.length; i++) {
	            this.globalEventRemovers[i] = this.globalEventAdders[i]();
	        }
	    };
	    DefaultRenderView.prototype.dehydrate = function () {
	        if (!this.hydrated)
	            throw new exceptions_1.BaseException('The view is already dehydrated.');
	        for (var i = 0; i < this.globalEventRemovers.length; i++) {
	            this.globalEventRemovers[i]();
	        }
	        this.globalEventRemovers = null;
	        this.hydrated = false;
	    };
	    DefaultRenderView.prototype.setEventDispatcher = function (dispatcher) { this.eventDispatcher = dispatcher; };
	    DefaultRenderView.prototype.dispatchRenderEvent = function (boundElementIndex, eventName, event) {
	        var allowDefaultBehavior = true;
	        if (lang_1.isPresent(this.eventDispatcher)) {
	            var locals = new collection_1.Map();
	            locals.set('$event', event);
	            allowDefaultBehavior =
	                this.eventDispatcher.dispatchRenderEvent(boundElementIndex, eventName, locals);
	        }
	        return allowDefaultBehavior;
	    };
	    return DefaultRenderView;
	})(api_1.RenderViewRef);
	exports.DefaultRenderView = DefaultRenderView;
	//# sourceMappingURL=view.js.map

/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	/**
	 * This file is only used for dart applications and for internal examples
	 * that compile with both JavaScript and Dart.
	 *
	 * JavaScript users should import from angular2/core.
	 */
	__export(__webpack_require__(301));
	//# sourceMappingURL=render.js.map

/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';// Public API for render
	var render_1 = __webpack_require__(285);
	exports.Renderer = render_1.Renderer;
	exports.RenderViewRef = render_1.RenderViewRef;
	exports.RenderProtoViewRef = render_1.RenderProtoViewRef;
	exports.RenderFragmentRef = render_1.RenderFragmentRef;
	exports.RenderViewWithFragments = render_1.RenderViewWithFragments;
	exports.DOCUMENT = render_1.DOCUMENT;
	exports.RenderTemplateCmd = render_1.RenderTemplateCmd;
	exports.RenderTextCmd = render_1.RenderTextCmd;
	exports.RenderNgContentCmd = render_1.RenderNgContentCmd;
	exports.RenderBeginElementCmd = render_1.RenderBeginElementCmd;
	exports.RenderBeginComponentCmd = render_1.RenderBeginComponentCmd;
	exports.RenderEmbeddedTemplateCmd = render_1.RenderEmbeddedTemplateCmd;
	exports.RenderBeginCmd = render_1.RenderBeginCmd;
	//# sourceMappingURL=render.js.map

/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var di_1 = __webpack_require__(196);
	var lang_1 = __webpack_require__(49);
	/**
	 *  @internal
	 */
	exports.APP_COMPONENT_REF_PROMISE = lang_1.CONST_EXPR(new di_1.OpaqueToken('Promise<ComponentRef>'));
	/**
	 * An {@link angular2/di/OpaqueToken} representing the application root type in the {@link
	 * Injector}.
	 *
	 * ```
	 * @Component(...)
	 * class MyApp {
	 *   ...
	 * }
	 *
	 * bootstrap(MyApp).then((appRef:ApplicationRef) {
	 *   expect(appRef.injector.get(appComponentTypeToken)).toEqual(MyApp);
	 * });
	 *
	 * ```
	 */
	exports.APP_COMPONENT = lang_1.CONST_EXPR(new di_1.OpaqueToken('AppComponent'));
	/**
	 * A DI Token representing a unique string id assigned to the application by Angular and used
	 * primarily for prefixing application attributes and CSS styles when
	 * {@link ViewEncapsulation#Emulated} is being used.
	 *
	 * If you need to avoid randomly generated value to be used as an application id, you can provide
	 * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}
	 * using this token.
	 */
	exports.APP_ID = lang_1.CONST_EXPR(new di_1.OpaqueToken('AppId'));
	function _appIdRandomProviderFactory() {
	    return "" + _randomChar() + _randomChar() + _randomChar();
	}
	/**
	 * Providers that will generate a random APP_ID_TOKEN.
	 */
	exports.APP_ID_RANDOM_PROVIDER = lang_1.CONST_EXPR(new di_1.Provider(exports.APP_ID, { useFactory: _appIdRandomProviderFactory, deps: [] }));
	function _randomChar() {
	    return lang_1.StringWrapper.fromCharCode(97 + lang_1.Math.floor(lang_1.Math.random() * 25));
	}
	//# sourceMappingURL=application_tokens.js.map

/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(196);
	var compiler_1 = __webpack_require__(260);
	var lang_1 = __webpack_require__(49);
	var view_manager_1 = __webpack_require__(271);
	/**
	 * Represents an instance of a Component created via {@link DynamicComponentLoader}.
	 *
	 * `ComponentRef` provides access to the Component Instance as well other objects related to this
	 * Component Instance and allows you to destroy the Component Instance via the {@link #dispose}
	 * method.
	 */
	var ComponentRef = (function () {
	    function ComponentRef() {
	    }
	    Object.defineProperty(ComponentRef.prototype, "hostView", {
	        /**
	         * The {@link ViewRef} of the Host View of this Component instance.
	         */
	        get: function () { return this.location.parentView; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentRef.prototype, "hostComponent", {
	        /**
	         * @internal
	         *
	         * The instance of the component.
	         *
	         * TODO(i): this api should be removed
	         */
	        get: function () { return this.instance; },
	        enumerable: true,
	        configurable: true
	    });
	    return ComponentRef;
	})();
	exports.ComponentRef = ComponentRef;
	var ComponentRef_ = (function (_super) {
	    __extends(ComponentRef_, _super);
	    /**
	     * TODO(i): refactor into public/private fields
	     */
	    function ComponentRef_(location, instance, componentType, injector, _dispose) {
	        _super.call(this);
	        this._dispose = _dispose;
	        this.location = location;
	        this.instance = instance;
	        this.componentType = componentType;
	        this.injector = injector;
	    }
	    Object.defineProperty(ComponentRef_.prototype, "hostComponentType", {
	        /**
	         * @internal
	         *
	         * Returns the type of this Component instance.
	         *
	         * TODO(i): this api should be removed
	         */
	        get: function () { return this.componentType; },
	        enumerable: true,
	        configurable: true
	    });
	    ComponentRef_.prototype.dispose = function () { this._dispose(); };
	    return ComponentRef_;
	})(ComponentRef);
	exports.ComponentRef_ = ComponentRef_;
	/**
	 * Service for instantiating a Component and attaching it to a View at a specified location.
	 */
	var DynamicComponentLoader = (function () {
	    function DynamicComponentLoader() {
	    }
	    return DynamicComponentLoader;
	})();
	exports.DynamicComponentLoader = DynamicComponentLoader;
	var DynamicComponentLoader_ = (function (_super) {
	    __extends(DynamicComponentLoader_, _super);
	    function DynamicComponentLoader_(_compiler, _viewManager) {
	        _super.call(this);
	        this._compiler = _compiler;
	        this._viewManager = _viewManager;
	    }
	    DynamicComponentLoader_.prototype.loadAsRoot = function (type, overrideSelector, injector, onDispose) {
	        var _this = this;
	        return this._compiler.compileInHost(type).then(function (hostProtoViewRef) {
	            var hostViewRef = _this._viewManager.createRootHostView(hostProtoViewRef, overrideSelector, injector);
	            var newLocation = _this._viewManager.getHostElement(hostViewRef);
	            var component = _this._viewManager.getComponent(newLocation);
	            var dispose = function () {
	                _this._viewManager.destroyRootHostView(hostViewRef);
	                if (lang_1.isPresent(onDispose)) {
	                    onDispose();
	                }
	            };
	            return new ComponentRef_(newLocation, component, type, injector, dispose);
	        });
	    };
	    DynamicComponentLoader_.prototype.loadIntoLocation = function (type, hostLocation, anchorName, providers) {
	        if (providers === void 0) { providers = null; }
	        return this.loadNextToLocation(type, this._viewManager.getNamedElementInComponentView(hostLocation, anchorName), providers);
	    };
	    DynamicComponentLoader_.prototype.loadNextToLocation = function (type, location, providers) {
	        var _this = this;
	        if (providers === void 0) { providers = null; }
	        return this._compiler.compileInHost(type).then(function (hostProtoViewRef) {
	            var viewContainer = _this._viewManager.getViewContainer(location);
	            var hostViewRef = viewContainer.createHostView(hostProtoViewRef, viewContainer.length, providers);
	            var newLocation = _this._viewManager.getHostElement(hostViewRef);
	            var component = _this._viewManager.getComponent(newLocation);
	            var dispose = function () {
	                var index = viewContainer.indexOf(hostViewRef);
	                if (index !== -1) {
	                    viewContainer.remove(index);
	                }
	            };
	            return new ComponentRef_(newLocation, component, type, null, dispose);
	        });
	    };
	    DynamicComponentLoader_ = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [compiler_1.Compiler, view_manager_1.AppViewManager])
	    ], DynamicComponentLoader_);
	    return DynamicComponentLoader_;
	})(DynamicComponentLoader);
	exports.DynamicComponentLoader_ = DynamicComponentLoader_;
	//# sourceMappingURL=dynamic_component_loader.js.map

/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var metadata_1 = __webpack_require__(194);
	var change_detection_1 = __webpack_require__(214);
	var linker_1 = __webpack_require__(257);
	var lang_1 = __webpack_require__(49);
	/**
	 * The `NgFor` directive instantiates a template once per item from an iterable. The context for
	 * each instantiated template inherits from the outer context with the given loop variable set
	 * to the current item from the iterable.
	 *
	 * # Local Variables
	 *
	 * `NgFor` provides several exported values that can be aliased to local variables:
	 *
	 * * `index` will be set to the current loop iteration for each template context.
	 * * `last` will be set to a boolean value indicating whether the item is the last one in the
	 *   iteration.
	 * * `even` will be set to a boolean value indicating whether this item has an even index.
	 * * `odd` will be set to a boolean value indicating whether this item has an odd index.
	 *
	 * # Change Propagation
	 *
	 * When the contents of the iterator changes, `NgFor` makes the corresponding changes to the DOM:
	 *
	 * * When an item is added, a new instance of the template is added to the DOM.
	 * * When an item is removed, its template instance is removed from the DOM.
	 * * When items are reordered, their respective templates are reordered in the DOM.
	 * * Otherwise, the DOM element for that item will remain the same.
	 *
	 * Angular uses object identity to track insertions and deletions within the iterator and reproduce
	 * those changes in the DOM. This has important implications for animations and any stateful
	 * controls
	 * (such as `<input>` elements which accept user input) that are present. Inserted rows can be
	 * animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state such
	 * as user input.
	 *
	 * It is possible for the identities of elements in the iterator to change while the data does not.
	 * This can happen, for example, if the iterator produced from an RPC to the server, and that
	 * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with
	 * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old
	 * elements were deleted and all new elements inserted). This is an expensive operation and should
	 * be avoided if possible.
	 *
	 * # Syntax
	 *
	 * - `<li *ng-for="#item of items; #i = index">...</li>`
	 * - `<li template="ng-for #item of items; #i = index">...</li>`
	 * - `<template ng-for #item [ng-for-of]="items" #i="index"><li>...</li></template>`
	 *
	 * ### Example
	 *
	 * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed
	 * example.
	 */
	var NgFor = (function () {
	    function NgFor(_viewContainer, _templateRef, _iterableDiffers, _cdr) {
	        this._viewContainer = _viewContainer;
	        this._templateRef = _templateRef;
	        this._iterableDiffers = _iterableDiffers;
	        this._cdr = _cdr;
	    }
	    Object.defineProperty(NgFor.prototype, "ngForOf", {
	        set: function (value) {
	            this._ngForOf = value;
	            if (lang_1.isBlank(this._differ) && lang_1.isPresent(value)) {
	                this._differ = this._iterableDiffers.find(value).create(this._cdr);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgFor.prototype, "ngForTemplate", {
	        set: function (value) {
	            if (lang_1.isPresent(value)) {
	                this._templateRef = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgFor.prototype.doCheck = function () {
	        if (lang_1.isPresent(this._differ)) {
	            var changes = this._differ.diff(this._ngForOf);
	            if (lang_1.isPresent(changes))
	                this._applyChanges(changes);
	        }
	    };
	    NgFor.prototype._applyChanges = function (changes) {
	        // TODO(rado): check if change detection can produce a change record that is
	        // easier to consume than current.
	        var recordViewTuples = [];
	        changes.forEachRemovedItem(function (removedRecord) {
	            return recordViewTuples.push(new RecordViewTuple(removedRecord, null));
	        });
	        changes.forEachMovedItem(function (movedRecord) {
	            return recordViewTuples.push(new RecordViewTuple(movedRecord, null));
	        });
	        var insertTuples = this._bulkRemove(recordViewTuples);
	        changes.forEachAddedItem(function (addedRecord) {
	            return insertTuples.push(new RecordViewTuple(addedRecord, null));
	        });
	        this._bulkInsert(insertTuples);
	        for (var i = 0; i < insertTuples.length; i++) {
	            this._perViewChange(insertTuples[i].view, insertTuples[i].record);
	        }
	        for (var i = 0, ilen = this._viewContainer.length; i < ilen; i++) {
	            this._viewContainer.get(i).setLocal('last', i === ilen - 1);
	        }
	    };
	    NgFor.prototype._perViewChange = function (view, record) {
	        view.setLocal('\$implicit', record.item);
	        view.setLocal('index', record.currentIndex);
	        view.setLocal('even', (record.currentIndex % 2 == 0));
	        view.setLocal('odd', (record.currentIndex % 2 == 1));
	    };
	    NgFor.prototype._bulkRemove = function (tuples) {
	        tuples.sort(function (a, b) { return a.record.previousIndex - b.record.previousIndex; });
	        var movedTuples = [];
	        for (var i = tuples.length - 1; i >= 0; i--) {
	            var tuple = tuples[i];
	            // separate moved views from removed views.
	            if (lang_1.isPresent(tuple.record.currentIndex)) {
	                tuple.view = this._viewContainer.detach(tuple.record.previousIndex);
	                movedTuples.push(tuple);
	            }
	            else {
	                this._viewContainer.remove(tuple.record.previousIndex);
	            }
	        }
	        return movedTuples;
	    };
	    NgFor.prototype._bulkInsert = function (tuples) {
	        tuples.sort(function (a, b) { return a.record.currentIndex - b.record.currentIndex; });
	        for (var i = 0; i < tuples.length; i++) {
	            var tuple = tuples[i];
	            if (lang_1.isPresent(tuple.view)) {
	                this._viewContainer.insert(tuple.view, tuple.record.currentIndex);
	            }
	            else {
	                tuple.view =
	                    this._viewContainer.createEmbeddedView(this._templateRef, tuple.record.currentIndex);
	            }
	        }
	        return tuples;
	    };
	    NgFor = __decorate([
	        metadata_1.Directive({ selector: '[ng-for][ng-for-of]', inputs: ['ngForOf', 'ngForTemplate'] }), 
	        __metadata('design:paramtypes', [linker_1.ViewContainerRef, linker_1.TemplateRef, change_detection_1.IterableDiffers, change_detection_1.ChangeDetectorRef])
	    ], NgFor);
	    return NgFor;
	})();
	exports.NgFor = NgFor;
	var RecordViewTuple = (function () {
	    function RecordViewTuple(record, view) {
	        this.record = record;
	        this.view = view;
	    }
	    return RecordViewTuple;
	})();
	//# sourceMappingURL=ng_for.js.map

/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var metadata_1 = __webpack_require__(194);
	var linker_1 = __webpack_require__(257);
	var lang_1 = __webpack_require__(49);
	/**
	 * Removes or recreates a portion of the DOM tree based on an {expression}.
	 *
	 * If the expression assigned to `ng-if` evaluates to a false value then the element
	 * is removed from the DOM, otherwise a clone of the element is reinserted into the DOM.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/fe0kgemFBtmQOY31b4tw?p=preview)):
	 *
	 * ```
	 * <div *ng-if="errorCount > 0" class="error">
	 *   <!-- Error message displayed when the errorCount property on the current context is greater
	 * than 0. -->
	 *   {{errorCount}} errors detected
	 * </div>
	 * ```
	 *
	 *##Syntax
	 *
	 * - `<div *ng-if="condition">...</div>`
	 * - `<div template="ng-if condition">...</div>`
	 * - `<template [ng-if]="condition"><div>...</div></template>`
	 */
	var NgIf = (function () {
	    function NgIf(_viewContainer, _templateRef) {
	        this._viewContainer = _viewContainer;
	        this._templateRef = _templateRef;
	        this._prevCondition = null;
	    }
	    Object.defineProperty(NgIf.prototype, "ngIf", {
	        set: function (newCondition /* boolean */) {
	            if (newCondition && (lang_1.isBlank(this._prevCondition) || !this._prevCondition)) {
	                this._prevCondition = true;
	                this._viewContainer.createEmbeddedView(this._templateRef);
	            }
	            else if (!newCondition && (lang_1.isBlank(this._prevCondition) || this._prevCondition)) {
	                this._prevCondition = false;
	                this._viewContainer.clear();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgIf = __decorate([
	        metadata_1.Directive({ selector: '[ng-if]', inputs: ['ngIf'] }), 
	        __metadata('design:paramtypes', [linker_1.ViewContainerRef, linker_1.TemplateRef])
	    ], NgIf);
	    return NgIf;
	})();
	exports.NgIf = NgIf;
	//# sourceMappingURL=ng_if.js.map

/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var change_detection_1 = __webpack_require__(214);
	var linker_1 = __webpack_require__(257);
	var metadata_1 = __webpack_require__(194);
	var render_1 = __webpack_require__(301);
	var lang_1 = __webpack_require__(49);
	/**
	 * The `NgStyle` directive changes styles based on a result of expression evaluation.
	 *
	 * An expression assigned to the `ng-style` property must evaluate to an object and the
	 * corresponding element styles are updated based on changes to this object. Style names to update
	 * are taken from the object's keys, and values - from the corresponding object's values.
	 *
	 *##Syntax
	 *
	 * - `<div [ng-style]="{'font-style': style}"></div>`
	 * - `<div [ng-style]="styleExp"></div>` - here the `styleExp` must evaluate to an object
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/YamGS6GkUh9GqWNQhCyM?p=preview)):
	 *
	 * ```
	 * import {Component, NgStyle} from 'angular2/angular2';
	 *
	 * @Component({
	 *  selector: 'ng-style-example',
	 *  template: `
	 *    <h1 [ng-style]="{'font-style': style, 'font-size': size, 'font-weight': weight}">
	 *      Change style of this text!
	 *    </h1>
	 *
	 *    <hr>
	 *
	 *    <label>Italic: <input type="checkbox" (change)="changeStyle($event)"></label>
	 *    <label>Bold: <input type="checkbox" (change)="changeWeight($event)"></label>
	 *    <label>Size: <input type="text" [value]="size" (change)="size = $event.target.value"></label>
	 *  `,
	 *  directives: [NgStyle]
	 * })
	 * export class NgStyleExample {
	 *    style = 'normal';
	 *    weight = 'normal';
	 *    size = '20px';
	 *
	 *    changeStyle($event: any) {
	 *      this.style = $event.target.checked ? 'italic' : 'normal';
	 *    }
	 *
	 *    changeWeight($event: any) {
	 *      this.weight = $event.target.checked ? 'bold' : 'normal';
	 *    }
	 * }
	 * ```
	 *
	 * In this example the `font-style`, `font-size` and `font-weight` styles will be updated
	 * based on the `style` property's value changes.
	 */
	var NgStyle = (function () {
	    function NgStyle(_differs, _ngEl, _renderer) {
	        this._differs = _differs;
	        this._ngEl = _ngEl;
	        this._renderer = _renderer;
	    }
	    Object.defineProperty(NgStyle.prototype, "rawStyle", {
	        set: function (v) {
	            this._rawStyle = v;
	            if (lang_1.isBlank(this._differ) && lang_1.isPresent(v)) {
	                this._differ = this._differs.find(this._rawStyle).create(null);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgStyle.prototype.doCheck = function () {
	        if (lang_1.isPresent(this._differ)) {
	            var changes = this._differ.diff(this._rawStyle);
	            if (lang_1.isPresent(changes)) {
	                this._applyChanges(changes);
	            }
	        }
	    };
	    NgStyle.prototype._applyChanges = function (changes) {
	        var _this = this;
	        changes.forEachAddedItem(function (record) { _this._setStyle(record.key, record.currentValue); });
	        changes.forEachChangedItem(function (record) { _this._setStyle(record.key, record.currentValue); });
	        changes.forEachRemovedItem(function (record) { _this._setStyle(record.key, null); });
	    };
	    NgStyle.prototype._setStyle = function (name, val) {
	        this._renderer.setElementStyle(this._ngEl, name, val);
	    };
	    NgStyle = __decorate([
	        metadata_1.Directive({ selector: '[ng-style]', inputs: ['rawStyle: ng-style'] }), 
	        __metadata('design:paramtypes', [change_detection_1.KeyValueDiffers, linker_1.ElementRef, render_1.Renderer])
	    ], NgStyle);
	    return NgStyle;
	})();
	exports.NgStyle = NgStyle;
	//# sourceMappingURL=ng_style.js.map

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var metadata_1 = __webpack_require__(194);
	var di_1 = __webpack_require__(196);
	var linker_1 = __webpack_require__(257);
	var lang_1 = __webpack_require__(49);
	var collection_1 = __webpack_require__(202);
	var _WHEN_DEFAULT = lang_1.CONST_EXPR(new Object());
	var SwitchView = (function () {
	    function SwitchView(_viewContainerRef, _templateRef) {
	        this._viewContainerRef = _viewContainerRef;
	        this._templateRef = _templateRef;
	    }
	    SwitchView.prototype.create = function () { this._viewContainerRef.createEmbeddedView(this._templateRef); };
	    SwitchView.prototype.destroy = function () { this._viewContainerRef.clear(); };
	    return SwitchView;
	})();
	exports.SwitchView = SwitchView;
	/**
	 * The `NgSwitch` directive is used to conditionally swap DOM structure on your template based on a
	 * scope expression.
	 * Elements within `NgSwitch` but without `NgSwitchWhen` or `NgSwitchDefault` directives will be
	 * preserved at the location as specified in the template.
	 *
	 * `NgSwitch` simply chooses nested elements and makes them visible based on which element matches
	 * the value obtained from the evaluated expression. In other words, you define a container element
	 * (where you place the directive), place an expression on the **`[ng-switch]="..."` attribute**),
	 * define any inner elements inside of the directive and place a `[ng-switch-when]` attribute per
	 * element.
	 * The when attribute is used to inform NgSwitch which element to display when the expression is
	 * evaluated. If a matching expression is not found via a when attribute then an element with the
	 * default attribute is displayed.
	 *
	 * ### Example
	 *
	 * ```
	 * <ANY [ng-switch]="expression">
	 *   <template [ng-switch-when]="whenExpression1">...</template>
	 *   <template [ng-switch-when]="whenExpression1">...</template>
	 *   <template ng-switch-default>...</template>
	 * </ANY>
	 * ```
	 */
	var NgSwitch = (function () {
	    function NgSwitch() {
	        this._useDefault = false;
	        this._valueViews = new collection_1.Map();
	        this._activeViews = [];
	    }
	    Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
	        set: function (value) {
	            // Empty the currently active ViewContainers
	            this._emptyAllActiveViews();
	            // Add the ViewContainers matching the value (with a fallback to default)
	            this._useDefault = false;
	            var views = this._valueViews.get(value);
	            if (lang_1.isBlank(views)) {
	                this._useDefault = true;
	                views = lang_1.normalizeBlank(this._valueViews.get(_WHEN_DEFAULT));
	            }
	            this._activateViews(views);
	            this._switchValue = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** @internal */
	    NgSwitch.prototype._onWhenValueChanged = function (oldWhen, newWhen, view) {
	        this._deregisterView(oldWhen, view);
	        this._registerView(newWhen, view);
	        if (oldWhen === this._switchValue) {
	            view.destroy();
	            collection_1.ListWrapper.remove(this._activeViews, view);
	        }
	        else if (newWhen === this._switchValue) {
	            if (this._useDefault) {
	                this._useDefault = false;
	                this._emptyAllActiveViews();
	            }
	            view.create();
	            this._activeViews.push(view);
	        }
	        // Switch to default when there is no more active ViewContainers
	        if (this._activeViews.length === 0 && !this._useDefault) {
	            this._useDefault = true;
	            this._activateViews(this._valueViews.get(_WHEN_DEFAULT));
	        }
	    };
	    /** @internal */
	    NgSwitch.prototype._emptyAllActiveViews = function () {
	        var activeContainers = this._activeViews;
	        for (var i = 0; i < activeContainers.length; i++) {
	            activeContainers[i].destroy();
	        }
	        this._activeViews = [];
	    };
	    /** @internal */
	    NgSwitch.prototype._activateViews = function (views) {
	        // TODO(vicb): assert(this._activeViews.length === 0);
	        if (lang_1.isPresent(views)) {
	            for (var i = 0; i < views.length; i++) {
	                views[i].create();
	            }
	            this._activeViews = views;
	        }
	    };
	    /** @internal */
	    NgSwitch.prototype._registerView = function (value, view) {
	        var views = this._valueViews.get(value);
	        if (lang_1.isBlank(views)) {
	            views = [];
	            this._valueViews.set(value, views);
	        }
	        views.push(view);
	    };
	    /** @internal */
	    NgSwitch.prototype._deregisterView = function (value, view) {
	        // `_WHEN_DEFAULT` is used a marker for non-registered whens
	        if (value === _WHEN_DEFAULT)
	            return;
	        var views = this._valueViews.get(value);
	        if (views.length == 1) {
	            this._valueViews.delete(value);
	        }
	        else {
	            collection_1.ListWrapper.remove(views, view);
	        }
	    };
	    NgSwitch = __decorate([
	        metadata_1.Directive({ selector: '[ng-switch]', inputs: ['ngSwitch'] }), 
	        __metadata('design:paramtypes', [])
	    ], NgSwitch);
	    return NgSwitch;
	})();
	exports.NgSwitch = NgSwitch;
	/**
	 * Defines a case statement as an expression.
	 *
	 * If multiple `NgSwitchWhen` match the `NgSwitch` value, all of them are displayed.
	 *
	 * Example:
	 *
	 * ```
	 * // match against a context variable
	 * <template [ng-switch-when]="contextVariable">...</template>
	 *
	 * // match against a constant string
	 * <template ng-switch-when="stringValue">...</template>
	 * ```
	 */
	var NgSwitchWhen = (function () {
	    function NgSwitchWhen(viewContainer, templateRef, _switch) {
	        this._switch = _switch;
	        // `_WHEN_DEFAULT` is used as a marker for a not yet initialized value
	        /** @internal */
	        this._value = _WHEN_DEFAULT;
	        this._view = new SwitchView(viewContainer, templateRef);
	    }
	    Object.defineProperty(NgSwitchWhen.prototype, "ngSwitchWhen", {
	        set: function (value) {
	            this._switch._onWhenValueChanged(this._value, value, this._view);
	            this._value = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgSwitchWhen = __decorate([
	        metadata_1.Directive({ selector: '[ng-switch-when]', inputs: ['ngSwitchWhen'] }),
	        __param(2, di_1.Host()), 
	        __metadata('design:paramtypes', [linker_1.ViewContainerRef, linker_1.TemplateRef, NgSwitch])
	    ], NgSwitchWhen);
	    return NgSwitchWhen;
	})();
	exports.NgSwitchWhen = NgSwitchWhen;
	/**
	 * Defines a default case statement.
	 *
	 * Default case statements are displayed when no `NgSwitchWhen` match the `ng-switch` value.
	 *
	 * Example:
	 *
	 * ```
	 * <template ng-switch-default>...</template>
	 * ```
	 */
	var NgSwitchDefault = (function () {
	    function NgSwitchDefault(viewContainer, templateRef, sswitch) {
	        sswitch._registerView(_WHEN_DEFAULT, new SwitchView(viewContainer, templateRef));
	    }
	    NgSwitchDefault = __decorate([
	        metadata_1.Directive({ selector: '[ng-switch-default]' }),
	        __param(2, di_1.Host()), 
	        __metadata('design:paramtypes', [linker_1.ViewContainerRef, linker_1.TemplateRef, NgSwitch])
	    ], NgSwitchDefault);
	    return NgSwitchDefault;
	})();
	exports.NgSwitchDefault = NgSwitchDefault;
	//# sourceMappingURL=ng_switch.js.map

/***/ },
/* 308 */
/***/ function(module, exports) {

	'use strict';// TS does not have Observables
	//# sourceMappingURL=observable_list_diff.js.map

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var ng_class_1 = __webpack_require__(256);
	var ng_for_1 = __webpack_require__(304);
	var ng_if_1 = __webpack_require__(305);
	var ng_style_1 = __webpack_require__(306);
	var ng_switch_1 = __webpack_require__(307);
	/**
	 * A collection of Angular core directives that are likely to be used in each and every Angular
	 * application.
	 *
	 * This collection can be used to quickly enumerate all the built-in directives in the `directives`
	 * property of the `@View` annotation.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/yakGwpCdUkg0qfzX5m8g?p=preview))
	 *
	 * Instead of writing:
	 *
	 * ```typescript
	 * import {NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault} from 'angular2/angular2';
	 * import {OtherDirective} from './myDirectives';
	 *
	 * @Component({
	 *   selector: 'my-component',
	 *   templateUrl: 'myComponent.html',
	 *   directives: [NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, OtherDirective]
	 * })
	 * export class MyComponent {
	 *   ...
	 * }
	 * ```
	 * one could import all the core directives at once:
	 *
	 * ```typescript
	 * import {CORE_DIRECTIVES} from 'angular2/angular2';
	 * import {OtherDirective} from './myDirectives';
	 *
	 * @Component({
	 *   selector: 'my-component',
	 *   templateUrl: 'myComponent.html',
	 *   directives: [CORE_DIRECTIVES, OtherDirective]
	 * })
	 * export class MyComponent {
	 *   ...
	 * }
	 * ```
	 */
	exports.CORE_DIRECTIVES = lang_1.CONST_EXPR([ng_class_1.NgClass, ng_for_1.NgFor, ng_if_1.NgIf, ng_style_1.NgStyle, ng_switch_1.NgSwitch, ng_switch_1.NgSwitchWhen, ng_switch_1.NgSwitchDefault]);
	//# sourceMappingURL=core_directives.js.map

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * @module
	 * @description
	 * This module is used for handling user input, by defining and building a {@link ControlGroup} that
	 * consists of
	 * {@link Control} objects, and mapping them onto the DOM. {@link Control} objects can then be used
	 * to read information
	 * from the form DOM elements.
	 *
	 * This module is not included in the `angular2` module; you must import the forms module
	 * explicitly.
	 *
	 */
	var model_1 = __webpack_require__(311);
	exports.AbstractControl = model_1.AbstractControl;
	exports.Control = model_1.Control;
	exports.ControlGroup = model_1.ControlGroup;
	exports.ControlArray = model_1.ControlArray;
	var abstract_control_directive_1 = __webpack_require__(312);
	exports.AbstractControlDirective = abstract_control_directive_1.AbstractControlDirective;
	var control_container_1 = __webpack_require__(313);
	exports.ControlContainer = control_container_1.ControlContainer;
	var ng_control_name_1 = __webpack_require__(314);
	exports.NgControlName = ng_control_name_1.NgControlName;
	var ng_form_control_1 = __webpack_require__(324);
	exports.NgFormControl = ng_form_control_1.NgFormControl;
	var ng_model_1 = __webpack_require__(325);
	exports.NgModel = ng_model_1.NgModel;
	var ng_control_1 = __webpack_require__(315);
	exports.NgControl = ng_control_1.NgControl;
	var ng_control_group_1 = __webpack_require__(326);
	exports.NgControlGroup = ng_control_group_1.NgControlGroup;
	var ng_form_model_1 = __webpack_require__(327);
	exports.NgFormModel = ng_form_model_1.NgFormModel;
	var ng_form_1 = __webpack_require__(328);
	exports.NgForm = ng_form_1.NgForm;
	var control_value_accessor_1 = __webpack_require__(316);
	exports.NG_VALUE_ACCESSOR = control_value_accessor_1.NG_VALUE_ACCESSOR;
	var default_value_accessor_1 = __webpack_require__(319);
	exports.DefaultValueAccessor = default_value_accessor_1.DefaultValueAccessor;
	var ng_control_status_1 = __webpack_require__(329);
	exports.NgControlStatus = ng_control_status_1.NgControlStatus;
	var checkbox_value_accessor_1 = __webpack_require__(321);
	exports.CheckboxControlValueAccessor = checkbox_value_accessor_1.CheckboxControlValueAccessor;
	var select_control_value_accessor_1 = __webpack_require__(322);
	exports.NgSelectOption = select_control_value_accessor_1.NgSelectOption;
	exports.SelectControlValueAccessor = select_control_value_accessor_1.SelectControlValueAccessor;
	var directives_1 = __webpack_require__(330);
	exports.FORM_DIRECTIVES = directives_1.FORM_DIRECTIVES;
	var validators_1 = __webpack_require__(318);
	exports.NG_VALIDATORS = validators_1.NG_VALIDATORS;
	exports.NG_ASYNC_VALIDATORS = validators_1.NG_ASYNC_VALIDATORS;
	exports.Validators = validators_1.Validators;
	var validators_2 = __webpack_require__(331);
	exports.RequiredValidator = validators_2.RequiredValidator;
	exports.MinLengthValidator = validators_2.MinLengthValidator;
	exports.MaxLengthValidator = validators_2.MaxLengthValidator;
	var form_builder_1 = __webpack_require__(332);
	exports.FormBuilder = form_builder_1.FormBuilder;
	exports.FORM_PROVIDERS = form_builder_1.FORM_PROVIDERS;
	exports.FORM_BINDINGS = form_builder_1.FORM_BINDINGS;
	//# sourceMappingURL=forms.js.map

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var lang_1 = __webpack_require__(49);
	var async_1 = __webpack_require__(50);
	var promise_1 = __webpack_require__(51);
	var collection_1 = __webpack_require__(202);
	/**
	 * Indicates that a Control is valid, i.e. that no errors exist in the input value.
	 */
	exports.VALID = "VALID";
	/**
	 * Indicates that a Control is invalid, i.e. that an error exists in the input value.
	 */
	exports.INVALID = "INVALID";
	/**
	 * Indicates that a Control is pending, i.e. that async validation is occuring and
	 * errors are not yet available for the input value.
	 */
	exports.PENDING = "PENDING";
	function isControl(control) {
	    return control instanceof AbstractControl;
	}
	exports.isControl = isControl;
	function _find(control, path) {
	    if (lang_1.isBlank(path))
	        return null;
	    if (!(path instanceof Array)) {
	        path = path.split("/");
	    }
	    if (path instanceof Array && collection_1.ListWrapper.isEmpty(path))
	        return null;
	    return path
	        .reduce(function (v, name) {
	        if (v instanceof ControlGroup) {
	            return lang_1.isPresent(v.controls[name]) ? v.controls[name] : null;
	        }
	        else if (v instanceof ControlArray) {
	            var index = name;
	            return lang_1.isPresent(v.at(index)) ? v.at(index) : null;
	        }
	        else {
	            return null;
	        }
	    }, control);
	}
	function toObservable(r) {
	    return promise_1.PromiseWrapper.isPromise(r) ? async_1.ObservableWrapper.fromPromise(r) : r;
	}
	/**
	 *
	 */
	var AbstractControl = (function () {
	    function AbstractControl(validator, asyncValidator) {
	        this.validator = validator;
	        this.asyncValidator = asyncValidator;
	        this._pristine = true;
	        this._touched = false;
	    }
	    Object.defineProperty(AbstractControl.prototype, "value", {
	        get: function () { return this._value; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "status", {
	        get: function () { return this._status; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "valid", {
	        get: function () { return this._status === exports.VALID; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "errors", {
	        /**
	         * Returns the errors of this control.
	         */
	        get: function () { return this._errors; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "pristine", {
	        get: function () { return this._pristine; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "dirty", {
	        get: function () { return !this.pristine; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "touched", {
	        get: function () { return this._touched; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "untouched", {
	        get: function () { return !this._touched; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "valueChanges", {
	        get: function () { return this._valueChanges; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "statusChanges", {
	        get: function () { return this._statusChanges; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "pending", {
	        get: function () { return this._status == exports.PENDING; },
	        enumerable: true,
	        configurable: true
	    });
	    AbstractControl.prototype.markAsTouched = function () { this._touched = true; };
	    AbstractControl.prototype.markAsDirty = function (_a) {
	        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
	        onlySelf = lang_1.normalizeBool(onlySelf);
	        this._pristine = false;
	        if (lang_1.isPresent(this._parent) && !onlySelf) {
	            this._parent.markAsDirty({ onlySelf: onlySelf });
	        }
	    };
	    AbstractControl.prototype.markAsPending = function (_a) {
	        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
	        onlySelf = lang_1.normalizeBool(onlySelf);
	        this._status = exports.PENDING;
	        if (lang_1.isPresent(this._parent) && !onlySelf) {
	            this._parent.markAsPending({ onlySelf: onlySelf });
	        }
	    };
	    AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };
	    AbstractControl.prototype.updateValueAndValidity = function (_a) {
	        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	        onlySelf = lang_1.normalizeBool(onlySelf);
	        emitEvent = lang_1.isPresent(emitEvent) ? emitEvent : true;
	        this._updateValue();
	        this._errors = this._runValidator();
	        this._status = this._calculateStatus();
	        if (this._status == exports.VALID || this._status == exports.PENDING) {
	            this._runAsyncValidator(emitEvent);
	        }
	        if (emitEvent) {
	            async_1.ObservableWrapper.callNext(this._valueChanges, this._value);
	            async_1.ObservableWrapper.callNext(this._statusChanges, this._status);
	        }
	        if (lang_1.isPresent(this._parent) && !onlySelf) {
	            this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	        }
	    };
	    AbstractControl.prototype._runValidator = function () { return lang_1.isPresent(this.validator) ? this.validator(this) : null; };
	    AbstractControl.prototype._runAsyncValidator = function (emitEvent) {
	        var _this = this;
	        if (lang_1.isPresent(this.asyncValidator)) {
	            this._status = exports.PENDING;
	            this._cancelExistingSubscription();
	            var obs = toObservable(this.asyncValidator(this));
	            this._asyncValidationSubscription =
	                async_1.ObservableWrapper.subscribe(obs, function (res) { return _this.setErrors(res, { emitEvent: emitEvent }); });
	        }
	    };
	    AbstractControl.prototype._cancelExistingSubscription = function () {
	        if (lang_1.isPresent(this._asyncValidationSubscription)) {
	            async_1.ObservableWrapper.dispose(this._asyncValidationSubscription);
	        }
	    };
	    /**
	     * Sets errors on a control.
	     *
	     * This is used when validations are run not automatically, but manually by the user.
	     *
	     * Calling `setErrors` will also update the validity of the parent control.
	     *
	     * ## Usage
	     *
	     * ```
	     * var login = new Control("someLogin");
	     * login.setErrors({
	     *   "notUnique": true
	     * });
	     *
	     * expect(login.valid).toEqual(false);
	     * expect(login.errors).toEqual({"notUnique": true});
	     *
	     * login.updateValue("someOtherLogin");
	     *
	     * expect(login.valid).toEqual(true);
	     * ```
	     */
	    AbstractControl.prototype.setErrors = function (errors, _a) {
	        var emitEvent = (_a === void 0 ? {} : _a).emitEvent;
	        emitEvent = lang_1.isPresent(emitEvent) ? emitEvent : true;
	        this._errors = errors;
	        this._status = this._calculateStatus();
	        if (emitEvent) {
	            async_1.ObservableWrapper.callNext(this._statusChanges, this._status);
	        }
	        if (lang_1.isPresent(this._parent)) {
	            this._parent._updateControlsErrors();
	        }
	    };
	    AbstractControl.prototype.find = function (path) { return _find(this, path); };
	    AbstractControl.prototype.getError = function (errorCode, path) {
	        if (path === void 0) { path = null; }
	        var control = lang_1.isPresent(path) && !collection_1.ListWrapper.isEmpty(path) ? this.find(path) : this;
	        if (lang_1.isPresent(control) && lang_1.isPresent(control._errors)) {
	            return collection_1.StringMapWrapper.get(control._errors, errorCode);
	        }
	        else {
	            return null;
	        }
	    };
	    AbstractControl.prototype.hasError = function (errorCode, path) {
	        if (path === void 0) { path = null; }
	        return lang_1.isPresent(this.getError(errorCode, path));
	    };
	    /** @internal */
	    AbstractControl.prototype._updateControlsErrors = function () {
	        this._status = this._calculateStatus();
	        if (lang_1.isPresent(this._parent)) {
	            this._parent._updateControlsErrors();
	        }
	    };
	    /** @internal */
	    AbstractControl.prototype._initObservables = function () {
	        this._valueChanges = new async_1.EventEmitter();
	        this._statusChanges = new async_1.EventEmitter();
	    };
	    AbstractControl.prototype._calculateStatus = function () {
	        if (lang_1.isPresent(this._errors))
	            return exports.INVALID;
	        if (this._anyControlsHaveStatus(exports.PENDING))
	            return exports.PENDING;
	        if (this._anyControlsHaveStatus(exports.INVALID))
	            return exports.INVALID;
	        return exports.VALID;
	    };
	    return AbstractControl;
	})();
	exports.AbstractControl = AbstractControl;
	/**
	 * Defines a part of a form that cannot be divided into other controls. `Control`s have values and
	 * validation state, which is determined by an optional validation function.
	 *
	 * `Control` is one of the three fundamental building blocks used to define forms in Angular, along
	 * with {@link ControlGroup} and {@link ControlArray}.
	 *
	 * ##Usage
	 *
	 * By default, a `Control` is created for every `<input>` or other form component.
	 * With {@link NgFormControl} or {@link NgFormModel} an existing {@link Control} can be
	 * bound to a DOM element instead. This `Control` can be configured with a custom
	 * validation function.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview))
	 */
	var Control = (function (_super) {
	    __extends(Control, _super);
	    function Control(value, validator, asyncValidator) {
	        if (value === void 0) { value = null; }
	        if (validator === void 0) { validator = null; }
	        if (asyncValidator === void 0) { asyncValidator = null; }
	        _super.call(this, validator, asyncValidator);
	        this._value = value;
	        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
	        this._initObservables();
	    }
	    /**
	     * Set the value of the control to `value`.
	     *
	     * If `onlySelf` is `true`, this change will only affect the validation of this `Control`
	     * and not its parent component. If `emitEvent` is `true`, this change will cause a
	     * `valueChanges` event on the `Control` to be emitted. Both of these options default to
	     * `false`.
	     *
	     * If `emitModelToViewChange` is `true`, the view will be notified about the new value
	     * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not
	     * specified.
	     */
	    Control.prototype.updateValue = function (value, _a) {
	        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange;
	        emitModelToViewChange = lang_1.isPresent(emitModelToViewChange) ? emitModelToViewChange : true;
	        this._value = value;
	        if (lang_1.isPresent(this._onChange) && emitModelToViewChange)
	            this._onChange(this._value);
	        this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	    };
	    /**
	     * @internal
	     */
	    Control.prototype._updateValue = function () { };
	    /**
	     * @internal
	     */
	    Control.prototype._anyControlsHaveStatus = function (status) { return false; };
	    /**
	     * Register a listener for change events.
	     */
	    Control.prototype.registerOnChange = function (fn) { this._onChange = fn; };
	    return Control;
	})(AbstractControl);
	exports.Control = Control;
	/**
	 * Defines a part of a form, of fixed length, that can contain other controls.
	 *
	 * A `ControlGroup` aggregates the values and errors of each {@link Control} in the group. Thus, if
	 * one of the controls in a group is invalid, the entire group is invalid. Similarly, if a control
	 * changes its value, the entire group changes as well.
	 *
	 * `ControlGroup` is one of the three fundamental building blocks used to define forms in Angular,
	 * along with {@link Control} and {@link ControlArray}. {@link ControlArray} can also contain other
	 * controls, but is of variable length.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview))
	 */
	var ControlGroup = (function (_super) {
	    __extends(ControlGroup, _super);
	    function ControlGroup(controls, optionals, validator, asyncValidator) {
	        if (optionals === void 0) { optionals = null; }
	        if (validator === void 0) { validator = null; }
	        if (asyncValidator === void 0) { asyncValidator = null; }
	        _super.call(this, validator, asyncValidator);
	        this.controls = controls;
	        this._optionals = lang_1.isPresent(optionals) ? optionals : {};
	        this._initObservables();
	        this._setParentForControls();
	        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
	    }
	    /**
	     * Add a control to this group.
	     */
	    ControlGroup.prototype.addControl = function (name, control) {
	        this.controls[name] = control;
	        control.setParent(this);
	    };
	    /**
	     * Remove a control from this group.
	     */
	    ControlGroup.prototype.removeControl = function (name) { collection_1.StringMapWrapper.delete(this.controls, name); };
	    /**
	     * Mark the named control as non-optional.
	     */
	    ControlGroup.prototype.include = function (controlName) {
	        collection_1.StringMapWrapper.set(this._optionals, controlName, true);
	        this.updateValueAndValidity();
	    };
	    /**
	     * Mark the named control as optional.
	     */
	    ControlGroup.prototype.exclude = function (controlName) {
	        collection_1.StringMapWrapper.set(this._optionals, controlName, false);
	        this.updateValueAndValidity();
	    };
	    /**
	     * Check whether there is a control with the given name in the group.
	     */
	    ControlGroup.prototype.contains = function (controlName) {
	        var c = collection_1.StringMapWrapper.contains(this.controls, controlName);
	        return c && this._included(controlName);
	    };
	    /** @internal */
	    ControlGroup.prototype._setParentForControls = function () {
	        var _this = this;
	        collection_1.StringMapWrapper.forEach(this.controls, function (control, name) { control.setParent(_this); });
	    };
	    /** @internal */
	    ControlGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };
	    /** @internal */
	    ControlGroup.prototype._anyControlsHaveStatus = function (status) {
	        var _this = this;
	        var res = false;
	        collection_1.StringMapWrapper.forEach(this.controls, function (control, name) {
	            res = res || (_this.contains(name) && control.status == status);
	        });
	        return res;
	    };
	    /** @internal */
	    ControlGroup.prototype._reduceValue = function () {
	        return this._reduceChildren({}, function (acc, control, name) {
	            acc[name] = control.value;
	            return acc;
	        });
	    };
	    /** @internal */
	    ControlGroup.prototype._reduceChildren = function (initValue, fn) {
	        var _this = this;
	        var res = initValue;
	        collection_1.StringMapWrapper.forEach(this.controls, function (control, name) {
	            if (_this._included(name)) {
	                res = fn(res, control, name);
	            }
	        });
	        return res;
	    };
	    /** @internal */
	    ControlGroup.prototype._included = function (controlName) {
	        var isOptional = collection_1.StringMapWrapper.contains(this._optionals, controlName);
	        return !isOptional || collection_1.StringMapWrapper.get(this._optionals, controlName);
	    };
	    return ControlGroup;
	})(AbstractControl);
	exports.ControlGroup = ControlGroup;
	/**
	 * Defines a part of a form, of variable length, that can contain other controls.
	 *
	 * A `ControlArray` aggregates the values and errors of each {@link Control} in the group. Thus, if
	 * one of the controls in a group is invalid, the entire group is invalid. Similarly, if a control
	 * changes its value, the entire group changes as well.
	 *
	 * `ControlArray` is one of the three fundamental building blocks used to define forms in Angular,
	 * along with {@link Control} and {@link ControlGroup}. {@link ControlGroup} can also contain
	 * other controls, but is of fixed length.
	 *
	 * ##Adding or removing controls
	 *
	 * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods
	 * in `ControlArray` itself. These methods ensure the controls are properly tracked in the
	 * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate
	 * the `ControlArray` directly, as that will result in strange and unexpected behavior such
	 * as broken change detection.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview))
	 */
	var ControlArray = (function (_super) {
	    __extends(ControlArray, _super);
	    function ControlArray(controls, validator, asyncValidator) {
	        if (validator === void 0) { validator = null; }
	        if (asyncValidator === void 0) { asyncValidator = null; }
	        _super.call(this, validator, asyncValidator);
	        this.controls = controls;
	        this._initObservables();
	        this._setParentForControls();
	        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
	    }
	    /**
	     * Get the {@link AbstractControl} at the given `index` in the array.
	     */
	    ControlArray.prototype.at = function (index) { return this.controls[index]; };
	    /**
	     * Insert a new {@link AbstractControl} at the end of the array.
	     */
	    ControlArray.prototype.push = function (control) {
	        this.controls.push(control);
	        control.setParent(this);
	        this.updateValueAndValidity();
	    };
	    /**
	     * Insert a new {@link AbstractControl} at the given `index` in the array.
	     */
	    ControlArray.prototype.insert = function (index, control) {
	        collection_1.ListWrapper.insert(this.controls, index, control);
	        control.setParent(this);
	        this.updateValueAndValidity();
	    };
	    /**
	     * Remove the control at the given `index` in the array.
	     */
	    ControlArray.prototype.removeAt = function (index) {
	        collection_1.ListWrapper.removeAt(this.controls, index);
	        this.updateValueAndValidity();
	    };
	    Object.defineProperty(ControlArray.prototype, "length", {
	        /**
	         * Length of the control array.
	         */
	        get: function () { return this.controls.length; },
	        enumerable: true,
	        configurable: true
	    });
	    /** @internal */
	    ControlArray.prototype._updateValue = function () { this._value = this.controls.map(function (control) { return control.value; }); };
	    /** @internal */
	    ControlArray.prototype._anyControlsHaveStatus = function (status) {
	        return this.controls.some(function (c) { return c.status == status; });
	    };
	    /** @internal */
	    ControlArray.prototype._setParentForControls = function () {
	        var _this = this;
	        this.controls.forEach(function (control) { control.setParent(_this); });
	    };
	    return ControlArray;
	})(AbstractControl);
	exports.ControlArray = ControlArray;
	//# sourceMappingURL=model.js.map

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	/**
	 * Base class for control directives.
	 *
	 * Only used internally in the forms module.
	 */
	var AbstractControlDirective = (function () {
	    function AbstractControlDirective() {
	    }
	    Object.defineProperty(AbstractControlDirective.prototype, "control", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "value", {
	        get: function () { return lang_1.isPresent(this.control) ? this.control.value : null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "valid", {
	        get: function () { return lang_1.isPresent(this.control) ? this.control.valid : null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "errors", {
	        get: function () {
	            return lang_1.isPresent(this.control) ? this.control.errors : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
	        get: function () { return lang_1.isPresent(this.control) ? this.control.pristine : null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
	        get: function () { return lang_1.isPresent(this.control) ? this.control.dirty : null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "touched", {
	        get: function () { return lang_1.isPresent(this.control) ? this.control.touched : null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
	        get: function () { return lang_1.isPresent(this.control) ? this.control.untouched : null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "path", {
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    return AbstractControlDirective;
	})();
	exports.AbstractControlDirective = AbstractControlDirective;
	//# sourceMappingURL=abstract_control_directive.js.map

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var abstract_control_directive_1 = __webpack_require__(312);
	/**
	 * A directive that contains multiple {@link NgControl}s.
	 *
	 * Only used by the forms module.
	 */
	var ControlContainer = (function (_super) {
	    __extends(ControlContainer, _super);
	    function ControlContainer() {
	        _super.apply(this, arguments);
	    }
	    Object.defineProperty(ControlContainer.prototype, "formDirective", {
	        /**
	         * Get the form to which this container belongs.
	         */
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ControlContainer.prototype, "path", {
	        /**
	         * Get the path to this container.
	         */
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    return ControlContainer;
	})(abstract_control_directive_1.AbstractControlDirective);
	exports.ControlContainer = ControlContainer;
	//# sourceMappingURL=control_container.js.map

/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var lang_1 = __webpack_require__(49);
	var async_1 = __webpack_require__(50);
	var metadata_1 = __webpack_require__(194);
	var di_1 = __webpack_require__(196);
	var control_container_1 = __webpack_require__(313);
	var ng_control_1 = __webpack_require__(315);
	var control_value_accessor_1 = __webpack_require__(316);
	var shared_1 = __webpack_require__(317);
	var validators_1 = __webpack_require__(318);
	var controlNameBinding = lang_1.CONST_EXPR(new di_1.Provider(ng_control_1.NgControl, { useExisting: di_1.forwardRef(function () { return NgControlName; }) }));
	/**
	 * Creates and binds a control with a specified name to a DOM element.
	 *
	 * This directive can only be used as a child of {@link NgForm} or {@link NgFormModel}.

	 * ### Example
	 *
	 * In this example, we create the login and password controls.
	 * We can work with each control separately: check its validity, get its value, listen to its
	 * changes.
	 *
	 *  ```
	 * @Component({
	 *      selector: "login-comp",
	 *      directives: [FORM_DIRECTIVES],
	 *      template: `
	 *        <form #f="form" (submit)='onLogIn(f.value)'>
	 *          Login <input type='text' ng-control='login' #l="form">
	 *          <div *ng-if="!l.valid">Login is invalid</div>
	 *
	 *          Password <input type='password' ng-control='password'>
	 *          <button type='submit'>Log in!</button>
	 *        </form>
	 *      `})
	 * class LoginComp {
	 *  onLogIn(value): void {
	 *    // value === {login: 'some login', password: 'some password'}
	 *  }
	 * }
	 *  ```
	 *
	 * We can also use ng-model to bind a domain model to the form.
	 *
	 *  ```
	 * @Component({
	 *      selector: "login-comp",
	 *      directives: [FORM_DIRECTIVES],
	 *      template: `
	 *        <form (submit)='onLogIn()'>
	 *          Login <input type='text' ng-control='login' [(ng-model)]="credentials.login">
	 *          Password <input type='password' ng-control='password'
	 *                          [(ng-model)]="credentials.password">
	 *          <button type='submit'>Log in!</button>
	 *        </form>
	 *      `})
	 * class LoginComp {
	 *  credentials: {login:string, password:string};
	 *
	 *  onLogIn(): void {
	 *    // this.credentials.login === "some login"
	 *    // this.credentials.password === "some password"
	 *  }
	 * }
	 *  ```
	 */
	var NgControlName = (function (_super) {
	    __extends(NgControlName, _super);
	    function NgControlName(_parent, _validators, _asyncValidators, valueAccessors) {
	        _super.call(this);
	        this._parent = _parent;
	        this._validators = _validators;
	        this._asyncValidators = _asyncValidators;
	        /** @internal */
	        this.update = new async_1.EventEmitter();
	        this._added = false;
	        this.valueAccessor = shared_1.selectValueAccessor(this, valueAccessors);
	    }
	    NgControlName.prototype.onChanges = function (changes) {
	        if (!this._added) {
	            this.formDirective.addControl(this);
	            this._added = true;
	        }
	        if (shared_1.isPropertyUpdated(changes, this.viewModel)) {
	            this.viewModel = this.model;
	            this.formDirective.updateModel(this, this.model);
	        }
	    };
	    NgControlName.prototype.onDestroy = function () { this.formDirective.removeControl(this); };
	    NgControlName.prototype.viewToModelUpdate = function (newValue) {
	        this.viewModel = newValue;
	        async_1.ObservableWrapper.callNext(this.update, newValue);
	    };
	    Object.defineProperty(NgControlName.prototype, "path", {
	        get: function () { return shared_1.controlPath(this.name, this._parent); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlName.prototype, "formDirective", {
	        get: function () { return this._parent.formDirective; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlName.prototype, "validator", {
	        get: function () { return shared_1.composeValidators(this._validators); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlName.prototype, "asyncValidator", {
	        get: function () { return shared_1.composeAsyncValidators(this._asyncValidators); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlName.prototype, "control", {
	        get: function () { return this.formDirective.getControl(this); },
	        enumerable: true,
	        configurable: true
	    });
	    NgControlName = __decorate([
	        metadata_1.Directive({
	            selector: '[ng-control]',
	            bindings: [controlNameBinding],
	            inputs: ['name: ngControl', 'model: ngModel'],
	            outputs: ['update: ngModelChange'],
	            exportAs: 'form'
	        }),
	        __param(0, di_1.Host()),
	        __param(0, di_1.SkipSelf()),
	        __param(1, di_1.Optional()),
	        __param(1, di_1.Inject(validators_1.NG_VALIDATORS)),
	        __param(2, di_1.Optional()),
	        __param(2, di_1.Inject(validators_1.NG_ASYNC_VALIDATORS)),
	        __param(3, di_1.Optional()),
	        __param(3, di_1.Inject(control_value_accessor_1.NG_VALUE_ACCESSOR)), 
	        __metadata('design:paramtypes', [control_container_1.ControlContainer, Array, Array, Array])
	    ], NgControlName);
	    return NgControlName;
	})(ng_control_1.NgControl);
	exports.NgControlName = NgControlName;
	//# sourceMappingURL=ng_control_name.js.map

/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var abstract_control_directive_1 = __webpack_require__(312);
	var exceptions_1 = __webpack_require__(204);
	/**
	 * A base class that all control directive extend.
	 * It binds a {@link Control} object to a DOM element.
	 *
	 * Used internally by Angular forms.
	 */
	var NgControl = (function (_super) {
	    __extends(NgControl, _super);
	    function NgControl() {
	        _super.apply(this, arguments);
	        this.name = null;
	        this.valueAccessor = null;
	    }
	    Object.defineProperty(NgControl.prototype, "validator", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControl.prototype, "asyncValidator", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    return NgControl;
	})(abstract_control_directive_1.AbstractControlDirective);
	exports.NgControl = NgControl;
	//# sourceMappingURL=ng_control.js.map

/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var di_1 = __webpack_require__(196);
	exports.NG_VALUE_ACCESSOR = lang_1.CONST_EXPR(new di_1.OpaqueToken("NgValueAccessor"));
	//# sourceMappingURL=control_value_accessor.js.map

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var collection_1 = __webpack_require__(202);
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var validators_1 = __webpack_require__(318);
	var default_value_accessor_1 = __webpack_require__(319);
	var number_value_accessor_1 = __webpack_require__(320);
	var checkbox_value_accessor_1 = __webpack_require__(321);
	var select_control_value_accessor_1 = __webpack_require__(322);
	var normalize_validator_1 = __webpack_require__(323);
	function controlPath(name, parent) {
	    var p = collection_1.ListWrapper.clone(parent.path);
	    p.push(name);
	    return p;
	}
	exports.controlPath = controlPath;
	function setUpControl(control, dir) {
	    if (lang_1.isBlank(control))
	        _throwError(dir, "Cannot find control");
	    if (lang_1.isBlank(dir.valueAccessor))
	        _throwError(dir, "No value accessor for");
	    control.validator = validators_1.Validators.compose([control.validator, dir.validator]);
	    control.asyncValidator = validators_1.Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
	    dir.valueAccessor.writeValue(control.value);
	    // view -> model
	    dir.valueAccessor.registerOnChange(function (newValue) {
	        dir.viewToModelUpdate(newValue);
	        control.updateValue(newValue, { emitModelToViewChange: false });
	        control.markAsDirty();
	    });
	    // model -> view
	    control.registerOnChange(function (newValue) { return dir.valueAccessor.writeValue(newValue); });
	    // touched
	    dir.valueAccessor.registerOnTouched(function () { return control.markAsTouched(); });
	}
	exports.setUpControl = setUpControl;
	function setUpControlGroup(control, dir) {
	    if (lang_1.isBlank(control))
	        _throwError(dir, "Cannot find control");
	    control.validator = validators_1.Validators.compose([control.validator, dir.validator]);
	    control.asyncValidator = validators_1.Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
	}
	exports.setUpControlGroup = setUpControlGroup;
	function _throwError(dir, message) {
	    var path = dir.path.join(" -> ");
	    throw new exceptions_1.BaseException(message + " '" + path + "'");
	}
	function setProperty(renderer, elementRef, propName, propValue) {
	    renderer.setElementProperty(elementRef, propName, propValue);
	}
	exports.setProperty = setProperty;
	function composeValidators(validators) {
	    return lang_1.isPresent(validators) ? validators_1.Validators.compose(validators.map(normalize_validator_1.normalizeValidator)) : null;
	}
	exports.composeValidators = composeValidators;
	function composeAsyncValidators(validators) {
	    return lang_1.isPresent(validators) ? validators_1.Validators.composeAsync(validators.map(normalize_validator_1.normalizeValidator)) : null;
	}
	exports.composeAsyncValidators = composeAsyncValidators;
	function isPropertyUpdated(changes, viewModel) {
	    if (!collection_1.StringMapWrapper.contains(changes, "model"))
	        return false;
	    var change = changes["model"];
	    if (change.isFirstChange())
	        return true;
	    return !lang_1.looseIdentical(viewModel, change.currentValue);
	}
	exports.isPropertyUpdated = isPropertyUpdated;
	// TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented
	function selectValueAccessor(dir, valueAccessors) {
	    if (lang_1.isBlank(valueAccessors))
	        return null;
	    var defaultAccessor;
	    var builtinAccessor;
	    var customAccessor;
	    valueAccessors.forEach(function (v) {
	        if (v instanceof default_value_accessor_1.DefaultValueAccessor) {
	            defaultAccessor = v;
	        }
	        else if (v instanceof checkbox_value_accessor_1.CheckboxControlValueAccessor || v instanceof number_value_accessor_1.NumberValueAccessor ||
	            v instanceof select_control_value_accessor_1.SelectControlValueAccessor) {
	            if (lang_1.isPresent(builtinAccessor))
	                _throwError(dir, "More than one built-in value accessor matches");
	            builtinAccessor = v;
	        }
	        else {
	            if (lang_1.isPresent(customAccessor))
	                _throwError(dir, "More than one custom value accessor matches");
	            customAccessor = v;
	        }
	    });
	    if (lang_1.isPresent(customAccessor))
	        return customAccessor;
	    if (lang_1.isPresent(builtinAccessor))
	        return builtinAccessor;
	    if (lang_1.isPresent(defaultAccessor))
	        return defaultAccessor;
	    _throwError(dir, "No valid value accessor for");
	    return null;
	}
	exports.selectValueAccessor = selectValueAccessor;
	//# sourceMappingURL=shared.js.map

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var promise_1 = __webpack_require__(51);
	var async_1 = __webpack_require__(50);
	var collection_1 = __webpack_require__(202);
	var di_1 = __webpack_require__(196);
	/**
	 * Providers for validators to be used for {@link Control}s in a form.
	 *
	 * Provide this using `multi: true` to add validators.
	 *
	 * ### Example
	 *
	 * ```typescript
	 * var providers = [
	 *   new Provider(NG_VALIDATORS, {useValue: myValidator, multi: true})
	 * ];
	 * ```
	 */
	exports.NG_VALIDATORS = lang_1.CONST_EXPR(new di_1.OpaqueToken("NgValidators"));
	exports.NG_ASYNC_VALIDATORS = lang_1.CONST_EXPR(new di_1.OpaqueToken("NgAsyncValidators"));
	/**
	 * Provides a set of validators used by form controls.
	 *
	 * A validator is a function that processes a {@link Control} or collection of
	 * controls and returns a {@link StringMap} of errors. A null map means that
	 * validation has passed.
	 *
	 * # Example
	 *
	 * ```typescript
	 * var loginControl = new Control("", Validators.required)
	 * ```
	 */
	var Validators = (function () {
	    function Validators() {
	    }
	    /**
	     * Validator that requires controls to have a non-empty value.
	     */
	    Validators.required = function (control) {
	        return lang_1.isBlank(control.value) || control.value == "" ? { "required": true } : null;
	    };
	    /**
	     * Validator that requires controls to have a value of a minimum length.
	     */
	    Validators.minLength = function (minLength) {
	        return function (control) {
	            if (lang_1.isPresent(Validators.required(control)))
	                return null;
	            var v = control.value;
	            return v.length < minLength ?
	                { "minlength": { "requiredLength": minLength, "actualLength": v.length } } :
	                null;
	        };
	    };
	    /**
	     * Validator that requires controls to have a value of a maximum length.
	     */
	    Validators.maxLength = function (maxLength) {
	        return function (control) {
	            if (lang_1.isPresent(Validators.required(control)))
	                return null;
	            var v = control.value;
	            return v.length > maxLength ?
	                { "maxlength": { "requiredLength": maxLength, "actualLength": v.length } } :
	                null;
	        };
	    };
	    /**
	     * No-op validator.
	     */
	    Validators.nullValidator = function (c) { return null; };
	    /**
	     * Compose multiple validators into a single function that returns the union
	     * of the individual error maps.
	     */
	    Validators.compose = function (validators) {
	        if (lang_1.isBlank(validators))
	            return null;
	        var presentValidators = validators.filter(lang_1.isPresent);
	        if (presentValidators.length == 0)
	            return null;
	        return function (control) {
	            return _mergeErrors(_executeValidators(control, presentValidators));
	        };
	    };
	    Validators.composeAsync = function (validators) {
	        if (lang_1.isBlank(validators))
	            return null;
	        var presentValidators = validators.filter(lang_1.isPresent);
	        if (presentValidators.length == 0)
	            return null;
	        return function (control) {
	            var promises = _executeValidators(control, presentValidators).map(_convertToPromise);
	            return promise_1.PromiseWrapper.all(promises).then(_mergeErrors);
	        };
	    };
	    return Validators;
	})();
	exports.Validators = Validators;
	function _convertToPromise(obj) {
	    return promise_1.PromiseWrapper.isPromise(obj) ? obj : async_1.ObservableWrapper.toPromise(obj);
	}
	function _executeValidators(control, validators) {
	    return validators.map(function (v) { return v(control); });
	}
	function _mergeErrors(arrayOfErrors) {
	    var res = arrayOfErrors.reduce(function (res, errors) {
	        return lang_1.isPresent(errors) ? collection_1.StringMapWrapper.merge(res, errors) : res;
	    }, {});
	    return collection_1.StringMapWrapper.isEmpty(res) ? null : res;
	}
	//# sourceMappingURL=validators.js.map

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var metadata_1 = __webpack_require__(194);
	var linker_1 = __webpack_require__(257);
	var render_1 = __webpack_require__(301);
	var di_1 = __webpack_require__(196);
	var control_value_accessor_1 = __webpack_require__(316);
	var lang_1 = __webpack_require__(49);
	var shared_1 = __webpack_require__(317);
	var DEFAULT_VALUE_ACCESSOR = lang_1.CONST_EXPR(new di_1.Provider(control_value_accessor_1.NG_VALUE_ACCESSOR, { useExisting: di_1.forwardRef(function () { return DefaultValueAccessor; }), multi: true }));
	/**
	 * The default accessor for writing a value and listening to changes that is used by the
	 * {@link NgModel}, {@link NgFormControl}, and {@link NgControlName} directives.
	 *
	 *  ### Example
	 *  ```
	 *  <input type="text" ng-control="searchQuery">
	 *  ```
	 */
	var DefaultValueAccessor = (function () {
	    function DefaultValueAccessor(_renderer, _elementRef) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        this.onChange = function (_) { };
	        this.onTouched = function () { };
	    }
	    DefaultValueAccessor.prototype.writeValue = function (value) {
	        var normalizedValue = lang_1.isBlank(value) ? '' : value;
	        shared_1.setProperty(this._renderer, this._elementRef, 'value', normalizedValue);
	    };
	    DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
	    DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    DefaultValueAccessor = __decorate([
	        metadata_1.Directive({
	            selector: 'input:not([type=checkbox])[ng-control],textarea[ng-control],input:not([type=checkbox])[ng-form-control],textarea[ng-form-control],input:not([type=checkbox])[ng-model],textarea[ng-model],[ng-default-control]',
	            // TODO: vsavkin replace the above selector with the one below it once
	            // https://github.com/angular/angular/issues/3011 is implemented
	            // selector: '[ng-control],[ng-model],[ng-form-control]',
	            host: {
	                '(change)': 'onChange($event.target.value)',
	                '(input)': 'onChange($event.target.value)',
	                '(blur)': 'onTouched()'
	            },
	            bindings: [DEFAULT_VALUE_ACCESSOR]
	        }), 
	        __metadata('design:paramtypes', [render_1.Renderer, linker_1.ElementRef])
	    ], DefaultValueAccessor);
	    return DefaultValueAccessor;
	})();
	exports.DefaultValueAccessor = DefaultValueAccessor;
	//# sourceMappingURL=default_value_accessor.js.map

/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var metadata_1 = __webpack_require__(194);
	var linker_1 = __webpack_require__(257);
	var render_1 = __webpack_require__(301);
	var di_1 = __webpack_require__(196);
	var control_value_accessor_1 = __webpack_require__(316);
	var lang_1 = __webpack_require__(49);
	var shared_1 = __webpack_require__(317);
	var NUMBER_VALUE_ACCESSOR = lang_1.CONST_EXPR(new di_1.Provider(control_value_accessor_1.NG_VALUE_ACCESSOR, { useExisting: di_1.forwardRef(function () { return NumberValueAccessor; }), multi: true }));
	/**
	 * The accessor for writing a number value and listening to changes that is used by the
	 * {@link NgModel}, {@link NgFormControl}, and {@link NgControlName} directives.
	 *
	 *  ### Example
	 *  ```
	 *  <input type="number" [(ng-model)]="age">
	 *  ```
	 */
	var NumberValueAccessor = (function () {
	    function NumberValueAccessor(_renderer, _elementRef) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        this.onChange = function (_) { };
	        this.onTouched = function () { };
	    }
	    NumberValueAccessor.prototype.writeValue = function (value) { shared_1.setProperty(this._renderer, this._elementRef, 'value', value); };
	    NumberValueAccessor.prototype.registerOnChange = function (fn) {
	        this.onChange = function (value) { fn(lang_1.NumberWrapper.parseFloat(value)); };
	    };
	    NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    NumberValueAccessor = __decorate([
	        metadata_1.Directive({
	            selector: 'input[type=number][ng-control],input[type=number][ng-form-control],input[type=number][ng-model]',
	            host: {
	                '(change)': 'onChange($event.target.value)',
	                '(input)': 'onChange($event.target.value)',
	                '(blur)': 'onTouched()'
	            },
	            bindings: [NUMBER_VALUE_ACCESSOR]
	        }), 
	        __metadata('design:paramtypes', [render_1.Renderer, linker_1.ElementRef])
	    ], NumberValueAccessor);
	    return NumberValueAccessor;
	})();
	exports.NumberValueAccessor = NumberValueAccessor;
	//# sourceMappingURL=number_value_accessor.js.map

/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var metadata_1 = __webpack_require__(194);
	var render_1 = __webpack_require__(301);
	var linker_1 = __webpack_require__(257);
	var di_1 = __webpack_require__(196);
	var control_value_accessor_1 = __webpack_require__(316);
	var lang_1 = __webpack_require__(49);
	var shared_1 = __webpack_require__(317);
	var CHECKBOX_VALUE_ACCESSOR = lang_1.CONST_EXPR(new di_1.Provider(control_value_accessor_1.NG_VALUE_ACCESSOR, { useExisting: di_1.forwardRef(function () { return CheckboxControlValueAccessor; }), multi: true }));
	/**
	 * The accessor for writing a value and listening to changes on a checkbox input element.
	 *
	 *  ### Example
	 *  ```
	 *  <input type="checkbox" ng-control="rememberLogin">
	 *  ```
	 */
	var CheckboxControlValueAccessor = (function () {
	    function CheckboxControlValueAccessor(_renderer, _elementRef) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        this.onChange = function (_) { };
	        this.onTouched = function () { };
	    }
	    CheckboxControlValueAccessor.prototype.writeValue = function (value) { shared_1.setProperty(this._renderer, this._elementRef, "checked", value); };
	    CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
	    CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    CheckboxControlValueAccessor = __decorate([
	        metadata_1.Directive({
	            selector: 'input[type=checkbox][ng-control],input[type=checkbox][ng-form-control],input[type=checkbox][ng-model]',
	            host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },
	            bindings: [CHECKBOX_VALUE_ACCESSOR]
	        }), 
	        __metadata('design:paramtypes', [render_1.Renderer, linker_1.ElementRef])
	    ], CheckboxControlValueAccessor);
	    return CheckboxControlValueAccessor;
	})();
	exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;
	//# sourceMappingURL=checkbox_value_accessor.js.map

/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var di_1 = __webpack_require__(196);
	var render_1 = __webpack_require__(301);
	var linker_1 = __webpack_require__(257);
	var metadata_1 = __webpack_require__(194);
	var async_1 = __webpack_require__(50);
	var control_value_accessor_1 = __webpack_require__(316);
	var lang_1 = __webpack_require__(49);
	var shared_1 = __webpack_require__(317);
	var SELECT_VALUE_ACCESSOR = lang_1.CONST_EXPR(new di_1.Provider(control_value_accessor_1.NG_VALUE_ACCESSOR, { useExisting: di_1.forwardRef(function () { return SelectControlValueAccessor; }), multi: true }));
	/**
	 * Marks `<option>` as dynamic, so Angular can be notified when options change.
	 *
	 * ### Example
	 *
	 * ```
	 * <select ng-control="city">
	 *   <option *ng-for="#c of cities" [value]="c"></option>
	 * </select>
	 * ```
	 */
	var NgSelectOption = (function () {
	    function NgSelectOption() {
	    }
	    NgSelectOption = __decorate([
	        metadata_1.Directive({ selector: 'option' }), 
	        __metadata('design:paramtypes', [])
	    ], NgSelectOption);
	    return NgSelectOption;
	})();
	exports.NgSelectOption = NgSelectOption;
	/**
	 * The accessor for writing a value and listening to changes on a select element.
	 */
	var SelectControlValueAccessor = (function () {
	    function SelectControlValueAccessor(_renderer, _elementRef, query) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        this.onChange = function (_) { };
	        this.onTouched = function () { };
	        this._updateValueWhenListOfOptionsChanges(query);
	    }
	    SelectControlValueAccessor.prototype.writeValue = function (value) {
	        this.value = value;
	        shared_1.setProperty(this._renderer, this._elementRef, "value", value);
	    };
	    SelectControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
	    SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    SelectControlValueAccessor.prototype._updateValueWhenListOfOptionsChanges = function (query) {
	        var _this = this;
	        async_1.ObservableWrapper.subscribe(query.changes, function (_) { return _this.writeValue(_this.value); });
	    };
	    SelectControlValueAccessor = __decorate([
	        metadata_1.Directive({
	            selector: 'select[ng-control],select[ng-form-control],select[ng-model]',
	            host: {
	                '(change)': 'onChange($event.target.value)',
	                '(input)': 'onChange($event.target.value)',
	                '(blur)': 'onTouched()'
	            },
	            bindings: [SELECT_VALUE_ACCESSOR]
	        }),
	        __param(2, metadata_1.Query(NgSelectOption, { descendants: true })), 
	        __metadata('design:paramtypes', [render_1.Renderer, linker_1.ElementRef, linker_1.QueryList])
	    ], SelectControlValueAccessor);
	    return SelectControlValueAccessor;
	})();
	exports.SelectControlValueAccessor = SelectControlValueAccessor;
	//# sourceMappingURL=select_control_value_accessor.js.map

/***/ },
/* 323 */
/***/ function(module, exports) {

	'use strict';function normalizeValidator(validator) {
	    if (validator.validate !== undefined) {
	        return function (c) { return validator.validate(c); };
	    }
	    else {
	        return validator;
	    }
	}
	exports.normalizeValidator = normalizeValidator;
	//# sourceMappingURL=normalize_validator.js.map

/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var lang_1 = __webpack_require__(49);
	var collection_1 = __webpack_require__(202);
	var async_1 = __webpack_require__(50);
	var metadata_1 = __webpack_require__(194);
	var di_1 = __webpack_require__(196);
	var ng_control_1 = __webpack_require__(315);
	var validators_1 = __webpack_require__(318);
	var control_value_accessor_1 = __webpack_require__(316);
	var shared_1 = __webpack_require__(317);
	var formControlBinding = lang_1.CONST_EXPR(new di_1.Provider(ng_control_1.NgControl, { useExisting: di_1.forwardRef(function () { return NgFormControl; }) }));
	/**
	 * Binds an existing {@link Control} to a DOM element.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/jcQlZ2tTh22BZZ2ucNAT?p=preview))
	 *
	 * In this example, we bind the control to an input element. When the value of the input element
	 * changes, the value of the control will reflect that change. Likewise, if the value of the
	 * control changes, the input element reflects that change.
	 *
	 *  ```typescript
	 * @Component({
	 *   selector: 'my-app',
	 *   template: `
	 *     <div>
	 *       <h2>NgFormControl Example</h2>
	 *       <form>
	 *         <p>Element with existing control: <input type="text"
	 * [ng-form-control]="loginControl"></p>
	 *         <p>Value of existing control: {{loginControl.value}}</p>
	 *       </form>
	 *     </div>
	 *   `,
	 *   directives: [CORE_DIRECTIVES, FORM_DIRECTIVES]
	 * })
	 * export class App {
	 *   loginControl: Control = new Control('');
	 * }
	 *  ```
	 *
	 *##ng-model
	 *
	 * We can also use `ng-model` to bind a domain model to the form.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/yHMLuHO7DNgT8XvtjTDH?p=preview))
	 *
	 *  ```typescript
	 * @Component({
	 *      selector: "login-comp",
	 *      directives: [FORM_DIRECTIVES],
	 *      template: "<input type='text' [ng-form-control]='loginControl' [(ng-model)]='login'>"
	 *      })
	 * class LoginComp {
	 *  loginControl: Control = new Control('');
	 *  login:string;
	 * }
	 *  ```
	 */
	var NgFormControl = (function (_super) {
	    __extends(NgFormControl, _super);
	    function NgFormControl(_validators, _asyncValidators, valueAccessors) {
	        _super.call(this);
	        this._validators = _validators;
	        this._asyncValidators = _asyncValidators;
	        this.update = new async_1.EventEmitter();
	        this.valueAccessor = shared_1.selectValueAccessor(this, valueAccessors);
	    }
	    NgFormControl.prototype.onChanges = function (changes) {
	        if (this._isControlChanged(changes)) {
	            shared_1.setUpControl(this.form, this);
	            this.form.updateValueAndValidity({ emitEvent: false });
	        }
	        if (shared_1.isPropertyUpdated(changes, this.viewModel)) {
	            this.form.updateValue(this.model);
	            this.viewModel = this.model;
	        }
	    };
	    Object.defineProperty(NgFormControl.prototype, "path", {
	        get: function () { return []; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgFormControl.prototype, "validator", {
	        get: function () { return shared_1.composeValidators(this._validators); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgFormControl.prototype, "asyncValidator", {
	        get: function () { return shared_1.composeAsyncValidators(this._asyncValidators); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgFormControl.prototype, "control", {
	        get: function () { return this.form; },
	        enumerable: true,
	        configurable: true
	    });
	    NgFormControl.prototype.viewToModelUpdate = function (newValue) {
	        this.viewModel = newValue;
	        async_1.ObservableWrapper.callNext(this.update, newValue);
	    };
	    NgFormControl.prototype._isControlChanged = function (changes) {
	        return collection_1.StringMapWrapper.contains(changes, "form");
	    };
	    NgFormControl = __decorate([
	        metadata_1.Directive({
	            selector: '[ng-form-control]',
	            bindings: [formControlBinding],
	            inputs: ['form: ngFormControl', 'model: ngModel'],
	            outputs: ['update: ngModelChange'],
	            exportAs: 'form'
	        }),
	        __param(0, di_1.Optional()),
	        __param(0, di_1.Inject(validators_1.NG_VALIDATORS)),
	        __param(1, di_1.Optional()),
	        __param(1, di_1.Inject(validators_1.NG_ASYNC_VALIDATORS)),
	        __param(2, di_1.Optional()),
	        __param(2, di_1.Inject(control_value_accessor_1.NG_VALUE_ACCESSOR)), 
	        __metadata('design:paramtypes', [Array, Array, Array])
	    ], NgFormControl);
	    return NgFormControl;
	})(ng_control_1.NgControl);
	exports.NgFormControl = NgFormControl;
	//# sourceMappingURL=ng_form_control.js.map

/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var lang_1 = __webpack_require__(49);
	var async_1 = __webpack_require__(50);
	var metadata_1 = __webpack_require__(194);
	var di_1 = __webpack_require__(196);
	var control_value_accessor_1 = __webpack_require__(316);
	var ng_control_1 = __webpack_require__(315);
	var model_1 = __webpack_require__(311);
	var validators_1 = __webpack_require__(318);
	var shared_1 = __webpack_require__(317);
	var formControlBinding = lang_1.CONST_EXPR(new di_1.Provider(ng_control_1.NgControl, { useExisting: di_1.forwardRef(function () { return NgModel; }) }));
	/**
	 * Binds a domain model to a form control.
	 *
	 *##Usage
	 *
	 * `ng-model` binds an existing domain model to a form control. For a
	 * two-way binding, use `[(ng-model)]` to ensure the model updates in
	 * both directions.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/R3UX5qDaUqFO2VYR0UzH?p=preview))
	 *  ```typescript
	 * @Component({
	 *      selector: "search-comp",
	 *      directives: [FORM_DIRECTIVES],
	 *      template: `<input type='text' [(ng-model)]="searchQuery">`
	 *      })
	 * class SearchComp {
	 *  searchQuery: string;
	 * }
	 *  ```
	 */
	var NgModel = (function (_super) {
	    __extends(NgModel, _super);
	    function NgModel(_validators, _asyncValidators, valueAccessors) {
	        _super.call(this);
	        this._validators = _validators;
	        this._asyncValidators = _asyncValidators;
	        /** @internal */
	        this._control = new model_1.Control();
	        /** @internal */
	        this._added = false;
	        this.update = new async_1.EventEmitter();
	        this.valueAccessor = shared_1.selectValueAccessor(this, valueAccessors);
	    }
	    NgModel.prototype.onChanges = function (changes) {
	        if (!this._added) {
	            shared_1.setUpControl(this._control, this);
	            this._control.updateValueAndValidity({ emitEvent: false });
	            this._added = true;
	        }
	        if (shared_1.isPropertyUpdated(changes, this.viewModel)) {
	            this._control.updateValue(this.model);
	            this.viewModel = this.model;
	        }
	    };
	    Object.defineProperty(NgModel.prototype, "control", {
	        get: function () { return this._control; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgModel.prototype, "path", {
	        get: function () { return []; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgModel.prototype, "validator", {
	        get: function () { return shared_1.composeValidators(this._validators); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgModel.prototype, "asyncValidator", {
	        get: function () { return shared_1.composeAsyncValidators(this._asyncValidators); },
	        enumerable: true,
	        configurable: true
	    });
	    NgModel.prototype.viewToModelUpdate = function (newValue) {
	        this.viewModel = newValue;
	        async_1.ObservableWrapper.callNext(this.update, newValue);
	    };
	    NgModel = __decorate([
	        metadata_1.Directive({
	            selector: '[ng-model]:not([ng-control]):not([ng-form-control])',
	            bindings: [formControlBinding],
	            inputs: ['model: ngModel'],
	            outputs: ['update: ngModelChange'],
	            exportAs: 'form'
	        }),
	        __param(0, di_1.Optional()),
	        __param(0, di_1.Inject(validators_1.NG_VALIDATORS)),
	        __param(1, di_1.Optional()),
	        __param(1, di_1.Inject(validators_1.NG_ASYNC_VALIDATORS)),
	        __param(2, di_1.Optional()),
	        __param(2, di_1.Inject(control_value_accessor_1.NG_VALUE_ACCESSOR)), 
	        __metadata('design:paramtypes', [Array, Array, Array])
	    ], NgModel);
	    return NgModel;
	})(ng_control_1.NgControl);
	exports.NgModel = NgModel;
	//# sourceMappingURL=ng_model.js.map

/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var metadata_1 = __webpack_require__(194);
	var di_1 = __webpack_require__(196);
	var lang_1 = __webpack_require__(49);
	var control_container_1 = __webpack_require__(313);
	var shared_1 = __webpack_require__(317);
	var validators_1 = __webpack_require__(318);
	var controlGroupProvider = lang_1.CONST_EXPR(new di_1.Provider(control_container_1.ControlContainer, { useExisting: di_1.forwardRef(function () { return NgControlGroup; }) }));
	/**
	 * Creates and binds a control group to a DOM element.
	 *
	 * This directive can only be used as a child of {@link NgForm} or {@link NgFormModel}.
	 *
	 * # Example ([live demo](http://plnkr.co/edit/7EJ11uGeaggViYM6T5nq?p=preview))
	 *
	 * ```typescript
	 * @Component({
	 *   selector: 'my-app',
	 *   directives: [FORM_DIRECTIVES],
	 * })
	 * @View({
	 *   template: `
	 *     <div>
	 *       <h2>Angular2 Control &amp; ControlGroup Example</h2>
	 *       <form #f="form">
	 *         <div ng-control-group="name" #cg-name="form">
	 *           <h3>Enter your name:</h3>
	 *           <p>First: <input ng-control="first" required></p>
	 *           <p>Middle: <input ng-control="middle"></p>
	 *           <p>Last: <input ng-control="last" required></p>
	 *         </div>
	 *         <h3>Name value:</h3>
	 *         <pre>{{valueOf(cgName)}}</pre>
	 *         <p>Name is {{cgName?.control?.valid ? "valid" : "invalid"}}</p>
	 *         <h3>What's your favorite food?</h3>
	 *         <p><input ng-control="food"></p>
	 *         <h3>Form value</h3>
	 *         <pre>{{valueOf(f)}}</pre>
	 *       </form>
	 *     </div>
	 *   `,
	 *   directives: [FORM_DIRECTIVES]
	 * })
	 * export class App {
	 *   valueOf(cg: NgControlGroup): string {
	 *     if (cg.control == null) {
	 *       return null;
	 *     }
	 *     return JSON.stringify(cg.control.value, null, 2);
	 *   }
	 * }
	 * ```
	 *
	 * This example declares a control group for a user's name. The value and validation state of
	 * this group can be accessed separately from the overall form.
	 */
	var NgControlGroup = (function (_super) {
	    __extends(NgControlGroup, _super);
	    function NgControlGroup(parent, _validators, _asyncValidators) {
	        _super.call(this);
	        this._validators = _validators;
	        this._asyncValidators = _asyncValidators;
	        this._parent = parent;
	    }
	    NgControlGroup.prototype.onInit = function () { this.formDirective.addControlGroup(this); };
	    NgControlGroup.prototype.onDestroy = function () { this.formDirective.removeControlGroup(this); };
	    Object.defineProperty(NgControlGroup.prototype, "control", {
	        /**
	         * Get the {@link ControlGroup} backing this binding.
	         */
	        get: function () { return this.formDirective.getControlGroup(this); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlGroup.prototype, "path", {
	        /**
	         * Get the path to this control group.
	         */
	        get: function () { return shared_1.controlPath(this.name, this._parent); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlGroup.prototype, "formDirective", {
	        /**
	         * Get the {@link Form} to which this group belongs.
	         */
	        get: function () { return this._parent.formDirective; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlGroup.prototype, "validator", {
	        get: function () { return shared_1.composeValidators(this._validators); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlGroup.prototype, "asyncValidator", {
	        get: function () { return shared_1.composeAsyncValidators(this._asyncValidators); },
	        enumerable: true,
	        configurable: true
	    });
	    NgControlGroup = __decorate([
	        metadata_1.Directive({
	            selector: '[ng-control-group]',
	            providers: [controlGroupProvider],
	            inputs: ['name: ng-control-group'],
	            exportAs: 'form'
	        }),
	        __param(0, di_1.Host()),
	        __param(0, di_1.SkipSelf()),
	        __param(1, di_1.Optional()),
	        __param(1, di_1.Inject(validators_1.NG_VALIDATORS)),
	        __param(2, di_1.Optional()),
	        __param(2, di_1.Inject(validators_1.NG_ASYNC_VALIDATORS)), 
	        __metadata('design:paramtypes', [control_container_1.ControlContainer, Array, Array])
	    ], NgControlGroup);
	    return NgControlGroup;
	})(control_container_1.ControlContainer);
	exports.NgControlGroup = NgControlGroup;
	//# sourceMappingURL=ng_control_group.js.map

/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var lang_1 = __webpack_require__(49);
	var collection_1 = __webpack_require__(202);
	var async_1 = __webpack_require__(50);
	var metadata_1 = __webpack_require__(194);
	var di_1 = __webpack_require__(196);
	var control_container_1 = __webpack_require__(313);
	var shared_1 = __webpack_require__(317);
	var validators_1 = __webpack_require__(318);
	var formDirectiveProvider = lang_1.CONST_EXPR(new di_1.Provider(control_container_1.ControlContainer, { useExisting: di_1.forwardRef(function () { return NgFormModel; }) }));
	/**
	 * Binds an existing control group to a DOM element.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/jqrVirudY8anJxTMUjTP?p=preview))
	 *
	 * In this example, we bind the control group to the form element, and we bind the login and
	 * password controls to the login and password elements.
	 *
	 *  ```typescript
	 * @Component({
	 *   selector: 'my-app',
	 *   template: `
	 *     <div>
	 *       <h2>NgFormModel Example</h2>
	 *       <form [ng-form-model]="loginForm">
	 *         <p>Login: <input type="text" ng-control="login"></p>
	 *         <p>Password: <input type="password" ng-control="password"></p>
	 *       </form>
	 *       <p>Value:</p>
	 *       <pre>{{value}}</pre>
	 *     </div>
	 *   `,
	 *   directives: [FORM_DIRECTIVES]
	 * })
	 * export class App {
	 *   loginForm: ControlGroup;
	 *
	 *   constructor() {
	 *     this.loginForm = new ControlGroup({
	 *       login: new Control(""),
	 *       password: new Control("")
	 *     });
	 *   }
	 *
	 *   get value(): string {
	 *     return JSON.stringify(this.loginForm.value, null, 2);
	 *   }
	 * }
	 *  ```
	 *
	 * We can also use ng-model to bind a domain model to the form.
	 *
	 *  ```typescript
	 * @Component({
	 *      selector: "login-comp",
	 *      directives: [FORM_DIRECTIVES],
	 *      template: `
	 *        <form [ng-form-model]='loginForm'>
	 *          Login <input type='text' ng-control='login' [(ng-model)]='credentials.login'>
	 *          Password <input type='password' ng-control='password'
	 *                          [(ng-model)]='credentials.password'>
	 *          <button (click)="onLogin()">Login</button>
	 *        </form>`
	 *      })
	 * class LoginComp {
	 *  credentials: {login: string, password: string};
	 *  loginForm: ControlGroup;
	 *
	 *  constructor() {
	 *    this.loginForm = new ControlGroup({
	 *      login: new Control(""),
	 *      password: new Control("")
	 *    });
	 *  }
	 *
	 *  onLogin(): void {
	 *    // this.credentials.login === 'some login'
	 *    // this.credentials.password === 'some password'
	 *  }
	 * }
	 *  ```
	 */
	var NgFormModel = (function (_super) {
	    __extends(NgFormModel, _super);
	    function NgFormModel(_validators, _asyncValidators) {
	        _super.call(this);
	        this._validators = _validators;
	        this._asyncValidators = _asyncValidators;
	        this.form = null;
	        this.directives = [];
	        this.ngSubmit = new async_1.EventEmitter();
	    }
	    NgFormModel.prototype.onChanges = function (changes) {
	        if (collection_1.StringMapWrapper.contains(changes, "form")) {
	            var sync = shared_1.composeValidators(this._validators);
	            this.form.validator = validators_1.Validators.compose([this.form.validator, sync]);
	            var async = shared_1.composeAsyncValidators(this._asyncValidators);
	            this.form.asyncValidator = validators_1.Validators.composeAsync([this.form.asyncValidator, async]);
	            this.form.updateValueAndValidity({ onlySelf: true, emitEvent: false });
	        }
	        this._updateDomValue();
	    };
	    Object.defineProperty(NgFormModel.prototype, "formDirective", {
	        get: function () { return this; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgFormModel.prototype, "control", {
	        get: function () { return this.form; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgFormModel.prototype, "path", {
	        get: function () { return []; },
	        enumerable: true,
	        configurable: true
	    });
	    NgFormModel.prototype.addControl = function (dir) {
	        var ctrl = this.form.find(dir.path);
	        shared_1.setUpControl(ctrl, dir);
	        ctrl.updateValueAndValidity({ emitEvent: false });
	        this.directives.push(dir);
	    };
	    NgFormModel.prototype.getControl = function (dir) { return this.form.find(dir.path); };
	    NgFormModel.prototype.removeControl = function (dir) { collection_1.ListWrapper.remove(this.directives, dir); };
	    NgFormModel.prototype.addControlGroup = function (dir) {
	        var ctrl = this.form.find(dir.path);
	        shared_1.setUpControlGroup(ctrl, dir);
	        ctrl.updateValueAndValidity({ emitEvent: false });
	    };
	    NgFormModel.prototype.removeControlGroup = function (dir) { };
	    NgFormModel.prototype.getControlGroup = function (dir) {
	        return this.form.find(dir.path);
	    };
	    NgFormModel.prototype.updateModel = function (dir, value) {
	        var ctrl = this.form.find(dir.path);
	        ctrl.updateValue(value);
	    };
	    NgFormModel.prototype.onSubmit = function () {
	        async_1.ObservableWrapper.callNext(this.ngSubmit, null);
	        return false;
	    };
	    /** @internal */
	    NgFormModel.prototype._updateDomValue = function () {
	        var _this = this;
	        this.directives.forEach(function (dir) {
	            var ctrl = _this.form.find(dir.path);
	            dir.valueAccessor.writeValue(ctrl.value);
	        });
	    };
	    NgFormModel = __decorate([
	        metadata_1.Directive({
	            selector: '[ng-form-model]',
	            bindings: [formDirectiveProvider],
	            inputs: ['form: ng-form-model'],
	            host: { '(submit)': 'onSubmit()' },
	            outputs: ['ngSubmit'],
	            exportAs: 'form'
	        }),
	        __param(0, di_1.Optional()),
	        __param(0, di_1.Inject(validators_1.NG_VALIDATORS)),
	        __param(1, di_1.Optional()),
	        __param(1, di_1.Inject(validators_1.NG_ASYNC_VALIDATORS)), 
	        __metadata('design:paramtypes', [Array, Array])
	    ], NgFormModel);
	    return NgFormModel;
	})(control_container_1.ControlContainer);
	exports.NgFormModel = NgFormModel;
	//# sourceMappingURL=ng_form_model.js.map

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var async_1 = __webpack_require__(50);
	var collection_1 = __webpack_require__(202);
	var lang_1 = __webpack_require__(49);
	var metadata_1 = __webpack_require__(194);
	var di_1 = __webpack_require__(196);
	var control_container_1 = __webpack_require__(313);
	var model_1 = __webpack_require__(311);
	var shared_1 = __webpack_require__(317);
	var validators_1 = __webpack_require__(318);
	var formDirectiveProvider = lang_1.CONST_EXPR(new di_1.Provider(control_container_1.ControlContainer, { useExisting: di_1.forwardRef(function () { return NgForm; }) }));
	/**
	 * If `NgForm` is bound in a component, `<form>` elements in that component will be
	 * upgraded to use the Angular form system.
	 *
	 *##Typical Use
	 *
	 * Include `FORM_DIRECTIVES` in the `directives` section of a {@link View} annotation
	 * to use `NgForm` and its associated controls.
	 *
	 *##Structure
	 *
	 * An Angular form is a collection of `Control`s in some hierarchy.
	 * `Control`s can be at the top level or can be organized in `ControlGroup`s
	 * or `ControlArray`s. This hierarchy is reflected in the form's `value`, a
	 * JSON object that mirrors the form structure.
	 *
	 *##Submission
	 *
	 * The `ng-submit` event signals when the user triggers a form submission.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/ltdgYj4P0iY64AR71EpL?p=preview))
	 *
	 *  ```typescript
	 * @Component({
	 *   selector: 'my-app',
	 *   template: `
	 *     <div>
	 *       <p>Submit the form to see the data object Angular builds</p>
	 *       <h2>NgForm demo</h2>
	 *       <form #f="form" (ng-submit)="onSubmit(f.value)">
	 *         <h3>Control group: credentials</h3>
	 *         <div ng-control-group="credentials">
	 *           <p>Login: <input type="text" ng-control="login"></p>
	 *           <p>Password: <input type="password" ng-control="password"></p>
	 *         </div>
	 *         <h3>Control group: person</h3>
	 *         <div ng-control-group="person">
	 *           <p>First name: <input type="text" ng-control="firstName"></p>
	 *           <p>Last name: <input type="text" ng-control="lastName"></p>
	 *         </div>
	 *         <button type="submit">Submit Form</button>
	 *       <p>Form data submitted:</p>
	 *       </form>
	 *       <pre>{{data}}</pre>
	 *     </div>
	 * `,
	 *   directives: [CORE_DIRECTIVES, FORM_DIRECTIVES]
	 * })
	 * export class App {
	 *   constructor() {}
	 *
	 *   data: string;
	 *
	 *   onSubmit(data) {
	 *     this.data = JSON.stringify(data, null, 2);
	 *   }
	 * }
	 *  ```
	 */
	var NgForm = (function (_super) {
	    __extends(NgForm, _super);
	    function NgForm(validators, asyncValidators) {
	        _super.call(this);
	        this.ngSubmit = new async_1.EventEmitter();
	        this.form = new model_1.ControlGroup({}, null, shared_1.composeValidators(validators), shared_1.composeAsyncValidators(asyncValidators));
	    }
	    Object.defineProperty(NgForm.prototype, "formDirective", {
	        get: function () { return this; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForm.prototype, "control", {
	        get: function () { return this.form; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForm.prototype, "path", {
	        get: function () { return []; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForm.prototype, "controls", {
	        get: function () { return this.form.controls; },
	        enumerable: true,
	        configurable: true
	    });
	    NgForm.prototype.addControl = function (dir) {
	        var _this = this;
	        async_1.PromiseWrapper.scheduleMicrotask(function () {
	            var container = _this._findContainer(dir.path);
	            var ctrl = new model_1.Control();
	            shared_1.setUpControl(ctrl, dir);
	            container.addControl(dir.name, ctrl);
	            ctrl.updateValueAndValidity({ emitEvent: false });
	        });
	    };
	    NgForm.prototype.getControl = function (dir) { return this.form.find(dir.path); };
	    NgForm.prototype.removeControl = function (dir) {
	        var _this = this;
	        async_1.PromiseWrapper.scheduleMicrotask(function () {
	            var container = _this._findContainer(dir.path);
	            if (lang_1.isPresent(container)) {
	                container.removeControl(dir.name);
	                container.updateValueAndValidity({ emitEvent: false });
	            }
	        });
	    };
	    NgForm.prototype.addControlGroup = function (dir) {
	        var _this = this;
	        async_1.PromiseWrapper.scheduleMicrotask(function () {
	            var container = _this._findContainer(dir.path);
	            var group = new model_1.ControlGroup({});
	            shared_1.setUpControlGroup(group, dir);
	            container.addControl(dir.name, group);
	            group.updateValueAndValidity({ emitEvent: false });
	        });
	    };
	    NgForm.prototype.removeControlGroup = function (dir) {
	        var _this = this;
	        async_1.PromiseWrapper.scheduleMicrotask(function () {
	            var container = _this._findContainer(dir.path);
	            if (lang_1.isPresent(container)) {
	                container.removeControl(dir.name);
	                container.updateValueAndValidity({ emitEvent: false });
	            }
	        });
	    };
	    NgForm.prototype.getControlGroup = function (dir) {
	        return this.form.find(dir.path);
	    };
	    NgForm.prototype.updateModel = function (dir, value) {
	        var _this = this;
	        async_1.PromiseWrapper.scheduleMicrotask(function () {
	            var ctrl = _this.form.find(dir.path);
	            ctrl.updateValue(value);
	        });
	    };
	    NgForm.prototype.onSubmit = function () {
	        async_1.ObservableWrapper.callNext(this.ngSubmit, null);
	        return false;
	    };
	    /** @internal */
	    NgForm.prototype._findContainer = function (path) {
	        path.pop();
	        return collection_1.ListWrapper.isEmpty(path) ? this.form : this.form.find(path);
	    };
	    NgForm = __decorate([
	        metadata_1.Directive({
	            selector: 'form:not([ng-no-form]):not([ng-form-model]),ng-form,[ng-form]',
	            bindings: [formDirectiveProvider],
	            host: {
	                '(submit)': 'onSubmit()',
	            },
	            outputs: ['ngSubmit'],
	            exportAs: 'form'
	        }),
	        __param(0, di_1.Optional()),
	        __param(0, di_1.Inject(validators_1.NG_VALIDATORS)),
	        __param(1, di_1.Optional()),
	        __param(1, di_1.Inject(validators_1.NG_ASYNC_VALIDATORS)), 
	        __metadata('design:paramtypes', [Array, Array])
	    ], NgForm);
	    return NgForm;
	})(control_container_1.ControlContainer);
	exports.NgForm = NgForm;
	//# sourceMappingURL=ng_form.js.map

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var metadata_1 = __webpack_require__(194);
	var di_1 = __webpack_require__(196);
	var ng_control_1 = __webpack_require__(315);
	var lang_1 = __webpack_require__(49);
	var NgControlStatus = (function () {
	    function NgControlStatus(cd) {
	        this._cd = cd;
	    }
	    Object.defineProperty(NgControlStatus.prototype, "ngClassUntouched", {
	        get: function () {
	            return lang_1.isPresent(this._cd.control) ? this._cd.control.untouched : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlStatus.prototype, "ngClassTouched", {
	        get: function () {
	            return lang_1.isPresent(this._cd.control) ? this._cd.control.touched : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlStatus.prototype, "ngClassPristine", {
	        get: function () {
	            return lang_1.isPresent(this._cd.control) ? this._cd.control.pristine : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlStatus.prototype, "ngClassDirty", {
	        get: function () {
	            return lang_1.isPresent(this._cd.control) ? this._cd.control.dirty : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlStatus.prototype, "ngClassValid", {
	        get: function () {
	            return lang_1.isPresent(this._cd.control) ? this._cd.control.valid : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlStatus.prototype, "ngClassInvalid", {
	        get: function () {
	            return lang_1.isPresent(this._cd.control) ? !this._cd.control.valid : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgControlStatus = __decorate([
	        metadata_1.Directive({
	            selector: '[ng-control],[ng-model],[ng-form-control]',
	            host: {
	                '[class.ng-untouched]': 'ngClassUntouched',
	                '[class.ng-touched]': 'ngClassTouched',
	                '[class.ng-pristine]': 'ngClassPristine',
	                '[class.ng-dirty]': 'ngClassDirty',
	                '[class.ng-valid]': 'ngClassValid',
	                '[class.ng-invalid]': 'ngClassInvalid'
	            }
	        }),
	        __param(0, di_1.Self()), 
	        __metadata('design:paramtypes', [ng_control_1.NgControl])
	    ], NgControlStatus);
	    return NgControlStatus;
	})();
	exports.NgControlStatus = NgControlStatus;
	//# sourceMappingURL=ng_control_status.js.map

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var ng_control_name_1 = __webpack_require__(314);
	var ng_form_control_1 = __webpack_require__(324);
	var ng_model_1 = __webpack_require__(325);
	var ng_control_group_1 = __webpack_require__(326);
	var ng_form_model_1 = __webpack_require__(327);
	var ng_form_1 = __webpack_require__(328);
	var default_value_accessor_1 = __webpack_require__(319);
	var checkbox_value_accessor_1 = __webpack_require__(321);
	var number_value_accessor_1 = __webpack_require__(320);
	var ng_control_status_1 = __webpack_require__(329);
	var select_control_value_accessor_1 = __webpack_require__(322);
	var validators_1 = __webpack_require__(331);
	var ng_control_name_2 = __webpack_require__(314);
	exports.NgControlName = ng_control_name_2.NgControlName;
	var ng_form_control_2 = __webpack_require__(324);
	exports.NgFormControl = ng_form_control_2.NgFormControl;
	var ng_model_2 = __webpack_require__(325);
	exports.NgModel = ng_model_2.NgModel;
	var ng_control_group_2 = __webpack_require__(326);
	exports.NgControlGroup = ng_control_group_2.NgControlGroup;
	var ng_form_model_2 = __webpack_require__(327);
	exports.NgFormModel = ng_form_model_2.NgFormModel;
	var ng_form_2 = __webpack_require__(328);
	exports.NgForm = ng_form_2.NgForm;
	var default_value_accessor_2 = __webpack_require__(319);
	exports.DefaultValueAccessor = default_value_accessor_2.DefaultValueAccessor;
	var checkbox_value_accessor_2 = __webpack_require__(321);
	exports.CheckboxControlValueAccessor = checkbox_value_accessor_2.CheckboxControlValueAccessor;
	var number_value_accessor_2 = __webpack_require__(320);
	exports.NumberValueAccessor = number_value_accessor_2.NumberValueAccessor;
	var ng_control_status_2 = __webpack_require__(329);
	exports.NgControlStatus = ng_control_status_2.NgControlStatus;
	var select_control_value_accessor_2 = __webpack_require__(322);
	exports.SelectControlValueAccessor = select_control_value_accessor_2.SelectControlValueAccessor;
	exports.NgSelectOption = select_control_value_accessor_2.NgSelectOption;
	var validators_2 = __webpack_require__(331);
	exports.RequiredValidator = validators_2.RequiredValidator;
	exports.MinLengthValidator = validators_2.MinLengthValidator;
	exports.MaxLengthValidator = validators_2.MaxLengthValidator;
	var ng_control_1 = __webpack_require__(315);
	exports.NgControl = ng_control_1.NgControl;
	/**
	 *
	 * A list of all the form directives used as part of a `@View` annotation.
	 *
	 *  This is a shorthand for importing them each individually.
	 *
	 * ### Example
	 *
	 * ```typescript
	 * @Component({
	 *   selector: 'my-app',
	 *   directives: [FORM_DIRECTIVES]
	 * })
	 * class MyApp {}
	 * ```
	 */
	exports.FORM_DIRECTIVES = lang_1.CONST_EXPR([
	    ng_control_name_1.NgControlName,
	    ng_control_group_1.NgControlGroup,
	    ng_form_control_1.NgFormControl,
	    ng_model_1.NgModel,
	    ng_form_model_1.NgFormModel,
	    ng_form_1.NgForm,
	    select_control_value_accessor_1.NgSelectOption,
	    default_value_accessor_1.DefaultValueAccessor,
	    number_value_accessor_1.NumberValueAccessor,
	    checkbox_value_accessor_1.CheckboxControlValueAccessor,
	    select_control_value_accessor_1.SelectControlValueAccessor,
	    ng_control_status_1.NgControlStatus,
	    validators_1.RequiredValidator,
	    validators_1.MinLengthValidator,
	    validators_1.MaxLengthValidator
	]);
	//# sourceMappingURL=directives.js.map

/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var di_1 = __webpack_require__(196);
	var lang_1 = __webpack_require__(49);
	var metadata_1 = __webpack_require__(194);
	var validators_1 = __webpack_require__(318);
	var lang_2 = __webpack_require__(49);
	var REQUIRED_VALIDATOR = lang_1.CONST_EXPR(new di_1.Provider(validators_1.NG_VALIDATORS, { useValue: validators_1.Validators.required, multi: true }));
	/**
	 * A Directive that adds the `required` validator to any controls marked with the
	 * `required` attribute, via the {@link NG_VALIDATORS} binding.
	 *
	 * # Example
	 *
	 * ```
	 * <input ng-control="fullName" required>
	 * ```
	 */
	var RequiredValidator = (function () {
	    function RequiredValidator() {
	    }
	    RequiredValidator = __decorate([
	        metadata_1.Directive({
	            selector: '[required][ng-control],[required][ng-form-control],[required][ng-model]',
	            providers: [REQUIRED_VALIDATOR]
	        }), 
	        __metadata('design:paramtypes', [])
	    ], RequiredValidator);
	    return RequiredValidator;
	})();
	exports.RequiredValidator = RequiredValidator;
	var MIN_LENGTH_VALIDATOR = lang_1.CONST_EXPR(new di_1.Provider(validators_1.NG_VALIDATORS, { useExisting: di_1.forwardRef(function () { return MinLengthValidator; }), multi: true }));
	var MinLengthValidator = (function () {
	    function MinLengthValidator(minLength) {
	        this._validator = validators_1.Validators.minLength(lang_2.NumberWrapper.parseInt(minLength, 10));
	    }
	    MinLengthValidator.prototype.validate = function (c) { return this._validator(c); };
	    MinLengthValidator = __decorate([
	        metadata_1.Directive({
	            selector: '[minlength][ng-control],[minlength][ng-form-control],[minlength][ng-model]',
	            providers: [MIN_LENGTH_VALIDATOR]
	        }),
	        __param(0, metadata_1.Attribute("minlength")), 
	        __metadata('design:paramtypes', [String])
	    ], MinLengthValidator);
	    return MinLengthValidator;
	})();
	exports.MinLengthValidator = MinLengthValidator;
	var MAX_LENGTH_VALIDATOR = lang_1.CONST_EXPR(new di_1.Provider(validators_1.NG_VALIDATORS, { useExisting: di_1.forwardRef(function () { return MaxLengthValidator; }), multi: true }));
	var MaxLengthValidator = (function () {
	    function MaxLengthValidator(minLength) {
	        this._validator = validators_1.Validators.maxLength(lang_2.NumberWrapper.parseInt(minLength, 10));
	    }
	    MaxLengthValidator.prototype.validate = function (c) { return this._validator(c); };
	    MaxLengthValidator = __decorate([
	        metadata_1.Directive({
	            selector: '[maxlength][ng-control],[maxlength][ng-form-control],[maxlength][ng-model]',
	            providers: [MAX_LENGTH_VALIDATOR]
	        }),
	        __param(0, metadata_1.Attribute("maxlength")), 
	        __metadata('design:paramtypes', [String])
	    ], MaxLengthValidator);
	    return MaxLengthValidator;
	})();
	exports.MaxLengthValidator = MaxLengthValidator;
	//# sourceMappingURL=validators.js.map

/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(196);
	var collection_1 = __webpack_require__(202);
	var lang_1 = __webpack_require__(49);
	var modelModule = __webpack_require__(311);
	/**
	 * Creates a form object from a user-specified configuration.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/ENgZo8EuIECZNensZCVr?p=preview))
	 *
	 * ```typescript
	 * @Component({
	 *   selector: 'my-app',
	 *   viewBindings: [FORM_BINDINGS]
	 *   template: `
	 *     <form [ng-form-model]="loginForm">
	 *       <p>Login <input ng-control="login"></p>
	 *       <div ng-control-group="passwordRetry">
	 *         <p>Password <input type="password" ng-control="password"></p>
	 *         <p>Confirm password <input type="password" ng-control="passwordConfirmation"></p>
	 *       </div>
	 *     </form>
	 *     <h3>Form value:</h3>
	 *     <pre>{{value}}</pre>
	 *   `,
	 *   directives: [FORM_DIRECTIVES]
	 * })
	 * export class App {
	 *   loginForm: ControlGroup;
	 *
	 *   constructor(builder: FormBuilder) {
	 *     this.loginForm = builder.group({
	 *       login: ["", Validators.required],
	 *       passwordRetry: builder.group({
	 *         password: ["", Validators.required],
	 *         passwordConfirmation: ["", Validators.required, asyncValidator]
	 *       })
	 *     });
	 *   }
	 *
	 *   get value(): string {
	 *     return JSON.stringify(this.loginForm.value, null, 2);
	 *   }
	 * }
	 * ```
	 */
	var FormBuilder = (function () {
	    function FormBuilder() {
	    }
	    /**
	     * Construct a new {@link ControlGroup} with the given map of configuration.
	     * Valid keys for the `extra` parameter map are `optionals` and `validator`.
	     *
	     * See the {@link ControlGroup} constructor for more details.
	     */
	    FormBuilder.prototype.group = function (controlsConfig, extra) {
	        if (extra === void 0) { extra = null; }
	        var controls = this._reduceControls(controlsConfig);
	        var optionals = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, "optionals") : null;
	        var validator = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, "validator") : null;
	        var asyncValidator = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, "asyncValidator") : null;
	        return new modelModule.ControlGroup(controls, optionals, validator, asyncValidator);
	    };
	    /**
	     * Construct a new {@link Control} with the given `value`,`validator`, and `asyncValidator`.
	     */
	    FormBuilder.prototype.control = function (value, validator, asyncValidator) {
	        if (validator === void 0) { validator = null; }
	        if (asyncValidator === void 0) { asyncValidator = null; }
	        return new modelModule.Control(value, validator, asyncValidator);
	    };
	    /**
	     * Construct an array of {@link Control}s from the given `controlsConfig` array of
	     * configuration, with the given optional `validator` and `asyncValidator`.
	     */
	    FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {
	        var _this = this;
	        if (validator === void 0) { validator = null; }
	        if (asyncValidator === void 0) { asyncValidator = null; }
	        var controls = controlsConfig.map(function (c) { return _this._createControl(c); });
	        return new modelModule.ControlArray(controls, validator, asyncValidator);
	    };
	    /** @internal */
	    FormBuilder.prototype._reduceControls = function (controlsConfig) {
	        var _this = this;
	        var controls = {};
	        collection_1.StringMapWrapper.forEach(controlsConfig, function (controlConfig, controlName) {
	            controls[controlName] = _this._createControl(controlConfig);
	        });
	        return controls;
	    };
	    /** @internal */
	    FormBuilder.prototype._createControl = function (controlConfig) {
	        if (controlConfig instanceof modelModule.Control ||
	            controlConfig instanceof modelModule.ControlGroup ||
	            controlConfig instanceof modelModule.ControlArray) {
	            return controlConfig;
	        }
	        else if (lang_1.isArray(controlConfig)) {
	            var value = controlConfig[0];
	            var validator = controlConfig.length > 1 ? controlConfig[1] : null;
	            var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
	            return this.control(value, validator, asyncValidator);
	        }
	        else {
	            return this.control(controlConfig);
	        }
	    };
	    FormBuilder = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], FormBuilder);
	    return FormBuilder;
	})();
	exports.FormBuilder = FormBuilder;
	/**
	 * Shorthand set of providers used for building Angular forms.
	 *
	 * ### Example
	 *
	 * ```typescript
	 * bootstrap(MyApp, [FORM_PROVIDERS]);
	 * ```
	 */
	exports.FORM_PROVIDERS = lang_1.CONST_EXPR([FormBuilder]);
	/**
	 * @deprecated
	 */
	exports.FORM_BINDINGS = exports.FORM_PROVIDERS;
	//# sourceMappingURL=form_builder.js.map

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var forms_1 = __webpack_require__(310);
	var directives_1 = __webpack_require__(255);
	/**
	 * A collection of Angular core directives that are likely to be used in each and every Angular
	 * application. This includes core directives (e.g., NgIf and NgFor), and forms directives (e.g.,
	 * NgModel).
	 *
	 * This collection can be used to quickly enumerate all the built-in directives in the `directives`
	 * property of the `@Component` or `@View` decorators.
	 *
	 * ### Example
	 *
	 * Instead of writing:
	 *
	 * ```typescript
	 * import {NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm} from
	 * 'angular2/angular2';
	 * import {OtherDirective} from './myDirectives';
	 *
	 * @Component({
	 *   selector: 'my-component',
	 *   templateUrl: 'myComponent.html',
	 *   directives: [NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm,
	 * OtherDirective]
	 * })
	 * export class MyComponent {
	 *   ...
	 * }
	 * ```
	 * one could import all the common directives at once:
	 *
	 * ```typescript
	 * import {COMMON_DIRECTIVES} from 'angular2/angular2';
	 * import {OtherDirective} from './myDirectives';
	 *
	 * @Component({
	 *   selector: 'my-component',
	 *   templateUrl: 'myComponent.html',
	 *   directives: [COMMON_DIRECTIVES, OtherDirective]
	 * })
	 * export class MyComponent {
	 *   ...
	 * }
	 * ```
	 */
	exports.COMMON_DIRECTIVES = lang_1.CONST_EXPR([directives_1.CORE_DIRECTIVES, forms_1.FORM_DIRECTIVES]);
	//# sourceMappingURL=common_directives.js.map

/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	/**
	 * @module
	 * @description
	 * Starting point to import all public core APIs.
	 */
	__export(__webpack_require__(194));
	__export(__webpack_require__(335));
	__export(__webpack_require__(196));
	__export(__webpack_require__(47));
	__export(__webpack_require__(336));
	__export(__webpack_require__(337));
	__export(__webpack_require__(377));
	__export(__webpack_require__(378));
	__export(__webpack_require__(257));
	var application_ref_1 = __webpack_require__(376);
	exports.ApplicationRef = application_ref_1.ApplicationRef;
	__export(__webpack_require__(380));
	__export(__webpack_require__(301));
	__export(__webpack_require__(255));
	__export(__webpack_require__(310));
	__export(__webpack_require__(381));
	__export(__webpack_require__(214));
	__export(__webpack_require__(283));
	__export(__webpack_require__(384));
	//# sourceMappingURL=core.js.map

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';// Public API for util
	var decorators_1 = __webpack_require__(199);
	exports.Class = decorators_1.Class;
	//# sourceMappingURL=util.js.map

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';// Public API for Facade
	var lang_1 = __webpack_require__(49);
	exports.Type = lang_1.Type;
	var async_1 = __webpack_require__(50);
	exports.Observable = async_1.Observable;
	exports.EventEmitter = async_1.EventEmitter;
	var exceptions_1 = __webpack_require__(204);
	exports.WrappedException = exceptions_1.WrappedException;
	var exception_handler_1 = __webpack_require__(205);
	exports.ExceptionHandler = exception_handler_1.ExceptionHandler;
	//# sourceMappingURL=facade.js.map

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var compiler_1 = __webpack_require__(338);
	var application_common_1 = __webpack_require__(365);
	var application_tokens_1 = __webpack_require__(302);
	exports.APP_COMPONENT = application_tokens_1.APP_COMPONENT;
	exports.APP_ID = application_tokens_1.APP_ID;
	var application_common_2 = __webpack_require__(365);
	exports.platform = application_common_2.platform;
	var application_ref_1 = __webpack_require__(376);
	exports.PlatformRef = application_ref_1.PlatformRef;
	exports.ApplicationRef = application_ref_1.ApplicationRef;
	exports.applicationCommonProviders = application_ref_1.applicationCommonProviders;
	exports.createNgZone = application_ref_1.createNgZone;
	exports.platformCommon = application_ref_1.platformCommon;
	exports.platformProviders = application_ref_1.platformProviders;
	/// See [commonBootstrap] for detailed documentation.
	function bootstrap(appComponentType, appProviders) {
	    if (appProviders === void 0) { appProviders = null; }
	    var providers = [compiler_1.compilerProviders()];
	    if (lang_1.isPresent(appProviders)) {
	        providers.push(appProviders);
	    }
	    return application_common_1.commonBootstrap(appComponentType, providers);
	}
	exports.bootstrap = bootstrap;
	//# sourceMappingURL=application.js.map

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var runtime_compiler_1 = __webpack_require__(339);
	var template_compiler_1 = __webpack_require__(340);
	exports.TemplateCompiler = template_compiler_1.TemplateCompiler;
	var directive_metadata_1 = __webpack_require__(341);
	exports.CompileDirectiveMetadata = directive_metadata_1.CompileDirectiveMetadata;
	exports.CompileTypeMetadata = directive_metadata_1.CompileTypeMetadata;
	exports.CompileTemplateMetadata = directive_metadata_1.CompileTemplateMetadata;
	var source_module_1 = __webpack_require__(344);
	exports.SourceModule = source_module_1.SourceModule;
	exports.SourceWithImports = source_module_1.SourceWithImports;
	var platform_directives_and_pipes_1 = __webpack_require__(283);
	exports.PLATFORM_DIRECTIVES = platform_directives_and_pipes_1.PLATFORM_DIRECTIVES;
	exports.PLATFORM_PIPES = platform_directives_and_pipes_1.PLATFORM_PIPES;
	var lang_1 = __webpack_require__(49);
	var di_1 = __webpack_require__(196);
	var template_parser_1 = __webpack_require__(355);
	var html_parser_1 = __webpack_require__(356);
	var template_normalizer_1 = __webpack_require__(360);
	var runtime_metadata_1 = __webpack_require__(361);
	var change_detector_compiler_1 = __webpack_require__(345);
	var style_compiler_1 = __webpack_require__(349);
	var command_compiler_1 = __webpack_require__(354);
	var template_compiler_2 = __webpack_require__(340);
	var change_detection_1 = __webpack_require__(215);
	var compiler_1 = __webpack_require__(260);
	var runtime_compiler_2 = __webpack_require__(339);
	var element_schema_registry_1 = __webpack_require__(358);
	var dom_element_schema_registry_1 = __webpack_require__(362);
	var url_resolver_1 = __webpack_require__(352);
	var app_root_url_1 = __webpack_require__(363);
	var anchor_based_app_root_url_1 = __webpack_require__(364);
	var change_detection_2 = __webpack_require__(215);
	function compilerProviders() {
	    return [
	        change_detection_2.Lexer,
	        change_detection_2.Parser,
	        html_parser_1.HtmlParser,
	        template_parser_1.TemplateParser,
	        template_normalizer_1.TemplateNormalizer,
	        runtime_metadata_1.RuntimeMetadataResolver,
	        style_compiler_1.StyleCompiler,
	        command_compiler_1.CommandCompiler,
	        change_detector_compiler_1.ChangeDetectionCompiler,
	        di_1.provide(change_detection_1.ChangeDetectorGenConfig, { useValue: new change_detection_1.ChangeDetectorGenConfig(lang_1.assertionsEnabled(), false, true) }),
	        template_compiler_2.TemplateCompiler,
	        di_1.provide(runtime_compiler_2.RuntimeCompiler, { useClass: runtime_compiler_1.RuntimeCompiler_ }),
	        di_1.provide(compiler_1.Compiler, { useExisting: runtime_compiler_2.RuntimeCompiler }),
	        dom_element_schema_registry_1.DomElementSchemaRegistry,
	        di_1.provide(element_schema_registry_1.ElementSchemaRegistry, { useExisting: dom_element_schema_registry_1.DomElementSchemaRegistry }),
	        anchor_based_app_root_url_1.AnchorBasedAppRootUrl,
	        di_1.provide(app_root_url_1.AppRootUrl, { useExisting: anchor_based_app_root_url_1.AnchorBasedAppRootUrl }),
	        url_resolver_1.UrlResolver
	    ];
	}
	exports.compilerProviders = compilerProviders;
	//# sourceMappingURL=compiler.js.map

/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var compiler_1 = __webpack_require__(260);
	var proto_view_factory_1 = __webpack_require__(261);
	var template_compiler_1 = __webpack_require__(340);
	var di_1 = __webpack_require__(196);
	var RuntimeCompiler = (function (_super) {
	    __extends(RuntimeCompiler, _super);
	    function RuntimeCompiler() {
	        _super.apply(this, arguments);
	    }
	    return RuntimeCompiler;
	})(compiler_1.Compiler);
	exports.RuntimeCompiler = RuntimeCompiler;
	var RuntimeCompiler_ = (function (_super) {
	    __extends(RuntimeCompiler_, _super);
	    function RuntimeCompiler_(_protoViewFactory, _templateCompiler) {
	        _super.call(this, _protoViewFactory);
	        this._templateCompiler = _templateCompiler;
	    }
	    RuntimeCompiler_.prototype.compileInHost = function (componentType) {
	        var _this = this;
	        return this._templateCompiler.compileHostComponentRuntime(componentType)
	            .then(function (compiledHostTemplate) { return compiler_1.internalCreateProtoView(_this, compiledHostTemplate); });
	    };
	    RuntimeCompiler_.prototype.clearCache = function () {
	        _super.prototype.clearCache.call(this);
	        this._templateCompiler.clearCache();
	    };
	    RuntimeCompiler_ = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [proto_view_factory_1.ProtoViewFactory, template_compiler_1.TemplateCompiler])
	    ], RuntimeCompiler_);
	    return RuntimeCompiler_;
	})(compiler_1.Compiler_);
	exports.RuntimeCompiler_ = RuntimeCompiler_;
	//# sourceMappingURL=runtime_compiler.js.map

/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var collection_1 = __webpack_require__(202);
	var async_1 = __webpack_require__(50);
	var template_commands_1 = __webpack_require__(284);
	var directive_metadata_1 = __webpack_require__(341);
	var di_1 = __webpack_require__(196);
	var source_module_1 = __webpack_require__(344);
	var change_detector_compiler_1 = __webpack_require__(345);
	var style_compiler_1 = __webpack_require__(349);
	var command_compiler_1 = __webpack_require__(354);
	var template_parser_1 = __webpack_require__(355);
	var template_normalizer_1 = __webpack_require__(360);
	var runtime_metadata_1 = __webpack_require__(361);
	var command_compiler_2 = __webpack_require__(354);
	var util_1 = __webpack_require__(343);
	var TemplateCompiler = (function () {
	    function TemplateCompiler(_runtimeMetadataResolver, _templateNormalizer, _templateParser, _styleCompiler, _commandCompiler, _cdCompiler) {
	        this._runtimeMetadataResolver = _runtimeMetadataResolver;
	        this._templateNormalizer = _templateNormalizer;
	        this._templateParser = _templateParser;
	        this._styleCompiler = _styleCompiler;
	        this._commandCompiler = _commandCompiler;
	        this._cdCompiler = _cdCompiler;
	        this._hostCacheKeys = new Map();
	        this._compiledTemplateCache = new Map();
	        this._compiledTemplateDone = new Map();
	        this._nextTemplateId = 0;
	    }
	    TemplateCompiler.prototype.normalizeDirectiveMetadata = function (directive) {
	        if (!directive.isComponent) {
	            // For non components there is nothing to be normalized yet.
	            return async_1.PromiseWrapper.resolve(directive);
	        }
	        return this._templateNormalizer.normalizeTemplate(directive.type, directive.template)
	            .then(function (normalizedTemplate) { return new directive_metadata_1.CompileDirectiveMetadata({
	            type: directive.type,
	            isComponent: directive.isComponent,
	            dynamicLoadable: directive.dynamicLoadable,
	            selector: directive.selector,
	            exportAs: directive.exportAs,
	            changeDetection: directive.changeDetection,
	            inputs: directive.inputs,
	            outputs: directive.outputs,
	            hostListeners: directive.hostListeners,
	            hostProperties: directive.hostProperties,
	            hostAttributes: directive.hostAttributes,
	            lifecycleHooks: directive.lifecycleHooks,
	            template: normalizedTemplate
	        }); });
	    };
	    TemplateCompiler.prototype.compileHostComponentRuntime = function (type) {
	        var hostCacheKey = this._hostCacheKeys.get(type);
	        if (lang_1.isBlank(hostCacheKey)) {
	            hostCacheKey = new Object();
	            this._hostCacheKeys.set(type, hostCacheKey);
	            var compMeta = this._runtimeMetadataResolver.getMetadata(type);
	            assertComponent(compMeta);
	            var hostMeta = directive_metadata_1.createHostComponentMeta(compMeta.type, compMeta.selector);
	            this._compileComponentRuntime(hostCacheKey, hostMeta, [compMeta], new Set());
	        }
	        return this._compiledTemplateDone.get(hostCacheKey)
	            .then(function (compiledTemplate) { return new template_commands_1.CompiledHostTemplate(compiledTemplate); });
	    };
	    TemplateCompiler.prototype.clearCache = function () {
	        this._hostCacheKeys.clear();
	        this._styleCompiler.clearCache();
	        this._compiledTemplateCache.clear();
	        this._compiledTemplateDone.clear();
	    };
	    TemplateCompiler.prototype._compileComponentRuntime = function (cacheKey, compMeta, viewDirectives, compilingComponentCacheKeys) {
	        var _this = this;
	        var compiledTemplate = this._compiledTemplateCache.get(cacheKey);
	        var done = this._compiledTemplateDone.get(cacheKey);
	        if (lang_1.isBlank(compiledTemplate)) {
	            var styles = [];
	            var changeDetectorFactory;
	            var commands = [];
	            var templateId = lang_1.stringify(compMeta.type.runtime) + "Template" + this._nextTemplateId++;
	            compiledTemplate = new template_commands_1.CompiledComponentTemplate(templateId, function (dispatcher) { return changeDetectorFactory(dispatcher); }, commands, styles);
	            this._compiledTemplateCache.set(cacheKey, compiledTemplate);
	            compilingComponentCacheKeys.add(cacheKey);
	            done = async_1.PromiseWrapper
	                .all([this._styleCompiler.compileComponentRuntime(compMeta.template)].concat(viewDirectives.map(function (dirMeta) { return _this.normalizeDirectiveMetadata(dirMeta); })))
	                .then(function (stylesAndNormalizedViewDirMetas) {
	                var childPromises = [];
	                var normalizedViewDirMetas = stylesAndNormalizedViewDirMetas.slice(1);
	                var parsedTemplate = _this._templateParser.parse(compMeta.template.template, normalizedViewDirMetas, compMeta.type.name);
	                var changeDetectorFactories = _this._cdCompiler.compileComponentRuntime(compMeta.type, compMeta.changeDetection, parsedTemplate);
	                changeDetectorFactory = changeDetectorFactories[0];
	                var tmpStyles = stylesAndNormalizedViewDirMetas[0];
	                tmpStyles.forEach(function (style) { return styles.push(style); });
	                var tmpCommands = _this._compileCommandsRuntime(compMeta, parsedTemplate, changeDetectorFactories, compilingComponentCacheKeys, childPromises);
	                tmpCommands.forEach(function (cmd) { return commands.push(cmd); });
	                return async_1.PromiseWrapper.all(childPromises);
	            })
	                .then(function (_) {
	                collection_1.SetWrapper.delete(compilingComponentCacheKeys, cacheKey);
	                return compiledTemplate;
	            });
	            this._compiledTemplateDone.set(cacheKey, done);
	        }
	        return compiledTemplate;
	    };
	    TemplateCompiler.prototype._compileCommandsRuntime = function (compMeta, parsedTemplate, changeDetectorFactories, compilingComponentCacheKeys, childPromises) {
	        var _this = this;
	        var cmds = this._commandCompiler.compileComponentRuntime(compMeta, parsedTemplate, changeDetectorFactories, function (childComponentDir) {
	            var childCacheKey = childComponentDir.type.runtime;
	            var childViewDirectives = _this._runtimeMetadataResolver.getViewDirectivesMetadata(childComponentDir.type.runtime);
	            var childIsRecursive = collection_1.SetWrapper.has(compilingComponentCacheKeys, childCacheKey);
	            var childTemplate = _this._compileComponentRuntime(childCacheKey, childComponentDir, childViewDirectives, compilingComponentCacheKeys);
	            if (!childIsRecursive) {
	                // Only wait for a child if it is not a cycle
	                childPromises.push(_this._compiledTemplateDone.get(childCacheKey));
	            }
	            return function () { return childTemplate; };
	        });
	        cmds.forEach(function (cmd) {
	            if (cmd instanceof template_commands_1.BeginComponentCmd) {
	                cmd.templateGetter();
	            }
	        });
	        return cmds;
	    };
	    TemplateCompiler.prototype.compileTemplatesCodeGen = function (components) {
	        var _this = this;
	        if (components.length === 0) {
	            throw new exceptions_1.BaseException('No components given');
	        }
	        var declarations = [];
	        var templateArguments = [];
	        var componentMetas = [];
	        components.forEach(function (componentWithDirs) {
	            var compMeta = componentWithDirs.component;
	            assertComponent(compMeta);
	            componentMetas.push(compMeta);
	            _this._processTemplateCodeGen(compMeta, componentWithDirs.directives, declarations, templateArguments);
	            if (compMeta.dynamicLoadable) {
	                var hostMeta = directive_metadata_1.createHostComponentMeta(compMeta.type, compMeta.selector);
	                componentMetas.push(hostMeta);
	                _this._processTemplateCodeGen(hostMeta, [compMeta], declarations, templateArguments);
	            }
	        });
	        collection_1.ListWrapper.forEachWithIndex(componentMetas, function (compMeta, index) {
	            var templateId = compMeta.type.moduleUrl + "|" + compMeta.type.name;
	            var constructionKeyword = lang_1.IS_DART ? 'const' : 'new';
	            var compiledTemplateExpr = constructionKeyword + " " + command_compiler_2.TEMPLATE_COMMANDS_MODULE_REF + "CompiledComponentTemplate('" + templateId + "'," + templateArguments[index].join(',') + ")";
	            var variableValueExpr;
	            if (compMeta.type.isHost) {
	                variableValueExpr =
	                    constructionKeyword + " " + command_compiler_2.TEMPLATE_COMMANDS_MODULE_REF + "CompiledHostTemplate(" + compiledTemplateExpr + ")";
	            }
	            else {
	                variableValueExpr = compiledTemplateExpr;
	            }
	            var varName = templateVariableName(compMeta.type);
	            declarations.push("" + util_1.codeGenExportVariable(varName) + variableValueExpr + ";");
	            declarations.push(util_1.codeGenValueFn([], varName, templateGetterName(compMeta.type)) + ";");
	        });
	        var moduleUrl = components[0].component.type.moduleUrl;
	        return new source_module_1.SourceModule("" + templateModuleUrl(moduleUrl), declarations.join('\n'));
	    };
	    TemplateCompiler.prototype.compileStylesheetCodeGen = function (stylesheetUrl, cssText) {
	        return this._styleCompiler.compileStylesheetCodeGen(stylesheetUrl, cssText);
	    };
	    TemplateCompiler.prototype._processTemplateCodeGen = function (compMeta, directives, targetDeclarations, targetTemplateArguments) {
	        var styleExpr = this._styleCompiler.compileComponentCodeGen(compMeta.template);
	        var parsedTemplate = this._templateParser.parse(compMeta.template.template, directives, compMeta.type.name);
	        var changeDetectorsExprs = this._cdCompiler.compileComponentCodeGen(compMeta.type, compMeta.changeDetection, parsedTemplate);
	        var commandsExpr = this._commandCompiler.compileComponentCodeGen(compMeta, parsedTemplate, changeDetectorsExprs.expressions, codeGenComponentTemplateFactory);
	        addAll(styleExpr.declarations, targetDeclarations);
	        addAll(changeDetectorsExprs.declarations, targetDeclarations);
	        addAll(commandsExpr.declarations, targetDeclarations);
	        targetTemplateArguments.push([changeDetectorsExprs.expressions[0], commandsExpr.expression, styleExpr.expression]);
	    };
	    TemplateCompiler = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [runtime_metadata_1.RuntimeMetadataResolver, template_normalizer_1.TemplateNormalizer, template_parser_1.TemplateParser, style_compiler_1.StyleCompiler, command_compiler_1.CommandCompiler, change_detector_compiler_1.ChangeDetectionCompiler])
	    ], TemplateCompiler);
	    return TemplateCompiler;
	})();
	exports.TemplateCompiler = TemplateCompiler;
	var NormalizedComponentWithViewDirectives = (function () {
	    function NormalizedComponentWithViewDirectives(component, directives) {
	        this.component = component;
	        this.directives = directives;
	    }
	    return NormalizedComponentWithViewDirectives;
	})();
	exports.NormalizedComponentWithViewDirectives = NormalizedComponentWithViewDirectives;
	function assertComponent(meta) {
	    if (!meta.isComponent) {
	        throw new exceptions_1.BaseException("Could not compile '" + meta.type.name + "' because it is not a component.");
	    }
	}
	function templateVariableName(type) {
	    return type.name + "Template";
	}
	function templateGetterName(type) {
	    return templateVariableName(type) + "Getter";
	}
	function templateModuleUrl(moduleUrl) {
	    var urlWithoutSuffix = moduleUrl.substring(0, moduleUrl.length - util_1.MODULE_SUFFIX.length);
	    return urlWithoutSuffix + ".template" + util_1.MODULE_SUFFIX;
	}
	function addAll(source, target) {
	    for (var i = 0; i < source.length; i++) {
	        target.push(source[i]);
	    }
	}
	function codeGenComponentTemplateFactory(nestedCompType) {
	    return "" + source_module_1.moduleRef(templateModuleUrl(nestedCompType.type.moduleUrl)) + templateGetterName(nestedCompType.type);
	}
	//# sourceMappingURL=template_compiler.js.map

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var collection_1 = __webpack_require__(202);
	var change_detection_1 = __webpack_require__(215);
	var view_1 = __webpack_require__(246);
	var selector_1 = __webpack_require__(342);
	var util_1 = __webpack_require__(343);
	var interfaces_1 = __webpack_require__(279);
	// group 1: "property" from "[property]"
	// group 2: "event" from "(event)"
	var HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))$/g;
	var CompileTypeMetadata = (function () {
	    function CompileTypeMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, runtime = _b.runtime, name = _b.name, moduleUrl = _b.moduleUrl, isHost = _b.isHost;
	        this.runtime = runtime;
	        this.name = name;
	        this.moduleUrl = moduleUrl;
	        this.isHost = lang_1.normalizeBool(isHost);
	    }
	    CompileTypeMetadata.fromJson = function (data) {
	        return new CompileTypeMetadata({ name: data['name'], moduleUrl: data['moduleUrl'], isHost: data['isHost'] });
	    };
	    CompileTypeMetadata.prototype.toJson = function () {
	        return {
	            // Note: Runtime type can't be serialized...
	            'name': this.name,
	            'moduleUrl': this.moduleUrl,
	            'isHost': this.isHost
	        };
	    };
	    return CompileTypeMetadata;
	})();
	exports.CompileTypeMetadata = CompileTypeMetadata;
	var CompileTemplateMetadata = (function () {
	    function CompileTemplateMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, encapsulation = _b.encapsulation, template = _b.template, templateUrl = _b.templateUrl, styles = _b.styles, styleUrls = _b.styleUrls, ngContentSelectors = _b.ngContentSelectors;
	        this.encapsulation = lang_1.isPresent(encapsulation) ? encapsulation : view_1.ViewEncapsulation.Emulated;
	        this.template = template;
	        this.templateUrl = templateUrl;
	        this.styles = lang_1.isPresent(styles) ? styles : [];
	        this.styleUrls = lang_1.isPresent(styleUrls) ? styleUrls : [];
	        this.ngContentSelectors = lang_1.isPresent(ngContentSelectors) ? ngContentSelectors : [];
	    }
	    CompileTemplateMetadata.fromJson = function (data) {
	        return new CompileTemplateMetadata({
	            encapsulation: lang_1.isPresent(data['encapsulation']) ?
	                view_1.VIEW_ENCAPSULATION_VALUES[data['encapsulation']] :
	                data['encapsulation'],
	            template: data['template'],
	            templateUrl: data['templateUrl'],
	            styles: data['styles'],
	            styleUrls: data['styleUrls'],
	            ngContentSelectors: data['ngContentSelectors']
	        });
	    };
	    CompileTemplateMetadata.prototype.toJson = function () {
	        return {
	            'encapsulation': lang_1.isPresent(this.encapsulation) ? lang_1.serializeEnum(this.encapsulation) : this.encapsulation,
	            'template': this.template,
	            'templateUrl': this.templateUrl,
	            'styles': this.styles,
	            'styleUrls': this.styleUrls,
	            'ngContentSelectors': this.ngContentSelectors
	        };
	    };
	    return CompileTemplateMetadata;
	})();
	exports.CompileTemplateMetadata = CompileTemplateMetadata;
	var CompileDirectiveMetadata = (function () {
	    function CompileDirectiveMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, type = _b.type, isComponent = _b.isComponent, dynamicLoadable = _b.dynamicLoadable, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, hostListeners = _b.hostListeners, hostProperties = _b.hostProperties, hostAttributes = _b.hostAttributes, lifecycleHooks = _b.lifecycleHooks, template = _b.template;
	        this.type = type;
	        this.isComponent = isComponent;
	        this.dynamicLoadable = dynamicLoadable;
	        this.selector = selector;
	        this.exportAs = exportAs;
	        this.changeDetection = changeDetection;
	        this.inputs = inputs;
	        this.outputs = outputs;
	        this.hostListeners = hostListeners;
	        this.hostProperties = hostProperties;
	        this.hostAttributes = hostAttributes;
	        this.lifecycleHooks = lifecycleHooks;
	        this.template = template;
	    }
	    CompileDirectiveMetadata.create = function (_a) {
	        var _b = _a === void 0 ? {} : _a, type = _b.type, isComponent = _b.isComponent, dynamicLoadable = _b.dynamicLoadable, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, host = _b.host, lifecycleHooks = _b.lifecycleHooks, template = _b.template;
	        var hostListeners = {};
	        var hostProperties = {};
	        var hostAttributes = {};
	        if (lang_1.isPresent(host)) {
	            collection_1.StringMapWrapper.forEach(host, function (value, key) {
	                var matches = lang_1.RegExpWrapper.firstMatch(HOST_REG_EXP, key);
	                if (lang_1.isBlank(matches)) {
	                    hostAttributes[key] = value;
	                }
	                else if (lang_1.isPresent(matches[1])) {
	                    hostProperties[matches[1]] = value;
	                }
	                else if (lang_1.isPresent(matches[2])) {
	                    hostListeners[matches[2]] = value;
	                }
	            });
	        }
	        var inputsMap = {};
	        if (lang_1.isPresent(inputs)) {
	            inputs.forEach(function (bindConfig) {
	                // canonical syntax: `dirProp: elProp`
	                // if there is no `:`, use dirProp = elProp
	                var parts = util_1.splitAtColon(bindConfig, [bindConfig, bindConfig]);
	                inputsMap[parts[0]] = parts[1];
	            });
	        }
	        var outputsMap = {};
	        if (lang_1.isPresent(outputs)) {
	            outputs.forEach(function (bindConfig) {
	                // canonical syntax: `dirProp: elProp`
	                // if there is no `:`, use dirProp = elProp
	                var parts = util_1.splitAtColon(bindConfig, [bindConfig, bindConfig]);
	                outputsMap[parts[0]] = parts[1];
	            });
	        }
	        return new CompileDirectiveMetadata({
	            type: type,
	            isComponent: lang_1.normalizeBool(isComponent),
	            dynamicLoadable: lang_1.normalizeBool(dynamicLoadable),
	            selector: selector,
	            exportAs: exportAs,
	            changeDetection: changeDetection,
	            inputs: inputsMap,
	            outputs: outputsMap,
	            hostListeners: hostListeners,
	            hostProperties: hostProperties,
	            hostAttributes: hostAttributes,
	            lifecycleHooks: lang_1.isPresent(lifecycleHooks) ? lifecycleHooks : [],
	            template: template
	        });
	    };
	    CompileDirectiveMetadata.fromJson = function (data) {
	        return new CompileDirectiveMetadata({
	            isComponent: data['isComponent'],
	            dynamicLoadable: data['dynamicLoadable'],
	            selector: data['selector'],
	            exportAs: data['exportAs'],
	            type: lang_1.isPresent(data['type']) ? CompileTypeMetadata.fromJson(data['type']) : data['type'],
	            changeDetection: lang_1.isPresent(data['changeDetection']) ?
	                change_detection_1.CHANGE_DETECTION_STRATEGY_VALUES[data['changeDetection']] :
	                data['changeDetection'],
	            inputs: data['inputs'],
	            outputs: data['outputs'],
	            hostListeners: data['hostListeners'],
	            hostProperties: data['hostProperties'],
	            hostAttributes: data['hostAttributes'],
	            lifecycleHooks: data['lifecycleHooks'].map(function (hookValue) { return interfaces_1.LIFECYCLE_HOOKS_VALUES[hookValue]; }),
	            template: lang_1.isPresent(data['template']) ? CompileTemplateMetadata.fromJson(data['template']) :
	                data['template']
	        });
	    };
	    CompileDirectiveMetadata.prototype.toJson = function () {
	        return {
	            'isComponent': this.isComponent,
	            'dynamicLoadable': this.dynamicLoadable,
	            'selector': this.selector,
	            'exportAs': this.exportAs,
	            'type': lang_1.isPresent(this.type) ? this.type.toJson() : this.type,
	            'changeDetection': lang_1.isPresent(this.changeDetection) ? lang_1.serializeEnum(this.changeDetection) :
	                this.changeDetection,
	            'inputs': this.inputs,
	            'outputs': this.outputs,
	            'hostListeners': this.hostListeners,
	            'hostProperties': this.hostProperties,
	            'hostAttributes': this.hostAttributes,
	            'lifecycleHooks': this.lifecycleHooks.map(function (hook) { return lang_1.serializeEnum(hook); }),
	            'template': lang_1.isPresent(this.template) ? this.template.toJson() : this.template
	        };
	    };
	    return CompileDirectiveMetadata;
	})();
	exports.CompileDirectiveMetadata = CompileDirectiveMetadata;
	function createHostComponentMeta(componentType, componentSelector) {
	    var template = selector_1.CssSelector.parse(componentSelector)[0].getMatchingElementTemplate();
	    return CompileDirectiveMetadata.create({
	        type: new CompileTypeMetadata({
	            runtime: Object,
	            name: "Host" + componentType.name,
	            moduleUrl: componentType.moduleUrl,
	            isHost: true
	        }),
	        template: new CompileTemplateMetadata({ template: template, templateUrl: '', styles: [], styleUrls: [], ngContentSelectors: [] }),
	        changeDetection: change_detection_1.ChangeDetectionStrategy.Default,
	        inputs: [],
	        outputs: [],
	        host: {},
	        lifecycleHooks: [],
	        isComponent: true,
	        dynamicLoadable: false,
	        selector: '*'
	    });
	}
	exports.createHostComponentMeta = createHostComponentMeta;
	//# sourceMappingURL=directive_metadata.js.map

/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var collection_1 = __webpack_require__(202);
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var _EMPTY_ATTR_VALUE = '';
	// TODO: Can't use `const` here as
	// in Dart this is not transpiled into `final` yet...
	var _SELECTOR_REGEXP = lang_1.RegExpWrapper.create('(\\:not\\()|' +
	    '([-\\w]+)|' +
	    '(?:\\.([-\\w]+))|' +
	    '(?:\\[([-\\w*]+)(?:=([^\\]]*))?\\])|' +
	    '(\\))|' +
	    '(\\s*,\\s*)'); // ","
	/**
	 * A css selector contains an element name,
	 * css classes and attribute/value pairs with the purpose
	 * of selecting subsets out of them.
	 */
	var CssSelector = (function () {
	    function CssSelector() {
	        this.element = null;
	        this.classNames = [];
	        this.attrs = [];
	        this.notSelectors = [];
	    }
	    CssSelector.parse = function (selector) {
	        var results = [];
	        var _addResult = function (res, cssSel) {
	            if (cssSel.notSelectors.length > 0 && lang_1.isBlank(cssSel.element) &&
	                collection_1.ListWrapper.isEmpty(cssSel.classNames) && collection_1.ListWrapper.isEmpty(cssSel.attrs)) {
	                cssSel.element = "*";
	            }
	            res.push(cssSel);
	        };
	        var cssSelector = new CssSelector();
	        var matcher = lang_1.RegExpWrapper.matcher(_SELECTOR_REGEXP, selector);
	        var match;
	        var current = cssSelector;
	        var inNot = false;
	        while (lang_1.isPresent(match = lang_1.RegExpMatcherWrapper.next(matcher))) {
	            if (lang_1.isPresent(match[1])) {
	                if (inNot) {
	                    throw new exceptions_1.BaseException('Nesting :not is not allowed in a selector');
	                }
	                inNot = true;
	                current = new CssSelector();
	                cssSelector.notSelectors.push(current);
	            }
	            if (lang_1.isPresent(match[2])) {
	                current.setElement(match[2]);
	            }
	            if (lang_1.isPresent(match[3])) {
	                current.addClassName(match[3]);
	            }
	            if (lang_1.isPresent(match[4])) {
	                current.addAttribute(match[4], match[5]);
	            }
	            if (lang_1.isPresent(match[6])) {
	                inNot = false;
	                current = cssSelector;
	            }
	            if (lang_1.isPresent(match[7])) {
	                if (inNot) {
	                    throw new exceptions_1.BaseException('Multiple selectors in :not are not supported');
	                }
	                _addResult(results, cssSelector);
	                cssSelector = current = new CssSelector();
	            }
	        }
	        _addResult(results, cssSelector);
	        return results;
	    };
	    CssSelector.prototype.isElementSelector = function () {
	        return lang_1.isPresent(this.element) && collection_1.ListWrapper.isEmpty(this.classNames) &&
	            collection_1.ListWrapper.isEmpty(this.attrs) && this.notSelectors.length === 0;
	    };
	    CssSelector.prototype.setElement = function (element) {
	        if (element === void 0) { element = null; }
	        if (lang_1.isPresent(element)) {
	            element = element.toLowerCase();
	        }
	        this.element = element;
	    };
	    /** Gets a template string for an element that matches the selector. */
	    CssSelector.prototype.getMatchingElementTemplate = function () {
	        var tagName = lang_1.isPresent(this.element) ? this.element : 'div';
	        var classAttr = this.classNames.length > 0 ? " class=\"" + this.classNames.join(' ') + "\"" : '';
	        var attrs = '';
	        for (var i = 0; i < this.attrs.length; i += 2) {
	            var attrName = this.attrs[i];
	            var attrValue = this.attrs[i + 1] !== '' ? "=\"" + this.attrs[i + 1] + "\"" : '';
	            attrs += " " + attrName + attrValue;
	        }
	        return "<" + tagName + classAttr + attrs + "></" + tagName + ">";
	    };
	    CssSelector.prototype.addAttribute = function (name, value) {
	        if (value === void 0) { value = _EMPTY_ATTR_VALUE; }
	        this.attrs.push(name.toLowerCase());
	        if (lang_1.isPresent(value)) {
	            value = value.toLowerCase();
	        }
	        else {
	            value = _EMPTY_ATTR_VALUE;
	        }
	        this.attrs.push(value);
	    };
	    CssSelector.prototype.addClassName = function (name) { this.classNames.push(name.toLowerCase()); };
	    CssSelector.prototype.toString = function () {
	        var res = '';
	        if (lang_1.isPresent(this.element)) {
	            res += this.element;
	        }
	        if (lang_1.isPresent(this.classNames)) {
	            for (var i = 0; i < this.classNames.length; i++) {
	                res += '.' + this.classNames[i];
	            }
	        }
	        if (lang_1.isPresent(this.attrs)) {
	            for (var i = 0; i < this.attrs.length;) {
	                var attrName = this.attrs[i++];
	                var attrValue = this.attrs[i++];
	                res += '[' + attrName;
	                if (attrValue.length > 0) {
	                    res += '=' + attrValue;
	                }
	                res += ']';
	            }
	        }
	        this.notSelectors.forEach(function (notSelector) { return res += ":not(" + notSelector + ")"; });
	        return res;
	    };
	    return CssSelector;
	})();
	exports.CssSelector = CssSelector;
	/**
	 * Reads a list of CssSelectors and allows to calculate which ones
	 * are contained in a given CssSelector.
	 */
	var SelectorMatcher = (function () {
	    function SelectorMatcher() {
	        this._elementMap = new collection_1.Map();
	        this._elementPartialMap = new collection_1.Map();
	        this._classMap = new collection_1.Map();
	        this._classPartialMap = new collection_1.Map();
	        this._attrValueMap = new collection_1.Map();
	        this._attrValuePartialMap = new collection_1.Map();
	        this._listContexts = [];
	    }
	    SelectorMatcher.createNotMatcher = function (notSelectors) {
	        var notMatcher = new SelectorMatcher();
	        notMatcher.addSelectables(notSelectors, null);
	        return notMatcher;
	    };
	    SelectorMatcher.prototype.addSelectables = function (cssSelectors, callbackCtxt) {
	        var listContext = null;
	        if (cssSelectors.length > 1) {
	            listContext = new SelectorListContext(cssSelectors);
	            this._listContexts.push(listContext);
	        }
	        for (var i = 0; i < cssSelectors.length; i++) {
	            this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
	        }
	    };
	    /**
	     * Add an object that can be found later on by calling `match`.
	     * @param cssSelector A css selector
	     * @param callbackCtxt An opaque object that will be given to the callback of the `match` function
	     */
	    SelectorMatcher.prototype._addSelectable = function (cssSelector, callbackCtxt, listContext) {
	        var matcher = this;
	        var element = cssSelector.element;
	        var classNames = cssSelector.classNames;
	        var attrs = cssSelector.attrs;
	        var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
	        if (lang_1.isPresent(element)) {
	            var isTerminal = attrs.length === 0 && classNames.length === 0;
	            if (isTerminal) {
	                this._addTerminal(matcher._elementMap, element, selectable);
	            }
	            else {
	                matcher = this._addPartial(matcher._elementPartialMap, element);
	            }
	        }
	        if (lang_1.isPresent(classNames)) {
	            for (var index = 0; index < classNames.length; index++) {
	                var isTerminal = attrs.length === 0 && index === classNames.length - 1;
	                var className = classNames[index];
	                if (isTerminal) {
	                    this._addTerminal(matcher._classMap, className, selectable);
	                }
	                else {
	                    matcher = this._addPartial(matcher._classPartialMap, className);
	                }
	            }
	        }
	        if (lang_1.isPresent(attrs)) {
	            for (var index = 0; index < attrs.length;) {
	                var isTerminal = index === attrs.length - 2;
	                var attrName = attrs[index++];
	                var attrValue = attrs[index++];
	                if (isTerminal) {
	                    var terminalMap = matcher._attrValueMap;
	                    var terminalValuesMap = terminalMap.get(attrName);
	                    if (lang_1.isBlank(terminalValuesMap)) {
	                        terminalValuesMap = new collection_1.Map();
	                        terminalMap.set(attrName, terminalValuesMap);
	                    }
	                    this._addTerminal(terminalValuesMap, attrValue, selectable);
	                }
	                else {
	                    var parttialMap = matcher._attrValuePartialMap;
	                    var partialValuesMap = parttialMap.get(attrName);
	                    if (lang_1.isBlank(partialValuesMap)) {
	                        partialValuesMap = new collection_1.Map();
	                        parttialMap.set(attrName, partialValuesMap);
	                    }
	                    matcher = this._addPartial(partialValuesMap, attrValue);
	                }
	            }
	        }
	    };
	    SelectorMatcher.prototype._addTerminal = function (map, name, selectable) {
	        var terminalList = map.get(name);
	        if (lang_1.isBlank(terminalList)) {
	            terminalList = [];
	            map.set(name, terminalList);
	        }
	        terminalList.push(selectable);
	    };
	    SelectorMatcher.prototype._addPartial = function (map, name) {
	        var matcher = map.get(name);
	        if (lang_1.isBlank(matcher)) {
	            matcher = new SelectorMatcher();
	            map.set(name, matcher);
	        }
	        return matcher;
	    };
	    /**
	     * Find the objects that have been added via `addSelectable`
	     * whose css selector is contained in the given css selector.
	     * @param cssSelector A css selector
	     * @param matchedCallback This callback will be called with the object handed into `addSelectable`
	     * @return boolean true if a match was found
	    */
	    SelectorMatcher.prototype.match = function (cssSelector, matchedCallback) {
	        var result = false;
	        var element = cssSelector.element;
	        var classNames = cssSelector.classNames;
	        var attrs = cssSelector.attrs;
	        for (var i = 0; i < this._listContexts.length; i++) {
	            this._listContexts[i].alreadyMatched = false;
	        }
	        result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
	        result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) ||
	            result;
	        if (lang_1.isPresent(classNames)) {
	            for (var index = 0; index < classNames.length; index++) {
	                var className = classNames[index];
	                result =
	                    this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
	                result =
	                    this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) ||
	                        result;
	            }
	        }
	        if (lang_1.isPresent(attrs)) {
	            for (var index = 0; index < attrs.length;) {
	                var attrName = attrs[index++];
	                var attrValue = attrs[index++];
	                var terminalValuesMap = this._attrValueMap.get(attrName);
	                if (!lang_1.StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
	                    result = this._matchTerminal(terminalValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) ||
	                        result;
	                }
	                result = this._matchTerminal(terminalValuesMap, attrValue, cssSelector, matchedCallback) ||
	                    result;
	                var partialValuesMap = this._attrValuePartialMap.get(attrName);
	                if (!lang_1.StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
	                    result = this._matchPartial(partialValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) ||
	                        result;
	                }
	                result =
	                    this._matchPartial(partialValuesMap, attrValue, cssSelector, matchedCallback) || result;
	            }
	        }
	        return result;
	    };
	    /** @internal */
	    SelectorMatcher.prototype._matchTerminal = function (map, name, cssSelector, matchedCallback) {
	        if (lang_1.isBlank(map) || lang_1.isBlank(name)) {
	            return false;
	        }
	        var selectables = map.get(name);
	        var starSelectables = map.get("*");
	        if (lang_1.isPresent(starSelectables)) {
	            selectables = selectables.concat(starSelectables);
	        }
	        if (lang_1.isBlank(selectables)) {
	            return false;
	        }
	        var selectable;
	        var result = false;
	        for (var index = 0; index < selectables.length; index++) {
	            selectable = selectables[index];
	            result = selectable.finalize(cssSelector, matchedCallback) || result;
	        }
	        return result;
	    };
	    /** @internal */
	    SelectorMatcher.prototype._matchPartial = function (map, name, cssSelector, matchedCallback /*: (c: CssSelector, a: any) => void*/) {
	        if (lang_1.isBlank(map) || lang_1.isBlank(name)) {
	            return false;
	        }
	        var nestedSelector = map.get(name);
	        if (lang_1.isBlank(nestedSelector)) {
	            return false;
	        }
	        // TODO(perf): get rid of recursion and measure again
	        // TODO(perf): don't pass the whole selector into the recursion,
	        // but only the not processed parts
	        return nestedSelector.match(cssSelector, matchedCallback);
	    };
	    return SelectorMatcher;
	})();
	exports.SelectorMatcher = SelectorMatcher;
	var SelectorListContext = (function () {
	    function SelectorListContext(selectors) {
	        this.selectors = selectors;
	        this.alreadyMatched = false;
	    }
	    return SelectorListContext;
	})();
	exports.SelectorListContext = SelectorListContext;
	// Store context to pass back selector and context when a selector is matched
	var SelectorContext = (function () {
	    function SelectorContext(selector, cbContext, listContext) {
	        this.selector = selector;
	        this.cbContext = cbContext;
	        this.listContext = listContext;
	        this.notSelectors = selector.notSelectors;
	    }
	    SelectorContext.prototype.finalize = function (cssSelector, callback) {
	        var result = true;
	        if (this.notSelectors.length > 0 &&
	            (lang_1.isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
	            var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
	            result = !notMatcher.match(cssSelector, null);
	        }
	        if (result && lang_1.isPresent(callback) &&
	            (lang_1.isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
	            if (lang_1.isPresent(this.listContext)) {
	                this.listContext.alreadyMatched = true;
	            }
	            callback(this.selector, this.cbContext);
	        }
	        return result;
	    };
	    return SelectorContext;
	})();
	exports.SelectorContext = SelectorContext;
	//# sourceMappingURL=selector.js.map

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var CAMEL_CASE_REGEXP = /([A-Z])/g;
	var DASH_CASE_REGEXP = /-([a-z])/g;
	var SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\$/g;
	var DOUBLE_QUOTE_ESCAPE_STRING_RE = /"|\\|\n|\$/g;
	exports.MODULE_SUFFIX = lang_1.IS_DART ? '.dart' : '.js';
	function camelCaseToDashCase(input) {
	    return lang_1.StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function (m) { return '-' + m[1].toLowerCase(); });
	}
	exports.camelCaseToDashCase = camelCaseToDashCase;
	function dashCaseToCamelCase(input) {
	    return lang_1.StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function (m) { return m[1].toUpperCase(); });
	}
	exports.dashCaseToCamelCase = dashCaseToCamelCase;
	function escapeSingleQuoteString(input) {
	    if (lang_1.isBlank(input)) {
	        return null;
	    }
	    return "'" + escapeString(input, SINGLE_QUOTE_ESCAPE_STRING_RE) + "'";
	}
	exports.escapeSingleQuoteString = escapeSingleQuoteString;
	function escapeDoubleQuoteString(input) {
	    if (lang_1.isBlank(input)) {
	        return null;
	    }
	    return "\"" + escapeString(input, DOUBLE_QUOTE_ESCAPE_STRING_RE) + "\"";
	}
	exports.escapeDoubleQuoteString = escapeDoubleQuoteString;
	function escapeString(input, re) {
	    return lang_1.StringWrapper.replaceAllMapped(input, re, function (match) {
	        if (match[0] == '$') {
	            return lang_1.IS_DART ? '\\$' : '$';
	        }
	        else if (match[0] == '\n') {
	            return '\\n';
	        }
	        else {
	            return "\\" + match[0];
	        }
	    });
	}
	function codeGenExportVariable(name) {
	    if (lang_1.IS_DART) {
	        return "const " + name + " = ";
	    }
	    else {
	        return "var " + name + " = exports['" + name + "'] = ";
	    }
	}
	exports.codeGenExportVariable = codeGenExportVariable;
	function codeGenConstConstructorCall(name) {
	    if (lang_1.IS_DART) {
	        return "const " + name;
	    }
	    else {
	        return "new " + name;
	    }
	}
	exports.codeGenConstConstructorCall = codeGenConstConstructorCall;
	function codeGenValueFn(params, value, fnName) {
	    if (fnName === void 0) { fnName = ''; }
	    if (lang_1.IS_DART) {
	        return fnName + "(" + params.join(',') + ") => " + value;
	    }
	    else {
	        return "function " + fnName + "(" + params.join(',') + ") { return " + value + "; }";
	    }
	}
	exports.codeGenValueFn = codeGenValueFn;
	function codeGenToString(expr) {
	    if (lang_1.IS_DART) {
	        return "'${" + expr + "}'";
	    }
	    else {
	        // JS automatically convets to string...
	        return expr;
	    }
	}
	exports.codeGenToString = codeGenToString;
	function splitAtColon(input, defaultValues) {
	    var parts = lang_1.StringWrapper.split(input.trim(), /\s*:\s*/g);
	    if (parts.length > 1) {
	        return parts;
	    }
	    else {
	        return defaultValues;
	    }
	}
	exports.splitAtColon = splitAtColon;
	//# sourceMappingURL=util.js.map

/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var MODULE_REGEXP = /#MODULE\[([^\]]*)\]/g;
	function moduleRef(moduleUrl) {
	    return "#MODULE[" + moduleUrl + "]";
	}
	exports.moduleRef = moduleRef;
	var SourceModule = (function () {
	    function SourceModule(moduleUrl, sourceWithModuleRefs) {
	        this.moduleUrl = moduleUrl;
	        this.sourceWithModuleRefs = sourceWithModuleRefs;
	    }
	    SourceModule.prototype.getSourceWithImports = function () {
	        var _this = this;
	        var moduleAliases = {};
	        var imports = [];
	        var newSource = lang_1.StringWrapper.replaceAllMapped(this.sourceWithModuleRefs, MODULE_REGEXP, function (match) {
	            var moduleUrl = match[1];
	            var alias = moduleAliases[moduleUrl];
	            if (lang_1.isBlank(alias)) {
	                if (moduleUrl == _this.moduleUrl) {
	                    alias = '';
	                }
	                else {
	                    alias = "import" + imports.length;
	                    imports.push([moduleUrl, alias]);
	                }
	                moduleAliases[moduleUrl] = alias;
	            }
	            return alias.length > 0 ? alias + "." : '';
	        });
	        return new SourceWithImports(newSource, imports);
	    };
	    return SourceModule;
	})();
	exports.SourceModule = SourceModule;
	var SourceExpression = (function () {
	    function SourceExpression(declarations, expression) {
	        this.declarations = declarations;
	        this.expression = expression;
	    }
	    return SourceExpression;
	})();
	exports.SourceExpression = SourceExpression;
	var SourceExpressions = (function () {
	    function SourceExpressions(declarations, expressions) {
	        this.declarations = declarations;
	        this.expressions = expressions;
	    }
	    return SourceExpressions;
	})();
	exports.SourceExpressions = SourceExpressions;
	var SourceWithImports = (function () {
	    function SourceWithImports(source, imports) {
	        this.source = source;
	        this.imports = imports;
	    }
	    return SourceWithImports;
	})();
	exports.SourceWithImports = SourceWithImports;
	//# sourceMappingURL=source_module.js.map

/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var source_module_1 = __webpack_require__(344);
	var change_detection_jit_generator_1 = __webpack_require__(242);
	var change_definition_factory_1 = __webpack_require__(346);
	var lang_1 = __webpack_require__(49);
	var change_detection_1 = __webpack_require__(215);
	var change_detector_codegen_1 = __webpack_require__(348);
	var util_1 = __webpack_require__(343);
	var di_1 = __webpack_require__(196);
	var ABSTRACT_CHANGE_DETECTOR = "AbstractChangeDetector";
	var UTIL = "ChangeDetectionUtil";
	var CHANGE_DETECTOR_STATE = "ChangeDetectorState";
	var ABSTRACT_CHANGE_DETECTOR_MODULE = source_module_1.moduleRef("package:angular2/src/core/change_detection/abstract_change_detector" + util_1.MODULE_SUFFIX);
	var UTIL_MODULE = source_module_1.moduleRef("package:angular2/src/core/change_detection/change_detection_util" + util_1.MODULE_SUFFIX);
	var PREGEN_PROTO_CHANGE_DETECTOR_MODULE = source_module_1.moduleRef("package:angular2/src/core/change_detection/pregen_proto_change_detector" + util_1.MODULE_SUFFIX);
	var CONSTANTS_MODULE = source_module_1.moduleRef("package:angular2/src/core/change_detection/constants" + util_1.MODULE_SUFFIX);
	var ChangeDetectionCompiler = (function () {
	    function ChangeDetectionCompiler(_genConfig) {
	        this._genConfig = _genConfig;
	    }
	    ChangeDetectionCompiler.prototype.compileComponentRuntime = function (componentType, strategy, parsedTemplate) {
	        var _this = this;
	        var changeDetectorDefinitions = change_definition_factory_1.createChangeDetectorDefinitions(componentType, strategy, this._genConfig, parsedTemplate);
	        return changeDetectorDefinitions.map(function (definition) {
	            return _this._createChangeDetectorFactory(definition);
	        });
	    };
	    ChangeDetectionCompiler.prototype._createChangeDetectorFactory = function (definition) {
	        if (lang_1.IS_DART || !this._genConfig.useJit) {
	            var proto = new change_detection_1.DynamicProtoChangeDetector(definition);
	            return function (dispatcher) { return proto.instantiate(dispatcher); };
	        }
	        else {
	            return new change_detection_jit_generator_1.ChangeDetectorJITGenerator(definition, UTIL, ABSTRACT_CHANGE_DETECTOR, CHANGE_DETECTOR_STATE)
	                .generate();
	        }
	    };
	    ChangeDetectionCompiler.prototype.compileComponentCodeGen = function (componentType, strategy, parsedTemplate) {
	        var changeDetectorDefinitions = change_definition_factory_1.createChangeDetectorDefinitions(componentType, strategy, this._genConfig, parsedTemplate);
	        var factories = [];
	        var index = 0;
	        var sourceParts = changeDetectorDefinitions.map(function (definition) {
	            var codegen;
	            var sourcePart;
	            // TODO(tbosch): move the 2 code generators to the same place, one with .dart and one with .ts
	            // suffix
	            // and have the same API for calling them!
	            if (lang_1.IS_DART) {
	                codegen = new change_detector_codegen_1.Codegen(PREGEN_PROTO_CHANGE_DETECTOR_MODULE);
	                var className = "_" + definition.id;
	                var typeRef = (index === 0 && componentType.isHost) ?
	                    'dynamic' :
	                    "" + source_module_1.moduleRef(componentType.moduleUrl) + componentType.name;
	                codegen.generate(typeRef, className, definition);
	                factories.push(className + ".newChangeDetector");
	                sourcePart = codegen.toString();
	            }
	            else {
	                codegen = new change_detection_jit_generator_1.ChangeDetectorJITGenerator(definition, "" + UTIL_MODULE + UTIL, "" + ABSTRACT_CHANGE_DETECTOR_MODULE + ABSTRACT_CHANGE_DETECTOR, "" + CONSTANTS_MODULE + CHANGE_DETECTOR_STATE);
	                factories.push("function(dispatcher) { return new " + codegen.typeName + "(dispatcher); }");
	                sourcePart = codegen.generateSource();
	            }
	            index++;
	            return sourcePart;
	        });
	        return new source_module_1.SourceExpressions(sourceParts, factories);
	    };
	    ChangeDetectionCompiler = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [change_detection_1.ChangeDetectorGenConfig])
	    ], ChangeDetectionCompiler);
	    return ChangeDetectionCompiler;
	})();
	exports.ChangeDetectionCompiler = ChangeDetectionCompiler;
	//# sourceMappingURL=change_detector_compiler.js.map

/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var collection_1 = __webpack_require__(202);
	var lang_1 = __webpack_require__(49);
	var reflection_1 = __webpack_require__(206);
	var change_detection_1 = __webpack_require__(215);
	var template_ast_1 = __webpack_require__(347);
	var interfaces_1 = __webpack_require__(279);
	function createChangeDetectorDefinitions(componentType, componentStrategy, genConfig, parsedTemplate) {
	    var pvVisitors = [];
	    var visitor = new ProtoViewVisitor(null, pvVisitors, componentStrategy);
	    template_ast_1.templateVisitAll(visitor, parsedTemplate);
	    return createChangeDefinitions(pvVisitors, componentType, genConfig);
	}
	exports.createChangeDetectorDefinitions = createChangeDetectorDefinitions;
	var ProtoViewVisitor = (function () {
	    function ProtoViewVisitor(parent, allVisitors, strategy) {
	        this.parent = parent;
	        this.allVisitors = allVisitors;
	        this.strategy = strategy;
	        this.boundTextCount = 0;
	        this.boundElementCount = 0;
	        this.variableNames = [];
	        this.bindingRecords = [];
	        this.eventRecords = [];
	        this.directiveRecords = [];
	        this.viewIndex = allVisitors.length;
	        allVisitors.push(this);
	    }
	    ProtoViewVisitor.prototype.visitEmbeddedTemplate = function (ast, context) {
	        this.boundElementCount++;
	        template_ast_1.templateVisitAll(this, ast.outputs);
	        for (var i = 0; i < ast.directives.length; i++) {
	            ast.directives[i].visit(this, i);
	        }
	        var childVisitor = new ProtoViewVisitor(this, this.allVisitors, change_detection_1.ChangeDetectionStrategy.Default);
	        // Attention: variables present on an embedded template count towards
	        // the embedded template and not the template anchor!
	        template_ast_1.templateVisitAll(childVisitor, ast.vars);
	        template_ast_1.templateVisitAll(childVisitor, ast.children);
	        return null;
	    };
	    ProtoViewVisitor.prototype.visitElement = function (ast, context) {
	        if (ast.isBound()) {
	            this.boundElementCount++;
	        }
	        template_ast_1.templateVisitAll(this, ast.inputs, null);
	        template_ast_1.templateVisitAll(this, ast.outputs);
	        template_ast_1.templateVisitAll(this, ast.exportAsVars);
	        for (var i = 0; i < ast.directives.length; i++) {
	            ast.directives[i].visit(this, i);
	        }
	        template_ast_1.templateVisitAll(this, ast.children);
	        return null;
	    };
	    ProtoViewVisitor.prototype.visitNgContent = function (ast, context) { return null; };
	    ProtoViewVisitor.prototype.visitVariable = function (ast, context) {
	        this.variableNames.push(ast.name);
	        return null;
	    };
	    ProtoViewVisitor.prototype.visitEvent = function (ast, directiveRecord) {
	        var bindingRecord = lang_1.isPresent(directiveRecord) ?
	            change_detection_1.BindingRecord.createForHostEvent(ast.handler, ast.fullName, directiveRecord) :
	            change_detection_1.BindingRecord.createForEvent(ast.handler, ast.fullName, this.boundElementCount - 1);
	        this.eventRecords.push(bindingRecord);
	        return null;
	    };
	    ProtoViewVisitor.prototype.visitElementProperty = function (ast, directiveRecord) {
	        var boundElementIndex = this.boundElementCount - 1;
	        var dirIndex = lang_1.isPresent(directiveRecord) ? directiveRecord.directiveIndex : null;
	        var bindingRecord;
	        if (ast.type === template_ast_1.PropertyBindingType.Property) {
	            bindingRecord =
	                lang_1.isPresent(dirIndex) ?
	                    change_detection_1.BindingRecord.createForHostProperty(dirIndex, ast.value, ast.name) :
	                    change_detection_1.BindingRecord.createForElementProperty(ast.value, boundElementIndex, ast.name);
	        }
	        else if (ast.type === template_ast_1.PropertyBindingType.Attribute) {
	            bindingRecord =
	                lang_1.isPresent(dirIndex) ?
	                    change_detection_1.BindingRecord.createForHostAttribute(dirIndex, ast.value, ast.name) :
	                    change_detection_1.BindingRecord.createForElementAttribute(ast.value, boundElementIndex, ast.name);
	        }
	        else if (ast.type === template_ast_1.PropertyBindingType.Class) {
	            bindingRecord =
	                lang_1.isPresent(dirIndex) ?
	                    change_detection_1.BindingRecord.createForHostClass(dirIndex, ast.value, ast.name) :
	                    change_detection_1.BindingRecord.createForElementClass(ast.value, boundElementIndex, ast.name);
	        }
	        else if (ast.type === template_ast_1.PropertyBindingType.Style) {
	            bindingRecord =
	                lang_1.isPresent(dirIndex) ?
	                    change_detection_1.BindingRecord.createForHostStyle(dirIndex, ast.value, ast.name, ast.unit) :
	                    change_detection_1.BindingRecord.createForElementStyle(ast.value, boundElementIndex, ast.name, ast.unit);
	        }
	        this.bindingRecords.push(bindingRecord);
	        return null;
	    };
	    ProtoViewVisitor.prototype.visitAttr = function (ast, context) { return null; };
	    ProtoViewVisitor.prototype.visitBoundText = function (ast, context) {
	        var boundTextIndex = this.boundTextCount++;
	        this.bindingRecords.push(change_detection_1.BindingRecord.createForTextNode(ast.value, boundTextIndex));
	        return null;
	    };
	    ProtoViewVisitor.prototype.visitText = function (ast, context) { return null; };
	    ProtoViewVisitor.prototype.visitDirective = function (ast, directiveIndexAsNumber) {
	        var directiveIndex = new change_detection_1.DirectiveIndex(this.boundElementCount - 1, directiveIndexAsNumber);
	        var directiveMetadata = ast.directive;
	        var directiveRecord = new change_detection_1.DirectiveRecord({
	            directiveIndex: directiveIndex,
	            callAfterContentInit: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.AfterContentInit) !== -1,
	            callAfterContentChecked: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.AfterContentChecked) !== -1,
	            callAfterViewInit: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.AfterViewInit) !== -1,
	            callAfterViewChecked: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.AfterViewChecked) !== -1,
	            callOnChanges: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.OnChanges) !== -1,
	            callDoCheck: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.DoCheck) !== -1,
	            callOnInit: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.OnInit) !== -1,
	            changeDetection: directiveMetadata.changeDetection
	        });
	        this.directiveRecords.push(directiveRecord);
	        template_ast_1.templateVisitAll(this, ast.inputs, directiveRecord);
	        var bindingRecords = this.bindingRecords;
	        if (directiveRecord.callOnChanges) {
	            bindingRecords.push(change_detection_1.BindingRecord.createDirectiveOnChanges(directiveRecord));
	        }
	        if (directiveRecord.callOnInit) {
	            bindingRecords.push(change_detection_1.BindingRecord.createDirectiveOnInit(directiveRecord));
	        }
	        if (directiveRecord.callDoCheck) {
	            bindingRecords.push(change_detection_1.BindingRecord.createDirectiveDoCheck(directiveRecord));
	        }
	        template_ast_1.templateVisitAll(this, ast.hostProperties, directiveRecord);
	        template_ast_1.templateVisitAll(this, ast.hostEvents, directiveRecord);
	        template_ast_1.templateVisitAll(this, ast.exportAsVars);
	        return null;
	    };
	    ProtoViewVisitor.prototype.visitDirectiveProperty = function (ast, directiveRecord) {
	        // TODO: these setters should eventually be created by change detection, to make
	        // it monomorphic!
	        var setter = reflection_1.reflector.setter(ast.directiveName);
	        this.bindingRecords.push(change_detection_1.BindingRecord.createForDirective(ast.value, ast.directiveName, setter, directiveRecord));
	        return null;
	    };
	    return ProtoViewVisitor;
	})();
	function createChangeDefinitions(pvVisitors, componentType, genConfig) {
	    var pvVariableNames = _collectNestedProtoViewsVariableNames(pvVisitors);
	    return pvVisitors.map(function (pvVisitor) {
	        var id = componentType.name + "_" + pvVisitor.viewIndex;
	        return new change_detection_1.ChangeDetectorDefinition(id, pvVisitor.strategy, pvVariableNames[pvVisitor.viewIndex], pvVisitor.bindingRecords, pvVisitor.eventRecords, pvVisitor.directiveRecords, genConfig);
	    });
	}
	function _collectNestedProtoViewsVariableNames(pvVisitors) {
	    var nestedPvVariableNames = collection_1.ListWrapper.createFixedSize(pvVisitors.length);
	    pvVisitors.forEach(function (pv) {
	        var parentVariableNames = lang_1.isPresent(pv.parent) ? nestedPvVariableNames[pv.parent.viewIndex] : [];
	        nestedPvVariableNames[pv.viewIndex] = parentVariableNames.concat(pv.variableNames);
	    });
	    return nestedPvVariableNames;
	}
	//# sourceMappingURL=change_definition_factory.js.map

/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var TextAst = (function () {
	    function TextAst(value, ngContentIndex, sourceInfo) {
	        this.value = value;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceInfo = sourceInfo;
	    }
	    TextAst.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
	    return TextAst;
	})();
	exports.TextAst = TextAst;
	var BoundTextAst = (function () {
	    function BoundTextAst(value, ngContentIndex, sourceInfo) {
	        this.value = value;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceInfo = sourceInfo;
	    }
	    BoundTextAst.prototype.visit = function (visitor, context) {
	        return visitor.visitBoundText(this, context);
	    };
	    return BoundTextAst;
	})();
	exports.BoundTextAst = BoundTextAst;
	var AttrAst = (function () {
	    function AttrAst(name, value, sourceInfo) {
	        this.name = name;
	        this.value = value;
	        this.sourceInfo = sourceInfo;
	    }
	    AttrAst.prototype.visit = function (visitor, context) { return visitor.visitAttr(this, context); };
	    return AttrAst;
	})();
	exports.AttrAst = AttrAst;
	var BoundElementPropertyAst = (function () {
	    function BoundElementPropertyAst(name, type, value, unit, sourceInfo) {
	        this.name = name;
	        this.type = type;
	        this.value = value;
	        this.unit = unit;
	        this.sourceInfo = sourceInfo;
	    }
	    BoundElementPropertyAst.prototype.visit = function (visitor, context) {
	        return visitor.visitElementProperty(this, context);
	    };
	    return BoundElementPropertyAst;
	})();
	exports.BoundElementPropertyAst = BoundElementPropertyAst;
	var BoundEventAst = (function () {
	    function BoundEventAst(name, target, handler, sourceInfo) {
	        this.name = name;
	        this.target = target;
	        this.handler = handler;
	        this.sourceInfo = sourceInfo;
	    }
	    BoundEventAst.prototype.visit = function (visitor, context) {
	        return visitor.visitEvent(this, context);
	    };
	    Object.defineProperty(BoundEventAst.prototype, "fullName", {
	        get: function () {
	            if (lang_1.isPresent(this.target)) {
	                return this.target + ":" + this.name;
	            }
	            else {
	                return this.name;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return BoundEventAst;
	})();
	exports.BoundEventAst = BoundEventAst;
	var VariableAst = (function () {
	    function VariableAst(name, value, sourceInfo) {
	        this.name = name;
	        this.value = value;
	        this.sourceInfo = sourceInfo;
	    }
	    VariableAst.prototype.visit = function (visitor, context) {
	        return visitor.visitVariable(this, context);
	    };
	    return VariableAst;
	})();
	exports.VariableAst = VariableAst;
	var ElementAst = (function () {
	    function ElementAst(name, attrs, inputs, outputs, exportAsVars, directives, children, ngContentIndex, sourceInfo) {
	        this.name = name;
	        this.attrs = attrs;
	        this.inputs = inputs;
	        this.outputs = outputs;
	        this.exportAsVars = exportAsVars;
	        this.directives = directives;
	        this.children = children;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceInfo = sourceInfo;
	    }
	    ElementAst.prototype.visit = function (visitor, context) {
	        return visitor.visitElement(this, context);
	    };
	    ElementAst.prototype.isBound = function () {
	        return (this.inputs.length > 0 || this.outputs.length > 0 || this.exportAsVars.length > 0 ||
	            this.directives.length > 0);
	    };
	    ElementAst.prototype.getComponent = function () {
	        return this.directives.length > 0 && this.directives[0].directive.isComponent ?
	            this.directives[0].directive :
	            null;
	    };
	    return ElementAst;
	})();
	exports.ElementAst = ElementAst;
	var EmbeddedTemplateAst = (function () {
	    function EmbeddedTemplateAst(attrs, outputs, vars, directives, children, ngContentIndex, sourceInfo) {
	        this.attrs = attrs;
	        this.outputs = outputs;
	        this.vars = vars;
	        this.directives = directives;
	        this.children = children;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceInfo = sourceInfo;
	    }
	    EmbeddedTemplateAst.prototype.visit = function (visitor, context) {
	        return visitor.visitEmbeddedTemplate(this, context);
	    };
	    return EmbeddedTemplateAst;
	})();
	exports.EmbeddedTemplateAst = EmbeddedTemplateAst;
	var BoundDirectivePropertyAst = (function () {
	    function BoundDirectivePropertyAst(directiveName, templateName, value, sourceInfo) {
	        this.directiveName = directiveName;
	        this.templateName = templateName;
	        this.value = value;
	        this.sourceInfo = sourceInfo;
	    }
	    BoundDirectivePropertyAst.prototype.visit = function (visitor, context) {
	        return visitor.visitDirectiveProperty(this, context);
	    };
	    return BoundDirectivePropertyAst;
	})();
	exports.BoundDirectivePropertyAst = BoundDirectivePropertyAst;
	var DirectiveAst = (function () {
	    function DirectiveAst(directive, inputs, hostProperties, hostEvents, exportAsVars, sourceInfo) {
	        this.directive = directive;
	        this.inputs = inputs;
	        this.hostProperties = hostProperties;
	        this.hostEvents = hostEvents;
	        this.exportAsVars = exportAsVars;
	        this.sourceInfo = sourceInfo;
	    }
	    DirectiveAst.prototype.visit = function (visitor, context) {
	        return visitor.visitDirective(this, context);
	    };
	    return DirectiveAst;
	})();
	exports.DirectiveAst = DirectiveAst;
	var NgContentAst = (function () {
	    function NgContentAst(index, ngContentIndex, sourceInfo) {
	        this.index = index;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceInfo = sourceInfo;
	    }
	    NgContentAst.prototype.visit = function (visitor, context) {
	        return visitor.visitNgContent(this, context);
	    };
	    return NgContentAst;
	})();
	exports.NgContentAst = NgContentAst;
	(function (PropertyBindingType) {
	    PropertyBindingType[PropertyBindingType["Property"] = 0] = "Property";
	    PropertyBindingType[PropertyBindingType["Attribute"] = 1] = "Attribute";
	    PropertyBindingType[PropertyBindingType["Class"] = 2] = "Class";
	    PropertyBindingType[PropertyBindingType["Style"] = 3] = "Style";
	})(exports.PropertyBindingType || (exports.PropertyBindingType = {}));
	var PropertyBindingType = exports.PropertyBindingType;
	function templateVisitAll(visitor, asts, context) {
	    if (context === void 0) { context = null; }
	    var result = [];
	    asts.forEach(function (ast) {
	        var astResult = ast.visit(visitor, context);
	        if (lang_1.isPresent(astResult)) {
	            result.push(astResult);
	        }
	    });
	    return result;
	}
	exports.templateVisitAll = templateVisitAll;
	//# sourceMappingURL=template_ast.js.map

/***/ },
/* 348 */
/***/ function(module, exports) {

	'use strict';// Note: This class is only here so that we can reference it from TypeScript code.
	// The actual implementation lives under modules_dart.
	// TODO(tbosch): Move the corresponding code into angular2/src/compiler once
	// the new compiler is done.
	var Codegen = (function () {
	    function Codegen(moduleAlias) {
	    }
	    Codegen.prototype.generate = function (typeName, changeDetectorTypeName, def) {
	        throw "Not implemented in JS";
	    };
	    Codegen.prototype.toString = function () { throw "Not implemented in JS"; };
	    return Codegen;
	})();
	exports.Codegen = Codegen;
	//# sourceMappingURL=change_detector_codegen.js.map

/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var source_module_1 = __webpack_require__(344);
	var view_1 = __webpack_require__(246);
	var xhr_1 = __webpack_require__(350);
	var lang_1 = __webpack_require__(49);
	var async_1 = __webpack_require__(50);
	var shadow_css_1 = __webpack_require__(351);
	var url_resolver_1 = __webpack_require__(352);
	var style_url_resolver_1 = __webpack_require__(353);
	var util_1 = __webpack_require__(343);
	var di_1 = __webpack_require__(196);
	var view_factory_1 = __webpack_require__(298);
	var StyleCompiler = (function () {
	    function StyleCompiler(_xhr, _urlResolver) {
	        this._xhr = _xhr;
	        this._urlResolver = _urlResolver;
	        this._styleCache = new Map();
	        this._shadowCss = new shadow_css_1.ShadowCss();
	    }
	    StyleCompiler.prototype.compileComponentRuntime = function (template) {
	        var styles = template.styles;
	        var styleAbsUrls = template.styleUrls;
	        return this._loadStyles(styles, styleAbsUrls, template.encapsulation === view_1.ViewEncapsulation.Emulated);
	    };
	    StyleCompiler.prototype.compileComponentCodeGen = function (template) {
	        var shim = template.encapsulation === view_1.ViewEncapsulation.Emulated;
	        return this._styleCodeGen(template.styles, template.styleUrls, shim);
	    };
	    StyleCompiler.prototype.compileStylesheetCodeGen = function (stylesheetUrl, cssText) {
	        var styleWithImports = style_url_resolver_1.extractStyleUrls(this._urlResolver, stylesheetUrl, cssText);
	        return [
	            this._styleModule(stylesheetUrl, false, this._styleCodeGen([styleWithImports.style], styleWithImports.styleUrls, false)),
	            this._styleModule(stylesheetUrl, true, this._styleCodeGen([styleWithImports.style], styleWithImports.styleUrls, true))
	        ];
	    };
	    StyleCompiler.prototype.clearCache = function () { this._styleCache.clear(); };
	    StyleCompiler.prototype._loadStyles = function (plainStyles, absUrls, encapsulate) {
	        var _this = this;
	        var promises = absUrls.map(function (absUrl) {
	            var cacheKey = "" + absUrl + (encapsulate ? '.shim' : '');
	            var result = _this._styleCache.get(cacheKey);
	            if (lang_1.isBlank(result)) {
	                result = _this._xhr.get(absUrl).then(function (style) {
	                    var styleWithImports = style_url_resolver_1.extractStyleUrls(_this._urlResolver, absUrl, style);
	                    return _this._loadStyles([styleWithImports.style], styleWithImports.styleUrls, encapsulate);
	                });
	                _this._styleCache.set(cacheKey, result);
	            }
	            return result;
	        });
	        return async_1.PromiseWrapper.all(promises).then(function (nestedStyles) {
	            var result = plainStyles.map(function (plainStyle) { return _this._shimIfNeeded(plainStyle, encapsulate); });
	            nestedStyles.forEach(function (styles) { return result.push(styles); });
	            return result;
	        });
	    };
	    StyleCompiler.prototype._styleCodeGen = function (plainStyles, absUrls, shim) {
	        var _this = this;
	        var arrayPrefix = lang_1.IS_DART ? "const" : '';
	        var styleExpressions = plainStyles.map(function (plainStyle) { return util_1.escapeSingleQuoteString(_this._shimIfNeeded(plainStyle, shim)); });
	        for (var i = 0; i < absUrls.length; i++) {
	            var moduleUrl = this._createModuleUrl(absUrls[i], shim);
	            styleExpressions.push(source_module_1.moduleRef(moduleUrl) + "STYLES");
	        }
	        var expressionSource = arrayPrefix + " [" + styleExpressions.join(',') + "]";
	        return new source_module_1.SourceExpression([], expressionSource);
	    };
	    StyleCompiler.prototype._styleModule = function (stylesheetUrl, shim, expression) {
	        var moduleSource = "\n      " + expression.declarations.join('\n') + "\n      " + util_1.codeGenExportVariable('STYLES') + expression.expression + ";\n    ";
	        return new source_module_1.SourceModule(this._createModuleUrl(stylesheetUrl, shim), moduleSource);
	    };
	    StyleCompiler.prototype._shimIfNeeded = function (style, shim) {
	        return shim ? this._shadowCss.shimCssText(style, view_factory_1.CONTENT_ATTR, view_factory_1.HOST_ATTR) : style;
	    };
	    StyleCompiler.prototype._createModuleUrl = function (stylesheetUrl, shim) {
	        return shim ? stylesheetUrl + ".shim" + util_1.MODULE_SUFFIX : "" + stylesheetUrl + util_1.MODULE_SUFFIX;
	    };
	    StyleCompiler = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [xhr_1.XHR, url_resolver_1.UrlResolver])
	    ], StyleCompiler);
	    return StyleCompiler;
	})();
	exports.StyleCompiler = StyleCompiler;
	//# sourceMappingURL=style_compiler.js.map

/***/ },
/* 350 */
/***/ function(module, exports) {

	'use strict';// TODO: vsavkin rename it into TemplateLoader and do not reexport it via DomAdapter
	var XHR = (function () {
	    function XHR() {
	    }
	    XHR.prototype.get = function (url) { return null; };
	    return XHR;
	})();
	exports.XHR = XHR;
	//# sourceMappingURL=xhr.js.map

/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var collection_1 = __webpack_require__(202);
	var lang_1 = __webpack_require__(49);
	/**
	 * This file is a port of shadowCSS from webcomponents.js to TypeScript.
	 *
	 * Please make sure to keep to edits in sync with the source file.
	 *
	 * Source:
	 * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js
	 *
	 * The original file level comment is reproduced below
	 */
	/*
	  This is a limited shim for ShadowDOM css styling.
	  https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles

	  The intention here is to support only the styling features which can be
	  relatively simply implemented. The goal is to allow users to avoid the
	  most obvious pitfalls and do so without compromising performance significantly.
	  For ShadowDOM styling that's not covered here, a set of best practices
	  can be provided that should allow users to accomplish more complex styling.

	  The following is a list of specific ShadowDOM styling features and a brief
	  discussion of the approach used to shim.

	  Shimmed features:

	  * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host
	  element using the :host rule. To shim this feature, the :host styles are
	  reformatted and prefixed with a given scope name and promoted to a
	  document level stylesheet.
	  For example, given a scope name of .foo, a rule like this:

	    :host {
	        background: red;
	      }
	    }

	  becomes:

	    .foo {
	      background: red;
	    }

	  * encapsultion: Styles defined within ShadowDOM, apply only to
	  dom inside the ShadowDOM. Polymer uses one of two techniques to imlement
	  this feature.

	  By default, rules are prefixed with the host element tag name
	  as a descendant selector. This ensures styling does not leak out of the 'top'
	  of the element's ShadowDOM. For example,

	  div {
	      font-weight: bold;
	    }

	  becomes:

	  x-foo div {
	      font-weight: bold;
	    }

	  becomes:


	  Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then
	  selectors are scoped by adding an attribute selector suffix to each
	  simple selector that contains the host element tag name. Each element
	  in the element's ShadowDOM template is also given the scope attribute.
	  Thus, these rules match only elements that have the scope attribute.
	  For example, given a scope name of x-foo, a rule like this:

	    div {
	      font-weight: bold;
	    }

	  becomes:

	    div[x-foo] {
	      font-weight: bold;
	    }

	  Note that elements that are dynamically added to a scope must have the scope
	  selector added to them manually.

	  * upper/lower bound encapsulation: Styles which are defined outside a
	  shadowRoot should not cross the ShadowDOM boundary and should not apply
	  inside a shadowRoot.

	  This styling behavior is not emulated. Some possible ways to do this that
	  were rejected due to complexity and/or performance concerns include: (1) reset
	  every possible property for every possible selector for a given scope name;
	  (2) re-implement css in javascript.

	  As an alternative, users should make sure to use selectors
	  specific to the scope in which they are working.

	  * ::distributed: This behavior is not emulated. It's often not necessary
	  to style the contents of a specific insertion point and instead, descendants
	  of the host element can be styled selectively. Users can also create an
	  extra node around an insertion point and style that node's contents
	  via descendent selectors. For example, with a shadowRoot like this:

	    <style>
	      ::content(div) {
	        background: red;
	      }
	    </style>
	    <content></content>

	  could become:

	    <style>
	      / *@polyfill .content-container div * /
	      ::content(div) {
	        background: red;
	      }
	    </style>
	    <div class="content-container">
	      <content></content>
	    </div>

	  Note the use of @polyfill in the comment above a ShadowDOM specific style
	  declaration. This is a directive to the styling shim to use the selector
	  in comments in lieu of the next selector when running under polyfill.
	*/
	var ShadowCss = (function () {
	    function ShadowCss() {
	        this.strictStyling = true;
	    }
	    /*
	    * Shim some cssText with the given selector. Returns cssText that can
	    * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).
	    *
	    * When strictStyling is true:
	    * - selector is the attribute added to all elements inside the host,
	    * - hostSelector is the attribute added to the host itself.
	    */
	    ShadowCss.prototype.shimCssText = function (cssText, selector, hostSelector) {
	        if (hostSelector === void 0) { hostSelector = ''; }
	        cssText = stripComments(cssText);
	        cssText = this._insertDirectives(cssText);
	        return this._scopeCssText(cssText, selector, hostSelector);
	    };
	    ShadowCss.prototype._insertDirectives = function (cssText) {
	        cssText = this._insertPolyfillDirectivesInCssText(cssText);
	        return this._insertPolyfillRulesInCssText(cssText);
	    };
	    /*
	     * Process styles to convert native ShadowDOM rules that will trip
	     * up the css parser; we rely on decorating the stylesheet with inert rules.
	     *
	     * For example, we convert this rule:
	     *
	     * polyfill-next-selector { content: ':host menu-item'; }
	     * ::content menu-item {
	     *
	     * to this:
	     *
	     * scopeName menu-item {
	     *
	    **/
	    ShadowCss.prototype._insertPolyfillDirectivesInCssText = function (cssText) {
	        // Difference with webcomponents.js: does not handle comments
	        return lang_1.StringWrapper.replaceAllMapped(cssText, _cssContentNextSelectorRe, function (m) { return m[1] + '{'; });
	    };
	    /*
	     * Process styles to add rules which will only apply under the polyfill
	     *
	     * For example, we convert this rule:
	     *
	     * polyfill-rule {
	     *   content: ':host menu-item';
	     * ...
	     * }
	     *
	     * to this:
	     *
	     * scopeName menu-item {...}
	     *
	    **/
	    ShadowCss.prototype._insertPolyfillRulesInCssText = function (cssText) {
	        // Difference with webcomponents.js: does not handle comments
	        return lang_1.StringWrapper.replaceAllMapped(cssText, _cssContentRuleRe, function (m) {
	            var rule = m[0];
	            rule = lang_1.StringWrapper.replace(rule, m[1], '');
	            rule = lang_1.StringWrapper.replace(rule, m[2], '');
	            return m[3] + rule;
	        });
	    };
	    /* Ensure styles are scoped. Pseudo-scoping takes a rule like:
	     *
	     *  .foo {... }
	     *
	     *  and converts this to
	     *
	     *  scopeName .foo { ... }
	    */
	    ShadowCss.prototype._scopeCssText = function (cssText, scopeSelector, hostSelector) {
	        var unscoped = this._extractUnscopedRulesFromCssText(cssText);
	        cssText = this._insertPolyfillHostInCssText(cssText);
	        cssText = this._convertColonHost(cssText);
	        cssText = this._convertColonHostContext(cssText);
	        cssText = this._convertShadowDOMSelectors(cssText);
	        if (lang_1.isPresent(scopeSelector)) {
	            cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
	        }
	        cssText = cssText + '\n' + unscoped;
	        return cssText.trim();
	    };
	    /*
	     * Process styles to add rules which will only apply under the polyfill
	     * and do not process via CSSOM. (CSSOM is destructive to rules on rare
	     * occasions, e.g. -webkit-calc on Safari.)
	     * For example, we convert this rule:
	     *
	     * @polyfill-unscoped-rule {
	     *   content: 'menu-item';
	     * ... }
	     *
	     * to this:
	     *
	     * menu-item {...}
	     *
	    **/
	    ShadowCss.prototype._extractUnscopedRulesFromCssText = function (cssText) {
	        // Difference with webcomponents.js: does not handle comments
	        var r = '', m;
	        var matcher = lang_1.RegExpWrapper.matcher(_cssContentUnscopedRuleRe, cssText);
	        while (lang_1.isPresent(m = lang_1.RegExpMatcherWrapper.next(matcher))) {
	            var rule = m[0];
	            rule = lang_1.StringWrapper.replace(rule, m[2], '');
	            rule = lang_1.StringWrapper.replace(rule, m[1], m[3]);
	            r += rule + '\n\n';
	        }
	        return r;
	    };
	    /*
	     * convert a rule like :host(.foo) > .bar { }
	     *
	     * to
	     *
	     * scopeName.foo > .bar
	    */
	    ShadowCss.prototype._convertColonHost = function (cssText) {
	        return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
	    };
	    /*
	     * convert a rule like :host-context(.foo) > .bar { }
	     *
	     * to
	     *
	     * scopeName.foo > .bar, .foo scopeName > .bar { }
	     *
	     * and
	     *
	     * :host-context(.foo:host) .bar { ... }
	     *
	     * to
	     *
	     * scopeName.foo .bar { ... }
	    */
	    ShadowCss.prototype._convertColonHostContext = function (cssText) {
	        return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
	    };
	    ShadowCss.prototype._convertColonRule = function (cssText, regExp, partReplacer) {
	        // p1 = :host, p2 = contents of (), p3 rest of rule
	        return lang_1.StringWrapper.replaceAllMapped(cssText, regExp, function (m) {
	            if (lang_1.isPresent(m[2])) {
	                var parts = m[2].split(','), r = [];
	                for (var i = 0; i < parts.length; i++) {
	                    var p = parts[i];
	                    if (lang_1.isBlank(p))
	                        break;
	                    p = p.trim();
	                    r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
	                }
	                return r.join(',');
	            }
	            else {
	                return _polyfillHostNoCombinator + m[3];
	            }
	        });
	    };
	    ShadowCss.prototype._colonHostContextPartReplacer = function (host, part, suffix) {
	        if (lang_1.StringWrapper.contains(part, _polyfillHost)) {
	            return this._colonHostPartReplacer(host, part, suffix);
	        }
	        else {
	            return host + part + suffix + ', ' + part + ' ' + host + suffix;
	        }
	    };
	    ShadowCss.prototype._colonHostPartReplacer = function (host, part, suffix) {
	        return host + lang_1.StringWrapper.replace(part, _polyfillHost, '') + suffix;
	    };
	    /*
	     * Convert combinators like ::shadow and pseudo-elements like ::content
	     * by replacing with space.
	    */
	    ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) {
	        for (var i = 0; i < _shadowDOMSelectorsRe.length; i++) {
	            cssText = lang_1.StringWrapper.replaceAll(cssText, _shadowDOMSelectorsRe[i], ' ');
	        }
	        return cssText;
	    };
	    // change a selector like 'div' to 'name div'
	    ShadowCss.prototype._scopeSelectors = function (cssText, scopeSelector, hostSelector) {
	        var _this = this;
	        return processRules(cssText, function (rule) {
	            var selector = rule.selector;
	            var content = rule.content;
	            if (rule.selector[0] != '@' || rule.selector.startsWith('@page')) {
	                selector =
	                    _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling);
	            }
	            else if (rule.selector.startsWith('@media')) {
	                content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);
	            }
	            return new CssRule(selector, content);
	        });
	    };
	    ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector, strict) {
	        var r = [], parts = selector.split(',');
	        for (var i = 0; i < parts.length; i++) {
	            var p = parts[i];
	            p = p.trim();
	            if (this._selectorNeedsScoping(p, scopeSelector)) {
	                p = strict && !lang_1.StringWrapper.contains(p, _polyfillHostNoCombinator) ?
	                    this._applyStrictSelectorScope(p, scopeSelector) :
	                    this._applySelectorScope(p, scopeSelector, hostSelector);
	            }
	            r.push(p);
	        }
	        return r.join(', ');
	    };
	    ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) {
	        var re = this._makeScopeMatcher(scopeSelector);
	        return !lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(re, selector));
	    };
	    ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) {
	        var lre = /\[/g;
	        var rre = /\]/g;
	        scopeSelector = lang_1.StringWrapper.replaceAll(scopeSelector, lre, '\\[');
	        scopeSelector = lang_1.StringWrapper.replaceAll(scopeSelector, rre, '\\]');
	        return lang_1.RegExpWrapper.create('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
	    };
	    ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) {
	        // Difference from webcomponentsjs: scopeSelector could not be an array
	        return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
	    };
	    // scope via name and [is=name]
	    ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {
	        if (lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(_polyfillHostRe, selector))) {
	            var replaceBy = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
	            selector = lang_1.StringWrapper.replace(selector, _polyfillHostNoCombinator, replaceBy);
	            return lang_1.StringWrapper.replaceAll(selector, _polyfillHostRe, replaceBy + ' ');
	        }
	        else {
	            return scopeSelector + ' ' + selector;
	        }
	    };
	    // return a selector with [name] suffix on each simple selector
	    // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]  /** @internal */
	    ShadowCss.prototype._applyStrictSelectorScope = function (selector, scopeSelector) {
	        var isRe = /\[is=([^\]]*)\]/g;
	        scopeSelector = lang_1.StringWrapper.replaceAllMapped(scopeSelector, isRe, function (m) { return m[1]; });
	        var splits = [' ', '>', '+', '~'], scoped = selector, attrName = '[' + scopeSelector + ']';
	        for (var i = 0; i < splits.length; i++) {
	            var sep = splits[i];
	            var parts = scoped.split(sep);
	            scoped = parts.map(function (p) {
	                // remove :host since it should be unnecessary
	                var t = lang_1.StringWrapper.replaceAll(p.trim(), _polyfillHostRe, '');
	                if (t.length > 0 && !collection_1.ListWrapper.contains(splits, t) &&
	                    !lang_1.StringWrapper.contains(t, attrName)) {
	                    var re = /([^:]*)(:*)(.*)/g;
	                    var m = lang_1.RegExpWrapper.firstMatch(re, t);
	                    if (lang_1.isPresent(m)) {
	                        p = m[1] + attrName + m[2] + m[3];
	                    }
	                }
	                return p;
	            })
	                .join(sep);
	        }
	        return scoped;
	    };
	    ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) {
	        selector = lang_1.StringWrapper.replaceAll(selector, _colonHostContextRe, _polyfillHostContext);
	        selector = lang_1.StringWrapper.replaceAll(selector, _colonHostRe, _polyfillHost);
	        return selector;
	    };
	    return ShadowCss;
	})();
	exports.ShadowCss = ShadowCss;
	var _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?['"](.*?)['"][;\s]*}([^{]*?){/gim;
	var _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim;
	var _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim;
	var _polyfillHost = '-shadowcsshost';
	// note: :host-context pre-processed to -shadowcsshostcontext.
	var _polyfillHostContext = '-shadowcsscontext';
	var _parenSuffix = ')(?:\\((' +
	    '(?:\\([^)(]*\\)|[^)(]*)+?' +
	    ')\\))?([^,{]*)';
	var _cssColonHostRe = lang_1.RegExpWrapper.create('(' + _polyfillHost + _parenSuffix, 'im');
	var _cssColonHostContextRe = lang_1.RegExpWrapper.create('(' + _polyfillHostContext + _parenSuffix, 'im');
	var _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
	var _shadowDOMSelectorsRe = [
	    />>>/g,
	    /::shadow/g,
	    /::content/g,
	    // Deprecated selectors
	    // TODO(vicb): see https://github.com/angular/clang-format/issues/16
	    // clang-format off
	    /\/deep\//g,
	    /\/shadow-deep\//g,
	    /\/shadow\//g,
	];
	var _selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$';
	var _polyfillHostRe = lang_1.RegExpWrapper.create(_polyfillHost, 'im');
	var _colonHostRe = /:host/gim;
	var _colonHostContextRe = /:host-context/gim;
	var _commentRe = /\/\*[\s\S]*?\*\//g;
	function stripComments(input) {
	    return lang_1.StringWrapper.replaceAllMapped(input, _commentRe, function (_) { return ''; });
	}
	var _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
	var _curlyRe = /([{}])/g;
	var OPEN_CURLY = '{';
	var CLOSE_CURLY = '}';
	var BLOCK_PLACEHOLDER = '%BLOCK%';
	var CssRule = (function () {
	    function CssRule(selector, content) {
	        this.selector = selector;
	        this.content = content;
	    }
	    return CssRule;
	})();
	exports.CssRule = CssRule;
	function processRules(input, ruleCallback) {
	    var inputWithEscapedBlocks = escapeBlocks(input);
	    var nextBlockIndex = 0;
	    return lang_1.StringWrapper.replaceAllMapped(inputWithEscapedBlocks.escapedString, _ruleRe, function (m) {
	        var selector = m[2];
	        var content = '';
	        var suffix = m[4];
	        var contentPrefix = '';
	        if (lang_1.isPresent(m[4]) && m[4].startsWith('{' + BLOCK_PLACEHOLDER)) {
	            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
	            suffix = m[4].substring(BLOCK_PLACEHOLDER.length + 1);
	            contentPrefix = '{';
	        }
	        var rule = ruleCallback(new CssRule(selector, content));
	        return "" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;
	    });
	}
	exports.processRules = processRules;
	var StringWithEscapedBlocks = (function () {
	    function StringWithEscapedBlocks(escapedString, blocks) {
	        this.escapedString = escapedString;
	        this.blocks = blocks;
	    }
	    return StringWithEscapedBlocks;
	})();
	function escapeBlocks(input) {
	    var inputParts = lang_1.StringWrapper.split(input, _curlyRe);
	    var resultParts = [];
	    var escapedBlocks = [];
	    var bracketCount = 0;
	    var currentBlockParts = [];
	    for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {
	        var part = inputParts[partIndex];
	        if (part == CLOSE_CURLY) {
	            bracketCount--;
	        }
	        if (bracketCount > 0) {
	            currentBlockParts.push(part);
	        }
	        else {
	            if (currentBlockParts.length > 0) {
	                escapedBlocks.push(currentBlockParts.join(''));
	                resultParts.push(BLOCK_PLACEHOLDER);
	                currentBlockParts = [];
	            }
	            resultParts.push(part);
	        }
	        if (part == OPEN_CURLY) {
	            bracketCount++;
	        }
	    }
	    if (currentBlockParts.length > 0) {
	        escapedBlocks.push(currentBlockParts.join(''));
	        resultParts.push(BLOCK_PLACEHOLDER);
	    }
	    return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);
	}
	//# sourceMappingURL=shadow_css.js.map

/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(196);
	var lang_1 = __webpack_require__(49);
	function createWithoutPackagePrefix() {
	    return new UrlResolver();
	}
	exports.createWithoutPackagePrefix = createWithoutPackagePrefix;
	/**
	 * Used by the {@link Compiler} when resolving HTML and CSS template URLs.
	 *
	 * This interface can be overridden by the application developer to create custom behavior.
	 *
	 * See {@link Compiler}
	 */
	var UrlResolver = (function () {
	    function UrlResolver() {
	    }
	    /**
	     * Resolves the `url` given the `baseUrl`:
	     * - when the `url` is null, the `baseUrl` is returned,
	     * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of
	     * `baseUrl` and `url`,
	     * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is
	     * returned as is (ignoring the `baseUrl`)
	     *
	     * @param {string} baseUrl
	     * @param {string} url
	     * @returns {string} the resolved URL
	     */
	    UrlResolver.prototype.resolve = function (baseUrl, url) { return _resolveUrl(baseUrl, url); };
	    UrlResolver = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], UrlResolver);
	    return UrlResolver;
	})();
	exports.UrlResolver = UrlResolver;
	// The code below is adapted from Traceur:
	// https://github.com/google/traceur-compiler/blob/9511c1dafa972bf0de1202a8a863bad02f0f95a8/src/runtime/url.js
	/**
	 * Builds a URI string from already-encoded parts.
	 *
	 * No encoding is performed.  Any component may be omitted as either null or
	 * undefined.
	 *
	 * @param {?string=} opt_scheme The scheme such as 'http'.
	 * @param {?string=} opt_userInfo The user name before the '@'.
	 * @param {?string=} opt_domain The domain such as 'www.google.com', already
	 *     URI-encoded.
	 * @param {(string|null)=} opt_port The port number.
	 * @param {?string=} opt_path The path, already URI-encoded.  If it is not
	 *     empty, it must begin with a slash.
	 * @param {?string=} opt_queryData The URI-encoded query data.
	 * @param {?string=} opt_fragment The URI-encoded fragment identifier.
	 * @return {string} The fully combined URI.
	 */
	function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
	    var out = [];
	    if (lang_1.isPresent(opt_scheme)) {
	        out.push(opt_scheme + ':');
	    }
	    if (lang_1.isPresent(opt_domain)) {
	        out.push('//');
	        if (lang_1.isPresent(opt_userInfo)) {
	            out.push(opt_userInfo + '@');
	        }
	        out.push(opt_domain);
	        if (lang_1.isPresent(opt_port)) {
	            out.push(':' + opt_port);
	        }
	    }
	    if (lang_1.isPresent(opt_path)) {
	        out.push(opt_path);
	    }
	    if (lang_1.isPresent(opt_queryData)) {
	        out.push('?' + opt_queryData);
	    }
	    if (lang_1.isPresent(opt_fragment)) {
	        out.push('#' + opt_fragment);
	    }
	    return out.join('');
	}
	/**
	 * A regular expression for breaking a URI into its component parts.
	 *
	 * {@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says
	 * As the "first-match-wins" algorithm is identical to the "greedy"
	 * disambiguation method used by POSIX regular expressions, it is natural and
	 * commonplace to use a regular expression for parsing the potential five
	 * components of a URI reference.
	 *
	 * The following line is the regular expression for breaking-down a
	 * well-formed URI reference into its components.
	 *
	 * <pre>
	 * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
	 *  12            3  4          5       6  7        8 9
	 * </pre>
	 *
	 * The numbers in the second line above are only to assist readability; they
	 * indicate the reference points for each subexpression (i.e., each paired
	 * parenthesis). We refer to the value matched for subexpression <n> as $<n>.
	 * For example, matching the above expression to
	 * <pre>
	 *     http://www.ics.uci.edu/pub/ietf/uri/#Related
	 * </pre>
	 * results in the following subexpression matches:
	 * <pre>
	 *    $1 = http:
	 *    $2 = http
	 *    $3 = //www.ics.uci.edu
	 *    $4 = www.ics.uci.edu
	 *    $5 = /pub/ietf/uri/
	 *    $6 = <undefined>
	 *    $7 = <undefined>
	 *    $8 = #Related
	 *    $9 = Related
	 * </pre>
	 * where <undefined> indicates that the component is not present, as is the
	 * case for the query component in the above example. Therefore, we can
	 * determine the value of the five components as
	 * <pre>
	 *    scheme    = $2
	 *    authority = $4
	 *    path      = $5
	 *    query     = $7
	 *    fragment  = $9
	 * </pre>
	 *
	 * The regular expression has been modified slightly to expose the
	 * userInfo, domain, and port separately from the authority.
	 * The modified version yields
	 * <pre>
	 *    $1 = http              scheme
	 *    $2 = <undefined>       userInfo -\
	 *    $3 = www.ics.uci.edu   domain     | authority
	 *    $4 = <undefined>       port     -/
	 *    $5 = /pub/ietf/uri/    path
	 *    $6 = <undefined>       query without ?
	 *    $7 = Related           fragment without #
	 * </pre>
	 * @type {!RegExp}
	 * @internal
	 */
	var _splitRe = lang_1.RegExpWrapper.create('^' +
	    '(?:' +
	    '([^:/?#.]+)' +
	    // used by other URL parts such as :,
	    // ?, /, #, and .
	    ':)?' +
	    '(?://' +
	    '(?:([^/?#]*)@)?' +
	    '([\\w\\d\\-\\u0100-\\uffff.%]*)' +
	    // digits, dashes, dots, percent
	    // escapes, and unicode characters.
	    '(?::([0-9]+))?' +
	    ')?' +
	    '([^?#]+)?' +
	    '(?:\\?([^#]*))?' +
	    '(?:#(.*))?' +
	    '$');
	/**
	 * The index of each URI component in the return value of goog.uri.utils.split.
	 * @enum {number}
	 */
	var _ComponentIndex;
	(function (_ComponentIndex) {
	    _ComponentIndex[_ComponentIndex["Scheme"] = 1] = "Scheme";
	    _ComponentIndex[_ComponentIndex["UserInfo"] = 2] = "UserInfo";
	    _ComponentIndex[_ComponentIndex["Domain"] = 3] = "Domain";
	    _ComponentIndex[_ComponentIndex["Port"] = 4] = "Port";
	    _ComponentIndex[_ComponentIndex["Path"] = 5] = "Path";
	    _ComponentIndex[_ComponentIndex["QueryData"] = 6] = "QueryData";
	    _ComponentIndex[_ComponentIndex["Fragment"] = 7] = "Fragment";
	})(_ComponentIndex || (_ComponentIndex = {}));
	/**
	 * Splits a URI into its component parts.
	 *
	 * Each component can be accessed via the component indices; for example:
	 * <pre>
	 * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];
	 * </pre>
	 *
	 * @param {string} uri The URI string to examine.
	 * @return {!Array.<string|undefined>} Each component still URI-encoded.
	 *     Each component that is present will contain the encoded value, whereas
	 *     components that are not present will be undefined or empty, depending
	 *     on the browser's regular expression implementation.  Never null, since
	 *     arbitrary strings may still look like path names.
	 */
	function _split(uri) {
	    return lang_1.RegExpWrapper.firstMatch(_splitRe, uri);
	}
	/**
	  * Removes dot segments in given path component, as described in
	  * RFC 3986, section 5.2.4.
	  *
	  * @param {string} path A non-empty path component.
	  * @return {string} Path component with removed dot segments.
	  */
	function _removeDotSegments(path) {
	    if (path == '/')
	        return '/';
	    var leadingSlash = path[0] == '/' ? '/' : '';
	    var trailingSlash = path[path.length - 1] === '/' ? '/' : '';
	    var segments = path.split('/');
	    var out = [];
	    var up = 0;
	    for (var pos = 0; pos < segments.length; pos++) {
	        var segment = segments[pos];
	        switch (segment) {
	            case '':
	            case '.':
	                break;
	            case '..':
	                if (out.length > 0) {
	                    out.pop();
	                }
	                else {
	                    up++;
	                }
	                break;
	            default:
	                out.push(segment);
	        }
	    }
	    if (leadingSlash == '') {
	        while (up-- > 0) {
	            out.unshift('..');
	        }
	        if (out.length === 0)
	            out.push('.');
	    }
	    return leadingSlash + out.join('/') + trailingSlash;
	}
	/**
	 * Takes an array of the parts from split and canonicalizes the path part
	 * and then joins all the parts.
	 * @param {Array.<string?>} parts
	 * @return {string}
	 */
	function _joinAndCanonicalizePath(parts) {
	    var path = parts[_ComponentIndex.Path];
	    path = lang_1.isBlank(path) ? '' : _removeDotSegments(path);
	    parts[_ComponentIndex.Path] = path;
	    return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
	}
	/**
	 * Resolves a URL.
	 * @param {string} base The URL acting as the base URL.
	 * @param {string} to The URL to resolve.
	 * @return {string}
	 */
	function _resolveUrl(base, url) {
	    var parts = _split(encodeURI(url));
	    var baseParts = _split(base);
	    if (lang_1.isPresent(parts[_ComponentIndex.Scheme])) {
	        return _joinAndCanonicalizePath(parts);
	    }
	    else {
	        parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
	    }
	    for (var i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {
	        if (lang_1.isBlank(parts[i])) {
	            parts[i] = baseParts[i];
	        }
	    }
	    if (parts[_ComponentIndex.Path][0] == '/') {
	        return _joinAndCanonicalizePath(parts);
	    }
	    var path = baseParts[_ComponentIndex.Path];
	    if (lang_1.isBlank(path))
	        path = '/';
	    var index = path.lastIndexOf('/');
	    path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];
	    parts[_ComponentIndex.Path] = path;
	    return _joinAndCanonicalizePath(parts);
	}
	//# sourceMappingURL=url_resolver.js.map

/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';// Some of the code comes from WebComponents.JS
	// https://github.com/webcomponents/webcomponentsjs/blob/master/src/HTMLImports/path.js
	var lang_1 = __webpack_require__(49);
	var StyleWithImports = (function () {
	    function StyleWithImports(style, styleUrls) {
	        this.style = style;
	        this.styleUrls = styleUrls;
	    }
	    return StyleWithImports;
	})();
	exports.StyleWithImports = StyleWithImports;
	function isStyleUrlResolvable(url) {
	    if (lang_1.isBlank(url) || url.length === 0 || url[0] == '/')
	        return false;
	    var schemeMatch = lang_1.RegExpWrapper.firstMatch(_urlWithSchemaRe, url);
	    return lang_1.isBlank(schemeMatch) || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';
	}
	exports.isStyleUrlResolvable = isStyleUrlResolvable;
	/**
	 * Rewrites stylesheets by resolving and removing the @import urls that
	 * are either relative or don't have a `package:` scheme
	 */
	function extractStyleUrls(resolver, baseUrl, cssText) {
	    var foundUrls = [];
	    var modifiedCssText = lang_1.StringWrapper.replaceAllMapped(cssText, _cssImportRe, function (m) {
	        var url = lang_1.isPresent(m[1]) ? m[1] : m[2];
	        if (!isStyleUrlResolvable(url)) {
	            // Do not attempt to resolve non-package absolute URLs with URI scheme
	            return m[0];
	        }
	        foundUrls.push(resolver.resolve(baseUrl, url));
	        return '';
	    });
	    return new StyleWithImports(modifiedCssText, foundUrls);
	}
	exports.extractStyleUrls = extractStyleUrls;
	var _cssImportRe = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g;
	// TODO: can't use /^[^:/?#.]+:/g due to clang-format bug:
	//       https://github.com/angular/angular/issues/4596
	var _urlWithSchemaRe = /^([a-zA-Z\-\+\.]+):/g;
	//# sourceMappingURL=style_url_resolver.js.map

/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(49);
	var collection_1 = __webpack_require__(202);
	var template_commands_1 = __webpack_require__(284);
	var template_ast_1 = __webpack_require__(347);
	var source_module_1 = __webpack_require__(344);
	var util_1 = __webpack_require__(343);
	var di_1 = __webpack_require__(196);
	exports.TEMPLATE_COMMANDS_MODULE_REF = source_module_1.moduleRef("package:angular2/src/core/linker/template_commands" + util_1.MODULE_SUFFIX);
	var IMPLICIT_TEMPLATE_VAR = '\$implicit';
	var CLASS_ATTR = 'class';
	var STYLE_ATTR = 'style';
	var CommandCompiler = (function () {
	    function CommandCompiler() {
	    }
	    CommandCompiler.prototype.compileComponentRuntime = function (component, template, changeDetectorFactories, componentTemplateFactory) {
	        var visitor = new CommandBuilderVisitor(new RuntimeCommandFactory(component, componentTemplateFactory, changeDetectorFactories), 0);
	        template_ast_1.templateVisitAll(visitor, template);
	        return visitor.result;
	    };
	    CommandCompiler.prototype.compileComponentCodeGen = function (component, template, changeDetectorFactoryExpressions, componentTemplateFactory) {
	        var visitor = new CommandBuilderVisitor(new CodegenCommandFactory(component, componentTemplateFactory, changeDetectorFactoryExpressions), 0);
	        template_ast_1.templateVisitAll(visitor, template);
	        return new source_module_1.SourceExpression([], codeGenArray(visitor.result));
	    };
	    CommandCompiler = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], CommandCompiler);
	    return CommandCompiler;
	})();
	exports.CommandCompiler = CommandCompiler;
	var RuntimeCommandFactory = (function () {
	    function RuntimeCommandFactory(component, componentTemplateFactory, changeDetectorFactories) {
	        this.component = component;
	        this.componentTemplateFactory = componentTemplateFactory;
	        this.changeDetectorFactories = changeDetectorFactories;
	    }
	    RuntimeCommandFactory.prototype._mapDirectives = function (directives) {
	        return directives.map(function (directive) { return directive.type.runtime; });
	    };
	    RuntimeCommandFactory.prototype.createText = function (value, isBound, ngContentIndex) {
	        return new template_commands_1.TextCmd(value, isBound, ngContentIndex);
	    };
	    RuntimeCommandFactory.prototype.createNgContent = function (index, ngContentIndex) {
	        return new template_commands_1.NgContentCmd(index, ngContentIndex);
	    };
	    RuntimeCommandFactory.prototype.createBeginElement = function (name, attrNameAndValues, eventTargetAndNames, variableNameAndValues, directives, isBound, ngContentIndex) {
	        return new template_commands_1.BeginElementCmd(name, attrNameAndValues, eventTargetAndNames, variableNameAndValues, this._mapDirectives(directives), isBound, ngContentIndex);
	    };
	    RuntimeCommandFactory.prototype.createEndElement = function () { return new template_commands_1.EndElementCmd(); };
	    RuntimeCommandFactory.prototype.createBeginComponent = function (name, attrNameAndValues, eventTargetAndNames, variableNameAndValues, directives, encapsulation, ngContentIndex) {
	        var nestedTemplateAccessor = this.componentTemplateFactory(directives[0]);
	        return new template_commands_1.BeginComponentCmd(name, attrNameAndValues, eventTargetAndNames, variableNameAndValues, this._mapDirectives(directives), encapsulation, ngContentIndex, nestedTemplateAccessor);
	    };
	    RuntimeCommandFactory.prototype.createEndComponent = function () { return new template_commands_1.EndComponentCmd(); };
	    RuntimeCommandFactory.prototype.createEmbeddedTemplate = function (embeddedTemplateIndex, attrNameAndValues, variableNameAndValues, directives, isMerged, ngContentIndex, children) {
	        return new template_commands_1.EmbeddedTemplateCmd(attrNameAndValues, variableNameAndValues, this._mapDirectives(directives), isMerged, ngContentIndex, this.changeDetectorFactories[embeddedTemplateIndex], children);
	    };
	    return RuntimeCommandFactory;
	})();
	var CodegenCommandFactory = (function () {
	    function CodegenCommandFactory(component, componentTemplateFactory, changeDetectorFactoryExpressions) {
	        this.component = component;
	        this.componentTemplateFactory = componentTemplateFactory;
	        this.changeDetectorFactoryExpressions = changeDetectorFactoryExpressions;
	    }
	    CodegenCommandFactory.prototype.createText = function (value, isBound, ngContentIndex) {
	        return new Expression(util_1.codeGenConstConstructorCall(exports.TEMPLATE_COMMANDS_MODULE_REF + 'TextCmd') + "(" + util_1.escapeSingleQuoteString(value) + ", " + isBound + ", " + ngContentIndex + ")");
	    };
	    CodegenCommandFactory.prototype.createNgContent = function (index, ngContentIndex) {
	        return new Expression(util_1.codeGenConstConstructorCall(exports.TEMPLATE_COMMANDS_MODULE_REF + 'NgContentCmd') + "(" + index + ", " + ngContentIndex + ")");
	    };
	    CodegenCommandFactory.prototype.createBeginElement = function (name, attrNameAndValues, eventTargetAndNames, variableNameAndValues, directives, isBound, ngContentIndex) {
	        var attrsExpression = codeGenArray(attrNameAndValues);
	        return new Expression((util_1.codeGenConstConstructorCall(exports.TEMPLATE_COMMANDS_MODULE_REF + 'BeginElementCmd') + "(" + util_1.escapeSingleQuoteString(name) + ", " + attrsExpression + ", ") +
	            (codeGenArray(eventTargetAndNames) + ", " + codeGenArray(variableNameAndValues) + ", " + codeGenDirectivesArray(directives) + ", " + isBound + ", " + ngContentIndex + ")"));
	    };
	    CodegenCommandFactory.prototype.createEndElement = function () {
	        return new Expression(util_1.codeGenConstConstructorCall(exports.TEMPLATE_COMMANDS_MODULE_REF + 'EndElementCmd') + "()");
	    };
	    CodegenCommandFactory.prototype.createBeginComponent = function (name, attrNameAndValues, eventTargetAndNames, variableNameAndValues, directives, encapsulation, ngContentIndex) {
	        var attrsExpression = codeGenArray(attrNameAndValues);
	        return new Expression((util_1.codeGenConstConstructorCall(exports.TEMPLATE_COMMANDS_MODULE_REF + 'BeginComponentCmd') + "(" + util_1.escapeSingleQuoteString(name) + ", " + attrsExpression + ", ") +
	            (codeGenArray(eventTargetAndNames) + ", " + codeGenArray(variableNameAndValues) + ", " + codeGenDirectivesArray(directives) + ", " + codeGenViewEncapsulation(encapsulation) + ", " + ngContentIndex + ", " + this.componentTemplateFactory(directives[0]) + ")"));
	    };
	    CodegenCommandFactory.prototype.createEndComponent = function () {
	        return new Expression(util_1.codeGenConstConstructorCall(exports.TEMPLATE_COMMANDS_MODULE_REF + 'EndComponentCmd') + "()");
	    };
	    CodegenCommandFactory.prototype.createEmbeddedTemplate = function (embeddedTemplateIndex, attrNameAndValues, variableNameAndValues, directives, isMerged, ngContentIndex, children) {
	        return new Expression((util_1.codeGenConstConstructorCall(exports.TEMPLATE_COMMANDS_MODULE_REF + 'EmbeddedTemplateCmd') + "(" + codeGenArray(attrNameAndValues) + ", " + codeGenArray(variableNameAndValues) + ", ") +
	            (codeGenDirectivesArray(directives) + ", " + isMerged + ", " + ngContentIndex + ", " + this.changeDetectorFactoryExpressions[embeddedTemplateIndex] + ", " + codeGenArray(children) + ")"));
	    };
	    return CodegenCommandFactory;
	})();
	function visitAndReturnContext(visitor, asts, context) {
	    template_ast_1.templateVisitAll(visitor, asts, context);
	    return context;
	}
	var CommandBuilderVisitor = (function () {
	    function CommandBuilderVisitor(commandFactory, embeddedTemplateIndex) {
	        this.commandFactory = commandFactory;
	        this.embeddedTemplateIndex = embeddedTemplateIndex;
	        this.result = [];
	        this.transitiveNgContentCount = 0;
	    }
	    CommandBuilderVisitor.prototype._readAttrNameAndValues = function (directives, attrAsts) {
	        var attrs = keyValueArrayToMap(visitAndReturnContext(this, attrAsts, []));
	        directives.forEach(function (directiveMeta) {
	            collection_1.StringMapWrapper.forEach(directiveMeta.hostAttributes, function (value, name) {
	                var prevValue = attrs[name];
	                attrs[name] = lang_1.isPresent(prevValue) ? mergeAttributeValue(name, prevValue, value) : value;
	            });
	        });
	        return mapToKeyValueArray(attrs);
	    };
	    CommandBuilderVisitor.prototype.visitNgContent = function (ast, context) {
	        this.transitiveNgContentCount++;
	        this.result.push(this.commandFactory.createNgContent(ast.index, ast.ngContentIndex));
	        return null;
	    };
	    CommandBuilderVisitor.prototype.visitEmbeddedTemplate = function (ast, context) {
	        var _this = this;
	        this.embeddedTemplateIndex++;
	        var childVisitor = new CommandBuilderVisitor(this.commandFactory, this.embeddedTemplateIndex);
	        template_ast_1.templateVisitAll(childVisitor, ast.children);
	        var isMerged = childVisitor.transitiveNgContentCount > 0;
	        var variableNameAndValues = [];
	        ast.vars.forEach(function (varAst) {
	            variableNameAndValues.push(varAst.name);
	            variableNameAndValues.push(varAst.value.length > 0 ? varAst.value : IMPLICIT_TEMPLATE_VAR);
	        });
	        var directives = [];
	        collection_1.ListWrapper.forEachWithIndex(ast.directives, function (directiveAst, index) {
	            directiveAst.visit(_this, new DirectiveContext(index, [], [], directives));
	        });
	        this.result.push(this.commandFactory.createEmbeddedTemplate(this.embeddedTemplateIndex, this._readAttrNameAndValues(directives, ast.attrs), variableNameAndValues, directives, isMerged, ast.ngContentIndex, childVisitor.result));
	        this.transitiveNgContentCount += childVisitor.transitiveNgContentCount;
	        this.embeddedTemplateIndex = childVisitor.embeddedTemplateIndex;
	        return null;
	    };
	    CommandBuilderVisitor.prototype.visitElement = function (ast, context) {
	        var _this = this;
	        var component = ast.getComponent();
	        var eventTargetAndNames = visitAndReturnContext(this, ast.outputs, []);
	        var variableNameAndValues = [];
	        if (lang_1.isBlank(component)) {
	            ast.exportAsVars.forEach(function (varAst) {
	                variableNameAndValues.push(varAst.name);
	                variableNameAndValues.push(null);
	            });
	        }
	        var directives = [];
	        collection_1.ListWrapper.forEachWithIndex(ast.directives, function (directiveAst, index) {
	            directiveAst.visit(_this, new DirectiveContext(index, eventTargetAndNames, variableNameAndValues, directives));
	        });
	        eventTargetAndNames = removeKeyValueArrayDuplicates(eventTargetAndNames);
	        var attrNameAndValues = this._readAttrNameAndValues(directives, ast.attrs);
	        if (lang_1.isPresent(component)) {
	            this.result.push(this.commandFactory.createBeginComponent(ast.name, attrNameAndValues, eventTargetAndNames, variableNameAndValues, directives, component.template.encapsulation, ast.ngContentIndex));
	            template_ast_1.templateVisitAll(this, ast.children);
	            this.result.push(this.commandFactory.createEndComponent());
	        }
	        else {
	            this.result.push(this.commandFactory.createBeginElement(ast.name, attrNameAndValues, eventTargetAndNames, variableNameAndValues, directives, ast.isBound(), ast.ngContentIndex));
	            template_ast_1.templateVisitAll(this, ast.children);
	            this.result.push(this.commandFactory.createEndElement());
	        }
	        return null;
	    };
	    CommandBuilderVisitor.prototype.visitVariable = function (ast, ctx) { return null; };
	    CommandBuilderVisitor.prototype.visitAttr = function (ast, attrNameAndValues) {
	        attrNameAndValues.push(ast.name);
	        attrNameAndValues.push(ast.value);
	        return null;
	    };
	    CommandBuilderVisitor.prototype.visitBoundText = function (ast, context) {
	        this.result.push(this.commandFactory.createText(null, true, ast.ngContentIndex));
	        return null;
	    };
	    CommandBuilderVisitor.prototype.visitText = function (ast, context) {
	        this.result.push(this.commandFactory.createText(ast.value, false, ast.ngContentIndex));
	        return null;
	    };
	    CommandBuilderVisitor.prototype.visitDirective = function (ast, ctx) {
	        ctx.targetDirectives.push(ast.directive);
	        template_ast_1.templateVisitAll(this, ast.hostEvents, ctx.eventTargetAndNames);
	        ast.exportAsVars.forEach(function (varAst) {
	            ctx.targetVariableNameAndValues.push(varAst.name);
	            ctx.targetVariableNameAndValues.push(ctx.index);
	        });
	        return null;
	    };
	    CommandBuilderVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) {
	        eventTargetAndNames.push(ast.target);
	        eventTargetAndNames.push(ast.name);
	        return null;
	    };
	    CommandBuilderVisitor.prototype.visitDirectiveProperty = function (ast, context) { return null; };
	    CommandBuilderVisitor.prototype.visitElementProperty = function (ast, context) { return null; };
	    return CommandBuilderVisitor;
	})();
	function removeKeyValueArrayDuplicates(keyValueArray) {
	    var knownPairs = new Set();
	    var resultKeyValueArray = [];
	    for (var i = 0; i < keyValueArray.length; i += 2) {
	        var key = keyValueArray[i];
	        var value = keyValueArray[i + 1];
	        var pairId = key + ":" + value;
	        if (!collection_1.SetWrapper.has(knownPairs, pairId)) {
	            resultKeyValueArray.push(key);
	            resultKeyValueArray.push(value);
	            knownPairs.add(pairId);
	        }
	    }
	    return resultKeyValueArray;
	}
	function keyValueArrayToMap(keyValueArr) {
	    var data = {};
	    for (var i = 0; i < keyValueArr.length; i += 2) {
	        data[keyValueArr[i]] = keyValueArr[i + 1];
	    }
	    return data;
	}
	function mapToKeyValueArray(data) {
	    var entryArray = [];
	    collection_1.StringMapWrapper.forEach(data, function (value, name) { entryArray.push([name, value]); });
	    // We need to sort to get a defined output order
	    // for tests and for caching generated artifacts...
	    collection_1.ListWrapper.sort(entryArray, function (entry1, entry2) { return lang_1.StringWrapper.compare(entry1[0], entry2[0]); });
	    var keyValueArray = [];
	    entryArray.forEach(function (entry) {
	        keyValueArray.push(entry[0]);
	        keyValueArray.push(entry[1]);
	    });
	    return keyValueArray;
	}
	function mergeAttributeValue(attrName, attrValue1, attrValue2) {
	    if (attrName == CLASS_ATTR || attrName == STYLE_ATTR) {
	        return attrValue1 + " " + attrValue2;
	    }
	    else {
	        return attrValue2;
	    }
	}
	var DirectiveContext = (function () {
	    function DirectiveContext(index, eventTargetAndNames, targetVariableNameAndValues, targetDirectives) {
	        this.index = index;
	        this.eventTargetAndNames = eventTargetAndNames;
	        this.targetVariableNameAndValues = targetVariableNameAndValues;
	        this.targetDirectives = targetDirectives;
	    }
	    return DirectiveContext;
	})();
	var Expression = (function () {
	    function Expression(value) {
	        this.value = value;
	    }
	    return Expression;
	})();
	function escapeValue(value) {
	    if (value instanceof Expression) {
	        return value.value;
	    }
	    else if (lang_1.isString(value)) {
	        return util_1.escapeSingleQuoteString(value);
	    }
	    else if (lang_1.isBlank(value)) {
	        return 'null';
	    }
	    else {
	        return "" + value;
	    }
	}
	function codeGenArray(data) {
	    var base = "[" + data.map(escapeValue).join(',') + "]";
	    return lang_1.IS_DART ? "const " + base : base;
	}
	function codeGenDirectivesArray(directives) {
	    var expressions = directives.map(function (directiveType) { return ("" + source_module_1.moduleRef(directiveType.type.moduleUrl) + directiveType.type.name); });
	    var base = "[" + expressions.join(',') + "]";
	    return lang_1.IS_DART ? "const " + base : base;
	}
	function codeGenViewEncapsulation(value) {
	    if (lang_1.IS_DART) {
	        return "" + exports.TEMPLATE_COMMANDS_MODULE_REF + value;
	    }
	    else {
	        return "" + value;
	    }
	}
	//# sourceMappingURL=command_compiler.js.map

/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var collection_1 = __webpack_require__(202);
	var lang_1 = __webpack_require__(49);
	var di_1 = __webpack_require__(196);
	var exceptions_1 = __webpack_require__(204);
	var change_detection_1 = __webpack_require__(215);
	var html_parser_1 = __webpack_require__(356);
	var template_ast_1 = __webpack_require__(347);
	var selector_1 = __webpack_require__(342);
	var element_schema_registry_1 = __webpack_require__(358);
	var template_preparser_1 = __webpack_require__(359);
	var style_url_resolver_1 = __webpack_require__(353);
	var html_ast_1 = __webpack_require__(357);
	var util_1 = __webpack_require__(343);
	// Group 1 = "bind-"
	// Group 2 = "var-" or "#"
	// Group 3 = "on-"
	// Group 4 = "bindon-"
	// Group 5 = the identifier after "bind-", "var-/#", or "on-"
	// Group 6 = idenitifer inside [()]
	// Group 7 = idenitifer inside []
	// Group 8 = identifier inside ()
	var BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(var-|#)|(on-)|(bindon-))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/g;
	var TEMPLATE_ELEMENT = 'template';
	var TEMPLATE_ATTR = 'template';
	var TEMPLATE_ATTR_PREFIX = '*';
	var CLASS_ATTR = 'class';
	var PROPERTY_PARTS_SEPARATOR = new RegExp('\\.');
	var ATTRIBUTE_PREFIX = 'attr';
	var CLASS_PREFIX = 'class';
	var STYLE_PREFIX = 'style';
	var TEXT_CSS_SELECTOR = selector_1.CssSelector.parse('*')[0];
	var TemplateParser = (function () {
	    function TemplateParser(_exprParser, _schemaRegistry, _htmlParser) {
	        this._exprParser = _exprParser;
	        this._schemaRegistry = _schemaRegistry;
	        this._htmlParser = _htmlParser;
	    }
	    TemplateParser.prototype.parse = function (template, directives, sourceInfo) {
	        var parseVisitor = new TemplateParseVisitor(directives, this._exprParser, this._schemaRegistry);
	        var result = html_ast_1.htmlVisitAll(parseVisitor, this._htmlParser.parse(template, sourceInfo), EMPTY_COMPONENT);
	        if (parseVisitor.errors.length > 0) {
	            var errorString = parseVisitor.errors.join('\n');
	            throw new exceptions_1.BaseException("Template parse errors:\n" + errorString);
	        }
	        return result;
	    };
	    TemplateParser = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [change_detection_1.Parser, element_schema_registry_1.ElementSchemaRegistry, html_parser_1.HtmlParser])
	    ], TemplateParser);
	    return TemplateParser;
	})();
	exports.TemplateParser = TemplateParser;
	var TemplateParseVisitor = (function () {
	    function TemplateParseVisitor(directives, _exprParser, _schemaRegistry) {
	        var _this = this;
	        this._exprParser = _exprParser;
	        this._schemaRegistry = _schemaRegistry;
	        this.errors = [];
	        this.directivesIndex = new Map();
	        this.ngContentCount = 0;
	        this.selectorMatcher = new selector_1.SelectorMatcher();
	        collection_1.ListWrapper.forEachWithIndex(directives, function (directive, index) {
	            var selector = selector_1.CssSelector.parse(directive.selector);
	            _this.selectorMatcher.addSelectables(selector, directive);
	            _this.directivesIndex.set(directive, index);
	        });
	    }
	    TemplateParseVisitor.prototype._reportError = function (message) { this.errors.push(message); };
	    TemplateParseVisitor.prototype._parseInterpolation = function (value, sourceInfo) {
	        try {
	            return this._exprParser.parseInterpolation(value, sourceInfo);
	        }
	        catch (e) {
	            this._reportError("" + e); // sourceInfo is already contained in the AST
	            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	        }
	    };
	    TemplateParseVisitor.prototype._parseAction = function (value, sourceInfo) {
	        try {
	            return this._exprParser.parseAction(value, sourceInfo);
	        }
	        catch (e) {
	            this._reportError("" + e); // sourceInfo is already contained in the AST
	            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	        }
	    };
	    TemplateParseVisitor.prototype._parseBinding = function (value, sourceInfo) {
	        try {
	            return this._exprParser.parseBinding(value, sourceInfo);
	        }
	        catch (e) {
	            this._reportError("" + e); // sourceInfo is already contained in the AST
	            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	        }
	    };
	    TemplateParseVisitor.prototype._parseTemplateBindings = function (value, sourceInfo) {
	        try {
	            return this._exprParser.parseTemplateBindings(value, sourceInfo);
	        }
	        catch (e) {
	            this._reportError("" + e); // sourceInfo is already contained in the AST
	            return [];
	        }
	    };
	    TemplateParseVisitor.prototype.visitText = function (ast, component) {
	        var ngContentIndex = component.findNgContentIndex(TEXT_CSS_SELECTOR);
	        var expr = this._parseInterpolation(ast.value, ast.sourceInfo);
	        if (lang_1.isPresent(expr)) {
	            return new template_ast_1.BoundTextAst(expr, ngContentIndex, ast.sourceInfo);
	        }
	        else {
	            return new template_ast_1.TextAst(ast.value, ngContentIndex, ast.sourceInfo);
	        }
	    };
	    TemplateParseVisitor.prototype.visitAttr = function (ast, contex) {
	        return new template_ast_1.AttrAst(ast.name, ast.value, ast.sourceInfo);
	    };
	    TemplateParseVisitor.prototype.visitElement = function (element, component) {
	        var _this = this;
	        var nodeName = element.name;
	        var preparsedElement = template_preparser_1.preparseElement(element);
	        if (preparsedElement.type === template_preparser_1.PreparsedElementType.SCRIPT ||
	            preparsedElement.type === template_preparser_1.PreparsedElementType.STYLE) {
	            // Skipping <script> for security reasons
	            // Skipping <style> as we already processed them
	            // in the StyleCompiler
	            return null;
	        }
	        if (preparsedElement.type === template_preparser_1.PreparsedElementType.STYLESHEET &&
	            style_url_resolver_1.isStyleUrlResolvable(preparsedElement.hrefAttr)) {
	            // Skipping stylesheets with either relative urls or package scheme as we already processed
	            // them
	            // in the StyleCompiler
	            return null;
	        }
	        var matchableAttrs = [];
	        var elementOrDirectiveProps = [];
	        var vars = [];
	        var events = [];
	        var templateElementOrDirectiveProps = [];
	        var templateVars = [];
	        var templateMatchableAttrs = [];
	        var hasInlineTemplates = false;
	        var attrs = [];
	        element.attrs.forEach(function (attr) {
	            matchableAttrs.push([attr.name, attr.value]);
	            var hasBinding = _this._parseAttr(attr, matchableAttrs, elementOrDirectiveProps, events, vars);
	            var hasTemplateBinding = _this._parseInlineTemplateBinding(attr, templateMatchableAttrs, templateElementOrDirectiveProps, templateVars);
	            if (!hasBinding && !hasTemplateBinding) {
	                // don't include the bindings as attributes as well in the AST
	                attrs.push(_this.visitAttr(attr, null));
	            }
	            if (hasTemplateBinding) {
	                hasInlineTemplates = true;
	            }
	        });
	        var isTemplateElement = nodeName == TEMPLATE_ELEMENT;
	        var elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);
	        var directives = this._createDirectiveAsts(element.name, this._parseDirectives(this.selectorMatcher, elementCssSelector), elementOrDirectiveProps, isTemplateElement ? [] : vars, element.sourceInfo);
	        var elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, directives);
	        var children = html_ast_1.htmlVisitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, Component.create(directives));
	        var elementNgContentIndex = hasInlineTemplates ? null : component.findNgContentIndex(elementCssSelector);
	        var parsedElement;
	        if (preparsedElement.type === template_preparser_1.PreparsedElementType.NG_CONTENT) {
	            parsedElement =
	                new template_ast_1.NgContentAst(this.ngContentCount++, elementNgContentIndex, element.sourceInfo);
	        }
	        else if (isTemplateElement) {
	            this._assertAllEventsPublishedByDirectives(directives, events, element.sourceInfo);
	            this._assertNoComponentsNorElementBindingsOnTemplate(directives, elementProps, element.sourceInfo);
	            parsedElement = new template_ast_1.EmbeddedTemplateAst(attrs, events, vars, directives, children, elementNgContentIndex, element.sourceInfo);
	        }
	        else {
	            this._assertOnlyOneComponent(directives, element.sourceInfo);
	            var elementExportAsVars = vars.filter(function (varAst) { return varAst.value.length === 0; });
	            parsedElement =
	                new template_ast_1.ElementAst(nodeName, attrs, elementProps, events, elementExportAsVars, directives, children, elementNgContentIndex, element.sourceInfo);
	        }
	        if (hasInlineTemplates) {
	            var templateCssSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);
	            var templateDirectives = this._createDirectiveAsts(element.name, this._parseDirectives(this.selectorMatcher, templateCssSelector), templateElementOrDirectiveProps, [], element.sourceInfo);
	            var templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateDirectives);
	            this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectives, templateElementProps, element.sourceInfo);
	            parsedElement = new template_ast_1.EmbeddedTemplateAst([], [], templateVars, templateDirectives, [parsedElement], component.findNgContentIndex(templateCssSelector), element.sourceInfo);
	        }
	        return parsedElement;
	    };
	    TemplateParseVisitor.prototype._parseInlineTemplateBinding = function (attr, targetMatchableAttrs, targetProps, targetVars) {
	        var templateBindingsSource = null;
	        if (attr.name == TEMPLATE_ATTR) {
	            templateBindingsSource = attr.value;
	        }
	        else if (attr.name.startsWith(TEMPLATE_ATTR_PREFIX)) {
	            var key = attr.name.substring(TEMPLATE_ATTR_PREFIX.length); // remove the star
	            templateBindingsSource = (attr.value.length == 0) ? key : key + ' ' + attr.value;
	        }
	        if (lang_1.isPresent(templateBindingsSource)) {
	            var bindings = this._parseTemplateBindings(templateBindingsSource, attr.sourceInfo);
	            for (var i = 0; i < bindings.length; i++) {
	                var binding = bindings[i];
	                var dashCaseKey = util_1.camelCaseToDashCase(binding.key);
	                if (binding.keyIsVar) {
	                    targetVars.push(new template_ast_1.VariableAst(util_1.dashCaseToCamelCase(binding.key), binding.name, attr.sourceInfo));
	                    targetMatchableAttrs.push([dashCaseKey, binding.name]);
	                }
	                else if (lang_1.isPresent(binding.expression)) {
	                    this._parsePropertyAst(dashCaseKey, binding.expression, attr.sourceInfo, targetMatchableAttrs, targetProps);
	                }
	                else {
	                    targetMatchableAttrs.push([dashCaseKey, '']);
	                    this._parseLiteralAttr(dashCaseKey, null, attr.sourceInfo, targetProps);
	                }
	            }
	            return true;
	        }
	        return false;
	    };
	    TemplateParseVisitor.prototype._parseAttr = function (attr, targetMatchableAttrs, targetProps, targetEvents, targetVars) {
	        var attrName = this._normalizeAttributeName(attr.name);
	        var attrValue = attr.value;
	        var bindParts = lang_1.RegExpWrapper.firstMatch(BIND_NAME_REGEXP, attrName);
	        var hasBinding = false;
	        if (lang_1.isPresent(bindParts)) {
	            hasBinding = true;
	            if (lang_1.isPresent(bindParts[1])) {
	                this._parseProperty(bindParts[5], attrValue, attr.sourceInfo, targetMatchableAttrs, targetProps);
	            }
	            else if (lang_1.isPresent(bindParts[2])) {
	                var identifier = bindParts[5];
	                this._parseVariable(identifier, attrValue, attr.sourceInfo, targetVars);
	            }
	            else if (lang_1.isPresent(bindParts[3])) {
	                this._parseEvent(bindParts[5], attrValue, attr.sourceInfo, targetMatchableAttrs, targetEvents);
	            }
	            else if (lang_1.isPresent(bindParts[4])) {
	                this._parseProperty(bindParts[5], attrValue, attr.sourceInfo, targetMatchableAttrs, targetProps);
	                this._parseAssignmentEvent(bindParts[5], attrValue, attr.sourceInfo, targetMatchableAttrs, targetEvents);
	            }
	            else if (lang_1.isPresent(bindParts[6])) {
	                this._parseProperty(bindParts[6], attrValue, attr.sourceInfo, targetMatchableAttrs, targetProps);
	                this._parseAssignmentEvent(bindParts[6], attrValue, attr.sourceInfo, targetMatchableAttrs, targetEvents);
	            }
	            else if (lang_1.isPresent(bindParts[7])) {
	                this._parseProperty(bindParts[7], attrValue, attr.sourceInfo, targetMatchableAttrs, targetProps);
	            }
	            else if (lang_1.isPresent(bindParts[8])) {
	                this._parseEvent(bindParts[8], attrValue, attr.sourceInfo, targetMatchableAttrs, targetEvents);
	            }
	        }
	        else {
	            hasBinding = this._parsePropertyInterpolation(attrName, attrValue, attr.sourceInfo, targetMatchableAttrs, targetProps);
	        }
	        if (!hasBinding) {
	            this._parseLiteralAttr(attrName, attrValue, attr.sourceInfo, targetProps);
	        }
	        return hasBinding;
	    };
	    TemplateParseVisitor.prototype._normalizeAttributeName = function (attrName) {
	        return attrName.startsWith('data-') ? attrName.substring(5) : attrName;
	    };
	    TemplateParseVisitor.prototype._parseVariable = function (identifier, value, sourceInfo, targetVars) {
	        targetVars.push(new template_ast_1.VariableAst(util_1.dashCaseToCamelCase(identifier), value, sourceInfo));
	    };
	    TemplateParseVisitor.prototype._parseProperty = function (name, expression, sourceInfo, targetMatchableAttrs, targetProps) {
	        this._parsePropertyAst(name, this._parseBinding(expression, sourceInfo), sourceInfo, targetMatchableAttrs, targetProps);
	    };
	    TemplateParseVisitor.prototype._parsePropertyInterpolation = function (name, value, sourceInfo, targetMatchableAttrs, targetProps) {
	        var expr = this._parseInterpolation(value, sourceInfo);
	        if (lang_1.isPresent(expr)) {
	            this._parsePropertyAst(name, expr, sourceInfo, targetMatchableAttrs, targetProps);
	            return true;
	        }
	        return false;
	    };
	    TemplateParseVisitor.prototype._parsePropertyAst = function (name, ast, sourceInfo, targetMatchableAttrs, targetProps) {
	        targetMatchableAttrs.push([name, ast.source]);
	        targetProps.push(new BoundElementOrDirectiveProperty(name, ast, false, sourceInfo));
	    };
	    TemplateParseVisitor.prototype._parseAssignmentEvent = function (name, expression, sourceInfo, targetMatchableAttrs, targetEvents) {
	        this._parseEvent(name + "-change", expression + "=$event", sourceInfo, targetMatchableAttrs, targetEvents);
	    };
	    TemplateParseVisitor.prototype._parseEvent = function (name, expression, sourceInfo, targetMatchableAttrs, targetEvents) {
	        // long format: 'target: eventName'
	        var parts = util_1.splitAtColon(name, [null, name]);
	        var target = parts[0];
	        var eventName = parts[1];
	        targetEvents.push(new template_ast_1.BoundEventAst(util_1.dashCaseToCamelCase(eventName), target, this._parseAction(expression, sourceInfo), sourceInfo));
	        // Don't detect directives for event names for now,
	        // so don't add the event name to the matchableAttrs
	    };
	    TemplateParseVisitor.prototype._parseLiteralAttr = function (name, value, sourceInfo, targetProps) {
	        targetProps.push(new BoundElementOrDirectiveProperty(util_1.dashCaseToCamelCase(name), this._exprParser.wrapLiteralPrimitive(value, sourceInfo), true, sourceInfo));
	    };
	    TemplateParseVisitor.prototype._parseDirectives = function (selectorMatcher, elementCssSelector) {
	        var _this = this;
	        var directives = [];
	        selectorMatcher.match(elementCssSelector, function (selector, directive) { directives.push(directive); });
	        // Need to sort the directives so that we get consistent results throughout,
	        // as selectorMatcher uses Maps inside.
	        // Also need to make components the first directive in the array
	        collection_1.ListWrapper.sort(directives, function (dir1, dir2) {
	            var dir1Comp = dir1.isComponent;
	            var dir2Comp = dir2.isComponent;
	            if (dir1Comp && !dir2Comp) {
	                return -1;
	            }
	            else if (!dir1Comp && dir2Comp) {
	                return 1;
	            }
	            else {
	                return _this.directivesIndex.get(dir1) - _this.directivesIndex.get(dir2);
	            }
	        });
	        return directives;
	    };
	    TemplateParseVisitor.prototype._createDirectiveAsts = function (elementName, directives, props, possibleExportAsVars, sourceInfo) {
	        var _this = this;
	        var matchedVariables = new Set();
	        var directiveAsts = directives.map(function (directive) {
	            var hostProperties = [];
	            var hostEvents = [];
	            var directiveProperties = [];
	            _this._createDirectiveHostPropertyAsts(elementName, directive.hostProperties, sourceInfo, hostProperties);
	            _this._createDirectiveHostEventAsts(directive.hostListeners, sourceInfo, hostEvents);
	            _this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties);
	            var exportAsVars = [];
	            possibleExportAsVars.forEach(function (varAst) {
	                if ((varAst.value.length === 0 && directive.isComponent) ||
	                    (directive.exportAs == varAst.value)) {
	                    exportAsVars.push(varAst);
	                    matchedVariables.add(varAst.name);
	                }
	            });
	            return new template_ast_1.DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, exportAsVars, sourceInfo);
	        });
	        possibleExportAsVars.forEach(function (varAst) {
	            if (varAst.value.length > 0 && !collection_1.SetWrapper.has(matchedVariables, varAst.name)) {
	                _this._reportError("There is no directive with \"exportAs\" set to \"" + varAst.value + "\" at " + varAst.sourceInfo);
	            }
	        });
	        return directiveAsts;
	    };
	    TemplateParseVisitor.prototype._createDirectiveHostPropertyAsts = function (elementName, hostProps, sourceInfo, targetPropertyAsts) {
	        var _this = this;
	        if (lang_1.isPresent(hostProps)) {
	            collection_1.StringMapWrapper.forEach(hostProps, function (expression, propName) {
	                var exprAst = _this._parseBinding(expression, sourceInfo);
	                targetPropertyAsts.push(_this._createElementPropertyAst(elementName, propName, exprAst, sourceInfo));
	            });
	        }
	    };
	    TemplateParseVisitor.prototype._createDirectiveHostEventAsts = function (hostListeners, sourceInfo, targetEventAsts) {
	        var _this = this;
	        if (lang_1.isPresent(hostListeners)) {
	            collection_1.StringMapWrapper.forEach(hostListeners, function (expression, propName) {
	                _this._parseEvent(propName, expression, sourceInfo, [], targetEventAsts);
	            });
	        }
	    };
	    TemplateParseVisitor.prototype._createDirectivePropertyAsts = function (directiveProperties, boundProps, targetBoundDirectiveProps) {
	        if (lang_1.isPresent(directiveProperties)) {
	            var boundPropsByName = new Map();
	            boundProps.forEach(function (boundProp) {
	                var key = util_1.dashCaseToCamelCase(boundProp.name);
	                var prevValue = boundPropsByName.get(boundProp.name);
	                if (lang_1.isBlank(prevValue) || prevValue.isLiteral) {
	                    // give [a]="b" a higher precedence thatn a="b" on the same element
	                    boundPropsByName.set(key, boundProp);
	                }
	            });
	            collection_1.StringMapWrapper.forEach(directiveProperties, function (elProp, dirProp) {
	                elProp = util_1.dashCaseToCamelCase(elProp);
	                var boundProp = boundPropsByName.get(elProp);
	                // Bindings are optional, so this binding only needs to be set up if an expression is given.
	                if (lang_1.isPresent(boundProp)) {
	                    targetBoundDirectiveProps.push(new template_ast_1.BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceInfo));
	                }
	            });
	        }
	    };
	    TemplateParseVisitor.prototype._createElementPropertyAsts = function (elementName, props, directives) {
	        var _this = this;
	        var boundElementProps = [];
	        var boundDirectivePropsIndex = new Map();
	        directives.forEach(function (directive) {
	            directive.inputs.forEach(function (prop) {
	                boundDirectivePropsIndex.set(prop.templateName, prop);
	            });
	        });
	        props.forEach(function (prop) {
	            if (!prop.isLiteral && lang_1.isBlank(boundDirectivePropsIndex.get(prop.name))) {
	                boundElementProps.push(_this._createElementPropertyAst(elementName, prop.name, prop.expression, prop.sourceInfo));
	            }
	        });
	        return boundElementProps;
	    };
	    TemplateParseVisitor.prototype._createElementPropertyAst = function (elementName, name, ast, sourceInfo) {
	        var unit = null;
	        var bindingType;
	        var boundPropertyName;
	        var parts = lang_1.StringWrapper.split(name, PROPERTY_PARTS_SEPARATOR);
	        if (parts.length === 1) {
	            boundPropertyName = this._schemaRegistry.getMappedPropName(util_1.dashCaseToCamelCase(parts[0]));
	            bindingType = template_ast_1.PropertyBindingType.Property;
	            if (!this._schemaRegistry.hasProperty(elementName, boundPropertyName)) {
	                this._reportError("Can't bind to '" + boundPropertyName + "' since it isn't a known native property in " + sourceInfo);
	            }
	        }
	        else if (parts[0] == ATTRIBUTE_PREFIX) {
	            boundPropertyName = util_1.dashCaseToCamelCase(parts[1]);
	            bindingType = template_ast_1.PropertyBindingType.Attribute;
	        }
	        else if (parts[0] == CLASS_PREFIX) {
	            // keep original case!
	            boundPropertyName = parts[1];
	            bindingType = template_ast_1.PropertyBindingType.Class;
	        }
	        else if (parts[0] == STYLE_PREFIX) {
	            unit = parts.length > 2 ? parts[2] : null;
	            boundPropertyName = util_1.dashCaseToCamelCase(parts[1]);
	            bindingType = template_ast_1.PropertyBindingType.Style;
	        }
	        else {
	            this._reportError("Invalid property name " + name + " in " + sourceInfo);
	            bindingType = null;
	        }
	        return new template_ast_1.BoundElementPropertyAst(boundPropertyName, bindingType, ast, unit, sourceInfo);
	    };
	    TemplateParseVisitor.prototype._findComponentDirectiveNames = function (directives) {
	        var componentTypeNames = [];
	        directives.forEach(function (directive) {
	            var typeName = directive.directive.type.name;
	            if (directive.directive.isComponent) {
	                componentTypeNames.push(typeName);
	            }
	        });
	        return componentTypeNames;
	    };
	    TemplateParseVisitor.prototype._assertOnlyOneComponent = function (directives, sourceInfo) {
	        var componentTypeNames = this._findComponentDirectiveNames(directives);
	        if (componentTypeNames.length > 1) {
	            this._reportError("More than one component: " + componentTypeNames.join(',') + " in " + sourceInfo);
	        }
	    };
	    TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function (directives, elementProps, sourceInfo) {
	        var _this = this;
	        var componentTypeNames = this._findComponentDirectiveNames(directives);
	        if (componentTypeNames.length > 0) {
	            this._reportError("Components on an embedded template: " + componentTypeNames.join(',') + " in " + sourceInfo);
	        }
	        elementProps.forEach(function (prop) {
	            _this._reportError("Property binding " + prop.name + " not used by any directive on an embedded template in " + prop.sourceInfo);
	        });
	    };
	    TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function (directives, events, sourceInfo) {
	        var _this = this;
	        var allDirectiveEvents = new Set();
	        directives.forEach(function (directive) {
	            collection_1.StringMapWrapper.forEach(directive.directive.outputs, function (eventName, _) { allDirectiveEvents.add(eventName); });
	        });
	        events.forEach(function (event) {
	            if (lang_1.isPresent(event.target) || !collection_1.SetWrapper.has(allDirectiveEvents, event.name)) {
	                _this._reportError("Event binding " + event.fullName + " not emitted by any directive on an embedded template in " + sourceInfo);
	            }
	        });
	    };
	    return TemplateParseVisitor;
	})();
	var NonBindableVisitor = (function () {
	    function NonBindableVisitor() {
	    }
	    NonBindableVisitor.prototype.visitElement = function (ast, component) {
	        var preparsedElement = template_preparser_1.preparseElement(ast);
	        if (preparsedElement.type === template_preparser_1.PreparsedElementType.SCRIPT ||
	            preparsedElement.type === template_preparser_1.PreparsedElementType.STYLE ||
	            preparsedElement.type === template_preparser_1.PreparsedElementType.STYLESHEET) {
	            // Skipping <script> for security reasons
	            // Skipping <style> and stylesheets as we already processed them
	            // in the StyleCompiler
	            return null;
	        }
	        var attrNameAndValues = ast.attrs.map(function (attrAst) { return [attrAst.name, attrAst.value]; });
	        var selector = createElementCssSelector(ast.name, attrNameAndValues);
	        var ngContentIndex = component.findNgContentIndex(selector);
	        var children = html_ast_1.htmlVisitAll(this, ast.children, EMPTY_COMPONENT);
	        return new template_ast_1.ElementAst(ast.name, html_ast_1.htmlVisitAll(this, ast.attrs), [], [], [], [], children, ngContentIndex, ast.sourceInfo);
	    };
	    NonBindableVisitor.prototype.visitAttr = function (ast, context) {
	        return new template_ast_1.AttrAst(ast.name, ast.value, ast.sourceInfo);
	    };
	    NonBindableVisitor.prototype.visitText = function (ast, component) {
	        var ngContentIndex = component.findNgContentIndex(TEXT_CSS_SELECTOR);
	        return new template_ast_1.TextAst(ast.value, ngContentIndex, ast.sourceInfo);
	    };
	    return NonBindableVisitor;
	})();
	var BoundElementOrDirectiveProperty = (function () {
	    function BoundElementOrDirectiveProperty(name, expression, isLiteral, sourceInfo) {
	        this.name = name;
	        this.expression = expression;
	        this.isLiteral = isLiteral;
	        this.sourceInfo = sourceInfo;
	    }
	    return BoundElementOrDirectiveProperty;
	})();
	function splitClasses(classAttrValue) {
	    return lang_1.StringWrapper.split(classAttrValue.trim(), /\s+/g);
	}
	exports.splitClasses = splitClasses;
	var Component = (function () {
	    function Component(ngContentIndexMatcher, wildcardNgContentIndex) {
	        this.ngContentIndexMatcher = ngContentIndexMatcher;
	        this.wildcardNgContentIndex = wildcardNgContentIndex;
	    }
	    Component.create = function (directives) {
	        if (directives.length === 0 || !directives[0].directive.isComponent) {
	            return EMPTY_COMPONENT;
	        }
	        var matcher = new selector_1.SelectorMatcher();
	        var ngContentSelectors = directives[0].directive.template.ngContentSelectors;
	        var wildcardNgContentIndex = null;
	        for (var i = 0; i < ngContentSelectors.length; i++) {
	            var selector = ngContentSelectors[i];
	            if (lang_1.StringWrapper.equals(selector, '*')) {
	                wildcardNgContentIndex = i;
	            }
	            else {
	                matcher.addSelectables(selector_1.CssSelector.parse(ngContentSelectors[i]), i);
	            }
	        }
	        return new Component(matcher, wildcardNgContentIndex);
	    };
	    Component.prototype.findNgContentIndex = function (selector) {
	        var ngContentIndices = [];
	        this.ngContentIndexMatcher.match(selector, function (selector, ngContentIndex) { ngContentIndices.push(ngContentIndex); });
	        collection_1.ListWrapper.sort(ngContentIndices);
	        if (lang_1.isPresent(this.wildcardNgContentIndex)) {
	            ngContentIndices.push(this.wildcardNgContentIndex);
	        }
	        return ngContentIndices.length > 0 ? ngContentIndices[0] : null;
	    };
	    return Component;
	})();
	function createElementCssSelector(elementName, matchableAttrs) {
	    var cssSelector = new selector_1.CssSelector();
	    cssSelector.setElement(elementName);
	    for (var i = 0; i < matchableAttrs.length; i++) {
	        var attrName = matchableAttrs[i][0].toLowerCase();
	        var attrValue = matchableAttrs[i][1];
	        cssSelector.addAttribute(attrName, attrValue);
	        if (attrName == CLASS_ATTR) {
	            var classes = splitClasses(attrValue);
	            classes.forEach(function (className) { return cssSelector.addClassName(className); });
	        }
	    }
	    return cssSelector;
	}
	var EMPTY_COMPONENT = new Component(new selector_1.SelectorMatcher(), null);
	var NON_BINDABLE_VISITOR = new NonBindableVisitor();
	//# sourceMappingURL=template_parser.js.map

/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(49);
	var dom_adapter_1 = __webpack_require__(287);
	var html_ast_1 = __webpack_require__(357);
	var util_1 = __webpack_require__(343);
	var di_1 = __webpack_require__(196);
	var HtmlParser = (function () {
	    function HtmlParser() {
	    }
	    HtmlParser.prototype.parse = function (template, sourceInfo) {
	        var root = dom_adapter_1.DOM.createTemplate(template);
	        return parseChildNodes(root, sourceInfo);
	    };
	    HtmlParser.prototype.unparse = function (nodes) {
	        var visitor = new UnparseVisitor();
	        var parts = [];
	        html_ast_1.htmlVisitAll(visitor, nodes, parts);
	        return parts.join('');
	    };
	    HtmlParser = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], HtmlParser);
	    return HtmlParser;
	})();
	exports.HtmlParser = HtmlParser;
	function parseText(text, indexInParent, parentSourceInfo) {
	    // TODO(tbosch): add source row/column source info from parse5 / package:html
	    var value = dom_adapter_1.DOM.getText(text);
	    return new html_ast_1.HtmlTextAst(value, parentSourceInfo + " > #text(" + value + "):nth-child(" + indexInParent + ")");
	}
	function parseAttr(element, parentSourceInfo, attrName, attrValue) {
	    // TODO(tbosch): add source row/column source info from parse5 / package:html
	    return new html_ast_1.HtmlAttrAst(attrName, attrValue, parentSourceInfo + "[" + attrName + "=" + attrValue + "]");
	}
	function parseElement(element, indexInParent, parentSourceInfo) {
	    // normalize nodename always as lower case so that following build steps
	    // can rely on this
	    var nodeName = dom_adapter_1.DOM.nodeName(element).toLowerCase();
	    // TODO(tbosch): add source row/column source info from parse5 / package:html
	    var sourceInfo = parentSourceInfo + " > " + nodeName + ":nth-child(" + indexInParent + ")";
	    var attrs = parseAttrs(element, sourceInfo);
	    var childNodes = parseChildNodes(element, sourceInfo);
	    return new html_ast_1.HtmlElementAst(nodeName, attrs, childNodes, sourceInfo);
	}
	function parseAttrs(element, elementSourceInfo) {
	    // Note: sort the attributes early in the pipeline to get
	    // consistent results throughout the pipeline, as attribute order is not defined
	    // in DOM parsers!
	    var attrMap = dom_adapter_1.DOM.attributeMap(element);
	    var attrList = [];
	    attrMap.forEach(function (value, name) { return attrList.push([name, value]); });
	    attrList.sort(function (entry1, entry2) { return lang_1.StringWrapper.compare(entry1[0], entry2[0]); });
	    return attrList.map(function (entry) { return parseAttr(element, elementSourceInfo, entry[0], entry[1]); });
	}
	function parseChildNodes(element, parentSourceInfo) {
	    var root = dom_adapter_1.DOM.templateAwareRoot(element);
	    var childNodes = dom_adapter_1.DOM.childNodesAsList(root);
	    var result = [];
	    var index = 0;
	    childNodes.forEach(function (childNode) {
	        var childResult = null;
	        if (dom_adapter_1.DOM.isTextNode(childNode)) {
	            var text = childNode;
	            childResult = parseText(text, index, parentSourceInfo);
	        }
	        else if (dom_adapter_1.DOM.isElementNode(childNode)) {
	            var el = childNode;
	            childResult = parseElement(el, index, parentSourceInfo);
	        }
	        if (lang_1.isPresent(childResult)) {
	            // Won't have a childResult for e.g. comment nodes
	            result.push(childResult);
	        }
	        index++;
	    });
	    return result;
	}
	var UnparseVisitor = (function () {
	    function UnparseVisitor() {
	    }
	    UnparseVisitor.prototype.visitElement = function (ast, parts) {
	        parts.push("<" + ast.name);
	        var attrs = [];
	        html_ast_1.htmlVisitAll(this, ast.attrs, attrs);
	        if (ast.attrs.length > 0) {
	            parts.push(' ');
	            parts.push(attrs.join(' '));
	        }
	        parts.push(">");
	        html_ast_1.htmlVisitAll(this, ast.children, parts);
	        parts.push("</" + ast.name + ">");
	        return null;
	    };
	    UnparseVisitor.prototype.visitAttr = function (ast, parts) {
	        parts.push(ast.name + "=" + util_1.escapeDoubleQuoteString(ast.value));
	        return null;
	    };
	    UnparseVisitor.prototype.visitText = function (ast, parts) {
	        parts.push(ast.value);
	        return null;
	    };
	    return UnparseVisitor;
	})();
	//# sourceMappingURL=html_parser.js.map

/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var HtmlTextAst = (function () {
	    function HtmlTextAst(value, sourceInfo) {
	        this.value = value;
	        this.sourceInfo = sourceInfo;
	    }
	    HtmlTextAst.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
	    return HtmlTextAst;
	})();
	exports.HtmlTextAst = HtmlTextAst;
	var HtmlAttrAst = (function () {
	    function HtmlAttrAst(name, value, sourceInfo) {
	        this.name = name;
	        this.value = value;
	        this.sourceInfo = sourceInfo;
	    }
	    HtmlAttrAst.prototype.visit = function (visitor, context) { return visitor.visitAttr(this, context); };
	    return HtmlAttrAst;
	})();
	exports.HtmlAttrAst = HtmlAttrAst;
	var HtmlElementAst = (function () {
	    function HtmlElementAst(name, attrs, children, sourceInfo) {
	        this.name = name;
	        this.attrs = attrs;
	        this.children = children;
	        this.sourceInfo = sourceInfo;
	    }
	    HtmlElementAst.prototype.visit = function (visitor, context) { return visitor.visitElement(this, context); };
	    return HtmlElementAst;
	})();
	exports.HtmlElementAst = HtmlElementAst;
	function htmlVisitAll(visitor, asts, context) {
	    if (context === void 0) { context = null; }
	    var result = [];
	    asts.forEach(function (ast) {
	        var astResult = ast.visit(visitor, context);
	        if (lang_1.isPresent(astResult)) {
	            result.push(astResult);
	        }
	    });
	    return result;
	}
	exports.htmlVisitAll = htmlVisitAll;
	//# sourceMappingURL=html_ast.js.map

/***/ },
/* 358 */
/***/ function(module, exports) {

	'use strict';var ElementSchemaRegistry = (function () {
	    function ElementSchemaRegistry() {
	    }
	    ElementSchemaRegistry.prototype.hasProperty = function (tagName, propName) { return true; };
	    ElementSchemaRegistry.prototype.getMappedPropName = function (propName) { return propName; };
	    return ElementSchemaRegistry;
	})();
	exports.ElementSchemaRegistry = ElementSchemaRegistry;
	//# sourceMappingURL=element_schema_registry.js.map

/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var NG_CONTENT_SELECT_ATTR = 'select';
	var NG_CONTENT_ELEMENT = 'ng-content';
	var LINK_ELEMENT = 'link';
	var LINK_STYLE_REL_ATTR = 'rel';
	var LINK_STYLE_HREF_ATTR = 'href';
	var LINK_STYLE_REL_VALUE = 'stylesheet';
	var STYLE_ELEMENT = 'style';
	var SCRIPT_ELEMENT = 'script';
	var NG_NON_BINDABLE_ATTR = 'ng-non-bindable';
	function preparseElement(ast) {
	    var selectAttr = null;
	    var hrefAttr = null;
	    var relAttr = null;
	    var nonBindable = false;
	    ast.attrs.forEach(function (attr) {
	        if (attr.name == NG_CONTENT_SELECT_ATTR) {
	            selectAttr = attr.value;
	        }
	        else if (attr.name == LINK_STYLE_HREF_ATTR) {
	            hrefAttr = attr.value;
	        }
	        else if (attr.name == LINK_STYLE_REL_ATTR) {
	            relAttr = attr.value;
	        }
	        else if (attr.name == NG_NON_BINDABLE_ATTR) {
	            nonBindable = true;
	        }
	    });
	    selectAttr = normalizeNgContentSelect(selectAttr);
	    var nodeName = ast.name;
	    var type = PreparsedElementType.OTHER;
	    if (nodeName == NG_CONTENT_ELEMENT) {
	        type = PreparsedElementType.NG_CONTENT;
	    }
	    else if (nodeName == STYLE_ELEMENT) {
	        type = PreparsedElementType.STYLE;
	    }
	    else if (nodeName == SCRIPT_ELEMENT) {
	        type = PreparsedElementType.SCRIPT;
	    }
	    else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
	        type = PreparsedElementType.STYLESHEET;
	    }
	    return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable);
	}
	exports.preparseElement = preparseElement;
	(function (PreparsedElementType) {
	    PreparsedElementType[PreparsedElementType["NG_CONTENT"] = 0] = "NG_CONTENT";
	    PreparsedElementType[PreparsedElementType["STYLE"] = 1] = "STYLE";
	    PreparsedElementType[PreparsedElementType["STYLESHEET"] = 2] = "STYLESHEET";
	    PreparsedElementType[PreparsedElementType["SCRIPT"] = 3] = "SCRIPT";
	    PreparsedElementType[PreparsedElementType["OTHER"] = 4] = "OTHER";
	})(exports.PreparsedElementType || (exports.PreparsedElementType = {}));
	var PreparsedElementType = exports.PreparsedElementType;
	var PreparsedElement = (function () {
	    function PreparsedElement(type, selectAttr, hrefAttr, nonBindable) {
	        this.type = type;
	        this.selectAttr = selectAttr;
	        this.hrefAttr = hrefAttr;
	        this.nonBindable = nonBindable;
	    }
	    return PreparsedElement;
	})();
	exports.PreparsedElement = PreparsedElement;
	function normalizeNgContentSelect(selectAttr) {
	    if (lang_1.isBlank(selectAttr) || selectAttr.length === 0) {
	        return '*';
	    }
	    return selectAttr;
	}
	//# sourceMappingURL=template_preparser.js.map

/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var directive_metadata_1 = __webpack_require__(341);
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var async_1 = __webpack_require__(50);
	var xhr_1 = __webpack_require__(350);
	var url_resolver_1 = __webpack_require__(352);
	var style_url_resolver_1 = __webpack_require__(353);
	var di_1 = __webpack_require__(196);
	var view_1 = __webpack_require__(246);
	var html_ast_1 = __webpack_require__(357);
	var html_parser_1 = __webpack_require__(356);
	var template_preparser_1 = __webpack_require__(359);
	var TemplateNormalizer = (function () {
	    function TemplateNormalizer(_xhr, _urlResolver, _domParser) {
	        this._xhr = _xhr;
	        this._urlResolver = _urlResolver;
	        this._domParser = _domParser;
	    }
	    TemplateNormalizer.prototype.normalizeTemplate = function (directiveType, template) {
	        var _this = this;
	        if (lang_1.isPresent(template.template)) {
	            return async_1.PromiseWrapper.resolve(this.normalizeLoadedTemplate(directiveType, template, template.template, directiveType.moduleUrl));
	        }
	        else if (lang_1.isPresent(template.templateUrl)) {
	            var sourceAbsUrl = this._urlResolver.resolve(directiveType.moduleUrl, template.templateUrl);
	            return this._xhr.get(sourceAbsUrl)
	                .then(function (templateContent) { return _this.normalizeLoadedTemplate(directiveType, template, templateContent, sourceAbsUrl); });
	        }
	        else {
	            throw new exceptions_1.BaseException("No template specified for component " + directiveType.name);
	        }
	    };
	    TemplateNormalizer.prototype.normalizeLoadedTemplate = function (directiveType, templateMeta, template, templateAbsUrl) {
	        var _this = this;
	        var domNodes = this._domParser.parse(template, directiveType.name);
	        var visitor = new TemplatePreparseVisitor();
	        html_ast_1.htmlVisitAll(visitor, domNodes);
	        var allStyles = templateMeta.styles.concat(visitor.styles);
	        var allStyleAbsUrls = visitor.styleUrls.filter(style_url_resolver_1.isStyleUrlResolvable)
	            .map(function (url) { return _this._urlResolver.resolve(templateAbsUrl, url); })
	            .concat(templateMeta.styleUrls.filter(style_url_resolver_1.isStyleUrlResolvable)
	            .map(function (url) { return _this._urlResolver.resolve(directiveType.moduleUrl, url); }));
	        var allResolvedStyles = allStyles.map(function (style) {
	            var styleWithImports = style_url_resolver_1.extractStyleUrls(_this._urlResolver, templateAbsUrl, style);
	            styleWithImports.styleUrls.forEach(function (styleUrl) { return allStyleAbsUrls.push(styleUrl); });
	            return styleWithImports.style;
	        });
	        var encapsulation = templateMeta.encapsulation;
	        if (encapsulation === view_1.ViewEncapsulation.Emulated && allResolvedStyles.length === 0 &&
	            allStyleAbsUrls.length === 0) {
	            encapsulation = view_1.ViewEncapsulation.None;
	        }
	        return new directive_metadata_1.CompileTemplateMetadata({
	            encapsulation: encapsulation,
	            template: template,
	            templateUrl: templateAbsUrl,
	            styles: allResolvedStyles,
	            styleUrls: allStyleAbsUrls,
	            ngContentSelectors: visitor.ngContentSelectors
	        });
	    };
	    TemplateNormalizer = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [xhr_1.XHR, url_resolver_1.UrlResolver, html_parser_1.HtmlParser])
	    ], TemplateNormalizer);
	    return TemplateNormalizer;
	})();
	exports.TemplateNormalizer = TemplateNormalizer;
	var TemplatePreparseVisitor = (function () {
	    function TemplatePreparseVisitor() {
	        this.ngContentSelectors = [];
	        this.styles = [];
	        this.styleUrls = [];
	        this.ngNonBindableStackCount = 0;
	    }
	    TemplatePreparseVisitor.prototype.visitElement = function (ast, context) {
	        var preparsedElement = template_preparser_1.preparseElement(ast);
	        switch (preparsedElement.type) {
	            case template_preparser_1.PreparsedElementType.NG_CONTENT:
	                if (this.ngNonBindableStackCount === 0) {
	                    this.ngContentSelectors.push(preparsedElement.selectAttr);
	                }
	                break;
	            case template_preparser_1.PreparsedElementType.STYLE:
	                var textContent = '';
	                ast.children.forEach(function (child) {
	                    if (child instanceof html_ast_1.HtmlTextAst) {
	                        textContent += child.value;
	                    }
	                });
	                this.styles.push(textContent);
	                break;
	            case template_preparser_1.PreparsedElementType.STYLESHEET:
	                this.styleUrls.push(preparsedElement.hrefAttr);
	                break;
	        }
	        if (preparsedElement.nonBindable) {
	            this.ngNonBindableStackCount++;
	        }
	        html_ast_1.htmlVisitAll(this, ast.children);
	        if (preparsedElement.nonBindable) {
	            this.ngNonBindableStackCount--;
	        }
	        return null;
	    };
	    TemplatePreparseVisitor.prototype.visitAttr = function (ast, context) { return null; };
	    TemplatePreparseVisitor.prototype.visitText = function (ast, context) { return null; };
	    return TemplatePreparseVisitor;
	})();
	//# sourceMappingURL=template_normalizer.js.map

/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var di_1 = __webpack_require__(196);
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var collection_1 = __webpack_require__(202);
	var cpl = __webpack_require__(341);
	var md = __webpack_require__(213);
	var directive_resolver_1 = __webpack_require__(258);
	var view_resolver_1 = __webpack_require__(259);
	var directive_lifecycle_reflector_1 = __webpack_require__(278);
	var interfaces_1 = __webpack_require__(279);
	var reflection_1 = __webpack_require__(206);
	var di_2 = __webpack_require__(196);
	var platform_directives_and_pipes_1 = __webpack_require__(283);
	var util_1 = __webpack_require__(343);
	var RuntimeMetadataResolver = (function () {
	    function RuntimeMetadataResolver(_directiveResolver, _viewResolver, _platformDirectives) {
	        this._directiveResolver = _directiveResolver;
	        this._viewResolver = _viewResolver;
	        this._platformDirectives = _platformDirectives;
	        this._cache = new Map();
	    }
	    RuntimeMetadataResolver.prototype.getMetadata = function (directiveType) {
	        var meta = this._cache.get(directiveType);
	        if (lang_1.isBlank(meta)) {
	            var dirMeta = this._directiveResolver.resolve(directiveType);
	            var moduleUrl = calcModuleUrl(directiveType, dirMeta);
	            var templateMeta = null;
	            var changeDetectionStrategy = null;
	            if (dirMeta instanceof md.ComponentMetadata) {
	                var cmpMeta = dirMeta;
	                var viewMeta = this._viewResolver.resolve(directiveType);
	                templateMeta = new cpl.CompileTemplateMetadata({
	                    encapsulation: viewMeta.encapsulation,
	                    template: viewMeta.template,
	                    templateUrl: viewMeta.templateUrl,
	                    styles: viewMeta.styles,
	                    styleUrls: viewMeta.styleUrls
	                });
	                changeDetectionStrategy = cmpMeta.changeDetection;
	            }
	            meta = cpl.CompileDirectiveMetadata.create({
	                selector: dirMeta.selector,
	                exportAs: dirMeta.exportAs,
	                isComponent: lang_1.isPresent(templateMeta),
	                dynamicLoadable: true,
	                type: new cpl.CompileTypeMetadata({ name: lang_1.stringify(directiveType), moduleUrl: moduleUrl, runtime: directiveType }),
	                template: templateMeta,
	                changeDetection: changeDetectionStrategy,
	                inputs: dirMeta.inputs,
	                outputs: dirMeta.outputs,
	                host: dirMeta.host,
	                lifecycleHooks: interfaces_1.LIFECYCLE_HOOKS_VALUES.filter(function (hook) { return directive_lifecycle_reflector_1.hasLifecycleHook(hook, directiveType); })
	            });
	            this._cache.set(directiveType, meta);
	        }
	        return meta;
	    };
	    RuntimeMetadataResolver.prototype.getViewDirectivesMetadata = function (component) {
	        var _this = this;
	        var view = this._viewResolver.resolve(component);
	        var directives = flattenDirectives(view, this._platformDirectives);
	        for (var i = 0; i < directives.length; i++) {
	            if (!isValidDirective(directives[i])) {
	                throw new exceptions_1.BaseException("Unexpected directive value '" + lang_1.stringify(directives[i]) + "' on the View of component '" + lang_1.stringify(component) + "'");
	            }
	        }
	        return removeDuplicates(directives).map(function (type) { return _this.getMetadata(type); });
	    };
	    RuntimeMetadataResolver = __decorate([
	        di_2.Injectable(),
	        __param(2, di_2.Optional()),
	        __param(2, di_2.Inject(platform_directives_and_pipes_1.PLATFORM_DIRECTIVES)), 
	        __metadata('design:paramtypes', [directive_resolver_1.DirectiveResolver, view_resolver_1.ViewResolver, Array])
	    ], RuntimeMetadataResolver);
	    return RuntimeMetadataResolver;
	})();
	exports.RuntimeMetadataResolver = RuntimeMetadataResolver;
	function removeDuplicates(items) {
	    var m = new Map();
	    items.forEach(function (i) { return m.set(i, null); });
	    return collection_1.MapWrapper.keys(m);
	}
	function flattenDirectives(view, platformDirectives) {
	    var directives = [];
	    if (lang_1.isPresent(platformDirectives)) {
	        flattenArray(platformDirectives, directives);
	    }
	    if (lang_1.isPresent(view.directives)) {
	        flattenArray(view.directives, directives);
	    }
	    return directives;
	}
	function flattenArray(tree, out) {
	    for (var i = 0; i < tree.length; i++) {
	        var item = di_1.resolveForwardRef(tree[i]);
	        if (lang_1.isArray(item)) {
	            flattenArray(item, out);
	        }
	        else {
	            out.push(item);
	        }
	    }
	}
	function isValidDirective(value) {
	    return lang_1.isPresent(value) && (value instanceof lang_1.Type);
	}
	function calcModuleUrl(type, dirMeta) {
	    if (lang_1.isPresent(dirMeta.moduleId)) {
	        return "package:" + dirMeta.moduleId + util_1.MODULE_SUFFIX;
	    }
	    else {
	        return reflection_1.reflector.importUri(type);
	    }
	}
	//# sourceMappingURL=runtime_metadata.js.map

/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(196);
	var lang_1 = __webpack_require__(49);
	var collection_1 = __webpack_require__(202);
	var dom_adapter_1 = __webpack_require__(287);
	var element_schema_registry_1 = __webpack_require__(358);
	var DomElementSchemaRegistry = (function (_super) {
	    __extends(DomElementSchemaRegistry, _super);
	    function DomElementSchemaRegistry() {
	        _super.apply(this, arguments);
	        this._protoElements = new Map();
	    }
	    DomElementSchemaRegistry.prototype._getProtoElement = function (tagName) {
	        var element = this._protoElements.get(tagName);
	        if (lang_1.isBlank(element)) {
	            element = dom_adapter_1.DOM.createElement(tagName);
	            this._protoElements.set(tagName, element);
	        }
	        return element;
	    };
	    DomElementSchemaRegistry.prototype.hasProperty = function (tagName, propName) {
	        if (tagName.indexOf('-') !== -1) {
	            // can't tell now as we don't know which properties a custom element will get
	            // once it is instantiated
	            return true;
	        }
	        else {
	            var elm = this._getProtoElement(tagName);
	            return dom_adapter_1.DOM.hasProperty(elm, propName);
	        }
	    };
	    DomElementSchemaRegistry.prototype.getMappedPropName = function (propName) {
	        var mappedPropName = collection_1.StringMapWrapper.get(dom_adapter_1.DOM.attrToPropMap, propName);
	        return lang_1.isPresent(mappedPropName) ? mappedPropName : propName;
	    };
	    DomElementSchemaRegistry = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], DomElementSchemaRegistry);
	    return DomElementSchemaRegistry;
	})(element_schema_registry_1.ElementSchemaRegistry);
	exports.DomElementSchemaRegistry = DomElementSchemaRegistry;
	//# sourceMappingURL=dom_element_schema_registry.js.map

/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(196);
	/**
	 * Specifies app root url for the application.
	 *
	 * Used by the {@link Compiler} when resolving HTML and CSS template URLs.
	 *
	 * This interface can be overridden by the application developer to create custom behavior.
	 *
	 * See {@link Compiler}
	 */
	var AppRootUrl = (function () {
	    function AppRootUrl(value) {
	        this.value = value;
	    }
	    AppRootUrl = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [String])
	    ], AppRootUrl);
	    return AppRootUrl;
	})();
	exports.AppRootUrl = AppRootUrl;
	//# sourceMappingURL=app_root_url.js.map

/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var app_root_url_1 = __webpack_require__(363);
	var dom_adapter_1 = __webpack_require__(287);
	var di_1 = __webpack_require__(196);
	/**
	 * Extension of {@link AppRootUrl} that uses a DOM anchor tag to set the root url to
	 * the current page's url.
	 */
	var AnchorBasedAppRootUrl = (function (_super) {
	    __extends(AnchorBasedAppRootUrl, _super);
	    function AnchorBasedAppRootUrl() {
	        _super.call(this, "");
	        // compute the root url to pass to AppRootUrl
	        var a = dom_adapter_1.DOM.createElement('a');
	        dom_adapter_1.DOM.resolveAndSetHref(a, './', null);
	        this.value = dom_adapter_1.DOM.getHref(a);
	    }
	    AnchorBasedAppRootUrl = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], AnchorBasedAppRootUrl);
	    return AnchorBasedAppRootUrl;
	})(app_root_url_1.AppRootUrl);
	exports.AnchorBasedAppRootUrl = AnchorBasedAppRootUrl;
	//# sourceMappingURL=anchor_based_app_root_url.js.map

/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var forms_1 = __webpack_require__(310);
	var di_1 = __webpack_require__(196);
	var lang_1 = __webpack_require__(49);
	var browser_adapter_1 = __webpack_require__(366);
	var browser_testability_1 = __webpack_require__(369);
	var dom_adapter_1 = __webpack_require__(287);
	var xhr_1 = __webpack_require__(350);
	var xhr_impl_1 = __webpack_require__(368);
	var event_manager_1 = __webpack_require__(296);
	var key_events_1 = __webpack_require__(371);
	var hammer_gestures_1 = __webpack_require__(372);
	var testability_1 = __webpack_require__(370);
	var api_1 = __webpack_require__(262);
	var render_1 = __webpack_require__(285);
	var shared_styles_host_1 = __webpack_require__(286);
	var platform_bindings_1 = __webpack_require__(374);
	var animation_builder_1 = __webpack_require__(290);
	var browser_details_1 = __webpack_require__(295);
	var wtf_init_1 = __webpack_require__(375);
	var application_ref_1 = __webpack_require__(376);
	/**
	 * A default set of providers which apply only to an Angular application running on
	 * the UI thread.
	 */
	function applicationDomProviders() {
	    if (lang_1.isBlank(dom_adapter_1.DOM)) {
	        throw "Must set a root DOM adapter first.";
	    }
	    return [
	        di_1.provide(render_1.DOCUMENT, { useValue: dom_adapter_1.DOM.defaultDoc() }),
	        event_manager_1.EventManager,
	        new di_1.Provider(event_manager_1.EVENT_MANAGER_PLUGINS, { useClass: event_manager_1.DomEventsPlugin, multi: true }),
	        new di_1.Provider(event_manager_1.EVENT_MANAGER_PLUGINS, { useClass: key_events_1.KeyEventsPlugin, multi: true }),
	        new di_1.Provider(event_manager_1.EVENT_MANAGER_PLUGINS, { useClass: hammer_gestures_1.HammerGesturesPlugin, multi: true }),
	        di_1.provide(render_1.DomRenderer, { useClass: render_1.DomRenderer_ }),
	        di_1.provide(api_1.Renderer, { useExisting: render_1.DomRenderer }),
	        shared_styles_host_1.DomSharedStylesHost,
	        di_1.provide(shared_styles_host_1.SharedStylesHost, { useExisting: shared_styles_host_1.DomSharedStylesHost }),
	        platform_bindings_1.EXCEPTION_PROVIDER,
	        di_1.provide(xhr_1.XHR, { useValue: new xhr_impl_1.XHRImpl() }),
	        testability_1.Testability,
	        browser_details_1.BrowserDetails,
	        animation_builder_1.AnimationBuilder,
	        forms_1.FORM_PROVIDERS
	    ];
	}
	exports.applicationDomProviders = applicationDomProviders;
	/**
	 * Initialize the Angular 'platform' on the page.
	 *
	 * See {@link PlatformRef} for details on the Angular platform.
	 *
	 *##Without specified providers
	 *
	 * If no providers are specified, `platform`'s behavior depends on whether an existing
	 * platform exists:
	 *
	 * If no platform exists, a new one will be created with the default {@link platformProviders}.
	 *
	 * If a platform already exists, it will be returned (regardless of what providers it
	 * was created with). This is a convenience feature, allowing for multiple applications
	 * to be loaded into the same platform without awareness of each other.
	 *
	 *##With specified providers
	 *
	 * It is also possible to specify providers to be made in the new platform. These providers
	 * will be shared between all applications on the page. For example, an abstraction for
	 * the browser cookie jar should be bound at the platform level, because there is only one
	 * cookie jar regardless of how many applications on the page will be accessing it.
	 *
	 * If providers are specified directly, `platform` will create the Angular platform with
	 * them if a platform did not exist already. If it did exist, however, an error will be
	 * thrown.
	 *
	 *##DOM Applications
	 *
	 * This version of `platform` initializes Angular to run in the UI thread, with direct
	 * DOM access. Web-worker applications should call `platform` from
	 * `src/web_workers/worker/application_common` instead.
	 */
	function platform(providers) {
	    return application_ref_1.platformCommon(providers, function () {
	        browser_adapter_1.BrowserDomAdapter.makeCurrent();
	        wtf_init_1.wtfInit();
	        browser_testability_1.BrowserGetTestability.init();
	    });
	}
	exports.platform = platform;
	/**
	 * Bootstrapping for Angular applications.
	 *
	 * You instantiate an Angular application by explicitly specifying a component to use
	 * as the root component for your application via the `bootstrap()` method.
	 *
	 * ## Simple Example
	 *
	 * Assuming this `index.html`:
	 *
	 * ```html
	 * <html>
	 *   <!-- load Angular script tags here. -->
	 *   <body>
	 *     <my-app>loading...</my-app>
	 *   </body>
	 * </html>
	 * ```
	 *
	 * An application is bootstrapped inside an existing browser DOM, typically `index.html`.
	 * Unlike Angular 1, Angular 2 does not compile/process providers in `index.html`. This is
	 * mainly for security reasons, as well as architectural changes in Angular 2. This means
	 * that `index.html` can safely be processed using server-side technologies such as
	 * providers. Bindings can thus use double-curly `{{ syntax }}` without collision from
	 * Angular 2 component double-curly `{{ syntax }}`.
	 *
	 * We can use this script code:
	 *
	 * ```
	 * @Component({
	 *    selector: 'my-app',
	 *    template: 'Hello {{ name }}!'
	 * })
	 * class MyApp {
	 *   name:string;
	 *
	 *   constructor() {
	 *     this.name = 'World';
	 *   }
	 * }
	 *
	 * main() {
	 *   return bootstrap(MyApp);
	 * }
	 * ```
	 *
	 * When the app developer invokes `bootstrap()` with the root component `MyApp` as its
	 * argument, Angular performs the following tasks:
	 *
	 *  1. It uses the component's `selector` property to locate the DOM element which needs
	 *     to be upgraded into the angular component.
	 *  2. It creates a new child injector (from the platform injector). Optionally, you can
	 *     also override the injector configuration for an app by invoking `bootstrap` with the
	 *     `componentInjectableBindings` argument.
	 *  3. It creates a new `Zone` and connects it to the angular application's change detection
	 *     domain instance.
	 *  4. It creates an emulated or shadow DOM on the selected component's host element and loads the
	 *     template into it.
	 *  5. It instantiates the specified component.
	 *  6. Finally, Angular performs change detection to apply the initial data providers for the
	 *     application.
	 *
	 *
	 * ## Instantiating Multiple Applications on a Single Page
	 *
	 * There are two ways to do this.
	 *
	 * ### Isolated Applications
	 *
	 * Angular creates a new application each time that the `bootstrap()` method is invoked.
	 * When multiple applications are created for a page, Angular treats each application as
	 * independent within an isolated change detection and `Zone` domain. If you need to share
	 * data between applications, use the strategy described in the next section, "Applications
	 * That Share Change Detection."
	 *
	 *
	 * ### Applications That Share Change Detection
	 *
	 * If you need to bootstrap multiple applications that share common data, the applications
	 * must share a common change detection and zone. To do that, create a meta-component that
	 * lists the application components in its template.
	 *
	 * By only invoking the `bootstrap()` method once, with the meta-component as its argument,
	 * you ensure that only a single change detection zone is created and therefore data can be
	 * shared across the applications.
	 *
	 *
	 * ## Platform Injector
	 *
	 * When working within a browser window, there are many singleton resources: cookies, title,
	 * location, and others. Angular services that represent these resources must likewise be
	 * shared across all Angular applications that occupy the same browser window. For this
	 * reason, Angular creates exactly one global platform injector which stores all shared
	 * services, and each angular application injector has the platform injector as its parent.
	 *
	 * Each application has its own private injector as well. When there are multiple
	 * applications on a page, Angular treats each application injector's services as private
	 * to that application.
	 *
	 *
	 *##API
	 * - `appComponentType`: The root component which should act as the application. This is
	 *   a reference to a `Type` which is annotated with `@Component(...)`.
	 * - `componentInjectableBindings`: An additional set of providers that can be added to the
	 *   app injector to override default injection behavior.
	 * - `errorReporter`: `function(exception:any, stackTrace:string)` a default error reporter
	 *   for unhandled exceptions.
	 *
	 * Returns a `Promise` of {@link ComponentRef}.
	 */
	function commonBootstrap(appComponentType, appProviders) {
	    if (appProviders === void 0) { appProviders = null; }
	    var p = platform();
	    var bindings = [application_ref_1.applicationCommonProviders(), applicationDomProviders()];
	    if (lang_1.isPresent(appProviders)) {
	        bindings.push(appProviders);
	    }
	    return p.application(bindings).bootstrap(appComponentType);
	}
	exports.commonBootstrap = commonBootstrap;
	//# sourceMappingURL=application_common.js.map

/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var collection_1 = __webpack_require__(202);
	var lang_1 = __webpack_require__(49);
	var dom_adapter_1 = __webpack_require__(287);
	var generic_browser_adapter_1 = __webpack_require__(367);
	var _attrToPropMap = {
	    'class': 'className',
	    'innerHtml': 'innerHTML',
	    'readonly': 'readOnly',
	    'tabindex': 'tabIndex'
	};
	var DOM_KEY_LOCATION_NUMPAD = 3;
	// Map to convert some key or keyIdentifier values to what will be returned by getEventKey
	var _keyMap = {
	    // The following values are here for cross-browser compatibility and to match the W3C standard
	    // cf http://www.w3.org/TR/DOM-Level-3-Events-key/
	    '\b': 'Backspace',
	    '\t': 'Tab',
	    '\x7F': 'Delete',
	    '\x1B': 'Escape',
	    'Del': 'Delete',
	    'Esc': 'Escape',
	    'Left': 'ArrowLeft',
	    'Right': 'ArrowRight',
	    'Up': 'ArrowUp',
	    'Down': 'ArrowDown',
	    'Menu': 'ContextMenu',
	    'Scroll': 'ScrollLock',
	    'Win': 'OS'
	};
	// There is a bug in Chrome for numeric keypad keys:
	// https://code.google.com/p/chromium/issues/detail?id=155654
	// 1, 2, 3 ... are reported as A, B, C ...
	var _chromeNumKeyPadMap = {
	    'A': '1',
	    'B': '2',
	    'C': '3',
	    'D': '4',
	    'E': '5',
	    'F': '6',
	    'G': '7',
	    'H': '8',
	    'I': '9',
	    'J': '*',
	    'K': '+',
	    'M': '-',
	    'N': '.',
	    'O': '/',
	    '\x60': '0',
	    '\x90': 'NumLock'
	};
	/* tslint:disable:requireParameterType */
	var BrowserDomAdapter = (function (_super) {
	    __extends(BrowserDomAdapter, _super);
	    function BrowserDomAdapter() {
	        _super.apply(this, arguments);
	    }
	    BrowserDomAdapter.prototype.parse = function (templateHtml) { throw new Error("parse not implemented"); };
	    BrowserDomAdapter.makeCurrent = function () { dom_adapter_1.setRootDomAdapter(new BrowserDomAdapter()); };
	    BrowserDomAdapter.prototype.hasProperty = function (element, name) { return name in element; };
	    BrowserDomAdapter.prototype.setProperty = function (el, name, value) { el[name] = value; };
	    BrowserDomAdapter.prototype.getProperty = function (el, name) { return el[name]; };
	    BrowserDomAdapter.prototype.invoke = function (el, methodName, args) {
	        el[methodName].apply(el, args);
	    };
	    // TODO(tbosch): move this into a separate environment class once we have it
	    BrowserDomAdapter.prototype.logError = function (error) {
	        if (window.console.error) {
	            window.console.error(error);
	        }
	        else {
	            window.console.log(error);
	        }
	    };
	    BrowserDomAdapter.prototype.log = function (error) { window.console.log(error); };
	    BrowserDomAdapter.prototype.logGroup = function (error) {
	        if (window.console.group) {
	            window.console.group(error);
	            this.logError(error);
	        }
	        else {
	            window.console.log(error);
	        }
	    };
	    BrowserDomAdapter.prototype.logGroupEnd = function () {
	        if (window.console.groupEnd) {
	            window.console.groupEnd();
	        }
	    };
	    Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
	        get: function () { return _attrToPropMap; },
	        enumerable: true,
	        configurable: true
	    });
	    BrowserDomAdapter.prototype.query = function (selector) { return document.querySelector(selector); };
	    BrowserDomAdapter.prototype.querySelector = function (el, selector) { return el.querySelector(selector); };
	    BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) { return el.querySelectorAll(selector); };
	    BrowserDomAdapter.prototype.on = function (el, evt, listener) { el.addEventListener(evt, listener, false); };
	    BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {
	        el.addEventListener(evt, listener, false);
	        // Needed to follow Dart's subscription semantic, until fix of
	        // https://code.google.com/p/dart/issues/detail?id=17406
	        return function () { el.removeEventListener(evt, listener, false); };
	    };
	    BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) { el.dispatchEvent(evt); };
	    BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {
	        var evt = document.createEvent('MouseEvent');
	        evt.initEvent(eventType, true, true);
	        return evt;
	    };
	    BrowserDomAdapter.prototype.createEvent = function (eventType) {
	        var evt = document.createEvent('Event');
	        evt.initEvent(eventType, true, true);
	        return evt;
	    };
	    BrowserDomAdapter.prototype.preventDefault = function (evt) {
	        evt.preventDefault();
	        evt.returnValue = false;
	    };
	    BrowserDomAdapter.prototype.isPrevented = function (evt) {
	        return evt.defaultPrevented || lang_1.isPresent(evt.returnValue) && !evt.returnValue;
	    };
	    BrowserDomAdapter.prototype.getInnerHTML = function (el) { return el.innerHTML; };
	    BrowserDomAdapter.prototype.getOuterHTML = function (el) { return el.outerHTML; };
	    BrowserDomAdapter.prototype.nodeName = function (node) { return node.nodeName; };
	    BrowserDomAdapter.prototype.nodeValue = function (node) { return node.nodeValue; };
	    BrowserDomAdapter.prototype.type = function (node) { return node.type; };
	    BrowserDomAdapter.prototype.content = function (node) {
	        if (this.hasProperty(node, "content")) {
	            return node.content;
	        }
	        else {
	            return node;
	        }
	    };
	    BrowserDomAdapter.prototype.firstChild = function (el) { return el.firstChild; };
	    BrowserDomAdapter.prototype.nextSibling = function (el) { return el.nextSibling; };
	    BrowserDomAdapter.prototype.parentElement = function (el) { return el.parentNode; };
	    BrowserDomAdapter.prototype.childNodes = function (el) { return el.childNodes; };
	    BrowserDomAdapter.prototype.childNodesAsList = function (el) {
	        var childNodes = el.childNodes;
	        var res = collection_1.ListWrapper.createFixedSize(childNodes.length);
	        for (var i = 0; i < childNodes.length; i++) {
	            res[i] = childNodes[i];
	        }
	        return res;
	    };
	    BrowserDomAdapter.prototype.clearNodes = function (el) {
	        while (el.firstChild) {
	            el.removeChild(el.firstChild);
	        }
	    };
	    BrowserDomAdapter.prototype.appendChild = function (el, node) { el.appendChild(node); };
	    BrowserDomAdapter.prototype.removeChild = function (el, node) { el.removeChild(node); };
	    BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) { el.replaceChild(newChild, oldChild); };
	    BrowserDomAdapter.prototype.remove = function (node) {
	        if (node.parentNode) {
	            node.parentNode.removeChild(node);
	        }
	        return node;
	    };
	    BrowserDomAdapter.prototype.insertBefore = function (el, node) { el.parentNode.insertBefore(node, el); };
	    BrowserDomAdapter.prototype.insertAllBefore = function (el, nodes) { nodes.forEach(function (n) { return el.parentNode.insertBefore(n, el); }); };
	    BrowserDomAdapter.prototype.insertAfter = function (el, node) { el.parentNode.insertBefore(node, el.nextSibling); };
	    BrowserDomAdapter.prototype.setInnerHTML = function (el, value) { el.innerHTML = value; };
	    BrowserDomAdapter.prototype.getText = function (el) { return el.textContent; };
	    // TODO(vicb): removed Element type because it does not support StyleElement
	    BrowserDomAdapter.prototype.setText = function (el, value) { el.textContent = value; };
	    BrowserDomAdapter.prototype.getValue = function (el) { return el.value; };
	    BrowserDomAdapter.prototype.setValue = function (el, value) { el.value = value; };
	    BrowserDomAdapter.prototype.getChecked = function (el) { return el.checked; };
	    BrowserDomAdapter.prototype.setChecked = function (el, value) { el.checked = value; };
	    BrowserDomAdapter.prototype.createComment = function (text) { return document.createComment(text); };
	    BrowserDomAdapter.prototype.createTemplate = function (html) {
	        var t = document.createElement('template');
	        t.innerHTML = html;
	        return t;
	    };
	    BrowserDomAdapter.prototype.createElement = function (tagName, doc) {
	        if (doc === void 0) { doc = document; }
	        return doc.createElement(tagName);
	    };
	    BrowserDomAdapter.prototype.createElementNS = function (ns, tagName, doc) {
	        if (doc === void 0) { doc = document; }
	        return doc.createElementNS(ns, tagName);
	    };
	    BrowserDomAdapter.prototype.createTextNode = function (text, doc) {
	        if (doc === void 0) { doc = document; }
	        return doc.createTextNode(text);
	    };
	    BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {
	        if (doc === void 0) { doc = document; }
	        var el = doc.createElement('SCRIPT');
	        el.setAttribute(attrName, attrValue);
	        return el;
	    };
	    BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {
	        if (doc === void 0) { doc = document; }
	        var style = doc.createElement('style');
	        this.appendChild(style, this.createTextNode(css));
	        return style;
	    };
	    BrowserDomAdapter.prototype.createShadowRoot = function (el) { return el.createShadowRoot(); };
	    BrowserDomAdapter.prototype.getShadowRoot = function (el) { return el.shadowRoot; };
	    BrowserDomAdapter.prototype.getHost = function (el) { return el.host; };
	    BrowserDomAdapter.prototype.clone = function (node) { return node.cloneNode(true); };
	    BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) {
	        return element.getElementsByClassName(name);
	    };
	    BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) {
	        return element.getElementsByTagName(name);
	    };
	    BrowserDomAdapter.prototype.classList = function (element) { return Array.prototype.slice.call(element.classList, 0); };
	    BrowserDomAdapter.prototype.addClass = function (element, classname) { element.classList.add(classname); };
	    BrowserDomAdapter.prototype.removeClass = function (element, classname) { element.classList.remove(classname); };
	    BrowserDomAdapter.prototype.hasClass = function (element, classname) { return element.classList.contains(classname); };
	    BrowserDomAdapter.prototype.setStyle = function (element, stylename, stylevalue) {
	        element.style[stylename] = stylevalue;
	    };
	    BrowserDomAdapter.prototype.removeStyle = function (element, stylename) { element.style[stylename] = null; };
	    BrowserDomAdapter.prototype.getStyle = function (element, stylename) { return element.style[stylename]; };
	    BrowserDomAdapter.prototype.tagName = function (element) { return element.tagName; };
	    BrowserDomAdapter.prototype.attributeMap = function (element) {
	        var res = new Map();
	        var elAttrs = element.attributes;
	        for (var i = 0; i < elAttrs.length; i++) {
	            var attrib = elAttrs[i];
	            res.set(attrib.name, attrib.value);
	        }
	        return res;
	    };
	    BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) { return element.hasAttribute(attribute); };
	    BrowserDomAdapter.prototype.getAttribute = function (element, attribute) { return element.getAttribute(attribute); };
	    BrowserDomAdapter.prototype.setAttribute = function (element, name, value) { element.setAttribute(name, value); };
	    BrowserDomAdapter.prototype.setAttributeNS = function (element, ns, name, value) {
	        element.setAttributeNS(ns, name, value);
	    };
	    BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) { element.removeAttribute(attribute); };
	    BrowserDomAdapter.prototype.templateAwareRoot = function (el) { return this.isTemplateElement(el) ? this.content(el) : el; };
	    BrowserDomAdapter.prototype.createHtmlDocument = function () {
	        return document.implementation.createHTMLDocument('fakeTitle');
	    };
	    BrowserDomAdapter.prototype.defaultDoc = function () { return document; };
	    BrowserDomAdapter.prototype.getBoundingClientRect = function (el) {
	        try {
	            return el.getBoundingClientRect();
	        }
	        catch (e) {
	            return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };
	        }
	    };
	    BrowserDomAdapter.prototype.getTitle = function () { return document.title; };
	    BrowserDomAdapter.prototype.setTitle = function (newTitle) { document.title = newTitle || ''; };
	    BrowserDomAdapter.prototype.elementMatches = function (n, selector) {
	        var matches = false;
	        if (n instanceof HTMLElement) {
	            if (n.matches) {
	                matches = n.matches(selector);
	            }
	            else if (n.msMatchesSelector) {
	                matches = n.msMatchesSelector(selector);
	            }
	            else if (n.webkitMatchesSelector) {
	                matches = n.webkitMatchesSelector(selector);
	            }
	        }
	        return matches;
	    };
	    BrowserDomAdapter.prototype.isTemplateElement = function (el) {
	        return el instanceof HTMLElement && el.nodeName == "TEMPLATE";
	    };
	    BrowserDomAdapter.prototype.isTextNode = function (node) { return node.nodeType === Node.TEXT_NODE; };
	    BrowserDomAdapter.prototype.isCommentNode = function (node) { return node.nodeType === Node.COMMENT_NODE; };
	    BrowserDomAdapter.prototype.isElementNode = function (node) { return node.nodeType === Node.ELEMENT_NODE; };
	    BrowserDomAdapter.prototype.hasShadowRoot = function (node) { return node instanceof HTMLElement && lang_1.isPresent(node.shadowRoot); };
	    BrowserDomAdapter.prototype.isShadowRoot = function (node) { return node instanceof DocumentFragment; };
	    BrowserDomAdapter.prototype.importIntoDoc = function (node) {
	        var toImport = node;
	        if (this.isTemplateElement(node)) {
	            toImport = this.content(node);
	        }
	        return document.importNode(toImport, true);
	    };
	    BrowserDomAdapter.prototype.adoptNode = function (node) { return document.adoptNode(node); };
	    BrowserDomAdapter.prototype.getHref = function (el) { return el.href; };
	    BrowserDomAdapter.prototype.getEventKey = function (event) {
	        var key = event.key;
	        if (lang_1.isBlank(key)) {
	            key = event.keyIdentifier;
	            // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
	            // Safari
	            // cf
	            // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces
	            if (lang_1.isBlank(key)) {
	                return 'Unidentified';
	            }
	            if (key.startsWith('U+')) {
	                key = String.fromCharCode(parseInt(key.substring(2), 16));
	                if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
	                    // There is a bug in Chrome for numeric keypad keys:
	                    // https://code.google.com/p/chromium/issues/detail?id=155654
	                    // 1, 2, 3 ... are reported as A, B, C ...
	                    key = _chromeNumKeyPadMap[key];
	                }
	            }
	        }
	        if (_keyMap.hasOwnProperty(key)) {
	            key = _keyMap[key];
	        }
	        return key;
	    };
	    BrowserDomAdapter.prototype.getGlobalEventTarget = function (target) {
	        if (target == "window") {
	            return window;
	        }
	        else if (target == "document") {
	            return document;
	        }
	        else if (target == "body") {
	            return document.body;
	        }
	    };
	    BrowserDomAdapter.prototype.getHistory = function () { return window.history; };
	    BrowserDomAdapter.prototype.getLocation = function () { return window.location; };
	    BrowserDomAdapter.prototype.getBaseHref = function () {
	        var href = getBaseElementHref();
	        if (lang_1.isBlank(href)) {
	            return null;
	        }
	        return relativePath(href);
	    };
	    BrowserDomAdapter.prototype.resetBaseElement = function () { baseElement = null; };
	    BrowserDomAdapter.prototype.getUserAgent = function () { return window.navigator.userAgent; };
	    BrowserDomAdapter.prototype.setData = function (element, name, value) {
	        this.setAttribute(element, 'data-' + name, value);
	    };
	    BrowserDomAdapter.prototype.getData = function (element, name) { return this.getAttribute(element, 'data-' + name); };
	    BrowserDomAdapter.prototype.getComputedStyle = function (element) { return getComputedStyle(element); };
	    // TODO(tbosch): move this into a separate environment class once we have it
	    BrowserDomAdapter.prototype.setGlobalVar = function (path, value) { lang_1.setValueOnPath(lang_1.global, path, value); };
	    BrowserDomAdapter.prototype.requestAnimationFrame = function (callback) { return window.requestAnimationFrame(callback); };
	    BrowserDomAdapter.prototype.cancelAnimationFrame = function (id) { window.cancelAnimationFrame(id); };
	    BrowserDomAdapter.prototype.performanceNow = function () {
	        // performance.now() is not available in all browsers, see
	        // http://caniuse.com/#search=performance.now
	        if (lang_1.isPresent(window.performance) && lang_1.isPresent(window.performance.now)) {
	            return window.performance.now();
	        }
	        else {
	            return lang_1.DateWrapper.toMillis(lang_1.DateWrapper.now());
	        }
	    };
	    return BrowserDomAdapter;
	})(generic_browser_adapter_1.GenericBrowserDomAdapter);
	exports.BrowserDomAdapter = BrowserDomAdapter;
	var baseElement = null;
	function getBaseElementHref() {
	    if (lang_1.isBlank(baseElement)) {
	        baseElement = document.querySelector('base');
	        if (lang_1.isBlank(baseElement)) {
	            return null;
	        }
	    }
	    return baseElement.getAttribute('href');
	}
	// based on urlUtils.js in AngularJS 1
	var urlParsingNode = null;
	function relativePath(url) {
	    if (lang_1.isBlank(urlParsingNode)) {
	        urlParsingNode = document.createElement("a");
	    }
	    urlParsingNode.setAttribute('href', url);
	    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :
	        '/' + urlParsingNode.pathname;
	}
	//# sourceMappingURL=browser_adapter.js.map

/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var collection_1 = __webpack_require__(202);
	var lang_1 = __webpack_require__(49);
	var dom_adapter_1 = __webpack_require__(287);
	var xhr_impl_1 = __webpack_require__(368);
	/**
	 * Provides DOM operations in any browser environment.
	 */
	var GenericBrowserDomAdapter = (function (_super) {
	    __extends(GenericBrowserDomAdapter, _super);
	    function GenericBrowserDomAdapter() {
	        var _this = this;
	        _super.call(this);
	        this._animationPrefix = null;
	        this._transitionEnd = null;
	        try {
	            var element = this.createElement('div', this.defaultDoc());
	            if (lang_1.isPresent(this.getStyle(element, 'animationName'))) {
	                this._animationPrefix = '';
	            }
	            else {
	                var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];
	                for (var i = 0; i < domPrefixes.length; i++) {
	                    if (lang_1.isPresent(this.getStyle(element, domPrefixes[i] + 'AnimationName'))) {
	                        this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';
	                        break;
	                    }
	                }
	            }
	            var transEndEventNames = {
	                WebkitTransition: 'webkitTransitionEnd',
	                MozTransition: 'transitionend',
	                OTransition: 'oTransitionEnd otransitionend',
	                transition: 'transitionend'
	            };
	            collection_1.StringMapWrapper.forEach(transEndEventNames, function (value, key) {
	                if (lang_1.isPresent(_this.getStyle(element, key))) {
	                    _this._transitionEnd = value;
	                }
	            });
	        }
	        catch (e) {
	            this._animationPrefix = null;
	            this._transitionEnd = null;
	        }
	    }
	    GenericBrowserDomAdapter.prototype.getXHR = function () { return xhr_impl_1.XHRImpl; };
	    GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) { return el.getDistributedNodes(); };
	    GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {
	        el.href = href == null ? baseUrl : baseUrl + '/../' + href;
	    };
	    GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () { return true; };
	    GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {
	        return lang_1.isFunction(this.defaultDoc().body.createShadowRoot);
	    };
	    GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () {
	        return lang_1.isPresent(this._animationPrefix) ? this._animationPrefix : "";
	    };
	    GenericBrowserDomAdapter.prototype.getTransitionEnd = function () { return lang_1.isPresent(this._transitionEnd) ? this._transitionEnd : ""; };
	    GenericBrowserDomAdapter.prototype.supportsAnimation = function () {
	        return lang_1.isPresent(this._animationPrefix) && lang_1.isPresent(this._transitionEnd);
	    };
	    return GenericBrowserDomAdapter;
	})(dom_adapter_1.DomAdapter);
	exports.GenericBrowserDomAdapter = GenericBrowserDomAdapter;
	//# sourceMappingURL=generic_browser_adapter.js.map

/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var promise_1 = __webpack_require__(51);
	var lang_1 = __webpack_require__(49);
	var xhr_1 = __webpack_require__(350);
	var XHRImpl = (function (_super) {
	    __extends(XHRImpl, _super);
	    function XHRImpl() {
	        _super.apply(this, arguments);
	    }
	    XHRImpl.prototype.get = function (url) {
	        var completer = promise_1.PromiseWrapper.completer();
	        var xhr = new XMLHttpRequest();
	        xhr.open('GET', url, true);
	        xhr.responseType = 'text';
	        xhr.onload = function () {
	            // responseText is the old-school way of retrieving response (supported by IE8 & 9)
	            // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
	            var response = lang_1.isPresent(xhr.response) ? xhr.response : xhr.responseText;
	            // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	            var status = xhr.status === 1223 ? 204 : xhr.status;
	            // fix status code when it is 0 (0 status is undocumented).
	            // Occurs when accessing file resources or on Android 4.1 stock browser
	            // while retrieving files from application cache.
	            if (status === 0) {
	                status = response ? 200 : 0;
	            }
	            if (200 <= status && status <= 300) {
	                completer.resolve(response);
	            }
	            else {
	                completer.reject("Failed to load " + url, null);
	            }
	        };
	        xhr.onerror = function () { completer.reject("Failed to load " + url, null); };
	        xhr.send();
	        return completer.promise;
	    };
	    return XHRImpl;
	})(xhr_1.XHR);
	exports.XHRImpl = XHRImpl;
	//# sourceMappingURL=xhr_impl.js.map

/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var testability_1 = __webpack_require__(370);
	var lang_1 = __webpack_require__(49);
	var PublicTestability = (function () {
	    function PublicTestability(testability) {
	        this._testability = testability;
	    }
	    PublicTestability.prototype.isStable = function () { return this._testability.isStable(); };
	    PublicTestability.prototype.whenStable = function (callback) { this._testability.whenStable(callback); };
	    PublicTestability.prototype.findBindings = function (using, provider, exactMatch) {
	        return this.findProviders(using, provider, exactMatch);
	    };
	    PublicTestability.prototype.findProviders = function (using, provider, exactMatch) {
	        return this._testability.findBindings(using, provider, exactMatch);
	    };
	    return PublicTestability;
	})();
	var BrowserGetTestability = (function () {
	    function BrowserGetTestability() {
	    }
	    BrowserGetTestability.init = function () { testability_1.setTestabilityGetter(new BrowserGetTestability()); };
	    BrowserGetTestability.prototype.addToWindow = function (registry) {
	        lang_1.global.getAngularTestability = function (elem, findInAncestors) {
	            if (findInAncestors === void 0) { findInAncestors = true; }
	            var testability = registry.findTestabilityInTree(elem, findInAncestors);
	            if (testability == null) {
	                throw new Error('Could not find testability for element.');
	            }
	            return new PublicTestability(testability);
	        };
	        lang_1.global.getAllAngularTestabilities = function () {
	            var testabilities = registry.getAllTestabilities();
	            return testabilities.map(function (testability) { return new PublicTestability(testability); });
	        };
	    };
	    return BrowserGetTestability;
	})();
	exports.BrowserGetTestability = BrowserGetTestability;
	//# sourceMappingURL=browser_testability.js.map

/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(196);
	var dom_adapter_1 = __webpack_require__(287);
	var collection_1 = __webpack_require__(202);
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var ng_zone_1 = __webpack_require__(297);
	var async_1 = __webpack_require__(50);
	/**
	 * The Testability service provides testing hooks that can be accessed from
	 * the browser and by services such as Protractor. Each bootstrapped Angular
	 * application on the page will have an instance of Testability.
	 */
	var Testability = (function () {
	    function Testability(_ngZone) {
	        /** @internal */
	        this._pendingCount = 0;
	        /** @internal */
	        this._callbacks = [];
	        /** @internal */
	        this._isAngularEventPending = false;
	        this._watchAngularEvents(_ngZone);
	    }
	    /** @internal */
	    Testability.prototype._watchAngularEvents = function (_ngZone) {
	        var _this = this;
	        async_1.ObservableWrapper.subscribe(_ngZone.onTurnStart, function (_) { _this._isAngularEventPending = true; });
	        _ngZone.runOutsideAngular(function () {
	            async_1.ObservableWrapper.subscribe(_ngZone.onEventDone, function (_) {
	                if (!_ngZone.hasPendingTimers) {
	                    _this._isAngularEventPending = false;
	                    _this._runCallbacksIfReady();
	                }
	            });
	        });
	    };
	    Testability.prototype.increasePendingRequestCount = function () {
	        this._pendingCount += 1;
	        return this._pendingCount;
	    };
	    Testability.prototype.decreasePendingRequestCount = function () {
	        this._pendingCount -= 1;
	        if (this._pendingCount < 0) {
	            throw new exceptions_1.BaseException('pending async requests below zero');
	        }
	        this._runCallbacksIfReady();
	        return this._pendingCount;
	    };
	    Testability.prototype.isStable = function () { return this._pendingCount == 0 && !this._isAngularEventPending; };
	    /** @internal */
	    Testability.prototype._runCallbacksIfReady = function () {
	        var _this = this;
	        if (!this.isStable()) {
	            return; // Not ready
	        }
	        // Schedules the call backs in a new frame so that it is always async.
	        async_1.PromiseWrapper.resolve(null).then(function (_) {
	            while (_this._callbacks.length !== 0) {
	                (_this._callbacks.pop())();
	            }
	        });
	    };
	    Testability.prototype.whenStable = function (callback) {
	        this._callbacks.push(callback);
	        this._runCallbacksIfReady();
	    };
	    Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };
	    // This only accounts for ngZone, and not pending counts. Use `whenStable` to
	    // check for stability.
	    Testability.prototype.isAngularEventPending = function () { return this._isAngularEventPending; };
	    Testability.prototype.findBindings = function (using, provider, exactMatch) {
	        // TODO(juliemr): implement.
	        return [];
	    };
	    Testability.prototype.findProviders = function (using, provider, exactMatch) {
	        // TODO(juliemr): implement.
	        return [];
	    };
	    Testability = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [ng_zone_1.NgZone])
	    ], Testability);
	    return Testability;
	})();
	exports.Testability = Testability;
	var TestabilityRegistry = (function () {
	    function TestabilityRegistry() {
	        /** @internal */
	        this._applications = new collection_1.Map();
	        testabilityGetter.addToWindow(this);
	    }
	    TestabilityRegistry.prototype.registerApplication = function (token, testability) {
	        this._applications.set(token, testability);
	    };
	    TestabilityRegistry.prototype.getAllTestabilities = function () { return collection_1.MapWrapper.values(this._applications); };
	    TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {
	        if (findInAncestors === void 0) { findInAncestors = true; }
	        if (elem == null) {
	            return null;
	        }
	        if (this._applications.has(elem)) {
	            return this._applications.get(elem);
	        }
	        else if (!findInAncestors) {
	            return null;
	        }
	        if (dom_adapter_1.DOM.isShadowRoot(elem)) {
	            return this.findTestabilityInTree(dom_adapter_1.DOM.getHost(elem));
	        }
	        return this.findTestabilityInTree(dom_adapter_1.DOM.parentElement(elem));
	    };
	    TestabilityRegistry = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], TestabilityRegistry);
	    return TestabilityRegistry;
	})();
	exports.TestabilityRegistry = TestabilityRegistry;
	var NoopGetTestability = (function () {
	    function NoopGetTestability() {
	    }
	    NoopGetTestability.prototype.addToWindow = function (registry) { };
	    NoopGetTestability = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], NoopGetTestability);
	    return NoopGetTestability;
	})();
	function setTestabilityGetter(getter) {
	    testabilityGetter = getter;
	}
	exports.setTestabilityGetter = setTestabilityGetter;
	var testabilityGetter = lang_1.CONST_EXPR(new NoopGetTestability());
	//# sourceMappingURL=testability.js.map

/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var dom_adapter_1 = __webpack_require__(287);
	var lang_1 = __webpack_require__(49);
	var collection_1 = __webpack_require__(202);
	var event_manager_1 = __webpack_require__(296);
	var di_1 = __webpack_require__(196);
	var modifierKeys = ['alt', 'control', 'meta', 'shift'];
	var modifierKeyGetters = {
	    'alt': function (event) { return event.altKey; },
	    'control': function (event) { return event.ctrlKey; },
	    'meta': function (event) { return event.metaKey; },
	    'shift': function (event) { return event.shiftKey; }
	};
	var KeyEventsPlugin = (function (_super) {
	    __extends(KeyEventsPlugin, _super);
	    function KeyEventsPlugin() {
	        _super.call(this);
	    }
	    KeyEventsPlugin.prototype.supports = function (eventName) {
	        return lang_1.isPresent(KeyEventsPlugin.parseEventName(eventName));
	    };
	    KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
	        var parsedEvent = KeyEventsPlugin.parseEventName(eventName);
	        var outsideHandler = KeyEventsPlugin.eventCallback(element, collection_1.StringMapWrapper.get(parsedEvent, 'fullKey'), handler, this.manager.getZone());
	        this.manager.getZone().runOutsideAngular(function () {
	            dom_adapter_1.DOM.on(element, collection_1.StringMapWrapper.get(parsedEvent, 'domEventName'), outsideHandler);
	        });
	    };
	    KeyEventsPlugin.parseEventName = function (eventName) {
	        var parts = eventName.toLowerCase().split('.');
	        var domEventName = parts.shift();
	        if ((parts.length === 0) ||
	            !(lang_1.StringWrapper.equals(domEventName, 'keydown') ||
	                lang_1.StringWrapper.equals(domEventName, 'keyup'))) {
	            return null;
	        }
	        var key = KeyEventsPlugin._normalizeKey(parts.pop());
	        var fullKey = '';
	        modifierKeys.forEach(function (modifierName) {
	            if (collection_1.ListWrapper.contains(parts, modifierName)) {
	                collection_1.ListWrapper.remove(parts, modifierName);
	                fullKey += modifierName + '.';
	            }
	        });
	        fullKey += key;
	        if (parts.length != 0 || key.length === 0) {
	            // returning null instead of throwing to let another plugin process the event
	            return null;
	        }
	        var result = collection_1.StringMapWrapper.create();
	        collection_1.StringMapWrapper.set(result, 'domEventName', domEventName);
	        collection_1.StringMapWrapper.set(result, 'fullKey', fullKey);
	        return result;
	    };
	    KeyEventsPlugin.getEventFullKey = function (event) {
	        var fullKey = '';
	        var key = dom_adapter_1.DOM.getEventKey(event);
	        key = key.toLowerCase();
	        if (lang_1.StringWrapper.equals(key, ' ')) {
	            key = 'space'; // for readability
	        }
	        else if (lang_1.StringWrapper.equals(key, '.')) {
	            key = 'dot'; // because '.' is used as a separator in event names
	        }
	        modifierKeys.forEach(function (modifierName) {
	            if (modifierName != key) {
	                var modifierGetter = collection_1.StringMapWrapper.get(modifierKeyGetters, modifierName);
	                if (modifierGetter(event)) {
	                    fullKey += modifierName + '.';
	                }
	            }
	        });
	        fullKey += key;
	        return fullKey;
	    };
	    KeyEventsPlugin.eventCallback = function (element, fullKey, handler, zone) {
	        return function (event) {
	            if (lang_1.StringWrapper.equals(KeyEventsPlugin.getEventFullKey(event), fullKey)) {
	                zone.run(function () { return handler(event); });
	            }
	        };
	    };
	    /** @internal */
	    KeyEventsPlugin._normalizeKey = function (keyName) {
	        // TODO: switch to a StringMap if the mapping grows too much
	        switch (keyName) {
	            case 'esc':
	                return 'escape';
	            default:
	                return keyName;
	        }
	    };
	    KeyEventsPlugin = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], KeyEventsPlugin);
	    return KeyEventsPlugin;
	})(event_manager_1.EventManagerPlugin);
	exports.KeyEventsPlugin = KeyEventsPlugin;
	//# sourceMappingURL=key_events.js.map

/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var hammer_common_1 = __webpack_require__(373);
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var di_1 = __webpack_require__(196);
	var HammerGesturesPlugin = (function (_super) {
	    __extends(HammerGesturesPlugin, _super);
	    function HammerGesturesPlugin() {
	        _super.apply(this, arguments);
	    }
	    HammerGesturesPlugin.prototype.supports = function (eventName) {
	        if (!_super.prototype.supports.call(this, eventName))
	            return false;
	        if (!lang_1.isPresent(window['Hammer'])) {
	            throw new exceptions_1.BaseException("Hammer.js is not loaded, can not bind " + eventName + " event");
	        }
	        return true;
	    };
	    HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {
	        var zone = this.manager.getZone();
	        eventName = eventName.toLowerCase();
	        zone.runOutsideAngular(function () {
	            // Creating the manager bind events, must be done outside of angular
	            var mc = new Hammer(element);
	            mc.get('pinch').set({ enable: true });
	            mc.get('rotate').set({ enable: true });
	            mc.on(eventName, function (eventObj) { zone.run(function () { handler(eventObj); }); });
	        });
	    };
	    HammerGesturesPlugin = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], HammerGesturesPlugin);
	    return HammerGesturesPlugin;
	})(hammer_common_1.HammerGesturesPluginCommon);
	exports.HammerGesturesPlugin = HammerGesturesPlugin;
	//# sourceMappingURL=hammer_gestures.js.map

/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var event_manager_1 = __webpack_require__(296);
	var collection_1 = __webpack_require__(202);
	var _eventNames = {
	    // pan
	    'pan': true,
	    'panstart': true,
	    'panmove': true,
	    'panend': true,
	    'pancancel': true,
	    'panleft': true,
	    'panright': true,
	    'panup': true,
	    'pandown': true,
	    // pinch
	    'pinch': true,
	    'pinchstart': true,
	    'pinchmove': true,
	    'pinchend': true,
	    'pinchcancel': true,
	    'pinchin': true,
	    'pinchout': true,
	    // press
	    'press': true,
	    'pressup': true,
	    // rotate
	    'rotate': true,
	    'rotatestart': true,
	    'rotatemove': true,
	    'rotateend': true,
	    'rotatecancel': true,
	    // swipe
	    'swipe': true,
	    'swipeleft': true,
	    'swiperight': true,
	    'swipeup': true,
	    'swipedown': true,
	    // tap
	    'tap': true,
	};
	var HammerGesturesPluginCommon = (function (_super) {
	    __extends(HammerGesturesPluginCommon, _super);
	    function HammerGesturesPluginCommon() {
	        _super.call(this);
	    }
	    HammerGesturesPluginCommon.prototype.supports = function (eventName) {
	        eventName = eventName.toLowerCase();
	        return collection_1.StringMapWrapper.contains(_eventNames, eventName);
	    };
	    return HammerGesturesPluginCommon;
	})(event_manager_1.EventManagerPlugin);
	exports.HammerGesturesPluginCommon = HammerGesturesPluginCommon;
	//# sourceMappingURL=hammer_common.js.map

/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var di_1 = __webpack_require__(196);
	var exceptions_1 = __webpack_require__(204);
	var dom_adapter_1 = __webpack_require__(287);
	exports.EXCEPTION_PROVIDER = di_1.provide(exceptions_1.ExceptionHandler, { useFactory: function () { return new exceptions_1.ExceptionHandler(dom_adapter_1.DOM, false); }, deps: [] });
	exports.EXCEPTION_BINDING = exports.EXCEPTION_PROVIDER;
	//# sourceMappingURL=platform_bindings.js.map

/***/ },
/* 375 */
/***/ function(module, exports) {

	'use strict';/**
	 * This is here because DART requires it. It is noop in JS.
	 */
	function wtfInit() { }
	exports.wtfInit = wtfInit;
	//# sourceMappingURL=wtf_init.js.map

/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ng_zone_1 = __webpack_require__(297);
	var lang_1 = __webpack_require__(49);
	var di_1 = __webpack_require__(196);
	var application_tokens_1 = __webpack_require__(302);
	var async_1 = __webpack_require__(50);
	var collection_1 = __webpack_require__(202);
	var reflection_1 = __webpack_require__(206);
	var testability_1 = __webpack_require__(370);
	var dynamic_component_loader_1 = __webpack_require__(303);
	var exceptions_1 = __webpack_require__(204);
	var dom_adapter_1 = __webpack_require__(287);
	var view_ref_1 = __webpack_require__(267);
	var change_detection_1 = __webpack_require__(215);
	var view_pool_1 = __webpack_require__(275);
	var view_manager_1 = __webpack_require__(271);
	var view_manager_utils_1 = __webpack_require__(272);
	var view_listener_1 = __webpack_require__(276);
	var proto_view_factory_1 = __webpack_require__(261);
	var view_resolver_1 = __webpack_require__(259);
	var directive_resolver_1 = __webpack_require__(258);
	var pipe_resolver_1 = __webpack_require__(282);
	var compiler_1 = __webpack_require__(260);
	var dynamic_component_loader_2 = __webpack_require__(303);
	var view_manager_2 = __webpack_require__(271);
	var compiler_2 = __webpack_require__(260);
	var profile_1 = __webpack_require__(235);
	var platform_directives_and_pipes_1 = __webpack_require__(283);
	var lang_2 = __webpack_require__(49);
	var common_1 = __webpack_require__(46);
	/**
	 * Constructs the set of providers meant for use at the platform level.
	 *
	 * These are providers that should be singletons shared among all Angular applications
	 * running on the page.
	 */
	function platformProviders() {
	    return [di_1.provide(reflection_1.Reflector, { useValue: reflection_1.reflector }), testability_1.TestabilityRegistry];
	}
	exports.platformProviders = platformProviders;
	/**
	 * Construct providers specific to an individual root component.
	 */
	function _componentProviders(appComponentType) {
	    return [
	        di_1.provide(application_tokens_1.APP_COMPONENT, { useValue: appComponentType }),
	        di_1.provide(application_tokens_1.APP_COMPONENT_REF_PROMISE, {
	            useFactory: function (dynamicComponentLoader, appRef, injector) {
	                // Save the ComponentRef for disposal later.
	                var ref;
	                // TODO(rado): investigate whether to support providers on root component.
	                return dynamicComponentLoader.loadAsRoot(appComponentType, null, injector, function () { appRef._unloadComponent(ref); })
	                    .then(function (componentRef) {
	                    ref = componentRef;
	                    if (lang_1.isPresent(componentRef.location.nativeElement)) {
	                        injector.get(testability_1.TestabilityRegistry)
	                            .registerApplication(componentRef.location.nativeElement, injector.get(testability_1.Testability));
	                    }
	                    return componentRef;
	                });
	            },
	            deps: [dynamic_component_loader_1.DynamicComponentLoader, ApplicationRef, di_1.Injector]
	        }),
	        di_1.provide(appComponentType, {
	            useFactory: function (p) { return p.then(function (ref) { return ref.instance; }); },
	            deps: [application_tokens_1.APP_COMPONENT_REF_PROMISE]
	        }),
	    ];
	}
	/**
	 * Construct a default set of providers which should be included in any Angular
	 * application, regardless of whether it runs on the UI thread or in a web worker.
	 */
	function applicationCommonProviders() {
	    return [
	        di_1.provide(compiler_1.Compiler, { useClass: compiler_2.Compiler_ }),
	        application_tokens_1.APP_ID_RANDOM_PROVIDER,
	        view_pool_1.AppViewPool,
	        di_1.provide(view_pool_1.APP_VIEW_POOL_CAPACITY, { useValue: 10000 }),
	        di_1.provide(view_manager_1.AppViewManager, { useClass: view_manager_2.AppViewManager_ }),
	        view_manager_utils_1.AppViewManagerUtils,
	        view_listener_1.AppViewListener,
	        proto_view_factory_1.ProtoViewFactory,
	        view_resolver_1.ViewResolver,
	        di_1.provide(change_detection_1.IterableDiffers, { useValue: change_detection_1.defaultIterableDiffers }),
	        di_1.provide(change_detection_1.KeyValueDiffers, { useValue: change_detection_1.defaultKeyValueDiffers }),
	        directive_resolver_1.DirectiveResolver,
	        pipe_resolver_1.PipeResolver,
	        di_1.provide(platform_directives_and_pipes_1.PLATFORM_PIPES, { useValue: common_1.COMMON_PIPES, multi: true }),
	        di_1.provide(platform_directives_and_pipes_1.PLATFORM_DIRECTIVES, { useValue: common_1.COMMON_DIRECTIVES, multi: true }),
	        di_1.provide(dynamic_component_loader_1.DynamicComponentLoader, { useClass: dynamic_component_loader_2.DynamicComponentLoader_ })
	    ];
	}
	exports.applicationCommonProviders = applicationCommonProviders;
	/**
	 * Create an Angular zone.
	 */
	function createNgZone() {
	    return new ng_zone_1.NgZone({ enableLongStackTrace: lang_1.assertionsEnabled() });
	}
	exports.createNgZone = createNgZone;
	var _platform;
	function platformCommon(providers, initializer) {
	    lang_2.lockDevMode();
	    if (lang_1.isPresent(_platform)) {
	        if (lang_1.isBlank(providers)) {
	            return _platform;
	        }
	        throw "platform() can only be called once per page";
	    }
	    if (lang_1.isPresent(initializer)) {
	        initializer();
	    }
	    if (lang_1.isBlank(providers)) {
	        providers = platformProviders();
	    }
	    _platform = new PlatformRef_(di_1.Injector.resolveAndCreate(providers), function () { _platform = null; });
	    return _platform;
	}
	exports.platformCommon = platformCommon;
	/**
	 * The Angular platform is the entry point for Angular on a web page. Each page
	 * has exactly one platform, and services (such as reflection) which are common
	 * to every Angular application running on the page are bound in its scope.
	 *
	 * A page's platform is initialized implicitly when {@link bootstrap}() is called, or
	 * explicitly by calling {@link platform}().
	 */
	var PlatformRef = (function () {
	    function PlatformRef() {
	    }
	    Object.defineProperty(PlatformRef.prototype, "injector", {
	        /**
	         * Retrieve the platform {@link Injector}, which is the parent injector for
	         * every Angular application on the page and provides singleton providers.
	         */
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    return PlatformRef;
	})();
	exports.PlatformRef = PlatformRef;
	var PlatformRef_ = (function (_super) {
	    __extends(PlatformRef_, _super);
	    function PlatformRef_(_injector, _dispose) {
	        _super.call(this);
	        this._injector = _injector;
	        this._dispose = _dispose;
	        /** @internal */
	        this._applications = [];
	        /** @internal */
	        this._disposeListeners = [];
	    }
	    PlatformRef_.prototype.registerDisposeListener = function (dispose) { this._disposeListeners.push(dispose); };
	    Object.defineProperty(PlatformRef_.prototype, "injector", {
	        get: function () { return this._injector; },
	        enumerable: true,
	        configurable: true
	    });
	    PlatformRef_.prototype.application = function (providers) {
	        var app = this._initApp(createNgZone(), providers);
	        return app;
	    };
	    PlatformRef_.prototype.asyncApplication = function (bindingFn) {
	        var _this = this;
	        var zone = createNgZone();
	        var completer = async_1.PromiseWrapper.completer();
	        zone.run(function () {
	            async_1.PromiseWrapper.then(bindingFn(zone), function (providers) {
	                completer.resolve(_this._initApp(zone, providers));
	            });
	        });
	        return completer.promise;
	    };
	    PlatformRef_.prototype._initApp = function (zone, providers) {
	        var _this = this;
	        var injector;
	        var app;
	        zone.run(function () {
	            providers.push(di_1.provide(ng_zone_1.NgZone, { useValue: zone }));
	            providers.push(di_1.provide(ApplicationRef, { useFactory: function () { return app; }, deps: [] }));
	            var exceptionHandler;
	            try {
	                injector = _this.injector.resolveAndCreateChild(providers);
	                exceptionHandler = injector.get(exceptions_1.ExceptionHandler);
	                zone.overrideOnErrorHandler(function (e, s) { return exceptionHandler.call(e, s); });
	            }
	            catch (e) {
	                if (lang_1.isPresent(exceptionHandler)) {
	                    exceptionHandler.call(e, e.stack);
	                }
	                else {
	                    dom_adapter_1.DOM.logError(e);
	                }
	            }
	        });
	        app = new ApplicationRef_(this, zone, injector);
	        this._applications.push(app);
	        return app;
	    };
	    PlatformRef_.prototype.dispose = function () {
	        this._applications.forEach(function (app) { return app.dispose(); });
	        this._disposeListeners.forEach(function (dispose) { return dispose(); });
	        this._dispose();
	    };
	    /** @internal */
	    PlatformRef_.prototype._applicationDisposed = function (app) { collection_1.ListWrapper.remove(this._applications, app); };
	    return PlatformRef_;
	})(PlatformRef);
	exports.PlatformRef_ = PlatformRef_;
	/**
	 * A reference to an Angular application running on a page.
	 *
	 * For more about Angular applications, see the documentation for {@link bootstrap}.
	 */
	var ApplicationRef = (function () {
	    function ApplicationRef() {
	    }
	    Object.defineProperty(ApplicationRef.prototype, "injector", {
	        /**
	         * Retrieve the application {@link Injector}.
	         */
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(ApplicationRef.prototype, "zone", {
	        /**
	         * Retrieve the application {@link NgZone}.
	         */
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(ApplicationRef.prototype, "componentTypes", {
	        /**
	         * Get a list of component types registered to this application.
	         */
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    return ApplicationRef;
	})();
	exports.ApplicationRef = ApplicationRef;
	var ApplicationRef_ = (function (_super) {
	    __extends(ApplicationRef_, _super);
	    function ApplicationRef_(_platform, _zone, _injector) {
	        var _this = this;
	        _super.call(this);
	        this._platform = _platform;
	        this._zone = _zone;
	        this._injector = _injector;
	        /** @internal */
	        this._bootstrapListeners = [];
	        /** @internal */
	        this._disposeListeners = [];
	        /** @internal */
	        this._rootComponents = [];
	        /** @internal */
	        this._rootComponentTypes = [];
	        /** @internal */
	        this._changeDetectorRefs = [];
	        /** @internal */
	        this._runningTick = false;
	        /** @internal */
	        this._enforceNoNewChanges = false;
	        if (lang_1.isPresent(this._zone)) {
	            async_1.ObservableWrapper.subscribe(this._zone.onTurnDone, function (_) { _this._zone.run(function () { _this.tick(); }); });
	        }
	        this._enforceNoNewChanges = lang_1.assertionsEnabled();
	    }
	    ApplicationRef_.prototype.registerBootstrapListener = function (listener) {
	        this._bootstrapListeners.push(listener);
	    };
	    ApplicationRef_.prototype.registerDisposeListener = function (dispose) { this._disposeListeners.push(dispose); };
	    ApplicationRef_.prototype.registerChangeDetector = function (changeDetector) {
	        this._changeDetectorRefs.push(changeDetector);
	    };
	    ApplicationRef_.prototype.unregisterChangeDetector = function (changeDetector) {
	        collection_1.ListWrapper.remove(this._changeDetectorRefs, changeDetector);
	    };
	    ApplicationRef_.prototype.bootstrap = function (componentType, providers) {
	        var _this = this;
	        var completer = async_1.PromiseWrapper.completer();
	        this._zone.run(function () {
	            var componentProviders = _componentProviders(componentType);
	            if (lang_1.isPresent(providers)) {
	                componentProviders.push(providers);
	            }
	            var exceptionHandler = _this._injector.get(exceptions_1.ExceptionHandler);
	            _this._rootComponentTypes.push(componentType);
	            try {
	                var injector = _this._injector.resolveAndCreateChild(componentProviders);
	                var compRefToken = injector.get(application_tokens_1.APP_COMPONENT_REF_PROMISE);
	                var tick = function (componentRef) {
	                    _this._loadComponent(componentRef);
	                    completer.resolve(componentRef);
	                };
	                var tickResult = async_1.PromiseWrapper.then(compRefToken, tick);
	                async_1.PromiseWrapper.then(tickResult, function (_) { });
	                async_1.PromiseWrapper.then(tickResult, null, function (err, stackTrace) { return completer.reject(err, stackTrace); });
	            }
	            catch (e) {
	                exceptionHandler.call(e, e.stack);
	                completer.reject(e, e.stack);
	            }
	        });
	        return completer.promise;
	    };
	    /** @internal */
	    ApplicationRef_.prototype._loadComponent = function (ref) {
	        var appChangeDetector = view_ref_1.internalView(ref.hostView).changeDetector;
	        this._changeDetectorRefs.push(appChangeDetector.ref);
	        this.tick();
	        this._rootComponents.push(ref);
	        this._bootstrapListeners.forEach(function (listener) { return listener(ref); });
	    };
	    /** @internal */
	    ApplicationRef_.prototype._unloadComponent = function (ref) {
	        if (!collection_1.ListWrapper.contains(this._rootComponents, ref)) {
	            return;
	        }
	        this.unregisterChangeDetector(view_ref_1.internalView(ref.hostView).changeDetector.ref);
	        collection_1.ListWrapper.remove(this._rootComponents, ref);
	    };
	    Object.defineProperty(ApplicationRef_.prototype, "injector", {
	        get: function () { return this._injector; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ApplicationRef_.prototype, "zone", {
	        get: function () { return this._zone; },
	        enumerable: true,
	        configurable: true
	    });
	    ApplicationRef_.prototype.tick = function () {
	        if (this._runningTick) {
	            throw new exceptions_1.BaseException("ApplicationRef.tick is called recursively");
	        }
	        var s = ApplicationRef_._tickScope();
	        try {
	            this._runningTick = true;
	            this._changeDetectorRefs.forEach(function (detector) { return detector.detectChanges(); });
	            if (this._enforceNoNewChanges) {
	                this._changeDetectorRefs.forEach(function (detector) { return detector.checkNoChanges(); });
	            }
	        }
	        finally {
	            this._runningTick = false;
	            profile_1.wtfLeave(s);
	        }
	    };
	    ApplicationRef_.prototype.dispose = function () {
	        // TODO(alxhub): Dispose of the NgZone.
	        this._rootComponents.forEach(function (ref) { return ref.dispose(); });
	        this._disposeListeners.forEach(function (dispose) { return dispose(); });
	        this._platform._applicationDisposed(this);
	    };
	    Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
	        get: function () { return this._rootComponentTypes; },
	        enumerable: true,
	        configurable: true
	    });
	    /** @internal */
	    ApplicationRef_._tickScope = profile_1.wtfCreateScope('ApplicationRef#tick()');
	    return ApplicationRef_;
	})(ApplicationRef);
	exports.ApplicationRef_ = ApplicationRef_;
	//# sourceMappingURL=application_ref.js.map

/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';// Note: This file only exists so that Dart users can import
	// bootstrap from angular2/bootstrap. JS users should import
	// from angular2/core.
	var application_1 = __webpack_require__(337);
	exports.bootstrap = application_1.bootstrap;
	//# sourceMappingURL=bootstrap.js.map

/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';// Public API for Services
	var app_root_url_1 = __webpack_require__(363);
	exports.AppRootUrl = app_root_url_1.AppRootUrl;
	var url_resolver_1 = __webpack_require__(352);
	exports.UrlResolver = url_resolver_1.UrlResolver;
	var title_1 = __webpack_require__(379);
	exports.Title = title_1.Title;
	//# sourceMappingURL=services.js.map

/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var dom_adapter_1 = __webpack_require__(287);
	/**
	 * A service that can be used to get and set the title of a current HTML document.
	 *
	 * Since an Angular 2 application can't be bootstrapped on the entire HTML document (`<html>` tag)
	 * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements
	 * (representing the `<title>` tag). Instead, this service can be used to set and get the current
	 * title value.
	 */
	var Title = (function () {
	    function Title() {
	    }
	    /**
	     * Get the title of the current HTML document.
	     * @returns {string}
	     */
	    Title.prototype.getTitle = function () { return dom_adapter_1.DOM.getTitle(); };
	    /**
	     * Set the title of the current HTML document.
	     * @param newTitle
	     */
	    Title.prototype.setTitle = function (newTitle) { dom_adapter_1.DOM.setTitle(newTitle); };
	    return Title;
	})();
	exports.Title = Title;
	//# sourceMappingURL=title.js.map

/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';// Public API for Zone
	var ng_zone_1 = __webpack_require__(297);
	exports.NgZone = ng_zone_1.NgZone;
	exports.NgZoneError = ng_zone_1.NgZoneError;
	//# sourceMappingURL=zone.js.map

/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var debug_element_1 = __webpack_require__(382);
	exports.DebugElement = debug_element_1.DebugElement;
	exports.asNativeElements = debug_element_1.asNativeElements;
	exports.By = debug_element_1.By;
	exports.Scope = debug_element_1.Scope;
	exports.inspectElement = debug_element_1.inspectElement;
	var debug_element_view_listener_1 = __webpack_require__(383);
	exports.inspectNativeElement = debug_element_view_listener_1.inspectNativeElement;
	exports.ELEMENT_PROBE_PROVIDERS = debug_element_view_listener_1.ELEMENT_PROBE_PROVIDERS;
	exports.ELEMENT_PROBE_BINDINGS = debug_element_view_listener_1.ELEMENT_PROBE_BINDINGS;
	//# sourceMappingURL=debug.js.map

/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var dom_adapter_1 = __webpack_require__(287);
	var view_1 = __webpack_require__(266);
	var view_ref_1 = __webpack_require__(267);
	/**
	 * A DebugElement contains information from the Angular compiler about an
	 * element and provides access to the corresponding ElementInjector and
	 * underlying DOM Element, as well as a way to query for children.
	 */
	var DebugElement = (function () {
	    function DebugElement() {
	    }
	    Object.defineProperty(DebugElement.prototype, "componentInstance", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(DebugElement.prototype, "nativeElement", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(DebugElement.prototype, "elementRef", {
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(DebugElement.prototype, "children", {
	        /**
	         * Get child DebugElements from within the Light DOM.
	         *
	         * @return {DebugElement[]}
	         */
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(DebugElement.prototype, "componentViewChildren", {
	        /**
	         * Get the root DebugElement children of a component. Returns an empty
	         * list if the current DebugElement is not a component root.
	         *
	         * @return {DebugElement[]}
	         */
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    /**
	     * Return the first descendant TestElement matching the given predicate
	     * and scope.
	     *
	     * @param {Function: boolean} predicate
	     * @param {Scope} scope
	     *
	     * @return {DebugElement}
	     */
	    DebugElement.prototype.query = function (predicate, scope) {
	        if (scope === void 0) { scope = Scope.all; }
	        var results = this.queryAll(predicate, scope);
	        return results.length > 0 ? results[0] : null;
	    };
	    /**
	     * Return descendant TestElememts matching the given predicate
	     * and scope.
	     *
	     * @param {Function: boolean} predicate
	     * @param {Scope} scope
	     *
	     * @return {DebugElement[]}
	     */
	    DebugElement.prototype.queryAll = function (predicate, scope) {
	        if (scope === void 0) { scope = Scope.all; }
	        var elementsInScope = scope(this);
	        return elementsInScope.filter(predicate);
	    };
	    return DebugElement;
	})();
	exports.DebugElement = DebugElement;
	var DebugElement_ = (function (_super) {
	    __extends(DebugElement_, _super);
	    function DebugElement_(_parentView, _boundElementIndex) {
	        _super.call(this);
	        this._parentView = _parentView;
	        this._boundElementIndex = _boundElementIndex;
	        this._elementInjector = this._parentView.elementInjectors[this._boundElementIndex];
	    }
	    Object.defineProperty(DebugElement_.prototype, "componentInstance", {
	        get: function () {
	            if (!lang_1.isPresent(this._elementInjector)) {
	                return null;
	            }
	            return this._elementInjector.getComponent();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugElement_.prototype, "nativeElement", {
	        get: function () { return this.elementRef.nativeElement; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugElement_.prototype, "elementRef", {
	        get: function () { return this._parentView.elementRefs[this._boundElementIndex]; },
	        enumerable: true,
	        configurable: true
	    });
	    DebugElement_.prototype.getDirectiveInstance = function (directiveIndex) {
	        return this._elementInjector.getDirectiveAtIndex(directiveIndex);
	    };
	    Object.defineProperty(DebugElement_.prototype, "children", {
	        get: function () {
	            return this._getChildElements(this._parentView, this._boundElementIndex);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugElement_.prototype, "componentViewChildren", {
	        get: function () {
	            var shadowView = this._parentView.getNestedView(this._boundElementIndex);
	            if (!lang_1.isPresent(shadowView) || shadowView.proto.type !== view_1.ViewType.COMPONENT) {
	                // The current element is not a component.
	                return [];
	            }
	            return this._getChildElements(shadowView, null);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DebugElement_.prototype.triggerEventHandler = function (eventName, eventObj) {
	        this._parentView.triggerEventHandlers(eventName, eventObj, this._boundElementIndex);
	    };
	    DebugElement_.prototype.hasDirective = function (type) {
	        if (!lang_1.isPresent(this._elementInjector)) {
	            return false;
	        }
	        return this._elementInjector.hasDirective(type);
	    };
	    DebugElement_.prototype.inject = function (type) {
	        if (!lang_1.isPresent(this._elementInjector)) {
	            return null;
	        }
	        return this._elementInjector.get(type);
	    };
	    DebugElement_.prototype.getLocal = function (name) { return this._parentView.locals.get(name); };
	    /** @internal */
	    DebugElement_.prototype._getChildElements = function (view, parentBoundElementIndex) {
	        var _this = this;
	        var els = [];
	        var parentElementBinder = null;
	        if (lang_1.isPresent(parentBoundElementIndex)) {
	            parentElementBinder = view.proto.elementBinders[parentBoundElementIndex - view.elementOffset];
	        }
	        for (var i = 0; i < view.proto.elementBinders.length; ++i) {
	            var binder = view.proto.elementBinders[i];
	            if (binder.parent == parentElementBinder) {
	                els.push(new DebugElement_(view, view.elementOffset + i));
	                var views = view.viewContainers[view.elementOffset + i];
	                if (lang_1.isPresent(views)) {
	                    views.views.forEach(function (nextView) { els = els.concat(_this._getChildElements(nextView, null)); });
	                }
	            }
	        }
	        return els;
	    };
	    return DebugElement_;
	})(DebugElement);
	exports.DebugElement_ = DebugElement_;
	/**
	 * Returns a DebugElement for a ElementRef.
	 *
	 * @param {ElementRef}: elementRef
	 * @return {DebugElement}
	 */
	function inspectElement(elementRef) {
	    return new DebugElement_(view_ref_1.internalView(elementRef.parentView), elementRef.boundElementIndex);
	}
	exports.inspectElement = inspectElement;
	function asNativeElements(arr) {
	    return arr.map(function (debugEl) { return debugEl.nativeElement; });
	}
	exports.asNativeElements = asNativeElements;
	var Scope = (function () {
	    function Scope() {
	    }
	    Scope.all = function (debugElement) {
	        var scope = [];
	        scope.push(debugElement);
	        debugElement.children.forEach(function (child) { return scope = scope.concat(Scope.all(child)); });
	        debugElement.componentViewChildren.forEach(function (child) { return scope = scope.concat(Scope.all(child)); });
	        return scope;
	    };
	    Scope.light = function (debugElement) {
	        var scope = [];
	        debugElement.children.forEach(function (child) {
	            scope.push(child);
	            scope = scope.concat(Scope.light(child));
	        });
	        return scope;
	    };
	    Scope.view = function (debugElement) {
	        var scope = [];
	        debugElement.componentViewChildren.forEach(function (child) {
	            scope.push(child);
	            scope = scope.concat(Scope.light(child));
	        });
	        return scope;
	    };
	    return Scope;
	})();
	exports.Scope = Scope;
	var By = (function () {
	    function By() {
	    }
	    By.all = function () { return function (debugElement) { return true; }; };
	    By.css = function (selector) {
	        return function (debugElement) {
	            return lang_1.isPresent(debugElement.nativeElement) ?
	                dom_adapter_1.DOM.elementMatches(debugElement.nativeElement, selector) :
	                false;
	        };
	    };
	    By.directive = function (type) {
	        return function (debugElement) { return debugElement.hasDirective(type); };
	    };
	    return By;
	})();
	exports.By = By;
	//# sourceMappingURL=debug_element.js.map

/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(49);
	var collection_1 = __webpack_require__(202);
	var di_1 = __webpack_require__(196);
	var view_listener_1 = __webpack_require__(276);
	var dom_adapter_1 = __webpack_require__(287);
	var api_1 = __webpack_require__(262);
	var debug_element_1 = __webpack_require__(382);
	var NG_ID_PROPERTY = 'ngid';
	var INSPECT_GLOBAL_NAME = 'ng.probe';
	var NG_ID_SEPARATOR = '#';
	// Need to keep the views in a global Map so that multiple angular apps are supported
	var _allIdsByView = new collection_1.Map();
	var _allViewsById = new collection_1.Map();
	var _nextId = 0;
	function _setElementId(element, indices) {
	    if (lang_1.isPresent(element)) {
	        dom_adapter_1.DOM.setData(element, NG_ID_PROPERTY, indices.join(NG_ID_SEPARATOR));
	    }
	}
	function _getElementId(element) {
	    var elId = dom_adapter_1.DOM.getData(element, NG_ID_PROPERTY);
	    if (lang_1.isPresent(elId)) {
	        return elId.split(NG_ID_SEPARATOR).map(function (partStr) { return lang_1.NumberWrapper.parseInt(partStr, 10); });
	    }
	    else {
	        return null;
	    }
	}
	function inspectNativeElement(element) {
	    var elId = _getElementId(element);
	    if (lang_1.isPresent(elId)) {
	        var view = _allViewsById.get(elId[0]);
	        if (lang_1.isPresent(view)) {
	            return new debug_element_1.DebugElement_(view, elId[1]);
	        }
	    }
	    return null;
	}
	exports.inspectNativeElement = inspectNativeElement;
	var DebugElementViewListener = (function () {
	    function DebugElementViewListener(_renderer) {
	        this._renderer = _renderer;
	        dom_adapter_1.DOM.setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
	    }
	    DebugElementViewListener.prototype.onViewCreated = function (view) {
	        var viewId = _nextId++;
	        _allViewsById.set(viewId, view);
	        _allIdsByView.set(view, viewId);
	        for (var i = 0; i < view.elementRefs.length; i++) {
	            var el = view.elementRefs[i];
	            _setElementId(this._renderer.getNativeElementSync(el), [viewId, i]);
	        }
	    };
	    DebugElementViewListener.prototype.onViewDestroyed = function (view) {
	        var viewId = _allIdsByView.get(view);
	        _allIdsByView.delete(view);
	        _allViewsById.delete(viewId);
	    };
	    DebugElementViewListener = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [api_1.Renderer])
	    ], DebugElementViewListener);
	    return DebugElementViewListener;
	})();
	exports.DebugElementViewListener = DebugElementViewListener;
	exports.ELEMENT_PROBE_PROVIDERS = lang_1.CONST_EXPR([
	    DebugElementViewListener,
	    lang_1.CONST_EXPR(new di_1.Provider(view_listener_1.AppViewListener, { useExisting: DebugElementViewListener })),
	]);
	exports.ELEMENT_PROBE_BINDINGS = exports.ELEMENT_PROBE_PROVIDERS;
	//# sourceMappingURL=debug_element_view_listener.js.map

/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	exports.enableDevMode = lang_1.enableDevMode;
	//# sourceMappingURL=dev_mode.js.map

/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var profile_1 = __webpack_require__(235);
	exports.wtfCreateScope = profile_1.wtfCreateScope;
	exports.wtfLeave = profile_1.wtfLeave;
	exports.wtfStartTimeRange = profile_1.wtfStartTimeRange;
	exports.wtfEndTimeRange = profile_1.wtfEndTimeRange;
	//# sourceMappingURL=profile.js.map

/***/ },
/* 386 */
/***/ function(module, exports) {

	'use strict';/**
	 * @module
	 * @description
	 * Defines interfaces to be implemented by directives when they need to hook into the change
	 * detection mechanism.
	 */
	//# sourceMappingURL=lifecycle_hooks.js.map

/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * This file is only used for dart applications and for internal examples
	 * that compile with both JavaScript and Dart.
	 */
	var bootstrap_1 = __webpack_require__(377);
	exports.bootstrap = bootstrap_1.bootstrap;
	//# sourceMappingURL=bootstrap.js.map

/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * @module
	 * @description
	 * Adapter allowing AngularJS v1 and Angular v2 to run side by side in the same application.
	 */
	var upgrade_adapter_1 = __webpack_require__(389);
	exports.UpgradeAdapter = upgrade_adapter_1.UpgradeAdapter;
	exports.UpgradeAdapterRef = upgrade_adapter_1.UpgradeAdapterRef;
	//# sourceMappingURL=upgrade.js.map

/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var angular2_1 = __webpack_require__(45);
	var application_common_1 = __webpack_require__(365);
	var application_ref_1 = __webpack_require__(376);
	var compiler_1 = __webpack_require__(338);
	var async_1 = __webpack_require__(50);
	var metadata_1 = __webpack_require__(390);
	var util_1 = __webpack_require__(391);
	var constants_1 = __webpack_require__(392);
	var downgrade_ng2_adapter_1 = __webpack_require__(393);
	var upgrade_ng1_adapter_1 = __webpack_require__(394);
	var angular = __webpack_require__(395);
	var upgradeCount = 0;
	/**
	 * Use `UpgradeAdapter` to allow AngularJS v1 and Angular v2 to coexist in a single application.
	 *
	 * The `UpgradeAdapter` allows:
	 * 1. creation of Angular v2 component from AngularJS v1 component directive
	 *    (See [UpgradeAdapter#upgradeNg1Component()])
	 * 2. creation of AngularJS v1 directive from Angular v2 component.
	 *    (See [UpgradeAdapter#downgradeNg2Component()])
	 * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks
	 *    coexisting in a single application.
	 *
	 * ## Mental Model
	 *
	 * When reasoning about how a hybrid application works it is useful to have a mental model which
	 * describes what is happening and explains what is happening at the lowest level.
	 *
	 * 1. There are two independent frameworks running in a single application, each framework treats
	 *    the other as a black box.
	 * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework
	 *    instantiated the element is the owner. Each framework only updates/interacts with its own
	 *    DOM elements and ignores others.
	 * 3. AngularJS v1 directives always execute inside AngularJS v1 framework codebase regardless of
	 *    where they are instantiated.
	 * 4. Angular v2 components always execute inside Angular v2 framework codebase regardless of
	 *    where they are instantiated.
	 * 5. An AngularJS v1 component can be upgraded to an Angular v2 component. This creates an
	 *    Angular v2 directive, which bootstraps the AngularJS v1 component directive in that location.
	 * 6. An Angular v2 component can be downgraded to an AngularJS v1 component directive. This creates
	 *    an AngularJS v1 directive, which bootstraps the Angular v2 component in that location.
	 * 7. Whenever an adapter component is instantiated the host element is owned by the the framework
	 *    doing the instantiation. The other framework then instantiates and owns the view for that
	 *    component. This implies that component bindings will always follow the semantics of the
	 *    instantiation framework. The syntax is always that of Angular v2 syntax.
	 * 8. AngularJS v1 is always bootstrapped first and owns the bottom most view.
	 * 9. The new application is running in Angular v2 zone, and therefore it no longer needs calls to
	 *    `$apply()`.
	 *
	 * ### Example
	 *
	 * ```
	 * var adapter = new UpgradeAdapter();
	 * var module = angular.module('myExample', []);
	 * module.directive('ng2', adapter.downgradeNg2Component(Ng2));
	 *
	 * module.directive('ng1', function() {
	 *   return {
	 *      scope: { title: '=' },
	 *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'
	 *   };
	 * });
	 *
	 *
	 * @Component({
	 *   selector: 'ng2',
	 *   inputs: ['name'],
	 *   template: 'ng2[<ng1 [title]="name">transclude</ng1>](<ng-content></ng-content>)',
	 *   directives: [adapter.upgradeNg1Component('ng1')]
	 * })
	 * class Ng2 {
	 * }
	 *
	 * document.body.innerHTML = '<ng2 name="World">project</ng2>';
	 *
	 * adapter.bootstrap(document.body, ['myExample']).ready(function() {
	 *   expect(document.body.textContent).toEqual(
	 *       "ng2[ng1[Hello World!](transclude)](project)");
	 * });
	 * ```
	 */
	var UpgradeAdapter = (function () {
	    function UpgradeAdapter() {
	        /* @internal */
	        this.idPrefix = "NG2_UPGRADE_" + upgradeCount++ + "_";
	        /* @internal */
	        this.upgradedComponents = [];
	        /* @internal */
	        this.downgradedComponents = {};
	        /* @internal */
	        this.providers = [];
	    }
	    /**
	     * Allows Angular v2 Component to be used from AngularJS v1.
	     *
	     * Use `downgradeNg2Component` to create an AngularJS v1 Directive Definition Factory from
	     * Angular v2 Component. The adapter will bootstrap Angular v2 component from within the
	     * AngularJS v1 template.
	     *
	     * ## Mental Model
	     *
	     * 1. The component is instantiated by being listed in AngularJS v1 template. This means that the
	     *    host element is controlled by AngularJS v1, but the component's view will be controlled by
	     *    Angular v2.
	     * 2. Even thought the component is instantiated in AngularJS v1, it will be using Angular v2
	     *    syntax. This has to be done, this way because we must follow Angular v2 components do not
	     *    declare how the attributes should be interpreted.
	     *
	     * ## Supported Features
	     *
	     * - Bindings:
	     *   - Attribute: `<comp name="World">`
	     *   - Interpolation:  `<comp greeting="Hello {{name}}!">`
	     *   - Expression:  `<comp [name]="username">`
	     *   - Event:  `<comp (close)="doSomething()">`
	     * - Content projection: yes
	     *
	     * ### Example
	     *
	     * ```
	     * var adapter = new UpgradeAdapter();
	     * var module = angular.module('myExample', []);
	     * module.directive('greet', adapter.downgradeNg2Component(Greeter));
	     *
	     * @Component({
	     *   selector: 'greet',
	     *   template: '{{salutation}} {{name}}! - <ng-content></ng-content>'
	     * })
	     * class Greeter {
	     *   @Input() salutation: string;
	     *   @Input() name: string;
	     * }
	     *
	     * document.body.innerHTML =
	     *   'ng1 template: <greet salutation="Hello" [name]="world">text</greet>';
	     *
	     * adapter.bootstrap(document.body, ['myExample']).ready(function() {
	     *   expect(document.body.textContent).toEqual("ng1 template: Hello world! - text");
	     * });
	     * ```
	     */
	    UpgradeAdapter.prototype.downgradeNg2Component = function (type) {
	        this.upgradedComponents.push(type);
	        var info = metadata_1.getComponentInfo(type);
	        return ng1ComponentDirective(info, "" + this.idPrefix + info.selector + "_c");
	    };
	    /**
	     * Allows AngularJS v1 Component to be used from Angular v2.
	     *
	     * Use `upgradeNg1Component` to create an Angular v2 component from AngularJS v1 Component
	     * directive. The adapter will bootstrap AngularJS v1 component from within the Angular v2
	     * template.
	     *
	     * ## Mental Model
	     *
	     * 1. The component is instantiated by being listed in Angular v2 template. This means that the
	     *    host element is controlled by Angular v2, but the component's view will be controlled by
	     *    AngularJS v1.
	     *
	     * ## Supported Features
	     *
	     * - Bindings:
	     *   - Attribute: `<comp name="World">`
	     *   - Interpolation:  `<comp greeting="Hello {{name}}!">`
	     *   - Expression:  `<comp [name]="username">`
	     *   - Event:  `<comp (close)="doSomething()">`
	     * - Transclusion: yes
	     * - Only some of the features of
	     *   [Directive Definition Object](https://docs.angularjs.org/api/ng/service/$compile) are
	     *   supported:
	     *   - `compile`: not supported because the host element is owned by Angular v2, which does
	     *     not allow modifying DOM structure during compilation.
	     *   - `controller`: supported. (NOTE: injection of `$attrs` and `$transclude` is not supported.)
	     *   - `controllerAs': supported.
	     *   - `bindToController': supported.
	     *   - `link': supported. (NOTE: only pre-link function is supported.)
	     *   - `name': supported.
	     *   - `priority': ignored.
	     *   - `replace': not supported.
	     *   - `require`: supported.
	     *   - `restrict`: must be set to 'E'.
	     *   - `scope`: supported.
	     *   - `template`: supported.
	     *   - `templateUrl`: supported.
	     *   - `terminal`: ignored.
	     *   - `transclude`: supported.
	     *
	     *
	     * ### Example
	     *
	     * ```
	     * var adapter = new UpgradeAdapter();
	     * var module = angular.module('myExample', []);
	     *
	     * module.directive('greet', function() {
	     *   return {
	     *     scope: {salutation: '=', name: '=' },
	     *     template: '{{salutation}} {{name}}! - <span ng-transclude></span>'
	     *   };
	     * });
	     *
	     * module.directive('ng2', adapter.downgradeNg2Component(Ng2));
	     *
	     * @Component({
	     *   selector: 'ng2',
	     *   template: 'ng2 template: <greet salutation="Hello" [name]="world">text</greet>'
	     *   directives: [adapter.upgradeNg1Component('greet')]
	     * })
	     * class Ng2 {
	     * }
	     *
	     * document.body.innerHTML = '<ng2></ng2>';
	     *
	     * adapter.bootstrap(document.body, ['myExample']).ready(function() {
	     *   expect(document.body.textContent).toEqual("ng2 template: Hello world! - text");
	     * });
	     * ```
	     */
	    UpgradeAdapter.prototype.upgradeNg1Component = function (name) {
	        if (this.downgradedComponents.hasOwnProperty(name)) {
	            return this.downgradedComponents[name].type;
	        }
	        else {
	            return (this.downgradedComponents[name] = new upgrade_ng1_adapter_1.UpgradeNg1ComponentAdapterBuilder(name)).type;
	        }
	    };
	    /**
	     * Bootstrap a hybrid AngularJS v1 / Angular v2 application.
	     *
	     * This `bootstrap` method is a direct replacement (takes same arguments) for AngularJS v1
	     * [`bootstrap`](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method. Unlike
	     * AngularJS v1, this bootstrap is asynchronous.
	     *
	     * ### Example
	     *
	     * ```
	     * var adapter = new UpgradeAdapter();
	     * var module = angular.module('myExample', []);
	     * module.directive('ng2', adapter.downgradeNg2Component(Ng2));
	     *
	     * module.directive('ng1', function() {
	     *   return {
	     *      scope: { title: '=' },
	     *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'
	     *   };
	     * });
	     *
	     *
	     * @Component({
	     *   selector: 'ng2',
	     *   inputs: ['name'],
	     *   template: 'ng2[<ng1 [title]="name">transclude</ng1>](<ng-content></ng-content>)',
	     *   directives: [adapter.upgradeNg1Component('ng1')]
	     * })
	     * class Ng2 {
	     * }
	     *
	     * document.body.innerHTML = '<ng2 name="World">project</ng2>';
	     *
	     * adapter.bootstrap(document.body, ['myExample']).ready(function() {
	     *   expect(document.body.textContent).toEqual(
	     *       "ng2[ng1[Hello World!](transclude)](project)");
	     * });
	     * ```
	     */
	    UpgradeAdapter.prototype.bootstrap = function (element, modules, config) {
	        var _this = this;
	        var upgrade = new UpgradeAdapterRef();
	        var ng1Injector = null;
	        var platformRef = angular2_1.platform();
	        var applicationRef = platformRef.application([
	            application_ref_1.applicationCommonProviders(),
	            application_common_1.applicationDomProviders(),
	            compiler_1.compilerProviders(),
	            angular2_1.provide(constants_1.NG1_INJECTOR, { useFactory: function () { return ng1Injector; } }),
	            angular2_1.provide(constants_1.NG1_COMPILE, { useFactory: function () { return ng1Injector.get(constants_1.NG1_COMPILE); } }),
	            this.providers
	        ]);
	        var injector = applicationRef.injector;
	        var ngZone = injector.get(angular2_1.NgZone);
	        var compiler = injector.get(angular2_1.Compiler);
	        var delayApplyExps = [];
	        var original$applyFn;
	        var rootScopePrototype;
	        var rootScope;
	        var protoViewRefMap = {};
	        var ng1Module = angular.module(this.idPrefix, modules);
	        var ng1compilePromise = null;
	        ng1Module.value(constants_1.NG2_INJECTOR, injector)
	            .value(constants_1.NG2_ZONE, ngZone)
	            .value(constants_1.NG2_COMPILER, compiler)
	            .value(constants_1.NG2_PROTO_VIEW_REF_MAP, protoViewRefMap)
	            .value(constants_1.NG2_APP_VIEW_MANAGER, injector.get(angular2_1.AppViewManager))
	            .config([
	            '$provide',
	            function (provide) {
	                provide.decorator(constants_1.NG1_ROOT_SCOPE, [
	                    '$delegate',
	                    function (rootScopeDelegate) {
	                        rootScopePrototype = rootScopeDelegate.constructor.prototype;
	                        if (rootScopePrototype.hasOwnProperty('$apply')) {
	                            original$applyFn = rootScopePrototype.$apply;
	                            rootScopePrototype.$apply = function (exp) { return delayApplyExps.push(exp); };
	                        }
	                        else {
	                            throw new Error("Failed to find '$apply' on '$rootScope'!");
	                        }
	                        return rootScope = rootScopeDelegate;
	                    }
	                ]);
	            }
	        ])
	            .run([
	            '$injector',
	            '$rootScope',
	            function (injector, rootScope) {
	                ng1Injector = injector;
	                async_1.ObservableWrapper.subscribe(ngZone.onTurnDone, function (_) { ngZone.run(function () { return rootScope.$apply(); }); });
	                ng1compilePromise =
	                    upgrade_ng1_adapter_1.UpgradeNg1ComponentAdapterBuilder.resolve(_this.downgradedComponents, injector);
	            }
	        ]);
	        angular.element(element).data(util_1.controllerKey(constants_1.NG2_INJECTOR), injector);
	        ngZone.run(function () { angular.bootstrap(element, [_this.idPrefix], config); });
	        Promise.all([this.compileNg2Components(compiler, protoViewRefMap), ng1compilePromise])
	            .then(function () {
	            ngZone.run(function () {
	                if (rootScopePrototype) {
	                    rootScopePrototype.$apply = original$applyFn; // restore original $apply
	                    while (delayApplyExps.length) {
	                        rootScope.$apply(delayApplyExps.shift());
	                    }
	                    upgrade._bootstrapDone(applicationRef, ng1Injector);
	                    rootScopePrototype = null;
	                }
	            });
	        }, util_1.onError);
	        return upgrade;
	    };
	    /**
	     * Adds a provider to the top level environment of a hybrid AngularJS v1 / Angular v2 application.
	     *
	     * In hybrid AngularJS v1 / Angular v2 application, there is no one root Angular v2 component,
	     * for this reason we provide an application global way of registering providers which is
	     * consistent with single global injection in AngularJS v1.
	     *
	     * ### Example
	     *
	     * ```
	     * class Greeter {
	     *   greet(name) {
	     *     alert('Hello ' + name + '!');
	     *   }
	     * }
	     *
	     * @Component({
	     *   selector: 'app',
	     *   template: ''
	     * })
	     * class App {
	     *   constructor(greeter: Greeter) {
	     *     this.greeter('World');
	     *   }
	     * }
	     *
	     * var adapter = new UpgradeAdapter();
	     * adapter.addProvider(Greeter);
	     *
	     * var module = angular.module('myExample', []);
	     * module.directive('app', adapter.downgradeNg2Component(App));
	     *
	     * document.body.innerHTML = '<app></app>'
	     * adapter.bootstrap(document.body, ['myExample']);
	     *```
	     */
	    UpgradeAdapter.prototype.addProvider = function (provider) { this.providers.push(provider); };
	    /**
	     * Allows AngularJS v1 service to be accessible from Angular v2.
	     *
	     *
	     * ### Example
	     *
	     * ```
	     * class Login { ... }
	     * class Server { ... }
	     *
	     * @Injectable()
	     * class Example {
	     *   constructor(@Inject('server') server, login: Login) {
	     *     ...
	     *   }
	     * }
	     *
	     * var module = angular.module('myExample', []);
	     * module.service('server', Server);
	     * module.service('login', Login);
	     *
	     * var adapter = new UpgradeAdapter();
	     * adapter.upgradeNg1Provider('server');
	     * adapter.upgradeNg1Provider('login', {asToken: Login});
	     * adapter.addProvider(Example);
	     *
	     * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {
	     *   var example: Example = ref.ng2Injector.get(Example);
	     * });
	     *
	     * ```
	     */
	    UpgradeAdapter.prototype.upgradeNg1Provider = function (name, options) {
	        var token = options && options.asToken || name;
	        this.providers.push(angular2_1.provide(token, {
	            useFactory: function (ng1Injector) { return ng1Injector.get(name); },
	            deps: [constants_1.NG1_INJECTOR]
	        }));
	    };
	    /**
	     * Allows Angular v2 service to be accessible from AngularJS v1.
	     *
	     *
	     * ### Example
	     *
	     * ```
	     * class Example {
	     * }
	     *
	     * var adapter = new UpgradeAdapter();
	     * adapter.addProvider(Example);
	     *
	     * var module = angular.module('myExample', []);
	     * module.factory('example', adapter.downgradeNg2Provider(Example));
	     *
	     * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {
	     *   var example: Example = ref.ng1Injector.get('example');
	     * });
	     *
	     * ```
	     */
	    UpgradeAdapter.prototype.downgradeNg2Provider = function (token) {
	        var factory = function (injector) { return injector.get(token); };
	        factory.$inject = [constants_1.NG2_INJECTOR];
	        return factory;
	    };
	    /* @internal */
	    UpgradeAdapter.prototype.compileNg2Components = function (compiler, protoViewRefMap) {
	        var _this = this;
	        var promises = [];
	        var types = this.upgradedComponents;
	        for (var i = 0; i < types.length; i++) {
	            promises.push(compiler.compileInHost(types[i]));
	        }
	        return Promise.all(promises).then(function (protoViews) {
	            var types = _this.upgradedComponents;
	            for (var i = 0; i < protoViews.length; i++) {
	                protoViewRefMap[metadata_1.getComponentInfo(types[i]).selector] = protoViews[i];
	            }
	            return protoViewRefMap;
	        }, util_1.onError);
	    };
	    return UpgradeAdapter;
	})();
	exports.UpgradeAdapter = UpgradeAdapter;
	function ng1ComponentDirective(info, idPrefix) {
	    directiveFactory.$inject = [constants_1.NG2_PROTO_VIEW_REF_MAP, constants_1.NG2_APP_VIEW_MANAGER, constants_1.NG1_PARSE];
	    function directiveFactory(protoViewRefMap, viewManager, parse) {
	        var protoView = protoViewRefMap[info.selector];
	        if (!protoView)
	            throw new Error('Expecting ProtoViewRef for: ' + info.selector);
	        var idCount = 0;
	        return {
	            restrict: 'E',
	            require: constants_1.REQUIRE_INJECTOR,
	            link: {
	                post: function (scope, element, attrs, parentInjector, transclude) {
	                    var domElement = element[0];
	                    var facade = new downgrade_ng2_adapter_1.DowngradeNg2ComponentAdapter(idPrefix + (idCount++), info, element, attrs, scope, parentInjector, parse, viewManager, protoView);
	                    facade.setupInputs();
	                    facade.bootstrapNg2();
	                    facade.projectContent();
	                    facade.setupOutputs();
	                    facade.registerCleanup();
	                }
	            }
	        };
	    }
	    return directiveFactory;
	}
	/**
	 * Use `UgradeAdapterRef` to control a hybrid AngularJS v1 / Angular v2 application.
	 */
	var UpgradeAdapterRef = (function () {
	    function UpgradeAdapterRef() {
	        /* @internal */
	        this._readyFn = null;
	        this.ng1RootScope = null;
	        this.ng1Injector = null;
	        this.ng2ApplicationRef = null;
	        this.ng2Injector = null;
	    }
	    /* @internal */
	    UpgradeAdapterRef.prototype._bootstrapDone = function (applicationRef, ng1Injector) {
	        this.ng2ApplicationRef = applicationRef;
	        this.ng2Injector = applicationRef.injector;
	        this.ng1Injector = ng1Injector;
	        this.ng1RootScope = ng1Injector.get(constants_1.NG1_ROOT_SCOPE);
	        this._readyFn && this._readyFn(this);
	    };
	    /**
	     * Register a callback function which is notified upon successful hybrid AngularJS v1 / Angular v2
	     * application has been bootstrapped.
	     *
	     * The `ready` callback function is invoked inside the Angular v2 zone, therefore it does not
	     * require a call to `$apply()`.
	     */
	    UpgradeAdapterRef.prototype.ready = function (fn) { this._readyFn = fn; };
	    /**
	     * Dispose of running hybrid AngularJS v1 / Angular v2 application.
	     */
	    UpgradeAdapterRef.prototype.dispose = function () {
	        this.ng1Injector.get(constants_1.NG1_ROOT_SCOPE).$destroy();
	        this.ng2ApplicationRef.dispose();
	    };
	    return UpgradeAdapterRef;
	})();
	exports.UpgradeAdapterRef = UpgradeAdapterRef;
	//# sourceMappingURL=upgrade_adapter.js.map

/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var angular2_1 = __webpack_require__(45);
	var COMPONENT_SELECTOR = /^[\w|-]*$/;
	var SKEWER_CASE = /-(\w)/g;
	var directiveResolver = new angular2_1.DirectiveResolver();
	function getComponentInfo(type) {
	    var resolvedMetadata = directiveResolver.resolve(type);
	    var selector = resolvedMetadata.selector;
	    if (!selector.match(COMPONENT_SELECTOR)) {
	        throw new Error('Only selectors matching element names are supported, got: ' + selector);
	    }
	    var selector = selector.replace(SKEWER_CASE, function (all, letter) { return letter.toUpperCase(); });
	    return {
	        type: type,
	        selector: selector,
	        inputs: parseFields(resolvedMetadata.inputs),
	        outputs: parseFields(resolvedMetadata.outputs)
	    };
	}
	exports.getComponentInfo = getComponentInfo;
	function parseFields(names) {
	    var attrProps = [];
	    if (names) {
	        for (var i = 0; i < names.length; i++) {
	            var parts = names[i].split(':');
	            var prop = parts[0].trim();
	            var attr = (parts[1] || parts[0]).trim();
	            var capitalAttr = attr.charAt(0).toUpperCase() + attr.substr(1);
	            attrProps.push({
	                prop: prop,
	                attr: attr,
	                bracketAttr: "[" + attr + "]",
	                parenAttr: "(" + attr + ")",
	                bracketParenAttr: "[(" + attr + ")]",
	                onAttr: "on" + capitalAttr,
	                bindAttr: "bind" + capitalAttr,
	                bindonAttr: "bindon" + capitalAttr
	            });
	        }
	    }
	    return attrProps;
	}
	exports.parseFields = parseFields;
	//# sourceMappingURL=metadata.js.map

/***/ },
/* 391 */
/***/ function(module, exports) {

	'use strict';function stringify(obj) {
	    if (typeof obj == 'function')
	        return obj.name || obj.toString();
	    return '' + obj;
	}
	exports.stringify = stringify;
	function onError(e) {
	    // TODO: (misko): We seem to not have a stack trace here!
	    console.log(e, e.stack);
	    throw e;
	}
	exports.onError = onError;
	function controllerKey(name) {
	    return '$' + name + 'Controller';
	}
	exports.controllerKey = controllerKey;
	//# sourceMappingURL=util.js.map

/***/ },
/* 392 */
/***/ function(module, exports) {

	'use strict';exports.NG2_APP_VIEW_MANAGER = 'ng2.AppViewManager';
	exports.NG2_COMPILER = 'ng2.Compiler';
	exports.NG2_INJECTOR = 'ng2.Injector';
	exports.NG2_PROTO_VIEW_REF_MAP = 'ng2.ProtoViewRefMap';
	exports.NG2_ZONE = 'ng2.NgZone';
	exports.NG1_CONTROLLER = '$controller';
	exports.NG1_SCOPE = '$scope';
	exports.NG1_ROOT_SCOPE = '$rootScope';
	exports.NG1_COMPILE = '$compile';
	exports.NG1_HTTP_BACKEND = '$httpBackend';
	exports.NG1_INJECTOR = '$injector';
	exports.NG1_PARSE = '$parse';
	exports.NG1_TEMPLATE_CACHE = '$templateCache';
	exports.REQUIRE_INJECTOR = '^' + exports.NG2_INJECTOR;
	//# sourceMappingURL=constants.js.map

/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var angular2_1 = __webpack_require__(45);
	var constants_1 = __webpack_require__(392);
	var INITIAL_VALUE = {
	    __UNINITIALIZED__: true
	};
	var DowngradeNg2ComponentAdapter = (function () {
	    function DowngradeNg2ComponentAdapter(id, info, element, attrs, scope, parentInjector, parse, viewManager, protoView) {
	        this.id = id;
	        this.info = info;
	        this.element = element;
	        this.attrs = attrs;
	        this.scope = scope;
	        this.parentInjector = parentInjector;
	        this.parse = parse;
	        this.viewManager = viewManager;
	        this.protoView = protoView;
	        this.component = null;
	        this.inputChangeCount = 0;
	        this.inputChanges = null;
	        this.hostViewRef = null;
	        this.changeDetector = null;
	        this.contentInserctionPoint = null;
	        this.element[0].id = id;
	        this.componentScope = scope.$new();
	        this.childNodes = element.contents();
	    }
	    DowngradeNg2ComponentAdapter.prototype.bootstrapNg2 = function () {
	        var childInjector = this.parentInjector.resolveAndCreateChild([angular2_1.provide(constants_1.NG1_SCOPE, { useValue: this.componentScope })]);
	        this.hostViewRef =
	            this.viewManager.createRootHostView(this.protoView, '#' + this.id, childInjector);
	        var renderer = this.hostViewRef.render;
	        var hostElement = this.viewManager.getHostElement(this.hostViewRef);
	        this.changeDetector = this.hostViewRef.changeDetectorRef;
	        this.component = this.viewManager.getComponent(hostElement);
	        this.contentInserctionPoint = renderer.rootContentInsertionPoints[0];
	    };
	    DowngradeNg2ComponentAdapter.prototype.setupInputs = function () {
	        var _this = this;
	        var attrs = this.attrs;
	        var inputs = this.info.inputs;
	        for (var i = 0; i < inputs.length; i++) {
	            var input = inputs[i];
	            var expr = null;
	            if (attrs.hasOwnProperty(input.attr)) {
	                var observeFn = (function (prop) {
	                    var prevValue = INITIAL_VALUE;
	                    return function (value) {
	                        if (_this.inputChanges !== null) {
	                            _this.inputChangeCount++;
	                            _this.inputChanges[prop] =
	                                new Ng1Change(value, prevValue === INITIAL_VALUE ? value : prevValue);
	                            prevValue = value;
	                        }
	                        _this.component[prop] = value;
	                    };
	                })(input.prop);
	                attrs.$observe(input.attr, observeFn);
	            }
	            else if (attrs.hasOwnProperty(input.bindAttr)) {
	                expr = attrs[input.bindAttr];
	            }
	            else if (attrs.hasOwnProperty(input.bracketAttr)) {
	                expr = attrs[input.bracketAttr];
	            }
	            else if (attrs.hasOwnProperty(input.bindonAttr)) {
	                expr = attrs[input.bindonAttr];
	            }
	            else if (attrs.hasOwnProperty(input.bracketParenAttr)) {
	                expr = attrs[input.bracketParenAttr];
	            }
	            if (expr != null) {
	                var watchFn = (function (prop) { return function (value, prevValue) {
	                    if (_this.inputChanges != null) {
	                        _this.inputChangeCount++;
	                        _this.inputChanges[prop] = new Ng1Change(prevValue, value);
	                    }
	                    _this.component[prop] = value;
	                }; })(input.prop);
	                this.componentScope.$watch(expr, watchFn);
	            }
	        }
	        var prototype = this.info.type.prototype;
	        if (prototype && prototype.onChanges) {
	            // Detect: OnChanges interface
	            this.inputChanges = {};
	            this.componentScope.$watch(function () { return _this.inputChangeCount; }, function () {
	                var inputChanges = _this.inputChanges;
	                _this.inputChanges = {};
	                _this.component.onChanges(inputChanges);
	            });
	        }
	        this.componentScope.$watch(function () { return _this.changeDetector && _this.changeDetector.detectChanges(); });
	    };
	    DowngradeNg2ComponentAdapter.prototype.projectContent = function () {
	        var childNodes = this.childNodes;
	        if (this.contentInserctionPoint) {
	            var parent = this.contentInserctionPoint.parentNode;
	            for (var i = 0, ii = childNodes.length; i < ii; i++) {
	                parent.insertBefore(childNodes[i], this.contentInserctionPoint);
	            }
	        }
	    };
	    DowngradeNg2ComponentAdapter.prototype.setupOutputs = function () {
	        var _this = this;
	        var attrs = this.attrs;
	        var outputs = this.info.outputs;
	        for (var j = 0; j < outputs.length; j++) {
	            var output = outputs[j];
	            var expr = null;
	            var assignExpr = false;
	            var bindonAttr = output.bindonAttr ? output.bindonAttr.substring(0, output.bindonAttr.length - 6) : null;
	            var bracketParenAttr = output.bracketParenAttr ?
	                "[(" + output.bracketParenAttr.substring(2, output.bracketParenAttr.length - 8) + ")]" :
	                null;
	            if (attrs.hasOwnProperty(output.onAttr)) {
	                expr = attrs[output.onAttr];
	            }
	            else if (attrs.hasOwnProperty(output.parenAttr)) {
	                expr = attrs[output.parenAttr];
	            }
	            else if (attrs.hasOwnProperty(bindonAttr)) {
	                expr = attrs[bindonAttr];
	                assignExpr = true;
	            }
	            else if (attrs.hasOwnProperty(bracketParenAttr)) {
	                expr = attrs[bracketParenAttr];
	                assignExpr = true;
	            }
	            if (expr != null && assignExpr != null) {
	                var getter = this.parse(expr);
	                var setter = getter.assign;
	                if (assignExpr && !setter) {
	                    throw new Error("Expression '" + expr + "' is not assignable!");
	                }
	                var emitter = this.component[output.prop];
	                if (emitter) {
	                    emitter.subscribe({
	                        next: assignExpr ? (function (setter) { return function (value) { return setter(_this.scope, value); }; })(setter) :
	                            (function (getter) { return function (value) { return getter(_this.scope, { $event: value }); }; })(getter)
	                    });
	                }
	                else {
	                    throw new Error("Missing emitter '" + output.prop + "' on component '" + this.info.selector + "'!");
	                }
	            }
	        }
	    };
	    DowngradeNg2ComponentAdapter.prototype.registerCleanup = function () {
	        var _this = this;
	        this.element.bind('$remove', function () { return _this.viewManager.destroyRootHostView(_this.hostViewRef); });
	    };
	    return DowngradeNg2ComponentAdapter;
	})();
	exports.DowngradeNg2ComponentAdapter = DowngradeNg2ComponentAdapter;
	var Ng1Change = (function () {
	    function Ng1Change(previousValue, currentValue) {
	        this.previousValue = previousValue;
	        this.currentValue = currentValue;
	    }
	    Ng1Change.prototype.isFirstChange = function () { return this.previousValue === this.currentValue; };
	    return Ng1Change;
	})();
	//# sourceMappingURL=downgrade_ng2_adapter.js.map

/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var angular2_1 = __webpack_require__(45);
	var constants_1 = __webpack_require__(392);
	var util_1 = __webpack_require__(391);
	var angular = __webpack_require__(395);
	var CAMEL_CASE = /([A-Z])/g;
	var INITIAL_VALUE = {
	    __UNINITIALIZED__: true
	};
	var NOT_SUPPORTED = 'NOT_SUPPORTED';
	var UpgradeNg1ComponentAdapterBuilder = (function () {
	    function UpgradeNg1ComponentAdapterBuilder(name) {
	        this.name = name;
	        this.inputs = [];
	        this.inputsRename = [];
	        this.outputs = [];
	        this.outputsRename = [];
	        this.propertyOutputs = [];
	        this.checkProperties = [];
	        this.propertyMap = {};
	        this.linkFn = null;
	        this.directive = null;
	        this.$controller = null;
	        var selector = name.replace(CAMEL_CASE, function (all, next) { return '-' + next.toLowerCase(); });
	        var self = this;
	        this.type =
	            angular2_1.Directive({ selector: selector, inputs: this.inputsRename, outputs: this.outputsRename })
	                .Class({
	                constructor: [
	                    new angular2_1.Inject(constants_1.NG1_SCOPE),
	                    angular2_1.ElementRef,
	                    function (scope, elementRef) {
	                        return new UpgradeNg1ComponentAdapter(self.linkFn, scope, self.directive, elementRef, self.$controller, self.inputs, self.outputs, self.propertyOutputs, self.checkProperties, self.propertyMap);
	                    }
	                ],
	                onChanges: function () { },
	                doCheck: function () { }
	            });
	    }
	    UpgradeNg1ComponentAdapterBuilder.prototype.extractDirective = function (injector) {
	        var directives = injector.get(this.name + 'Directive');
	        if (directives.length > 1) {
	            throw new Error('Only support single directive definition for: ' + this.name);
	        }
	        var directive = directives[0];
	        if (directive.replace)
	            this.notSupported('replace');
	        if (directive.terminal)
	            this.notSupported('terminal');
	        var link = directive.link;
	        if (typeof link == 'object') {
	            if (link.post)
	                this.notSupported('link.post');
	        }
	        return directive;
	    };
	    UpgradeNg1ComponentAdapterBuilder.prototype.notSupported = function (feature) {
	        throw new Error("Upgraded directive '" + this.name + "' does not support '" + feature + "'.");
	    };
	    UpgradeNg1ComponentAdapterBuilder.prototype.extractBindings = function () {
	        var scope = this.directive.scope;
	        if (typeof scope == 'object') {
	            for (var name in scope) {
	                if (scope.hasOwnProperty(name)) {
	                    var localName = scope[name];
	                    var type = localName.charAt(0);
	                    localName = localName.substr(1) || name;
	                    var outputName = 'output_' + name;
	                    var outputNameRename = outputName + ': ' + name;
	                    var outputNameRenameChange = outputName + ': ' + name + 'Change';
	                    var inputName = 'input_' + name;
	                    var inputNameRename = inputName + ': ' + name;
	                    switch (type) {
	                        case '=':
	                            this.propertyOutputs.push(outputName);
	                            this.checkProperties.push(localName);
	                            this.outputs.push(outputName);
	                            this.outputsRename.push(outputNameRenameChange);
	                            this.propertyMap[outputName] = localName;
	                        // don't break; let it fall through to '@'
	                        case '@':
	                            this.inputs.push(inputName);
	                            this.inputsRename.push(inputNameRename);
	                            this.propertyMap[inputName] = localName;
	                            break;
	                        case '&':
	                            this.outputs.push(outputName);
	                            this.outputsRename.push(outputNameRename);
	                            this.propertyMap[outputName] = localName;
	                            break;
	                        default:
	                            var json = JSON.stringify(scope);
	                            throw new Error("Unexpected mapping '" + type + "' in '" + json + "' in '" + this.name + "' directive.");
	                    }
	                }
	            }
	        }
	    };
	    UpgradeNg1ComponentAdapterBuilder.prototype.compileTemplate = function (compile, templateCache, httpBackend) {
	        var _this = this;
	        if (this.directive.template) {
	            this.linkFn = compileHtml(this.directive.template);
	        }
	        else if (this.directive.templateUrl) {
	            var url = this.directive.templateUrl;
	            var html = templateCache.get(url);
	            if (html !== undefined) {
	                this.linkFn = compileHtml(html);
	            }
	            else {
	                return new Promise(function (resolve, err) {
	                    httpBackend('GET', url, null, function (status, response) {
	                        if (status == 200) {
	                            resolve(_this.linkFn = compileHtml(templateCache.put(url, response)));
	                        }
	                        else {
	                            err("GET " + url + " returned " + status + ": " + response);
	                        }
	                    });
	                });
	            }
	        }
	        else {
	            throw new Error("Directive '" + this.name + "' is not a component, it is missing template.");
	        }
	        return null;
	        function compileHtml(html) {
	            var div = document.createElement('div');
	            div.innerHTML = html;
	            return compile(div.childNodes);
	        }
	    };
	    UpgradeNg1ComponentAdapterBuilder.resolve = function (exportedComponents, injector) {
	        var promises = [];
	        var compile = injector.get(constants_1.NG1_COMPILE);
	        var templateCache = injector.get(constants_1.NG1_TEMPLATE_CACHE);
	        var httpBackend = injector.get(constants_1.NG1_HTTP_BACKEND);
	        var $controller = injector.get(constants_1.NG1_CONTROLLER);
	        for (var name in exportedComponents) {
	            if (exportedComponents.hasOwnProperty(name)) {
	                var exportedComponent = exportedComponents[name];
	                exportedComponent.directive = exportedComponent.extractDirective(injector);
	                exportedComponent.$controller = $controller;
	                exportedComponent.extractBindings();
	                var promise = exportedComponent.compileTemplate(compile, templateCache, httpBackend);
	                if (promise)
	                    promises.push(promise);
	            }
	        }
	        return Promise.all(promises);
	    };
	    return UpgradeNg1ComponentAdapterBuilder;
	})();
	exports.UpgradeNg1ComponentAdapterBuilder = UpgradeNg1ComponentAdapterBuilder;
	var UpgradeNg1ComponentAdapter = (function () {
	    function UpgradeNg1ComponentAdapter(linkFn, scope, directive, elementRef, $controller, inputs, outputs, propOuts, checkProperties, propertyMap) {
	        this.directive = directive;
	        this.inputs = inputs;
	        this.outputs = outputs;
	        this.propOuts = propOuts;
	        this.checkProperties = checkProperties;
	        this.propertyMap = propertyMap;
	        this.destinationObj = null;
	        this.checkLastValues = [];
	        var element = elementRef.nativeElement;
	        var childNodes = [];
	        var childNode;
	        while (childNode = element.firstChild) {
	            element.removeChild(childNode);
	            childNodes.push(childNode);
	        }
	        var componentScope = scope.$new(!!directive.scope);
	        var $element = angular.element(element);
	        var controllerType = directive.controller;
	        var controller = null;
	        if (controllerType) {
	            var locals = { $scope: componentScope, $element: $element };
	            controller = $controller(controllerType, locals, null, directive.controllerAs);
	            $element.data(util_1.controllerKey(directive.name), controller);
	        }
	        var link = directive.link;
	        if (typeof link == 'object')
	            link = link.pre;
	        if (link) {
	            var attrs = NOT_SUPPORTED;
	            var transcludeFn = NOT_SUPPORTED;
	            var linkController = this.resolveRequired($element, directive.require);
	            directive.link(componentScope, $element, attrs, linkController, transcludeFn);
	        }
	        this.destinationObj = directive.bindToController && controller ? controller : componentScope;
	        linkFn(componentScope, function (clonedElement, scope) {
	            for (var i = 0, ii = clonedElement.length; i < ii; i++) {
	                element.appendChild(clonedElement[i]);
	            }
	        }, { parentBoundTranscludeFn: function (scope, cloneAttach) { cloneAttach(childNodes); } });
	        for (var i = 0; i < inputs.length; i++) {
	            this[inputs[i]] = null;
	        }
	        for (var j = 0; j < outputs.length; j++) {
	            var emitter = this[outputs[j]] = new angular2_1.EventEmitter();
	            this.setComponentProperty(outputs[j], (function (emitter) { return function (value) { return emitter.next(value); }; })(emitter));
	        }
	        for (var k = 0; k < propOuts.length; k++) {
	            this[propOuts[k]] = new angular2_1.EventEmitter();
	            this.checkLastValues.push(INITIAL_VALUE);
	        }
	    }
	    UpgradeNg1ComponentAdapter.prototype.onChanges = function (changes) {
	        for (var name in changes) {
	            if (changes.hasOwnProperty(name)) {
	                var change = changes[name];
	                this.setComponentProperty(name, change.currentValue);
	            }
	        }
	    };
	    UpgradeNg1ComponentAdapter.prototype.doCheck = function () {
	        var count = 0;
	        var destinationObj = this.destinationObj;
	        var lastValues = this.checkLastValues;
	        var checkProperties = this.checkProperties;
	        for (var i = 0; i < checkProperties.length; i++) {
	            var value = destinationObj[checkProperties[i]];
	            var last = lastValues[i];
	            if (value !== last) {
	                if (typeof value == 'number' && isNaN(value) && typeof last == 'number' && isNaN(last)) {
	                }
	                else {
	                    var eventEmitter = this[this.propOuts[i]];
	                    eventEmitter.next(lastValues[i] = value);
	                }
	            }
	        }
	        return count;
	    };
	    UpgradeNg1ComponentAdapter.prototype.setComponentProperty = function (name, value) {
	        this.destinationObj[this.propertyMap[name]] = value;
	    };
	    UpgradeNg1ComponentAdapter.prototype.resolveRequired = function ($element, require) {
	        if (!require) {
	            return undefined;
	        }
	        else if (typeof require == 'string') {
	            var name = require;
	            var isOptional = false;
	            var startParent = false;
	            var searchParents = false;
	            var ch;
	            if (name.charAt(0) == '?') {
	                isOptional = true;
	                name = name.substr(1);
	            }
	            if (name.charAt(0) == '^') {
	                searchParents = true;
	                name = name.substr(1);
	            }
	            if (name.charAt(0) == '^') {
	                startParent = true;
	                name = name.substr(1);
	            }
	            var key = util_1.controllerKey(name);
	            if (startParent)
	                $element = $element.parent();
	            var dep = searchParents ? $element.inheritedData(key) : $element.data(key);
	            if (!dep && !isOptional) {
	                throw new Error("Can not locate '" + require + "' in '" + this.directive.name + "'.");
	            }
	            return dep;
	        }
	        else if (require instanceof Array) {
	            var deps = [];
	            for (var i = 0; i < require.length; i++) {
	                deps.push(this.resolveRequired($element, require[i]));
	            }
	            return deps;
	        }
	        throw new Error("Directive '" + this.directive.name + "' require syntax unrecognized: " + this.directive.require);
	    };
	    return UpgradeNg1ComponentAdapter;
	})();
	//# sourceMappingURL=upgrade_ng1_adapter.js.map

/***/ },
/* 395 */
/***/ function(module, exports) {

	'use strict';function noNg() {
	    throw new Error('AngularJS v1.x is not loaded!');
	}
	var angular = { bootstrap: noNg, module: noNg, element: noNg, version: noNg };
	try {
	    if (window.hasOwnProperty('angular')) {
	        angular = window.angular;
	    }
	}
	catch (e) {
	}
	exports.bootstrap = angular.bootstrap;
	exports.module = angular.module;
	exports.element = angular.element;
	exports.version = angular.version;
	//# sourceMappingURL=angular_js.js.map

/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * @module
	 * @description
	 * Maps application URLs into application states, to support deep-linking and navigation.
	 */
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var router_1 = __webpack_require__(397);
	exports.Router = router_1.Router;
	var router_outlet_1 = __webpack_require__(401);
	exports.RouterOutlet = router_outlet_1.RouterOutlet;
	var router_link_1 = __webpack_require__(403);
	exports.RouterLink = router_link_1.RouterLink;
	var instruction_1 = __webpack_require__(398);
	exports.RouteParams = instruction_1.RouteParams;
	exports.RouteData = instruction_1.RouteData;
	var route_registry_1 = __webpack_require__(406);
	exports.RouteRegistry = route_registry_1.RouteRegistry;
	var location_strategy_1 = __webpack_require__(405);
	exports.LocationStrategy = location_strategy_1.LocationStrategy;
	var hash_location_strategy_1 = __webpack_require__(415);
	exports.HashLocationStrategy = hash_location_strategy_1.HashLocationStrategy;
	var path_location_strategy_1 = __webpack_require__(416);
	exports.PathLocationStrategy = path_location_strategy_1.PathLocationStrategy;
	var location_1 = __webpack_require__(404);
	exports.Location = location_1.Location;
	exports.APP_BASE_HREF = location_1.APP_BASE_HREF;
	__export(__webpack_require__(414));
	__export(__webpack_require__(417));
	var lifecycle_annotations_1 = __webpack_require__(402);
	exports.CanActivate = lifecycle_annotations_1.CanActivate;
	var instruction_2 = __webpack_require__(398);
	exports.Instruction = instruction_2.Instruction;
	exports.ComponentInstruction = instruction_2.ComponentInstruction;
	var angular2_1 = __webpack_require__(45);
	exports.OpaqueToken = angular2_1.OpaqueToken;
	var location_strategy_2 = __webpack_require__(405);
	var path_location_strategy_2 = __webpack_require__(416);
	var router_2 = __webpack_require__(397);
	var router_outlet_2 = __webpack_require__(401);
	var router_link_2 = __webpack_require__(403);
	var route_registry_2 = __webpack_require__(406);
	var location_2 = __webpack_require__(404);
	var angular2_2 = __webpack_require__(45);
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	/**
	 * Token used to bind the component with the top-level {@link RouteConfig}s for the
	 * application.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/iRUP8B5OUbxCWQ3AcIDm))
	 *
	 * ```
	 * import {Component} from 'angular2/angular2';
	 * import {
	 *   ROUTER_DIRECTIVES,
	 *   ROUTER_PROVIDERS,
	 *   RouteConfig
	 * } from 'angular2/router';
	 *
	 * @Component({directives: [ROUTER_DIRECTIVES]})
	 * @RouteConfig([
	 *  {...},
	 * ])
	 * class AppCmp {
	 *   // ...
	 * }
	 *
	 * bootstrap(AppCmp, [ROUTER_PROVIDERS]);
	 * ```
	 */
	exports.ROUTER_PRIMARY_COMPONENT = lang_1.CONST_EXPR(new angular2_2.OpaqueToken('RouterPrimaryComponent'));
	/**
	 * A list of directives. To use the router directives like {@link RouterOutlet} and
	 * {@link RouterLink}, add this to your `directives` array in the {@link View} decorator of your
	 * component.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/iRUP8B5OUbxCWQ3AcIDm))
	 *
	 * ```
	 * import {Component} from 'angular2/angular2';
	 * import {ROUTER_DIRECTIVES, ROUTER_PROVIDERS, RouteConfig} from 'angular2/router';
	 *
	 * @Component({directives: [ROUTER_DIRECTIVES]})
	 * @RouteConfig([
	 *  {...},
	 * ])
	 * class AppCmp {
	 *    // ...
	 * }
	 *
	 * bootstrap(AppCmp, [ROUTER_PROVIDERS]);
	 * ```
	 */
	exports.ROUTER_DIRECTIVES = lang_1.CONST_EXPR([router_outlet_2.RouterOutlet, router_link_2.RouterLink]);
	/**
	 * A list of {@link Provider}s. To use the router, you must add this to your application.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/iRUP8B5OUbxCWQ3AcIDm))
	 *
	 * ```
	 * import {Component} from 'angular2/angular2';
	 * import {
	 *   ROUTER_DIRECTIVES,
	 *   ROUTER_PROVIDERS,
	 *   RouteConfig
	 * } from 'angular2/router';
	 *
	 * @Component({directives: [ROUTER_DIRECTIVES]})
	 * @RouteConfig([
	 *  {...},
	 * ])
	 * class AppCmp {
	 *   // ...
	 * }
	 *
	 * bootstrap(AppCmp, [ROUTER_PROVIDERS]);
	 * ```
	 */
	exports.ROUTER_PROVIDERS = lang_1.CONST_EXPR([
	    route_registry_2.RouteRegistry,
	    lang_1.CONST_EXPR(new angular2_2.Provider(location_strategy_2.LocationStrategy, { useClass: path_location_strategy_2.PathLocationStrategy })),
	    location_2.Location,
	    lang_1.CONST_EXPR(new angular2_2.Provider(router_2.Router, {
	        useFactory: routerFactory,
	        deps: lang_1.CONST_EXPR([route_registry_2.RouteRegistry, location_2.Location, exports.ROUTER_PRIMARY_COMPONENT, angular2_2.ApplicationRef])
	    })),
	    lang_1.CONST_EXPR(new angular2_2.Provider(exports.ROUTER_PRIMARY_COMPONENT, { useFactory: routerPrimaryComponentFactory, deps: lang_1.CONST_EXPR([angular2_2.ApplicationRef]) }))
	]);
	/**
	 * @deprecated
	 */
	exports.ROUTER_BINDINGS = exports.ROUTER_PROVIDERS;
	function routerFactory(registry, location, primaryComponent, appRef) {
	    var rootRouter = new router_2.RootRouter(registry, location, primaryComponent);
	    appRef.registerDisposeListener(function () { return rootRouter.dispose(); });
	    return rootRouter;
	}
	function routerPrimaryComponentFactory(app) {
	    if (app.componentTypes.length == 0) {
	        throw new exceptions_1.BaseException("Bootstrap at least one component before injecting Router.");
	    }
	    return app.componentTypes[0];
	}
	//# sourceMappingURL=router.js.map

/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var async_1 = __webpack_require__(50);
	var collection_1 = __webpack_require__(202);
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var instruction_1 = __webpack_require__(398);
	var route_lifecycle_reflector_1 = __webpack_require__(399);
	var _resolveToTrue = async_1.PromiseWrapper.resolve(true);
	var _resolveToFalse = async_1.PromiseWrapper.resolve(false);
	/**
	 * The `Router` is responsible for mapping URLs to components.
	 *
	 * You can see the state of the router by inspecting the read-only field `router.navigating`.
	 * This may be useful for showing a spinner, for instance.
	 *
	 * ## Concepts
	 *
	 * Routers and component instances have a 1:1 correspondence.
	 *
	 * The router holds reference to a number of {@link RouterOutlet}.
	 * An outlet is a placeholder that the router dynamically fills in depending on the current URL.
	 *
	 * When the router navigates from a URL, it must first recognize it and serialize it into an
	 * `Instruction`.
	 * The router uses the `RouteRegistry` to get an `Instruction`.
	 */
	var Router = (function () {
	    function Router(registry, parent, hostComponent) {
	        this.registry = registry;
	        this.parent = parent;
	        this.hostComponent = hostComponent;
	        this.navigating = false;
	        this._currentInstruction = null;
	        this._currentNavigation = _resolveToTrue;
	        this._outlet = null;
	        this._auxRouters = new collection_1.Map();
	        this._subject = new async_1.EventEmitter();
	    }
	    /**
	     * Constructs a child router. You probably don't need to use this unless you're writing a reusable
	     * component.
	     */
	    Router.prototype.childRouter = function (hostComponent) {
	        return this._childRouter = new ChildRouter(this, hostComponent);
	    };
	    /**
	     * Constructs a child router. You probably don't need to use this unless you're writing a reusable
	     * component.
	     */
	    Router.prototype.auxRouter = function (hostComponent) { return new ChildRouter(this, hostComponent); };
	    /**
	     * Register an outlet to notified of primary route changes.
	     *
	     * You probably don't need to use this unless you're writing a reusable component.
	     */
	    Router.prototype.registerPrimaryOutlet = function (outlet) {
	        if (lang_1.isPresent(outlet.name)) {
	            throw new exceptions_1.BaseException("registerPrimaryOutlet expects to be called with an unnamed outlet.");
	        }
	        this._outlet = outlet;
	        if (lang_1.isPresent(this._currentInstruction)) {
	            return this.commit(this._currentInstruction, false);
	        }
	        return _resolveToTrue;
	    };
	    /**
	     * Register an outlet to notified of auxiliary route changes.
	     *
	     * You probably don't need to use this unless you're writing a reusable component.
	     */
	    Router.prototype.registerAuxOutlet = function (outlet) {
	        var outletName = outlet.name;
	        if (lang_1.isBlank(outletName)) {
	            throw new exceptions_1.BaseException("registerAuxOutlet expects to be called with an outlet with a name.");
	        }
	        // TODO...
	        // what is the host of an aux route???
	        var router = this.auxRouter(this.hostComponent);
	        this._auxRouters.set(outletName, router);
	        router._outlet = outlet;
	        var auxInstruction;
	        if (lang_1.isPresent(this._currentInstruction) &&
	            lang_1.isPresent(auxInstruction = this._currentInstruction.auxInstruction[outletName])) {
	            return router.commit(auxInstruction);
	        }
	        return _resolveToTrue;
	    };
	    /**
	     * Given an instruction, returns `true` if the instruction is currently active,
	     * otherwise `false`.
	     */
	    Router.prototype.isRouteActive = function (instruction) {
	        var router = this;
	        while (lang_1.isPresent(router.parent) && lang_1.isPresent(instruction.child)) {
	            router = router.parent;
	            instruction = instruction.child;
	        }
	        return lang_1.isPresent(this._currentInstruction) &&
	            this._currentInstruction.component == instruction.component;
	    };
	    /**
	     * Dynamically update the routing configuration and trigger a navigation.
	     *
	     *##Usage
	     *
	     * ```
	     * router.config([
	     *   { 'path': '/', 'component': IndexComp },
	     *   { 'path': '/user/:id', 'component': UserComp },
	     * ]);
	     * ```
	     */
	    Router.prototype.config = function (definitions) {
	        var _this = this;
	        definitions.forEach(function (routeDefinition) { _this.registry.config(_this.hostComponent, routeDefinition); });
	        return this.renavigate();
	    };
	    /**
	     * Navigate based on the provided Route Link DSL. It's preferred to navigate with this method
	     * over `navigateByUrl`.
	     *
	     *##Usage
	     *
	     * This method takes an array representing the Route Link DSL:
	     * ```
	     * ['./MyCmp', {param: 3}]
	     * ```
	     * See the {@link RouterLink} directive for more.
	     */
	    Router.prototype.navigate = function (linkParams) {
	        var instruction = this.generate(linkParams);
	        return this.navigateByInstruction(instruction, false);
	    };
	    /**
	     * Navigate to a URL. Returns a promise that resolves when navigation is complete.
	     * It's preferred to navigate with `navigate` instead of this method, since URLs are more brittle.
	     *
	     * If the given URL begins with a `/`, router will navigate absolutely.
	     * If the given URL does not begin with `/`, the router will navigate relative to this component.
	     */
	    Router.prototype.navigateByUrl = function (url, _skipLocationChange) {
	        var _this = this;
	        if (_skipLocationChange === void 0) { _skipLocationChange = false; }
	        return this._currentNavigation = this._currentNavigation.then(function (_) {
	            _this.lastNavigationAttempt = url;
	            _this._startNavigating();
	            return _this._afterPromiseFinishNavigating(_this.recognize(url).then(function (instruction) {
	                if (lang_1.isBlank(instruction)) {
	                    return false;
	                }
	                return _this._navigate(instruction, _skipLocationChange);
	            }));
	        });
	    };
	    /**
	     * Navigate via the provided instruction. Returns a promise that resolves when navigation is
	     * complete.
	     */
	    Router.prototype.navigateByInstruction = function (instruction, _skipLocationChange) {
	        var _this = this;
	        if (_skipLocationChange === void 0) { _skipLocationChange = false; }
	        if (lang_1.isBlank(instruction)) {
	            return _resolveToFalse;
	        }
	        return this._currentNavigation = this._currentNavigation.then(function (_) {
	            _this._startNavigating();
	            return _this._afterPromiseFinishNavigating(_this._navigate(instruction, _skipLocationChange));
	        });
	    };
	    /** @internal */
	    Router.prototype._navigate = function (instruction, _skipLocationChange) {
	        var _this = this;
	        return this._settleInstruction(instruction)
	            .then(function (_) { return _this._canReuse(instruction); })
	            .then(function (_) { return _this._canActivate(instruction); })
	            .then(function (result) {
	            if (!result) {
	                return false;
	            }
	            return _this._canDeactivate(instruction)
	                .then(function (result) {
	                if (result) {
	                    return _this.commit(instruction, _skipLocationChange)
	                        .then(function (_) {
	                        _this._emitNavigationFinish(instruction_1.stringifyInstruction(instruction));
	                        return true;
	                    });
	                }
	            });
	        });
	    };
	    // TODO(btford): it'd be nice to remove this method as part of cleaning up the traversal logic
	    // Since refactoring `Router.generate` to return an instruction rather than a string, it's not
	    // guaranteed that the `componentType`s for the terminal async routes have been loaded by the time
	    // we begin navigation. The method below simply traverses instructions and resolves any components
	    // for which `componentType` is not present
	    /** @internal */
	    Router.prototype._settleInstruction = function (instruction) {
	        var _this = this;
	        var unsettledInstructions = [];
	        if (lang_1.isBlank(instruction.component.componentType)) {
	            unsettledInstructions.push(instruction.component.resolveComponentType().then(function (type) { _this.registry.configFromComponent(type); }));
	        }
	        if (lang_1.isPresent(instruction.child)) {
	            unsettledInstructions.push(this._settleInstruction(instruction.child));
	        }
	        collection_1.StringMapWrapper.forEach(instruction.auxInstruction, function (instruction, _) {
	            unsettledInstructions.push(_this._settleInstruction(instruction));
	        });
	        return async_1.PromiseWrapper.all(unsettledInstructions);
	    };
	    Router.prototype._emitNavigationFinish = function (url) { async_1.ObservableWrapper.callNext(this._subject, url); };
	    Router.prototype._afterPromiseFinishNavigating = function (promise) {
	        var _this = this;
	        return async_1.PromiseWrapper.catchError(promise.then(function (_) { return _this._finishNavigating(); }), function (err) {
	            _this._finishNavigating();
	            throw err;
	        });
	    };
	    /*
	     * Recursively set reuse flags
	     */
	    /** @internal */
	    Router.prototype._canReuse = function (instruction) {
	        var _this = this;
	        if (lang_1.isBlank(this._outlet)) {
	            return _resolveToFalse;
	        }
	        return this._outlet.canReuse(instruction.component)
	            .then(function (result) {
	            instruction.component.reuse = result;
	            if (result && lang_1.isPresent(_this._childRouter) && lang_1.isPresent(instruction.child)) {
	                return _this._childRouter._canReuse(instruction.child);
	            }
	        });
	    };
	    Router.prototype._canActivate = function (nextInstruction) {
	        return canActivateOne(nextInstruction, this._currentInstruction);
	    };
	    Router.prototype._canDeactivate = function (instruction) {
	        var _this = this;
	        if (lang_1.isBlank(this._outlet)) {
	            return _resolveToTrue;
	        }
	        var next;
	        var childInstruction = null;
	        var reuse = false;
	        var componentInstruction = null;
	        if (lang_1.isPresent(instruction)) {
	            childInstruction = instruction.child;
	            componentInstruction = instruction.component;
	            reuse = instruction.component.reuse;
	        }
	        if (reuse) {
	            next = _resolveToTrue;
	        }
	        else {
	            next = this._outlet.canDeactivate(componentInstruction);
	        }
	        // TODO: aux route lifecycle hooks
	        return next.then(function (result) {
	            if (result == false) {
	                return false;
	            }
	            if (lang_1.isPresent(_this._childRouter)) {
	                return _this._childRouter._canDeactivate(childInstruction);
	            }
	            return true;
	        });
	    };
	    /**
	     * Updates this router and all descendant routers according to the given instruction
	     */
	    Router.prototype.commit = function (instruction, _skipLocationChange) {
	        var _this = this;
	        if (_skipLocationChange === void 0) { _skipLocationChange = false; }
	        this._currentInstruction = instruction;
	        var next = _resolveToTrue;
	        if (lang_1.isPresent(this._outlet)) {
	            var componentInstruction = instruction.component;
	            if (componentInstruction.reuse) {
	                next = this._outlet.reuse(componentInstruction);
	            }
	            else {
	                next =
	                    this.deactivate(instruction).then(function (_) { return _this._outlet.activate(componentInstruction); });
	            }
	            if (lang_1.isPresent(instruction.child)) {
	                next = next.then(function (_) {
	                    if (lang_1.isPresent(_this._childRouter)) {
	                        return _this._childRouter.commit(instruction.child);
	                    }
	                });
	            }
	        }
	        var promises = [];
	        this._auxRouters.forEach(function (router, name) {
	            if (lang_1.isPresent(instruction.auxInstruction[name])) {
	                promises.push(router.commit(instruction.auxInstruction[name]));
	            }
	        });
	        return next.then(function (_) { return async_1.PromiseWrapper.all(promises); });
	    };
	    /** @internal */
	    Router.prototype._startNavigating = function () { this.navigating = true; };
	    /** @internal */
	    Router.prototype._finishNavigating = function () { this.navigating = false; };
	    /**
	     * Subscribe to URL updates from the router
	     */
	    Router.prototype.subscribe = function (onNext) {
	        return async_1.ObservableWrapper.subscribe(this._subject, onNext);
	    };
	    /**
	     * Removes the contents of this router's outlet and all descendant outlets
	     */
	    Router.prototype.deactivate = function (instruction) {
	        var _this = this;
	        var childInstruction = null;
	        var componentInstruction = null;
	        if (lang_1.isPresent(instruction)) {
	            childInstruction = instruction.child;
	            componentInstruction = instruction.component;
	        }
	        var next = _resolveToTrue;
	        if (lang_1.isPresent(this._childRouter)) {
	            next = this._childRouter.deactivate(childInstruction);
	        }
	        if (lang_1.isPresent(this._outlet)) {
	            next = next.then(function (_) { return _this._outlet.deactivate(componentInstruction); });
	        }
	        // TODO: handle aux routes
	        return next;
	    };
	    /**
	     * Given a URL, returns an instruction representing the component graph
	     */
	    Router.prototype.recognize = function (url) {
	        return this.registry.recognize(url, this.hostComponent);
	    };
	    /**
	     * Navigates to either the last URL successfully navigated to, or the last URL requested if the
	     * router has yet to successfully navigate.
	     */
	    Router.prototype.renavigate = function () {
	        if (lang_1.isBlank(this.lastNavigationAttempt)) {
	            return this._currentNavigation;
	        }
	        return this.navigateByUrl(this.lastNavigationAttempt);
	    };
	    /**
	     * Generate a URL from a component name and optional map of parameters. The URL is relative to the
	     * app's base href.
	     */
	    Router.prototype.generate = function (linkParams) {
	        var normalizedLinkParams = splitAndFlattenLinkParams(linkParams);
	        var first = collection_1.ListWrapper.first(normalizedLinkParams);
	        var rest = collection_1.ListWrapper.slice(normalizedLinkParams, 1);
	        var router = this;
	        // The first segment should be either '.' (generate from parent) or '' (generate from root).
	        // When we normalize above, we strip all the slashes, './' becomes '.' and '/' becomes ''.
	        if (first == '') {
	            while (lang_1.isPresent(router.parent)) {
	                router = router.parent;
	            }
	        }
	        else if (first == '..') {
	            router = router.parent;
	            while (collection_1.ListWrapper.first(rest) == '..') {
	                rest = collection_1.ListWrapper.slice(rest, 1);
	                router = router.parent;
	                if (lang_1.isBlank(router)) {
	                    throw new exceptions_1.BaseException("Link \"" + collection_1.ListWrapper.toJSON(linkParams) + "\" has too many \"../\" segments.");
	                }
	            }
	        }
	        else if (first != '.') {
	            // For a link with no leading `./`, `/`, or `../`, we look for a sibling and child.
	            // If both exist, we throw. Otherwise, we prefer whichever exists.
	            var childRouteExists = this.registry.hasRoute(first, this.hostComponent);
	            var parentRouteExists = lang_1.isPresent(this.parent) && this.registry.hasRoute(first, this.parent.hostComponent);
	            if (parentRouteExists && childRouteExists) {
	                var msg = "Link \"" + collection_1.ListWrapper.toJSON(linkParams) + "\" is ambiguous, use \"./\" or \"../\" to disambiguate.";
	                throw new exceptions_1.BaseException(msg);
	            }
	            if (parentRouteExists) {
	                router = this.parent;
	            }
	            rest = linkParams;
	        }
	        if (rest[rest.length - 1] == '') {
	            rest.pop();
	        }
	        if (rest.length < 1) {
	            var msg = "Link \"" + collection_1.ListWrapper.toJSON(linkParams) + "\" must include a route name.";
	            throw new exceptions_1.BaseException(msg);
	        }
	        var nextInstruction = this.registry.generate(rest, router.hostComponent);
	        var url = [];
	        var parent = router.parent;
	        while (lang_1.isPresent(parent)) {
	            url.unshift(parent._currentInstruction);
	            parent = parent.parent;
	        }
	        while (url.length > 0) {
	            nextInstruction = url.pop().replaceChild(nextInstruction);
	        }
	        return nextInstruction;
	    };
	    return Router;
	})();
	exports.Router = Router;
	var RootRouter = (function (_super) {
	    __extends(RootRouter, _super);
	    function RootRouter(registry, location, primaryComponent) {
	        var _this = this;
	        _super.call(this, registry, null, primaryComponent);
	        this._location = location;
	        this._locationSub = this._location.subscribe(function (change) { return _this.navigateByUrl(change['url'], lang_1.isPresent(change['pop'])); });
	        this.registry.configFromComponent(primaryComponent);
	        this.navigateByUrl(location.path());
	    }
	    RootRouter.prototype.commit = function (instruction, _skipLocationChange) {
	        var _this = this;
	        if (_skipLocationChange === void 0) { _skipLocationChange = false; }
	        var emitPath = instruction_1.stringifyInstructionPath(instruction);
	        var emitQuery = instruction_1.stringifyInstructionQuery(instruction);
	        if (emitPath.length > 0) {
	            emitPath = '/' + emitPath;
	        }
	        var promise = _super.prototype.commit.call(this, instruction);
	        if (!_skipLocationChange) {
	            promise = promise.then(function (_) { _this._location.go(emitPath, emitQuery); });
	        }
	        return promise;
	    };
	    RootRouter.prototype.dispose = function () {
	        if (lang_1.isPresent(this._locationSub)) {
	            async_1.ObservableWrapper.dispose(this._locationSub);
	            this._locationSub = null;
	        }
	    };
	    return RootRouter;
	})(Router);
	exports.RootRouter = RootRouter;
	var ChildRouter = (function (_super) {
	    __extends(ChildRouter, _super);
	    function ChildRouter(parent, hostComponent) {
	        _super.call(this, parent.registry, parent, hostComponent);
	        this.parent = parent;
	    }
	    ChildRouter.prototype.navigateByUrl = function (url, _skipLocationChange) {
	        if (_skipLocationChange === void 0) { _skipLocationChange = false; }
	        // Delegate navigation to the root router
	        return this.parent.navigateByUrl(url, _skipLocationChange);
	    };
	    ChildRouter.prototype.navigateByInstruction = function (instruction, _skipLocationChange) {
	        if (_skipLocationChange === void 0) { _skipLocationChange = false; }
	        // Delegate navigation to the root router
	        return this.parent.navigateByInstruction(instruction, _skipLocationChange);
	    };
	    return ChildRouter;
	})(Router);
	/*
	 * Given: ['/a/b', {c: 2}]
	 * Returns: ['', 'a', 'b', {c: 2}]
	 */
	function splitAndFlattenLinkParams(linkParams) {
	    return linkParams.reduce(function (accumulation, item) {
	        if (lang_1.isString(item)) {
	            var strItem = item;
	            return accumulation.concat(strItem.split('/'));
	        }
	        accumulation.push(item);
	        return accumulation;
	    }, []);
	}
	function canActivateOne(nextInstruction, prevInstruction) {
	    var next = _resolveToTrue;
	    if (lang_1.isPresent(nextInstruction.child)) {
	        next = canActivateOne(nextInstruction.child, lang_1.isPresent(prevInstruction) ? prevInstruction.child : null);
	    }
	    return next.then(function (result) {
	        if (result == false) {
	            return false;
	        }
	        if (nextInstruction.component.reuse) {
	            return true;
	        }
	        var hook = route_lifecycle_reflector_1.getCanActivateHook(nextInstruction.component.componentType);
	        if (lang_1.isPresent(hook)) {
	            return hook(nextInstruction.component, lang_1.isPresent(prevInstruction) ? prevInstruction.component : null);
	        }
	        return true;
	    });
	}
	//# sourceMappingURL=router.js.map

/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var collection_1 = __webpack_require__(202);
	var exceptions_1 = __webpack_require__(204);
	var lang_1 = __webpack_require__(49);
	/**
	 * `RouteParams` is an immutable map of parameters for the given route
	 * based on the url matcher and optional parameters for that route.
	 *
	 * You can inject `RouteParams` into the constructor of a component to use it.
	 *
	 * ### Example
	 *
	 * ```
	 * import {bootstrap, Component} from 'angular2/angular2';
	 * import {Router, ROUTER_DIRECTIVES, ROUTER_PROVIDERS, RouteConfig} from 'angular2/router';
	 *
	 * @Component({directives: [ROUTER_DIRECTIVES]})
	 * @RouteConfig([
	 *  {path: '/user/:id', component: UserCmp, as: 'UserCmp'},
	 * ])
	 * class AppCmp {}
	 *
	 * @Component({ template: 'user: {{id}}' })
	 * class UserCmp {
	 *   id: string;
	 *   constructor(params: RouteParams) {
	 *     this.id = params.get('id');
	 *   }
	 * }
	 *
	 * bootstrap(AppCmp, ROUTER_PROVIDERS);
	 * ```
	 */
	var RouteParams = (function () {
	    function RouteParams(params) {
	        this.params = params;
	    }
	    RouteParams.prototype.get = function (param) { return lang_1.normalizeBlank(collection_1.StringMapWrapper.get(this.params, param)); };
	    return RouteParams;
	})();
	exports.RouteParams = RouteParams;
	/**
	 * `RouteData` is an immutable map of additional data you can configure in your {@link Route}.
	 *
	 * You can inject `RouteData` into the constructor of a component to use it.
	 *
	 * ## Example
	 *
	 * ```
	 * import {bootstrap, Component, View} from 'angular2/angular2';
	 * import {Router, ROUTER_DIRECTIVES, routerBindings, RouteConfig} from 'angular2/router';
	 *
	 * @Component({...})
	 * @View({directives: [ROUTER_DIRECTIVES]})
	 * @RouteConfig([
	 *  {path: '/user/:id', component: UserCmp, as: 'UserCmp', data: {isAdmin: true}},
	 * ])
	 * class AppCmp {}
	 *
	 * @Component({...})
	 * @View({ template: 'user: {{isAdmin}}' })
	 * class UserCmp {
	 *   string: isAdmin;
	 *   constructor(data: RouteData) {
	 *     this.isAdmin = data.get('isAdmin');
	 *   }
	 * }
	 *
	 * bootstrap(AppCmp, routerBindings(AppCmp));
	 * ```
	 */
	var RouteData = (function () {
	    function RouteData(data) {
	        if (data === void 0) { data = lang_1.CONST_EXPR({}); }
	        this.data = data;
	    }
	    RouteData.prototype.get = function (key) { return lang_1.normalizeBlank(collection_1.StringMapWrapper.get(this.data, key)); };
	    return RouteData;
	})();
	exports.RouteData = RouteData;
	var BLANK_ROUTE_DATA = new RouteData();
	/**
	 * `Instruction` is a tree of {@link ComponentInstruction}s with all the information needed
	 * to transition each component in the app to a given route, including all auxiliary routes.
	 *
	 * `Instruction`s can be created using {@link Router#generate}, and can be used to
	 * perform route changes with {@link Router#navigateByInstruction}.
	 *
	 * ### Example
	 *
	 * ```
	 * import {bootstrap, Component} from 'angular2/angular2';
	 * import {Router, ROUTER_DIRECTIVES, ROUTER_PROVIDERS, RouteConfig} from 'angular2/router';
	 *
	 * @Component({directives: [ROUTER_DIRECTIVES]})
	 * @RouteConfig([
	 *  {...},
	 * ])
	 * class AppCmp {
	 *   constructor(router: Router) {
	 *     var instruction = router.generate(['/MyRoute']);
	 *     router.navigateByInstruction(instruction);
	 *   }
	 * }
	 *
	 * bootstrap(AppCmp, ROUTER_PROVIDERS);
	 * ```
	 */
	var Instruction = (function () {
	    function Instruction(component, child, auxInstruction) {
	        this.component = component;
	        this.child = child;
	        this.auxInstruction = auxInstruction;
	    }
	    /**
	     * Returns a new instruction that shares the state of the existing instruction, but with
	     * the given child {@link Instruction} replacing the existing child.
	     */
	    Instruction.prototype.replaceChild = function (child) {
	        return new Instruction(this.component, child, this.auxInstruction);
	    };
	    return Instruction;
	})();
	exports.Instruction = Instruction;
	/**
	 * Represents a partially completed instruction during recognition that only has the
	 * primary (non-aux) route instructions matched.
	 *
	 * `PrimaryInstruction` is an internal class used by `RouteRecognizer` while it's
	 * figuring out where to navigate.
	 */
	var PrimaryInstruction = (function () {
	    function PrimaryInstruction(component, child, auxUrls) {
	        this.component = component;
	        this.child = child;
	        this.auxUrls = auxUrls;
	    }
	    return PrimaryInstruction;
	})();
	exports.PrimaryInstruction = PrimaryInstruction;
	function stringifyInstruction(instruction) {
	    return stringifyInstructionPath(instruction) + stringifyInstructionQuery(instruction);
	}
	exports.stringifyInstruction = stringifyInstruction;
	function stringifyInstructionPath(instruction) {
	    return instruction.component.urlPath + stringifyAux(instruction) +
	        stringifyPrimaryPrefixed(instruction.child);
	}
	exports.stringifyInstructionPath = stringifyInstructionPath;
	function stringifyInstructionQuery(instruction) {
	    return instruction.component.urlParams.length > 0 ?
	        ('?' + instruction.component.urlParams.join('&')) :
	        '';
	}
	exports.stringifyInstructionQuery = stringifyInstructionQuery;
	function stringifyPrimaryPrefixed(instruction) {
	    var primary = stringifyPrimary(instruction);
	    if (primary.length > 0) {
	        primary = '/' + primary;
	    }
	    return primary;
	}
	function stringifyPrimary(instruction) {
	    if (lang_1.isBlank(instruction)) {
	        return '';
	    }
	    var params = instruction.component.urlParams.length > 0 ?
	        (';' + instruction.component.urlParams.join(';')) :
	        '';
	    return instruction.component.urlPath + params + stringifyAux(instruction) +
	        stringifyPrimaryPrefixed(instruction.child);
	}
	function stringifyAux(instruction) {
	    var routes = [];
	    collection_1.StringMapWrapper.forEach(instruction.auxInstruction, function (auxInstruction, _) {
	        routes.push(stringifyPrimary(auxInstruction));
	    });
	    if (routes.length > 0) {
	        return '(' + routes.join('//') + ')';
	    }
	    return '';
	}
	/**
	 * A `ComponentInstruction` represents the route state for a single component. An `Instruction` is
	 * composed of a tree of these `ComponentInstruction`s.
	 *
	 * `ComponentInstructions` is a public API. Instances of `ComponentInstruction` are passed
	 * to route lifecycle hooks, like {@link CanActivate}.
	 *
	 * `ComponentInstruction`s are [https://en.wikipedia.org/wiki/Hash_consing](hash consed). You should
	 * never construct one yourself with "new." Instead, rely on {@link Router/PathRecognizer} to
	 * construct `ComponentInstruction`s.
	 *
	 * You should not modify this object. It should be treated as immutable.
	 */
	var ComponentInstruction = (function () {
	    function ComponentInstruction() {
	        this.reuse = false;
	    }
	    Object.defineProperty(ComponentInstruction.prototype, "componentType", {
	        /**
	         * Returns the component type of the represented route, or `null` if this instruction
	         * hasn't been resolved.
	         */
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(ComponentInstruction.prototype, "specificity", {
	        /**
	         * Returns the specificity of the route associated with this `Instruction`.
	         */
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(ComponentInstruction.prototype, "terminal", {
	        /**
	         * Returns `true` if the component type of this instruction has no child {@link RouteConfig},
	         * or `false` if it does.
	         */
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    Object.defineProperty(ComponentInstruction.prototype, "routeData", {
	        /**
	         * Returns the route data of the given route that was specified in the {@link RouteDefinition},
	         * or an empty object if no route data was specified.
	         */
	        get: function () { return exceptions_1.unimplemented(); },
	        enumerable: true,
	        configurable: true
	    });
	    ;
	    return ComponentInstruction;
	})();
	exports.ComponentInstruction = ComponentInstruction;
	var ComponentInstruction_ = (function (_super) {
	    __extends(ComponentInstruction_, _super);
	    function ComponentInstruction_(urlPath, urlParams, _recognizer, params) {
	        if (params === void 0) { params = null; }
	        _super.call(this);
	        this._recognizer = _recognizer;
	        this.urlPath = urlPath;
	        this.urlParams = urlParams;
	        this.params = params;
	        if (lang_1.isPresent(this._recognizer.handler.data)) {
	            this._routeData = new RouteData(this._recognizer.handler.data);
	        }
	        else {
	            this._routeData = BLANK_ROUTE_DATA;
	        }
	    }
	    Object.defineProperty(ComponentInstruction_.prototype, "componentType", {
	        get: function () { return this._recognizer.handler.componentType; },
	        enumerable: true,
	        configurable: true
	    });
	    ComponentInstruction_.prototype.resolveComponentType = function () { return this._recognizer.handler.resolveComponentType(); };
	    Object.defineProperty(ComponentInstruction_.prototype, "specificity", {
	        get: function () { return this._recognizer.specificity; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentInstruction_.prototype, "terminal", {
	        get: function () { return this._recognizer.terminal; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentInstruction_.prototype, "routeData", {
	        get: function () { return this._routeData; },
	        enumerable: true,
	        configurable: true
	    });
	    return ComponentInstruction_;
	})(ComponentInstruction);
	exports.ComponentInstruction_ = ComponentInstruction_;
	//# sourceMappingURL=instruction.js.map

/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var lifecycle_annotations_impl_1 = __webpack_require__(400);
	var reflection_1 = __webpack_require__(206);
	function hasLifecycleHook(e, type) {
	    if (!(type instanceof lang_1.Type))
	        return false;
	    return e.name in type.prototype;
	}
	exports.hasLifecycleHook = hasLifecycleHook;
	function getCanActivateHook(type) {
	    var annotations = reflection_1.reflector.annotations(type);
	    for (var i = 0; i < annotations.length; i += 1) {
	        var annotation = annotations[i];
	        if (annotation instanceof lifecycle_annotations_impl_1.CanActivate) {
	            return annotation.fn;
	        }
	    }
	    return null;
	}
	exports.getCanActivateHook = getCanActivateHook;
	//# sourceMappingURL=route_lifecycle_reflector.js.map

/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(49);
	var RouteLifecycleHook = (function () {
	    function RouteLifecycleHook(name) {
	        this.name = name;
	    }
	    RouteLifecycleHook = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [String])
	    ], RouteLifecycleHook);
	    return RouteLifecycleHook;
	})();
	exports.RouteLifecycleHook = RouteLifecycleHook;
	var CanActivate = (function () {
	    function CanActivate(fn) {
	        this.fn = fn;
	    }
	    CanActivate = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Function])
	    ], CanActivate);
	    return CanActivate;
	})();
	exports.CanActivate = CanActivate;
	exports.canReuse = lang_1.CONST_EXPR(new RouteLifecycleHook("canReuse"));
	exports.canDeactivate = lang_1.CONST_EXPR(new RouteLifecycleHook("canDeactivate"));
	exports.onActivate = lang_1.CONST_EXPR(new RouteLifecycleHook("onActivate"));
	exports.onReuse = lang_1.CONST_EXPR(new RouteLifecycleHook("onReuse"));
	exports.onDeactivate = lang_1.CONST_EXPR(new RouteLifecycleHook("onDeactivate"));
	//# sourceMappingURL=lifecycle_annotations_impl.js.map

/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var async_1 = __webpack_require__(50);
	var collection_1 = __webpack_require__(202);
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var angular2_1 = __webpack_require__(45);
	var routerMod = __webpack_require__(397);
	var instruction_1 = __webpack_require__(398);
	var hookMod = __webpack_require__(402);
	var route_lifecycle_reflector_1 = __webpack_require__(399);
	var _resolveToTrue = async_1.PromiseWrapper.resolve(true);
	/**
	 * A router outlet is a placeholder that Angular dynamically fills based on the application's route.
	 *
	 * ## Use
	 *
	 * ```
	 * <router-outlet></router-outlet>
	 * ```
	 */
	var RouterOutlet = (function () {
	    function RouterOutlet(_elementRef, _loader, _parentRouter, nameAttr) {
	        this._elementRef = _elementRef;
	        this._loader = _loader;
	        this._parentRouter = _parentRouter;
	        this.name = null;
	        this._componentRef = null;
	        this._currentInstruction = null;
	        if (lang_1.isPresent(nameAttr)) {
	            this.name = nameAttr;
	            this._parentRouter.registerAuxOutlet(this);
	        }
	        else {
	            this._parentRouter.registerPrimaryOutlet(this);
	        }
	    }
	    /**
	     * Called by the Router to instantiate a new component during the commit phase of a navigation.
	     * This method in turn is responsible for calling the `onActivate` hook of its child.
	     */
	    RouterOutlet.prototype.activate = function (nextInstruction) {
	        var _this = this;
	        var previousInstruction = this._currentInstruction;
	        this._currentInstruction = nextInstruction;
	        var componentType = nextInstruction.componentType;
	        var childRouter = this._parentRouter.childRouter(componentType);
	        var providers = angular2_1.Injector.resolve([
	            angular2_1.provide(instruction_1.RouteData, { useValue: nextInstruction.routeData }),
	            angular2_1.provide(instruction_1.RouteParams, { useValue: new instruction_1.RouteParams(nextInstruction.params) }),
	            angular2_1.provide(routerMod.Router, { useValue: childRouter })
	        ]);
	        return this._loader.loadNextToLocation(componentType, this._elementRef, providers)
	            .then(function (componentRef) {
	            _this._componentRef = componentRef;
	            if (route_lifecycle_reflector_1.hasLifecycleHook(hookMod.onActivate, componentType)) {
	                return _this._componentRef.instance.onActivate(nextInstruction, previousInstruction);
	            }
	        });
	    };
	    /**
	     * Called by the {@link Router} during the commit phase of a navigation when an outlet
	     * reuses a component between different routes.
	     * This method in turn is responsible for calling the `onReuse` hook of its child.
	     */
	    RouterOutlet.prototype.reuse = function (nextInstruction) {
	        var previousInstruction = this._currentInstruction;
	        this._currentInstruction = nextInstruction;
	        if (lang_1.isBlank(this._componentRef)) {
	            throw new exceptions_1.BaseException("Cannot reuse an outlet that does not contain a component.");
	        }
	        return async_1.PromiseWrapper.resolve(route_lifecycle_reflector_1.hasLifecycleHook(hookMod.onReuse, this._currentInstruction.componentType) ?
	            this._componentRef.instance.onReuse(nextInstruction, previousInstruction) :
	            true);
	    };
	    /**
	     * Called by the {@link Router} when an outlet disposes of a component's contents.
	     * This method in turn is responsible for calling the `onDeactivate` hook of its child.
	     */
	    RouterOutlet.prototype.deactivate = function (nextInstruction) {
	        var _this = this;
	        var next = _resolveToTrue;
	        if (lang_1.isPresent(this._componentRef) && lang_1.isPresent(this._currentInstruction) &&
	            route_lifecycle_reflector_1.hasLifecycleHook(hookMod.onDeactivate, this._currentInstruction.componentType)) {
	            next = async_1.PromiseWrapper.resolve(this._componentRef.instance.onDeactivate(nextInstruction, this._currentInstruction));
	        }
	        return next.then(function (_) {
	            if (lang_1.isPresent(_this._componentRef)) {
	                _this._componentRef.dispose();
	                _this._componentRef = null;
	            }
	        });
	    };
	    /**
	     * Called by the {@link Router} during recognition phase of a navigation.
	     *
	     * If this resolves to `false`, the given navigation is cancelled.
	     *
	     * This method delegates to the child component's `canDeactivate` hook if it exists,
	     * and otherwise resolves to true.
	     */
	    RouterOutlet.prototype.canDeactivate = function (nextInstruction) {
	        if (lang_1.isBlank(this._currentInstruction)) {
	            return _resolveToTrue;
	        }
	        if (route_lifecycle_reflector_1.hasLifecycleHook(hookMod.canDeactivate, this._currentInstruction.componentType)) {
	            return async_1.PromiseWrapper.resolve(this._componentRef.instance.canDeactivate(nextInstruction, this._currentInstruction));
	        }
	        return _resolveToTrue;
	    };
	    /**
	     * Called by the {@link Router} during recognition phase of a navigation.
	     *
	     * If the new child component has a different Type than the existing child component,
	     * this will resolve to `false`. You can't reuse an old component when the new component
	     * is of a different Type.
	     *
	     * Otherwise, this method delegates to the child component's `canReuse` hook if it exists,
	     * or resolves to true if the hook is not present.
	     */
	    RouterOutlet.prototype.canReuse = function (nextInstruction) {
	        var result;
	        if (lang_1.isBlank(this._currentInstruction) ||
	            this._currentInstruction.componentType != nextInstruction.componentType) {
	            result = false;
	        }
	        else if (route_lifecycle_reflector_1.hasLifecycleHook(hookMod.canReuse, this._currentInstruction.componentType)) {
	            result = this._componentRef.instance.canReuse(nextInstruction, this._currentInstruction);
	        }
	        else {
	            result = nextInstruction == this._currentInstruction ||
	                (lang_1.isPresent(nextInstruction.params) && lang_1.isPresent(this._currentInstruction.params) &&
	                    collection_1.StringMapWrapper.equals(nextInstruction.params, this._currentInstruction.params));
	        }
	        return async_1.PromiseWrapper.resolve(result);
	    };
	    RouterOutlet = __decorate([
	        angular2_1.Directive({ selector: 'router-outlet' }),
	        __param(3, angular2_1.Attribute('name')), 
	        __metadata('design:paramtypes', [angular2_1.ElementRef, angular2_1.DynamicComponentLoader, routerMod.Router, String])
	    ], RouterOutlet);
	    return RouterOutlet;
	})();
	exports.RouterOutlet = RouterOutlet;
	//# sourceMappingURL=router_outlet.js.map

/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * This indirection is needed to free up Component, etc symbols in the public API
	 * to be used by the decorator versions of these annotations.
	 */
	var decorators_1 = __webpack_require__(199);
	var lifecycle_annotations_impl_1 = __webpack_require__(400);
	var lifecycle_annotations_impl_2 = __webpack_require__(400);
	exports.canReuse = lifecycle_annotations_impl_2.canReuse;
	exports.canDeactivate = lifecycle_annotations_impl_2.canDeactivate;
	exports.onActivate = lifecycle_annotations_impl_2.onActivate;
	exports.onReuse = lifecycle_annotations_impl_2.onReuse;
	exports.onDeactivate = lifecycle_annotations_impl_2.onDeactivate;
	/**
	 * Defines route lifecycle hook `CanActivate`, which is called by the router to determine
	 * if a component can be instantiated as part of a navigation.
	 *
	 * <aside class="is-right">
	 * Note that unlike other lifecycle hooks, this one uses an annotation rather than an interface.
	 * This is because the `CanActivate` function is called before the component is instantiated.
	 * </aside>
	 *
	 * The `CanActivate` hook is called with two {@link ComponentInstruction}s as parameters, the first
	 * representing the current route being navigated to, and the second parameter representing the
	 * previous route or `null`.
	 *
	 * ```typescript
	 * @CanActivate((next, prev) => boolean | Promise<boolean>)
	 * ```
	 *
	 * If `CanActivate` returns or resolves to `false`, the navigation is cancelled.
	 * If `CanActivate` throws or rejects, the navigation is also cancelled.
	 * If `CanActivate` returns or resolves to `true`, navigation continues, the component is
	 * instantiated, and the {@link OnActivate} hook of that component is called if implemented.
	 *
	 * ### Example
	 *
	 * {@example router/ts/can_activate/can_activate_example.ts region='canActivate' }
	 */
	exports.CanActivate = decorators_1.makeDecorator(lifecycle_annotations_impl_1.CanActivate);
	//# sourceMappingURL=lifecycle_annotations.js.map

/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var angular2_1 = __webpack_require__(45);
	var lang_1 = __webpack_require__(49);
	var router_1 = __webpack_require__(397);
	var location_1 = __webpack_require__(404);
	var instruction_1 = __webpack_require__(398);
	/**
	 * The RouterLink directive lets you link to specific parts of your app.
	 *
	 * Consider the following route configuration:

	 * ```
	 * @RouteConfig([
	 *   { path: '/user', component: UserCmp, as: 'User' }
	 * ]);
	 * class MyComp {}
	 * ```
	 *
	 * When linking to this `User` route, you can write:
	 *
	 * ```
	 * <a [router-link]="['./User']">link to user component</a>
	 * ```
	 *
	 * RouterLink expects the value to be an array of route names, followed by the params
	 * for that level of routing. For instance `['/Team', {teamId: 1}, 'User', {userId: 2}]`
	 * means that we want to generate a link for the `Team` route with params `{teamId: 1}`,
	 * and with a child route `User` with params `{userId: 2}`.
	 *
	 * The first route name should be prepended with `/`, `./`, or `../`.
	 * If the route begins with `/`, the router will look up the route from the root of the app.
	 * If the route begins with `./`, the router will instead look in the current component's
	 * children for the route. And if the route begins with `../`, the router will look at the
	 * current component's parent.
	 */
	var RouterLink = (function () {
	    function RouterLink(_router, _location) {
	        this._router = _router;
	        this._location = _location;
	    }
	    Object.defineProperty(RouterLink.prototype, "isRouteActive", {
	        get: function () { return this._router.isRouteActive(this._navigationInstruction); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RouterLink.prototype, "routeParams", {
	        set: function (changes) {
	            this._routeParams = changes;
	            this._navigationInstruction = this._router.generate(this._routeParams);
	            var navigationHref = instruction_1.stringifyInstruction(this._navigationInstruction);
	            this.visibleHref = this._location.prepareExternalUrl(navigationHref);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    RouterLink.prototype.onClick = function () {
	        // If no target, or if target is _self, prevent default browser behavior
	        if (!lang_1.isString(this.target) || this.target == '_self') {
	            this._router.navigateByInstruction(this._navigationInstruction);
	            return false;
	        }
	        return true;
	    };
	    RouterLink = __decorate([
	        angular2_1.Directive({
	            selector: '[router-link]',
	            inputs: ['routeParams: routerLink', 'target: target'],
	            host: {
	                '(click)': 'onClick()',
	                '[attr.href]': 'visibleHref',
	                '[class.router-link-active]': 'isRouteActive'
	            }
	        }), 
	        __metadata('design:paramtypes', [router_1.Router, location_1.Location])
	    ], RouterLink);
	    return RouterLink;
	})();
	exports.RouterLink = RouterLink;
	//# sourceMappingURL=router_link.js.map

/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var location_strategy_1 = __webpack_require__(405);
	var lang_1 = __webpack_require__(49);
	var async_1 = __webpack_require__(50);
	var lang_2 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var angular2_1 = __webpack_require__(45);
	/**
	 * The `APP_BASE_HREF` token represents the base href to be used with the
	 * {@link PathLocationStrategy}.
	 *
	 * If you're using {@link PathLocationStrategy}, you must provide a provider to a string
	 * representing the URL prefix that should be preserved when generating and recognizing
	 * URLs.
	 *
	 * ### Example
	 *
	 * ```
	 * import {Component} from 'angular2/angular2';
	 * import {ROUTER_DIRECTIVES, ROUTER_PROVIDERS, RouteConfig} from 'angular2/router';
	 *
	 * @Component({directives: [ROUTER_DIRECTIVES]})
	 * @RouteConfig([
	 *  {...},
	 * ])
	 * class AppCmp {
	 *   // ...
	 * }
	 *
	 * bootstrap(AppCmp, [
	 *   ROUTER_PROVIDERS,
	 *   PathLocationStrategy,
	 *   provide(APP_BASE_HREF, {useValue: '/my/app'})
	 * ]);
	 * ```
	 */
	exports.APP_BASE_HREF = lang_1.CONST_EXPR(new angular2_1.OpaqueToken('appBaseHref'));
	/**
	 * `Location` is a service that applications can use to interact with a browser's URL.
	 * Depending on which {@link LocationStrategy} is used, `Location` will either persist
	 * to the URL's path or the URL's hash segment.
	 *
	 * Note: it's better to use {@link Router#navigate} service to trigger route changes. Use
	 * `Location` only if you need to interact with or create normalized URLs outside of
	 * routing.
	 *
	 * `Location` is responsible for normalizing the URL against the application's base href.
	 * A normalized URL is absolute from the URL host, includes the application's base href, and has no
	 * trailing slash:
	 * - `/my/app/user/123` is normalized
	 * - `my/app/user/123` **is not** normalized
	 * - `/my/app/user/123/` **is not** normalized
	 *
	 * ### Example
	 *
	 * ```
	 * import {Component} from 'angular2/angular2';
	 * import {
	 *   ROUTER_DIRECTIVES,
	 *   ROUTER_PROVIDERS,
	 *   RouteConfig,
	 *   Location
	 * } from 'angular2/router';
	 *
	 * @Component({directives: [ROUTER_DIRECTIVES]})
	 * @RouteConfig([
	 *  {...},
	 * ])
	 * class AppCmp {
	 *   constructor(location: Location) {
	 *     location.go('/foo');
	 *   }
	 * }
	 *
	 * bootstrap(AppCmp, [ROUTER_PROVIDERS]);
	 * ```
	 */
	var Location = (function () {
	    function Location(platformStrategy, href) {
	        var _this = this;
	        this.platformStrategy = platformStrategy;
	        /** @internal */
	        this._subject = new async_1.EventEmitter();
	        var browserBaseHref = lang_1.isPresent(href) ? href : this.platformStrategy.getBaseHref();
	        if (lang_2.isBlank(browserBaseHref)) {
	            throw new exceptions_1.BaseException("No base href set. Either provide a provider for the APP_BASE_HREF token or add a base element to the document.");
	        }
	        this._baseHref = stripTrailingSlash(stripIndexHtml(browserBaseHref));
	        this.platformStrategy.onPopState(function (_) { async_1.ObservableWrapper.callNext(_this._subject, { 'url': _this.path(), 'pop': true }); });
	    }
	    /**
	     * Returns the normalized URL path.
	     */
	    Location.prototype.path = function () { return this.normalize(this.platformStrategy.path()); };
	    /**
	     * Given a string representing a URL, returns the normalized URL path without leading or
	     * trailing slashes
	     */
	    Location.prototype.normalize = function (url) {
	        return stripTrailingSlash(_stripBaseHref(this._baseHref, stripIndexHtml(url)));
	    };
	    /**
	     * Given a string representing a URL, returns the platform-specific external URL path.
	     * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one
	     * before normalizing. This method will also add a hash if `HashLocationStrategy` is
	     * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
	     */
	    Location.prototype.prepareExternalUrl = function (url) {
	        if (!url.startsWith('/')) {
	            url = '/' + url;
	        }
	        return this.platformStrategy.prepareExternalUrl(stripTrailingSlash(_addBaseHref(this._baseHref, url)));
	    };
	    /**
	     * Changes the browsers URL to the normalized version of the given URL, and pushes a
	     * new item onto the platform's history.
	     */
	    Location.prototype.go = function (path, query) {
	        if (query === void 0) { query = ''; }
	        this.platformStrategy.pushState(null, '', path, query);
	    };
	    /**
	     * Navigates forward in the platform's history.
	     */
	    Location.prototype.forward = function () { this.platformStrategy.forward(); };
	    /**
	     * Navigates back in the platform's history.
	     */
	    Location.prototype.back = function () { this.platformStrategy.back(); };
	    /**
	     * Subscribe to the platform's `popState` events.
	     */
	    Location.prototype.subscribe = function (onNext, onThrow, onReturn) {
	        if (onThrow === void 0) { onThrow = null; }
	        if (onReturn === void 0) { onReturn = null; }
	        return async_1.ObservableWrapper.subscribe(this._subject, onNext, onThrow, onReturn);
	    };
	    Location = __decorate([
	        angular2_1.Injectable(),
	        __param(1, angular2_1.Optional()),
	        __param(1, angular2_1.Inject(exports.APP_BASE_HREF)), 
	        __metadata('design:paramtypes', [location_strategy_1.LocationStrategy, String])
	    ], Location);
	    return Location;
	})();
	exports.Location = Location;
	function _stripBaseHref(baseHref, url) {
	    if (baseHref.length > 0 && url.startsWith(baseHref)) {
	        return url.substring(baseHref.length);
	    }
	    return url;
	}
	function _addBaseHref(baseHref, url) {
	    if (!url.startsWith(baseHref)) {
	        return baseHref + url;
	    }
	    return url;
	}
	function stripIndexHtml(url) {
	    if (/\/index.html$/g.test(url)) {
	        // '/index.html'.length == 11
	        return url.substring(0, url.length - 11);
	    }
	    return url;
	}
	function stripTrailingSlash(url) {
	    if (/\/$/g.test(url)) {
	        url = url.substring(0, url.length - 1);
	    }
	    return url;
	}
	//# sourceMappingURL=location.js.map

/***/ },
/* 405 */
/***/ function(module, exports) {

	'use strict';/**
	 * `LocationStrategy` is responsible for representing and reading route state
	 * from the the browser's URL. Angular provides two strategies:
	 * {@link HashLocationStrategy} (default) and {@link PathLocationStrategy}.
	 *
	 * This is used under the hood of the {@link Location} service.
	 *
	 * Applications should use the {@link Router} or {@link Location} services to
	 * interact with application route state.
	 *
	 * For instance, {@link HashLocationStrategy} produces URLs like
	 * `http://example.com#/foo`, and {@link PathLocationStrategy} produces
	 * `http://example.com/foo` as an equivalent URL.
	 *
	 * See these two classes for more.
	 */
	var LocationStrategy = (function () {
	    function LocationStrategy() {
	    }
	    return LocationStrategy;
	})();
	exports.LocationStrategy = LocationStrategy;
	function normalizeQueryParams(params) {
	    return (params.length > 0 && params.substring(0, 1) != '?') ? ('?' + params) : params;
	}
	exports.normalizeQueryParams = normalizeQueryParams;
	//# sourceMappingURL=location_strategy.js.map

/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var route_recognizer_1 = __webpack_require__(407);
	var instruction_1 = __webpack_require__(398);
	var collection_1 = __webpack_require__(202);
	var async_1 = __webpack_require__(50);
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var route_config_impl_1 = __webpack_require__(410);
	var reflection_1 = __webpack_require__(206);
	var angular2_1 = __webpack_require__(45);
	var route_config_nomalizer_1 = __webpack_require__(413);
	var url_parser_1 = __webpack_require__(409);
	var _resolveToNull = async_1.PromiseWrapper.resolve(null);
	/**
	 * The RouteRegistry holds route configurations for each component in an Angular app.
	 * It is responsible for creating Instructions from URLs, and generating URLs based on route and
	 * parameters.
	 */
	var RouteRegistry = (function () {
	    function RouteRegistry() {
	        this._rules = new collection_1.Map();
	    }
	    /**
	     * Given a component and a configuration object, add the route to this registry
	     */
	    RouteRegistry.prototype.config = function (parentComponent, config) {
	        config = route_config_nomalizer_1.normalizeRouteConfig(config);
	        // this is here because Dart type guard reasons
	        if (config instanceof route_config_impl_1.Route) {
	            route_config_nomalizer_1.assertComponentExists(config.component, config.path);
	        }
	        else if (config instanceof route_config_impl_1.AuxRoute) {
	            route_config_nomalizer_1.assertComponentExists(config.component, config.path);
	        }
	        var recognizer = this._rules.get(parentComponent);
	        if (lang_1.isBlank(recognizer)) {
	            recognizer = new route_recognizer_1.RouteRecognizer();
	            this._rules.set(parentComponent, recognizer);
	        }
	        var terminal = recognizer.config(config);
	        if (config instanceof route_config_impl_1.Route) {
	            if (terminal) {
	                assertTerminalComponent(config.component, config.path);
	            }
	            else {
	                this.configFromComponent(config.component);
	            }
	        }
	    };
	    /**
	     * Reads the annotations of a component and configures the registry based on them
	     */
	    RouteRegistry.prototype.configFromComponent = function (component) {
	        var _this = this;
	        if (!lang_1.isType(component)) {
	            return;
	        }
	        // Don't read the annotations from a type more than once â€“
	        // this prevents an infinite loop if a component routes recursively.
	        if (this._rules.has(component)) {
	            return;
	        }
	        var annotations = reflection_1.reflector.annotations(component);
	        if (lang_1.isPresent(annotations)) {
	            for (var i = 0; i < annotations.length; i++) {
	                var annotation = annotations[i];
	                if (annotation instanceof route_config_impl_1.RouteConfig) {
	                    var routeCfgs = annotation.configs;
	                    routeCfgs.forEach(function (config) { return _this.config(component, config); });
	                }
	            }
	        }
	    };
	    /**
	     * Given a URL and a parent component, return the most specific instruction for navigating
	     * the application into the state specified by the url
	     */
	    RouteRegistry.prototype.recognize = function (url, parentComponent) {
	        var parsedUrl = url_parser_1.parser.parse(url);
	        return this._recognize(parsedUrl, parentComponent);
	    };
	    RouteRegistry.prototype._recognize = function (parsedUrl, parentComponent) {
	        var _this = this;
	        return this._recognizePrimaryRoute(parsedUrl, parentComponent)
	            .then(function (instruction) {
	            return _this._completeAuxiliaryRouteMatches(instruction, parentComponent);
	        });
	    };
	    RouteRegistry.prototype._recognizePrimaryRoute = function (parsedUrl, parentComponent) {
	        var _this = this;
	        var componentRecognizer = this._rules.get(parentComponent);
	        if (lang_1.isBlank(componentRecognizer)) {
	            return _resolveToNull;
	        }
	        // Matches some beginning part of the given URL
	        var possibleMatches = componentRecognizer.recognize(parsedUrl);
	        var matchPromises = possibleMatches.map(function (candidate) { return _this._completePrimaryRouteMatch(candidate); });
	        return async_1.PromiseWrapper.all(matchPromises).then(mostSpecific);
	    };
	    RouteRegistry.prototype._completePrimaryRouteMatch = function (partialMatch) {
	        var _this = this;
	        var instruction = partialMatch.instruction;
	        return instruction.resolveComponentType().then(function (componentType) {
	            _this.configFromComponent(componentType);
	            if (instruction.terminal) {
	                return new instruction_1.PrimaryInstruction(instruction, null, partialMatch.remainingAux);
	            }
	            return _this._recognizePrimaryRoute(partialMatch.remaining, componentType)
	                .then(function (childInstruction) {
	                if (lang_1.isBlank(childInstruction)) {
	                    return null;
	                }
	                else {
	                    return new instruction_1.PrimaryInstruction(instruction, childInstruction, partialMatch.remainingAux);
	                }
	            });
	        });
	    };
	    RouteRegistry.prototype._completeAuxiliaryRouteMatches = function (instruction, parentComponent) {
	        var _this = this;
	        if (lang_1.isBlank(instruction)) {
	            return _resolveToNull;
	        }
	        var componentRecognizer = this._rules.get(parentComponent);
	        var auxInstructions = {};
	        var promises = instruction.auxUrls.map(function (auxSegment) {
	            var match = componentRecognizer.recognizeAuxiliary(auxSegment);
	            if (lang_1.isBlank(match)) {
	                return _resolveToNull;
	            }
	            return _this._completePrimaryRouteMatch(match).then(function (auxInstruction) {
	                if (lang_1.isPresent(auxInstruction)) {
	                    return _this._completeAuxiliaryRouteMatches(auxInstruction, parentComponent)
	                        .then(function (finishedAuxRoute) {
	                        auxInstructions[auxSegment.path] = finishedAuxRoute;
	                    });
	                }
	            });
	        });
	        return async_1.PromiseWrapper.all(promises).then(function (_) {
	            if (lang_1.isBlank(instruction.child)) {
	                return new instruction_1.Instruction(instruction.component, null, auxInstructions);
	            }
	            return _this._completeAuxiliaryRouteMatches(instruction.child, instruction.component.componentType)
	                .then(function (completeChild) {
	                return new instruction_1.Instruction(instruction.component, completeChild, auxInstructions);
	            });
	        });
	    };
	    /**
	     * Given a normalized list with component names and params like: `['user', {id: 3 }]`
	     * generates a url with a leading slash relative to the provided `parentComponent`.
	     */
	    RouteRegistry.prototype.generate = function (linkParams, parentComponent) {
	        var segments = [];
	        var componentCursor = parentComponent;
	        var lastInstructionIsTerminal = false;
	        for (var i = 0; i < linkParams.length; i += 1) {
	            var segment = linkParams[i];
	            if (lang_1.isBlank(componentCursor)) {
	                throw new exceptions_1.BaseException("Could not find route named \"" + segment + "\".");
	            }
	            if (!lang_1.isString(segment)) {
	                throw new exceptions_1.BaseException("Unexpected segment \"" + segment + "\" in link DSL. Expected a string.");
	            }
	            else if (segment == '' || segment == '.' || segment == '..') {
	                throw new exceptions_1.BaseException("\"" + segment + "/\" is only allowed at the beginning of a link DSL.");
	            }
	            var params = {};
	            if (i + 1 < linkParams.length) {
	                var nextSegment = linkParams[i + 1];
	                if (lang_1.isStringMap(nextSegment)) {
	                    params = nextSegment;
	                    i += 1;
	                }
	            }
	            var componentRecognizer = this._rules.get(componentCursor);
	            if (lang_1.isBlank(componentRecognizer)) {
	                throw new exceptions_1.BaseException("Component \"" + lang_1.getTypeNameForDebugging(componentCursor) + "\" has no route config.");
	            }
	            var response = componentRecognizer.generate(segment, params);
	            if (lang_1.isBlank(response)) {
	                throw new exceptions_1.BaseException("Component \"" + lang_1.getTypeNameForDebugging(componentCursor) + "\" has no route named \"" + segment + "\".");
	            }
	            segments.push(response);
	            componentCursor = response.componentType;
	            lastInstructionIsTerminal = response.terminal;
	        }
	        var instruction = null;
	        if (!lastInstructionIsTerminal) {
	            instruction = this._generateRedirects(componentCursor);
	            if (lang_1.isPresent(instruction)) {
	                var lastInstruction = instruction;
	                while (lang_1.isPresent(lastInstruction.child)) {
	                    lastInstruction = lastInstruction.child;
	                }
	                lastInstructionIsTerminal = lastInstruction.component.terminal;
	            }
	            if (lang_1.isPresent(componentCursor) && !lastInstructionIsTerminal) {
	                throw new exceptions_1.BaseException("Link \"" + collection_1.ListWrapper.toJSON(linkParams) + "\" does not resolve to a terminal or async instruction.");
	            }
	        }
	        while (segments.length > 0) {
	            instruction = new instruction_1.Instruction(segments.pop(), instruction, {});
	        }
	        return instruction;
	    };
	    RouteRegistry.prototype.hasRoute = function (name, parentComponent) {
	        var componentRecognizer = this._rules.get(parentComponent);
	        if (lang_1.isBlank(componentRecognizer)) {
	            return false;
	        }
	        return componentRecognizer.hasRoute(name);
	    };
	    // if the child includes a redirect like : "/" -> "/something",
	    // we want to honor that redirection when creating the link
	    RouteRegistry.prototype._generateRedirects = function (componentCursor) {
	        if (lang_1.isBlank(componentCursor)) {
	            return null;
	        }
	        var componentRecognizer = this._rules.get(componentCursor);
	        if (lang_1.isBlank(componentRecognizer)) {
	            return null;
	        }
	        for (var i = 0; i < componentRecognizer.redirects.length; i += 1) {
	            var redirect = componentRecognizer.redirects[i];
	            // we only handle redirecting from an empty segment
	            if (redirect.segments.length == 1 && redirect.segments[0] == '') {
	                var toSegments = url_parser_1.pathSegmentsToUrl(redirect.toSegments);
	                var matches = componentRecognizer.recognize(toSegments);
	                var primaryInstruction = collection_1.ListWrapper.maximum(matches, function (match) { return match.instruction.specificity; });
	                if (lang_1.isPresent(primaryInstruction)) {
	                    var child = this._generateRedirects(primaryInstruction.instruction.componentType);
	                    return new instruction_1.Instruction(primaryInstruction.instruction, child, {});
	                }
	                return null;
	            }
	        }
	        return null;
	    };
	    RouteRegistry = __decorate([
	        angular2_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], RouteRegistry);
	    return RouteRegistry;
	})();
	exports.RouteRegistry = RouteRegistry;
	/*
	 * Given a list of instructions, returns the most specific instruction
	 */
	function mostSpecific(instructions) {
	    return collection_1.ListWrapper.maximum(instructions, function (instruction) { return instruction.component.specificity; });
	}
	function assertTerminalComponent(component, path) {
	    if (!lang_1.isType(component)) {
	        return;
	    }
	    var annotations = reflection_1.reflector.annotations(component);
	    if (lang_1.isPresent(annotations)) {
	        for (var i = 0; i < annotations.length; i++) {
	            var annotation = annotations[i];
	            if (annotation instanceof route_config_impl_1.RouteConfig) {
	                throw new exceptions_1.BaseException("Child routes are not allowed for \"" + path + "\". Use \"...\" on the parent's route path.");
	            }
	        }
	    }
	}
	//# sourceMappingURL=route_registry.js.map

/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var collection_1 = __webpack_require__(202);
	var path_recognizer_1 = __webpack_require__(408);
	var route_config_impl_1 = __webpack_require__(410);
	var async_route_handler_1 = __webpack_require__(411);
	var sync_route_handler_1 = __webpack_require__(412);
	var url_parser_1 = __webpack_require__(409);
	/**
	 * `RouteRecognizer` is responsible for recognizing routes for a single component.
	 * It is consumed by `RouteRegistry`, which knows how to recognize an entire hierarchy of
	 * components.
	 */
	var RouteRecognizer = (function () {
	    function RouteRecognizer() {
	        this.names = new collection_1.Map();
	        this.auxRoutes = new collection_1.Map();
	        // TODO: optimize this into a trie
	        this.matchers = [];
	        // TODO: optimize this into a trie
	        this.redirects = [];
	    }
	    RouteRecognizer.prototype.config = function (config) {
	        var handler;
	        if (lang_1.isPresent(config.name) && config.name[0].toUpperCase() != config.name[0]) {
	            var suggestedName = config.name[0].toUpperCase() + config.name.substring(1);
	            throw new exceptions_1.BaseException("Route \"" + config.path + "\" with name \"" + config.name + "\" does not begin with an uppercase letter. Route names should be CamelCase like \"" + suggestedName + "\".");
	        }
	        if (config instanceof route_config_impl_1.AuxRoute) {
	            handler = new sync_route_handler_1.SyncRouteHandler(config.component, config.data);
	            var path = config.path.startsWith('/') ? config.path.substring(1) : config.path;
	            var recognizer = new path_recognizer_1.PathRecognizer(config.path, handler);
	            this.auxRoutes.set(path, recognizer);
	            return recognizer.terminal;
	        }
	        if (config instanceof route_config_impl_1.Redirect) {
	            this.redirects.push(new Redirector(config.path, config.redirectTo));
	            return true;
	        }
	        if (config instanceof route_config_impl_1.Route) {
	            handler = new sync_route_handler_1.SyncRouteHandler(config.component, config.data);
	        }
	        else if (config instanceof route_config_impl_1.AsyncRoute) {
	            handler = new async_route_handler_1.AsyncRouteHandler(config.loader, config.data);
	        }
	        var recognizer = new path_recognizer_1.PathRecognizer(config.path, handler);
	        this.matchers.forEach(function (matcher) {
	            if (recognizer.hash == matcher.hash) {
	                throw new exceptions_1.BaseException("Configuration '" + config.path + "' conflicts with existing route '" + matcher.path + "'");
	            }
	        });
	        this.matchers.push(recognizer);
	        if (lang_1.isPresent(config.name)) {
	            this.names.set(config.name, recognizer);
	        }
	        return recognizer.terminal;
	    };
	    /**
	     * Given a URL, returns a list of `RouteMatch`es, which are partial recognitions for some route.
	     *
	     */
	    RouteRecognizer.prototype.recognize = function (urlParse) {
	        var solutions = [];
	        urlParse = this._redirect(urlParse);
	        this.matchers.forEach(function (pathRecognizer) {
	            var pathMatch = pathRecognizer.recognize(urlParse);
	            if (lang_1.isPresent(pathMatch)) {
	                solutions.push(pathMatch);
	            }
	        });
	        return solutions;
	    };
	    /** @internal */
	    RouteRecognizer.prototype._redirect = function (urlParse) {
	        for (var i = 0; i < this.redirects.length; i += 1) {
	            var redirector = this.redirects[i];
	            var redirectedUrl = redirector.redirect(urlParse);
	            if (lang_1.isPresent(redirectedUrl)) {
	                return redirectedUrl;
	            }
	        }
	        return urlParse;
	    };
	    RouteRecognizer.prototype.recognizeAuxiliary = function (urlParse) {
	        var pathRecognizer = this.auxRoutes.get(urlParse.path);
	        if (lang_1.isBlank(pathRecognizer)) {
	            return null;
	        }
	        return pathRecognizer.recognize(urlParse);
	    };
	    RouteRecognizer.prototype.hasRoute = function (name) { return this.names.has(name); };
	    RouteRecognizer.prototype.generate = function (name, params) {
	        var pathRecognizer = this.names.get(name);
	        if (lang_1.isBlank(pathRecognizer)) {
	            return null;
	        }
	        return pathRecognizer.generate(params);
	    };
	    return RouteRecognizer;
	})();
	exports.RouteRecognizer = RouteRecognizer;
	var Redirector = (function () {
	    function Redirector(path, redirectTo) {
	        this.segments = [];
	        this.toSegments = [];
	        if (path.startsWith('/')) {
	            path = path.substring(1);
	        }
	        this.segments = path.split('/');
	        if (redirectTo.startsWith('/')) {
	            redirectTo = redirectTo.substring(1);
	        }
	        this.toSegments = redirectTo.split('/');
	    }
	    /**
	     * Returns `null` or a `ParsedUrl` representing the new path to match
	     */
	    Redirector.prototype.redirect = function (urlParse) {
	        for (var i = 0; i < this.segments.length; i += 1) {
	            if (lang_1.isBlank(urlParse)) {
	                return null;
	            }
	            var segment = this.segments[i];
	            if (segment != urlParse.path) {
	                return null;
	            }
	            urlParse = urlParse.child;
	        }
	        for (var i = this.toSegments.length - 1; i >= 0; i -= 1) {
	            var segment = this.toSegments[i];
	            urlParse = new url_parser_1.Url(segment, urlParse);
	        }
	        return urlParse;
	    };
	    return Redirector;
	})();
	exports.Redirector = Redirector;
	//# sourceMappingURL=route_recognizer.js.map

/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var collection_1 = __webpack_require__(202);
	var url_parser_1 = __webpack_require__(409);
	var instruction_1 = __webpack_require__(398);
	var TouchMap = (function () {
	    function TouchMap(map) {
	        var _this = this;
	        this.map = {};
	        this.keys = {};
	        if (lang_1.isPresent(map)) {
	            collection_1.StringMapWrapper.forEach(map, function (value, key) {
	                _this.map[key] = lang_1.isPresent(value) ? value.toString() : null;
	                _this.keys[key] = true;
	            });
	        }
	    }
	    TouchMap.prototype.get = function (key) {
	        collection_1.StringMapWrapper.delete(this.keys, key);
	        return this.map[key];
	    };
	    TouchMap.prototype.getUnused = function () {
	        var _this = this;
	        var unused = collection_1.StringMapWrapper.create();
	        var keys = collection_1.StringMapWrapper.keys(this.keys);
	        keys.forEach(function (key) { return unused[key] = collection_1.StringMapWrapper.get(_this.map, key); });
	        return unused;
	    };
	    return TouchMap;
	})();
	function normalizeString(obj) {
	    if (lang_1.isBlank(obj)) {
	        return null;
	    }
	    else {
	        return obj.toString();
	    }
	}
	var ContinuationSegment = (function () {
	    function ContinuationSegment() {
	        this.name = '';
	    }
	    ContinuationSegment.prototype.generate = function (params) { return ''; };
	    ContinuationSegment.prototype.match = function (path) { return true; };
	    return ContinuationSegment;
	})();
	var StaticSegment = (function () {
	    function StaticSegment(path) {
	        this.path = path;
	        this.name = '';
	    }
	    StaticSegment.prototype.match = function (path) { return path == this.path; };
	    StaticSegment.prototype.generate = function (params) { return this.path; };
	    return StaticSegment;
	})();
	var DynamicSegment = (function () {
	    function DynamicSegment(name) {
	        this.name = name;
	    }
	    DynamicSegment.prototype.match = function (path) { return path.length > 0; };
	    DynamicSegment.prototype.generate = function (params) {
	        if (!collection_1.StringMapWrapper.contains(params.map, this.name)) {
	            throw new exceptions_1.BaseException("Route generator for '" + this.name + "' was not included in parameters passed.");
	        }
	        return normalizeString(params.get(this.name));
	    };
	    return DynamicSegment;
	})();
	var StarSegment = (function () {
	    function StarSegment(name) {
	        this.name = name;
	    }
	    StarSegment.prototype.match = function (path) { return true; };
	    StarSegment.prototype.generate = function (params) { return normalizeString(params.get(this.name)); };
	    return StarSegment;
	})();
	var paramMatcher = /^:([^\/]+)$/g;
	var wildcardMatcher = /^\*([^\/]+)$/g;
	function parsePathString(route) {
	    // normalize route as not starting with a "/". Recognition will
	    // also normalize.
	    if (route.startsWith("/")) {
	        route = route.substring(1);
	    }
	    var segments = splitBySlash(route);
	    var results = [];
	    var specificity = 0;
	    // The "specificity" of a path is used to determine which route is used when multiple routes match
	    // a URL.
	    // Static segments (like "/foo") are the most specific, followed by dynamic segments (like
	    // "/:id"). Star segments
	    // add no specificity. Segments at the start of the path are more specific than proceeding ones.
	    // The code below uses place values to combine the different types of segments into a single
	    // integer that we can
	    // sort later. Each static segment is worth hundreds of points of specificity (10000, 9900, ...,
	    // 200), and each
	    // dynamic segment is worth single points of specificity (100, 99, ... 2).
	    if (segments.length > 98) {
	        throw new exceptions_1.BaseException("'" + route + "' has more than the maximum supported number of segments.");
	    }
	    var limit = segments.length - 1;
	    for (var i = 0; i <= limit; i++) {
	        var segment = segments[i], match;
	        if (lang_1.isPresent(match = lang_1.RegExpWrapper.firstMatch(paramMatcher, segment))) {
	            results.push(new DynamicSegment(match[1]));
	            specificity += (100 - i);
	        }
	        else if (lang_1.isPresent(match = lang_1.RegExpWrapper.firstMatch(wildcardMatcher, segment))) {
	            results.push(new StarSegment(match[1]));
	        }
	        else if (segment == '...') {
	            if (i < limit) {
	                // TODO (matsko): setup a proper error here `
	                throw new exceptions_1.BaseException("Unexpected \"...\" before the end of the path for \"" + route + "\".");
	            }
	            results.push(new ContinuationSegment());
	        }
	        else {
	            results.push(new StaticSegment(segment));
	            specificity += 100 * (100 - i);
	        }
	    }
	    var result = collection_1.StringMapWrapper.create();
	    collection_1.StringMapWrapper.set(result, 'segments', results);
	    collection_1.StringMapWrapper.set(result, 'specificity', specificity);
	    return result;
	}
	// this function is used to determine whether a route config path like `/foo/:id` collides with
	// `/foo/:name`
	function pathDslHash(segments) {
	    return segments.map(function (segment) {
	        if (segment instanceof StarSegment) {
	            return '*';
	        }
	        else if (segment instanceof ContinuationSegment) {
	            return '...';
	        }
	        else if (segment instanceof DynamicSegment) {
	            return ':';
	        }
	        else if (segment instanceof StaticSegment) {
	            return segment.path;
	        }
	    })
	        .join('/');
	}
	function splitBySlash(url) {
	    return url.split('/');
	}
	var RESERVED_CHARS = lang_1.RegExpWrapper.create('//|\\(|\\)|;|\\?|=');
	function assertPath(path) {
	    if (lang_1.StringWrapper.contains(path, '#')) {
	        throw new exceptions_1.BaseException("Path \"" + path + "\" should not include \"#\". Use \"HashLocationStrategy\" instead.");
	    }
	    var illegalCharacter = lang_1.RegExpWrapper.firstMatch(RESERVED_CHARS, path);
	    if (lang_1.isPresent(illegalCharacter)) {
	        throw new exceptions_1.BaseException("Path \"" + path + "\" contains \"" + illegalCharacter[0] + "\" which is not allowed in a route config.");
	    }
	}
	var PathMatch = (function () {
	    function PathMatch(instruction, remaining, remainingAux) {
	        this.instruction = instruction;
	        this.remaining = remaining;
	        this.remainingAux = remainingAux;
	    }
	    return PathMatch;
	})();
	exports.PathMatch = PathMatch;
	// represents something like '/foo/:bar'
	var PathRecognizer = (function () {
	    // TODO: cache component instruction instances by params and by ParsedUrl instance
	    function PathRecognizer(path, handler) {
	        this.path = path;
	        this.handler = handler;
	        this.terminal = true;
	        this._cache = new collection_1.Map();
	        assertPath(path);
	        var parsed = parsePathString(path);
	        this._segments = parsed['segments'];
	        this.specificity = parsed['specificity'];
	        this.hash = pathDslHash(this._segments);
	        var lastSegment = this._segments[this._segments.length - 1];
	        this.terminal = !(lastSegment instanceof ContinuationSegment);
	    }
	    PathRecognizer.prototype.recognize = function (beginningSegment) {
	        var nextSegment = beginningSegment;
	        var currentSegment;
	        var positionalParams = {};
	        var captured = [];
	        for (var i = 0; i < this._segments.length; i += 1) {
	            var segment = this._segments[i];
	            currentSegment = nextSegment;
	            if (segment instanceof ContinuationSegment) {
	                break;
	            }
	            if (lang_1.isPresent(currentSegment)) {
	                captured.push(currentSegment.path);
	                // the star segment consumes all of the remaining URL, including matrix params
	                if (segment instanceof StarSegment) {
	                    positionalParams[segment.name] = currentSegment.toString();
	                    nextSegment = null;
	                    break;
	                }
	                if (segment instanceof DynamicSegment) {
	                    positionalParams[segment.name] = currentSegment.path;
	                }
	                else if (!segment.match(currentSegment.path)) {
	                    return null;
	                }
	                nextSegment = currentSegment.child;
	            }
	            else if (!segment.match('')) {
	                return null;
	            }
	        }
	        if (this.terminal && lang_1.isPresent(nextSegment)) {
	            return null;
	        }
	        var urlPath = captured.join('/');
	        var auxiliary;
	        var instruction;
	        var urlParams;
	        var allParams;
	        if (lang_1.isPresent(currentSegment)) {
	            // If this is the root component, read query params. Otherwise, read matrix params.
	            var paramsSegment = beginningSegment instanceof url_parser_1.RootUrl ? beginningSegment : currentSegment;
	            allParams = lang_1.isPresent(paramsSegment.params) ?
	                collection_1.StringMapWrapper.merge(paramsSegment.params, positionalParams) :
	                positionalParams;
	            urlParams = url_parser_1.serializeParams(paramsSegment.params);
	            auxiliary = currentSegment.auxiliary;
	        }
	        else {
	            allParams = positionalParams;
	            auxiliary = [];
	            urlParams = [];
	        }
	        instruction = this._getInstruction(urlPath, urlParams, this, allParams);
	        return new PathMatch(instruction, nextSegment, auxiliary);
	    };
	    PathRecognizer.prototype.generate = function (params) {
	        var paramTokens = new TouchMap(params);
	        var path = [];
	        for (var i = 0; i < this._segments.length; i++) {
	            var segment = this._segments[i];
	            if (!(segment instanceof ContinuationSegment)) {
	                path.push(segment.generate(paramTokens));
	            }
	        }
	        var urlPath = path.join('/');
	        var nonPositionalParams = paramTokens.getUnused();
	        var urlParams = url_parser_1.serializeParams(nonPositionalParams);
	        return this._getInstruction(urlPath, urlParams, this, params);
	    };
	    PathRecognizer.prototype._getInstruction = function (urlPath, urlParams, _recognizer, params) {
	        var hashKey = urlPath + '?' + urlParams.join('?');
	        if (this._cache.has(hashKey)) {
	            return this._cache.get(hashKey);
	        }
	        var instruction = new instruction_1.ComponentInstruction_(urlPath, urlParams, _recognizer, params);
	        this._cache.set(hashKey, instruction);
	        return instruction;
	    };
	    return PathRecognizer;
	})();
	exports.PathRecognizer = PathRecognizer;
	//# sourceMappingURL=path_recognizer.js.map

/***/ },
/* 409 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var collection_1 = __webpack_require__(202);
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	/**
	 * This class represents a parsed URL
	 */
	var Url = (function () {
	    function Url(path, child, auxiliary, params) {
	        if (child === void 0) { child = null; }
	        if (auxiliary === void 0) { auxiliary = lang_1.CONST_EXPR([]); }
	        if (params === void 0) { params = null; }
	        this.path = path;
	        this.child = child;
	        this.auxiliary = auxiliary;
	        this.params = params;
	    }
	    Url.prototype.toString = function () {
	        return this.path + this._matrixParamsToString() + this._auxToString() + this._childString();
	    };
	    Url.prototype.segmentToString = function () { return this.path + this._matrixParamsToString(); };
	    /** @internal */
	    Url.prototype._auxToString = function () {
	        return this.auxiliary.length > 0 ?
	            ('(' + this.auxiliary.map(function (sibling) { return sibling.toString(); }).join('//') + ')') :
	            '';
	    };
	    Url.prototype._matrixParamsToString = function () {
	        if (lang_1.isBlank(this.params)) {
	            return '';
	        }
	        return ';' + serializeParams(this.params).join(';');
	    };
	    /** @internal */
	    Url.prototype._childString = function () { return lang_1.isPresent(this.child) ? ('/' + this.child.toString()) : ''; };
	    return Url;
	})();
	exports.Url = Url;
	var RootUrl = (function (_super) {
	    __extends(RootUrl, _super);
	    function RootUrl(path, child, auxiliary, params) {
	        if (child === void 0) { child = null; }
	        if (auxiliary === void 0) { auxiliary = lang_1.CONST_EXPR([]); }
	        if (params === void 0) { params = null; }
	        _super.call(this, path, child, auxiliary, params);
	    }
	    RootUrl.prototype.toString = function () {
	        return this.path + this._auxToString() + this._childString() + this._queryParamsToString();
	    };
	    RootUrl.prototype.segmentToString = function () { return this.path + this._queryParamsToString(); };
	    RootUrl.prototype._queryParamsToString = function () {
	        if (lang_1.isBlank(this.params)) {
	            return '';
	        }
	        return '?' + serializeParams(this.params).join('&');
	    };
	    return RootUrl;
	})(Url);
	exports.RootUrl = RootUrl;
	function pathSegmentsToUrl(pathSegments) {
	    var url = new Url(pathSegments[pathSegments.length - 1]);
	    for (var i = pathSegments.length - 2; i >= 0; i -= 1) {
	        url = new Url(pathSegments[i], url);
	    }
	    return url;
	}
	exports.pathSegmentsToUrl = pathSegmentsToUrl;
	var SEGMENT_RE = lang_1.RegExpWrapper.create('^[^\\/\\(\\)\\?;=&#]+');
	function matchUrlSegment(str) {
	    var match = lang_1.RegExpWrapper.firstMatch(SEGMENT_RE, str);
	    return lang_1.isPresent(match) ? match[0] : '';
	}
	var UrlParser = (function () {
	    function UrlParser() {
	    }
	    UrlParser.prototype.peekStartsWith = function (str) { return this._remaining.startsWith(str); };
	    UrlParser.prototype.capture = function (str) {
	        if (!this._remaining.startsWith(str)) {
	            throw new exceptions_1.BaseException("Expected \"" + str + "\".");
	        }
	        this._remaining = this._remaining.substring(str.length);
	    };
	    UrlParser.prototype.parse = function (url) {
	        this._remaining = url;
	        if (url == '' || url == '/') {
	            return new Url('');
	        }
	        return this.parseRoot();
	    };
	    // segment + (aux segments) + (query params)
	    UrlParser.prototype.parseRoot = function () {
	        if (this.peekStartsWith('/')) {
	            this.capture('/');
	        }
	        var path = matchUrlSegment(this._remaining);
	        this.capture(path);
	        var aux = [];
	        if (this.peekStartsWith('(')) {
	            aux = this.parseAuxiliaryRoutes();
	        }
	        if (this.peekStartsWith(';')) {
	            // TODO: should these params just be dropped?
	            this.parseMatrixParams();
	        }
	        var child = null;
	        if (this.peekStartsWith('/') && !this.peekStartsWith('//')) {
	            this.capture('/');
	            child = this.parseSegment();
	        }
	        var queryParams = null;
	        if (this.peekStartsWith('?')) {
	            queryParams = this.parseQueryParams();
	        }
	        return new RootUrl(path, child, aux, queryParams);
	    };
	    // segment + (matrix params) + (aux segments)
	    UrlParser.prototype.parseSegment = function () {
	        if (this._remaining.length == 0) {
	            return null;
	        }
	        if (this.peekStartsWith('/')) {
	            this.capture('/');
	        }
	        var path = matchUrlSegment(this._remaining);
	        this.capture(path);
	        var matrixParams = null;
	        if (this.peekStartsWith(';')) {
	            matrixParams = this.parseMatrixParams();
	        }
	        var aux = [];
	        if (this.peekStartsWith('(')) {
	            aux = this.parseAuxiliaryRoutes();
	        }
	        var child = null;
	        if (this.peekStartsWith('/') && !this.peekStartsWith('//')) {
	            this.capture('/');
	            child = this.parseSegment();
	        }
	        return new Url(path, child, aux, matrixParams);
	    };
	    UrlParser.prototype.parseQueryParams = function () {
	        var params = {};
	        this.capture('?');
	        this.parseParam(params);
	        while (this._remaining.length > 0 && this.peekStartsWith('&')) {
	            this.capture('&');
	            this.parseParam(params);
	        }
	        return params;
	    };
	    UrlParser.prototype.parseMatrixParams = function () {
	        var params = {};
	        while (this._remaining.length > 0 && this.peekStartsWith(';')) {
	            this.capture(';');
	            this.parseParam(params);
	        }
	        return params;
	    };
	    UrlParser.prototype.parseParam = function (params) {
	        var key = matchUrlSegment(this._remaining);
	        if (lang_1.isBlank(key)) {
	            return;
	        }
	        this.capture(key);
	        var value = true;
	        if (this.peekStartsWith('=')) {
	            this.capture('=');
	            var valueMatch = matchUrlSegment(this._remaining);
	            if (lang_1.isPresent(valueMatch)) {
	                value = valueMatch;
	                this.capture(value);
	            }
	        }
	        params[key] = value;
	    };
	    UrlParser.prototype.parseAuxiliaryRoutes = function () {
	        var routes = [];
	        this.capture('(');
	        while (!this.peekStartsWith(')') && this._remaining.length > 0) {
	            routes.push(this.parseSegment());
	            if (this.peekStartsWith('//')) {
	                this.capture('//');
	            }
	        }
	        this.capture(')');
	        return routes;
	    };
	    return UrlParser;
	})();
	exports.UrlParser = UrlParser;
	exports.parser = new UrlParser();
	function serializeParams(paramMap) {
	    var params = [];
	    if (lang_1.isPresent(paramMap)) {
	        collection_1.StringMapWrapper.forEach(paramMap, function (value, key) {
	            if (value == true) {
	                params.push(key);
	            }
	            else {
	                params.push(key + '=' + value);
	            }
	        });
	    }
	    return params;
	}
	exports.serializeParams = serializeParams;
	//# sourceMappingURL=url_parser.js.map

/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(49);
	/**
	 * The `RouteConfig` decorator defines routes for a given component.
	 *
	 * It takes an array of {@link RouteDefinition}s.
	 */
	var RouteConfig = (function () {
	    function RouteConfig(configs) {
	        this.configs = configs;
	    }
	    RouteConfig = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Array])
	    ], RouteConfig);
	    return RouteConfig;
	})();
	exports.RouteConfig = RouteConfig;
	/**
	 * `Route` is a type of {@link RouteDefinition} used to route a path to a component.
	 *
	 * It has the following properties:
	 * - `path` is a string that uses the route matcher DSL.
	 * - `component` a component type.
	 * - `name` is an optional `CamelCase` string representing the name of the route.
	 * - `data` is an optional property of any type representing arbitrary route metadata for the given
	 * route. It is injectable via {@link RouteData}.
	 *
	 * ### Example
	 * ```
	 * import {RouteConfig} from 'angular2/router';
	 *
	 * @RouteConfig([
	 *   {path: '/home', component: HomeCmp, name: 'HomeCmp' }
	 * ])
	 * class MyApp {}
	 * ```
	 */
	var Route = (function () {
	    function Route(_a) {
	        var path = _a.path, component = _a.component, name = _a.name, data = _a.data;
	        // added next three properties to work around https://github.com/Microsoft/TypeScript/issues/4107
	        this.aux = null;
	        this.loader = null;
	        this.redirectTo = null;
	        this.path = path;
	        this.component = component;
	        this.name = name;
	        this.data = data;
	    }
	    Route = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], Route);
	    return Route;
	})();
	exports.Route = Route;
	/**
	 * `AuxRoute` is a type of {@link RouteDefinition} used to define an auxiliary route.
	 *
	 * It takes an object with the following properties:
	 * - `path` is a string that uses the route matcher DSL.
	 * - `component` a component type.
	 * - `name` is an optional `CamelCase` string representing the name of the route.
	 * - `data` is an optional property of any type representing arbitrary route metadata for the given
	 * route. It is injectable via {@link RouteData}.
	 *
	 * ### Example
	 * ```
	 * import {RouteConfig, AuxRoute} from 'angular2/router';
	 *
	 * @RouteConfig([
	 *   new AuxRoute({path: '/home', component: HomeCmp})
	 * ])
	 * class MyApp {}
	 * ```
	 */
	var AuxRoute = (function () {
	    function AuxRoute(_a) {
	        var path = _a.path, component = _a.component, name = _a.name;
	        this.data = null;
	        // added next three properties to work around https://github.com/Microsoft/TypeScript/issues/4107
	        this.aux = null;
	        this.loader = null;
	        this.redirectTo = null;
	        this.path = path;
	        this.component = component;
	        this.name = name;
	    }
	    AuxRoute = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], AuxRoute);
	    return AuxRoute;
	})();
	exports.AuxRoute = AuxRoute;
	/**
	 * `AsyncRoute` is a type of {@link RouteDefinition} used to route a path to an asynchronously
	 * loaded component.
	 *
	 * It has the following properties:
	 * - `path` is a string that uses the route matcher DSL.
	 * - `loader` is a function that returns a promise that resolves to a component.
	 * - `name` is an optional `CamelCase` string representing the name of the route.
	 * - `data` is an optional property of any type representing arbitrary route metadata for the given
	 * route. It is injectable via {@link RouteData}.
	 *
	 * ### Example
	 * ```
	 * import {RouteConfig} from 'angular2/router';
	 *
	 * @RouteConfig([
	 *   {path: '/home', loader: () => Promise.resolve(MyLoadedCmp), name: 'MyLoadedCmp'}
	 * ])
	 * class MyApp {}
	 * ```
	 */
	var AsyncRoute = (function () {
	    function AsyncRoute(_a) {
	        var path = _a.path, loader = _a.loader, name = _a.name, data = _a.data;
	        this.aux = null;
	        this.path = path;
	        this.loader = loader;
	        this.name = name;
	        this.data = data;
	    }
	    AsyncRoute = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], AsyncRoute);
	    return AsyncRoute;
	})();
	exports.AsyncRoute = AsyncRoute;
	/**
	 * `Redirect` is a type of {@link RouteDefinition} used to route a path to an asynchronously loaded
	 * component.
	 *
	 * It has the following properties:
	 * - `path` is a string that uses the route matcher DSL.
	 * - `redirectTo` is a string representing the new URL to be matched against.
	 *
	 * ### Example
	 * ```
	 * import {RouteConfig} from 'angular2/router';
	 *
	 * @RouteConfig([
	 *   {path: '/', redirectTo: '/home'},
	 *   {path: '/home', component: HomeCmp}
	 * ])
	 * class MyApp {}
	 * ```
	 */
	var Redirect = (function () {
	    function Redirect(_a) {
	        var path = _a.path, redirectTo = _a.redirectTo;
	        this.name = null;
	        // added next three properties to work around https://github.com/Microsoft/TypeScript/issues/4107
	        this.loader = null;
	        this.data = null;
	        this.aux = null;
	        this.path = path;
	        this.redirectTo = redirectTo;
	    }
	    Redirect = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], Redirect);
	    return Redirect;
	})();
	exports.Redirect = Redirect;
	//# sourceMappingURL=route_config_impl.js.map

/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var AsyncRouteHandler = (function () {
	    function AsyncRouteHandler(_loader, data) {
	        this._loader = _loader;
	        this.data = data;
	        /** @internal */
	        this._resolvedComponent = null;
	    }
	    AsyncRouteHandler.prototype.resolveComponentType = function () {
	        var _this = this;
	        if (lang_1.isPresent(this._resolvedComponent)) {
	            return this._resolvedComponent;
	        }
	        return this._resolvedComponent = this._loader().then(function (componentType) {
	            _this.componentType = componentType;
	            return componentType;
	        });
	    };
	    return AsyncRouteHandler;
	})();
	exports.AsyncRouteHandler = AsyncRouteHandler;
	//# sourceMappingURL=async_route_handler.js.map

/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var async_1 = __webpack_require__(50);
	var SyncRouteHandler = (function () {
	    function SyncRouteHandler(componentType, data) {
	        this.componentType = componentType;
	        this.data = data;
	        /** @internal */
	        this._resolvedComponent = null;
	        this._resolvedComponent = async_1.PromiseWrapper.resolve(componentType);
	    }
	    SyncRouteHandler.prototype.resolveComponentType = function () { return this._resolvedComponent; };
	    return SyncRouteHandler;
	})();
	exports.SyncRouteHandler = SyncRouteHandler;
	//# sourceMappingURL=sync_route_handler.js.map

/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var route_config_decorator_1 = __webpack_require__(414);
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	/**
	 * Given a JS Object that represents... returns a corresponding Route, AsyncRoute, or Redirect
	 */
	function normalizeRouteConfig(config) {
	    if (config instanceof route_config_decorator_1.Route || config instanceof route_config_decorator_1.Redirect || config instanceof route_config_decorator_1.AsyncRoute ||
	        config instanceof route_config_decorator_1.AuxRoute) {
	        return config;
	    }
	    if ((+!!config.component) + (+!!config.redirectTo) + (+!!config.loader) != 1) {
	        throw new exceptions_1.BaseException("Route config should contain exactly one \"component\", \"loader\", or \"redirectTo\" property.");
	    }
	    if (config.as && config.name) {
	        throw new exceptions_1.BaseException("Route config should contain exactly one \"as\" or \"name\" property.");
	    }
	    if (config.as) {
	        config.name = config.as;
	    }
	    if (config.loader) {
	        return new route_config_decorator_1.AsyncRoute({ path: config.path, loader: config.loader, name: config.name });
	    }
	    if (config.aux) {
	        return new route_config_decorator_1.AuxRoute({ path: config.aux, component: config.component, name: config.name });
	    }
	    if (config.component) {
	        if (typeof config.component == 'object') {
	            var componentDefinitionObject = config.component;
	            if (componentDefinitionObject.type == 'constructor') {
	                return new route_config_decorator_1.Route({
	                    path: config.path,
	                    component: componentDefinitionObject.constructor,
	                    name: config.name
	                });
	            }
	            else if (componentDefinitionObject.type == 'loader') {
	                return new route_config_decorator_1.AsyncRoute({ path: config.path, loader: componentDefinitionObject.loader, name: config.name });
	            }
	            else {
	                throw new exceptions_1.BaseException("Invalid component type \"" + componentDefinitionObject.type + "\". Valid types are \"constructor\" and \"loader\".");
	            }
	        }
	        return new route_config_decorator_1.Route(config);
	    }
	    if (config.redirectTo) {
	        return new route_config_decorator_1.Redirect({ path: config.path, redirectTo: config.redirectTo });
	    }
	    return config;
	}
	exports.normalizeRouteConfig = normalizeRouteConfig;
	function assertComponentExists(component, path) {
	    if (!lang_1.isType(component)) {
	        throw new exceptions_1.BaseException("Component for route \"" + path + "\" is not defined, or is not a class.");
	    }
	}
	exports.assertComponentExists = assertComponentExists;
	//# sourceMappingURL=route_config_nomalizer.js.map

/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var route_config_impl_1 = __webpack_require__(410);
	var decorators_1 = __webpack_require__(199);
	var route_config_impl_2 = __webpack_require__(410);
	exports.Route = route_config_impl_2.Route;
	exports.Redirect = route_config_impl_2.Redirect;
	exports.AuxRoute = route_config_impl_2.AuxRoute;
	exports.AsyncRoute = route_config_impl_2.AsyncRoute;
	exports.RouteConfig = decorators_1.makeDecorator(route_config_impl_1.RouteConfig);
	//# sourceMappingURL=route_config_decorator.js.map

/***/ },
/* 415 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var dom_adapter_1 = __webpack_require__(287);
	var angular2_1 = __webpack_require__(45);
	var location_strategy_1 = __webpack_require__(405);
	/**
	 * `HashLocationStrategy` is a {@link LocationStrategy} used to configure the
	 * {@link Location} service to represent its state in the
	 * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)
	 * of the browser's URL.
	 *
	 * For instance, if you call `location.go('/foo')`, the browser's URL will become
	 * `example.com#/foo`.
	 *
	 * ### Example
	 *
	 * ```
	 * import {Component, provide} from 'angular2/angular2';
	 * import {
	 *   ROUTER_DIRECTIVES,
	 *   ROUTER_PROVIDERS,
	 *   RouteConfig,
	 *   Location,
	 *   LocationStrategy,
	 *   HashLocationStrategy
	 * } from 'angular2/router';
	 *
	 * @Component({directives: [ROUTER_DIRECTIVES]})
	 * @RouteConfig([
	 *  {...},
	 * ])
	 * class AppCmp {
	 *   constructor(location: Location) {
	 *     location.go('/foo');
	 *   }
	 * }
	 *
	 * bootstrap(AppCmp, [
	 *   ROUTER_PROVIDERS,
	 *   provide(LocationStrategy, {useClass: HashLocationStrategy})
	 * ]);
	 * ```
	 */
	var HashLocationStrategy = (function (_super) {
	    __extends(HashLocationStrategy, _super);
	    function HashLocationStrategy() {
	        _super.call(this);
	        this._location = dom_adapter_1.DOM.getLocation();
	        this._history = dom_adapter_1.DOM.getHistory();
	    }
	    HashLocationStrategy.prototype.onPopState = function (fn) {
	        dom_adapter_1.DOM.getGlobalEventTarget('window').addEventListener('popstate', fn, false);
	    };
	    HashLocationStrategy.prototype.getBaseHref = function () { return ''; };
	    HashLocationStrategy.prototype.path = function () {
	        // the hash value is always prefixed with a `#`
	        // and if it is empty then it will stay empty
	        var path = this._location.hash;
	        // Dart will complain if a call to substring is
	        // executed with a position value that extends the
	        // length of string.
	        return (path.length > 0 ? path.substring(1) : path) +
	            location_strategy_1.normalizeQueryParams(this._location.search);
	    };
	    HashLocationStrategy.prototype.prepareExternalUrl = function (internal) {
	        return internal.length > 0 ? ('#' + internal) : internal;
	    };
	    HashLocationStrategy.prototype.pushState = function (state, title, path, queryParams) {
	        var url = path + location_strategy_1.normalizeQueryParams(queryParams);
	        if (url.length == 0) {
	            url = this._location.pathname;
	        }
	        else {
	            url = this.prepareExternalUrl(url);
	        }
	        this._history.pushState(state, title, url);
	    };
	    HashLocationStrategy.prototype.forward = function () { this._history.forward(); };
	    HashLocationStrategy.prototype.back = function () { this._history.back(); };
	    HashLocationStrategy = __decorate([
	        angular2_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], HashLocationStrategy);
	    return HashLocationStrategy;
	})(location_strategy_1.LocationStrategy);
	exports.HashLocationStrategy = HashLocationStrategy;
	//# sourceMappingURL=hash_location_strategy.js.map

/***/ },
/* 416 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var dom_adapter_1 = __webpack_require__(287);
	var angular2_1 = __webpack_require__(45);
	var location_strategy_1 = __webpack_require__(405);
	/**
	 * `PathLocationStrategy` is a {@link LocationStrategy} used to configure the
	 * {@link Location} service to represent its state in the
	 * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the
	 * browser's URL.
	 *
	 * `PathLocationStrategy` is the default binding for {@link LocationStrategy}
	 * provided in {@link ROUTER_PROVIDERS}.
	 *
	 * If you're using `PathLocationStrategy`, you must provide a provider for
	 * {@link APP_BASE_HREF} to a string representing the URL prefix that should
	 * be preserved when generating and recognizing URLs.
	 *
	 * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call
	 * `location.go('/foo')`, the browser's URL will become
	 * `example.com/my/app/foo`.
	 *
	 * ### Example
	 *
	 * ```
	 * import {Component, provide} from 'angular2/angular2';
	 * import {
	 *   APP_BASE_HREF
	 *   ROUTER_DIRECTIVES,
	 *   ROUTER_PROVIDERS,
	 *   RouteConfig,
	 *   Location
	 * } from 'angular2/router';
	 *
	 * @Component({directives: [ROUTER_DIRECTIVES]})
	 * @RouteConfig([
	 *  {...},
	 * ])
	 * class AppCmp {
	 *   constructor(location: Location) {
	 *     location.go('/foo');
	 *   }
	 * }
	 *
	 * bootstrap(AppCmp, [
	 *   ROUTER_PROVIDERS, // includes binding to PathLocationStrategy
	 *   provide(APP_BASE_HREF, {useValue: '/my/app'})
	 * ]);
	 * ```
	 */
	var PathLocationStrategy = (function (_super) {
	    __extends(PathLocationStrategy, _super);
	    function PathLocationStrategy() {
	        _super.call(this);
	        this._location = dom_adapter_1.DOM.getLocation();
	        this._history = dom_adapter_1.DOM.getHistory();
	        this._baseHref = dom_adapter_1.DOM.getBaseHref();
	    }
	    PathLocationStrategy.prototype.onPopState = function (fn) {
	        dom_adapter_1.DOM.getGlobalEventTarget('window').addEventListener('popstate', fn, false);
	        dom_adapter_1.DOM.getGlobalEventTarget('window').addEventListener('hashchange', fn, false);
	    };
	    PathLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
	    PathLocationStrategy.prototype.prepareExternalUrl = function (internal) { return this._baseHref + internal; };
	    PathLocationStrategy.prototype.path = function () { return this._location.pathname + location_strategy_1.normalizeQueryParams(this._location.search); };
	    PathLocationStrategy.prototype.pushState = function (state, title, url, queryParams) {
	        this._history.pushState(state, title, (url + location_strategy_1.normalizeQueryParams(queryParams)));
	    };
	    PathLocationStrategy.prototype.forward = function () { this._history.forward(); };
	    PathLocationStrategy.prototype.back = function () { this._history.back(); };
	    PathLocationStrategy = __decorate([
	        angular2_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], PathLocationStrategy);
	    return PathLocationStrategy;
	})(location_strategy_1.LocationStrategy);
	exports.PathLocationStrategy = PathLocationStrategy;
	//# sourceMappingURL=path_location_strategy.js.map

/***/ },
/* 417 */
/***/ function(module, exports) {

	'use strict';//# sourceMappingURL=route_definition.js.map

/***/ },
/* 418 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * @module
	 * @description
	 * The http module provides services to perform http requests. To get started, see the {@link Http}
	 * class.
	 */
	var angular2_1 = __webpack_require__(45);
	var http_1 = __webpack_require__(419);
	var xhr_backend_1 = __webpack_require__(427);
	var jsonp_backend_1 = __webpack_require__(431);
	var browser_xhr_1 = __webpack_require__(430);
	var browser_jsonp_1 = __webpack_require__(432);
	var base_request_options_1 = __webpack_require__(425);
	var base_response_options_1 = __webpack_require__(429);
	var mock_backend_1 = __webpack_require__(433);
	exports.MockConnection = mock_backend_1.MockConnection;
	exports.MockBackend = mock_backend_1.MockBackend;
	var static_request_1 = __webpack_require__(421);
	exports.Request = static_request_1.Request;
	var static_response_1 = __webpack_require__(428);
	exports.Response = static_response_1.Response;
	var interfaces_1 = __webpack_require__(420);
	exports.Connection = interfaces_1.Connection;
	exports.ConnectionBackend = interfaces_1.ConnectionBackend;
	var browser_xhr_2 = __webpack_require__(430);
	exports.BrowserXhr = browser_xhr_2.BrowserXhr;
	var base_request_options_2 = __webpack_require__(425);
	exports.BaseRequestOptions = base_request_options_2.BaseRequestOptions;
	exports.RequestOptions = base_request_options_2.RequestOptions;
	var base_response_options_2 = __webpack_require__(429);
	exports.BaseResponseOptions = base_response_options_2.BaseResponseOptions;
	exports.ResponseOptions = base_response_options_2.ResponseOptions;
	var xhr_backend_2 = __webpack_require__(427);
	exports.XHRBackend = xhr_backend_2.XHRBackend;
	exports.XHRConnection = xhr_backend_2.XHRConnection;
	var jsonp_backend_2 = __webpack_require__(431);
	exports.JSONPBackend = jsonp_backend_2.JSONPBackend;
	exports.JSONPConnection = jsonp_backend_2.JSONPConnection;
	var http_2 = __webpack_require__(419);
	exports.Http = http_2.Http;
	exports.Jsonp = http_2.Jsonp;
	var headers_1 = __webpack_require__(422);
	exports.Headers = headers_1.Headers;
	var enums_1 = __webpack_require__(424);
	exports.ResponseTypes = enums_1.ResponseTypes;
	exports.ReadyStates = enums_1.ReadyStates;
	exports.RequestMethods = enums_1.RequestMethods;
	var url_search_params_1 = __webpack_require__(426);
	exports.URLSearchParams = url_search_params_1.URLSearchParams;
	/**
	 * Provides a basic set of injectables to use the {@link Http} service in any application.
	 *
	 * The `HTTP_PROVIDERS` should be included either in a component's injector,
	 * or in the root injector when bootstrapping an application.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/snj7Nv?p=preview))
	 *
	 * ```
	 * import {bootstrap, Component, NgFor, View} from 'angular2/angular2';
	 * import {HTTP_PROVIDERS, Http} from 'angular2/http';
	 *
	 * @Component({
	 *   selector: 'app',
	 *   providers: [HTTP_PROVIDERS],
	 *   template: `
	 *     <div>
	 *       <h1>People</h1>
	 *       <ul>
	 *         <li *ng-for="#person of people">
	 *           {{person.name}}
	 *         </li>
	 *       </ul>
	 *     </div>
	 *   `,
	 *   directives: [NgFor]
	 * })
	 * export class App {
	 *   people: Object[];
	 *   constructor(http:Http) {
	 *     http.get('people.json').subscribe(res => {
	 *       this.people = res.json();
	 *     });
	 *   }
	 *   active:boolean = false;
	 *   toggleActiveState() {
	 *     this.active = !this.active;
	 *   }
	 * }
	 *
	 * bootstrap(App)
	 *   .catch(err => console.error(err));
	 * ```
	 *
	 * The primary public API included in `HTTP_PROVIDERS` is the {@link Http} class.
	 * However, other providers required by `Http` are included,
	 * which may be beneficial to override in certain cases.
	 *
	 * The providers included in `HTTP_PROVIDERS` include:
	 *  * {@link Http}
	 *  * {@link XHRBackend}
	 *  * `BrowserXHR` - Private factory to create `XMLHttpRequest` instances
	 *  * {@link RequestOptions} - Bound to {@link BaseRequestOptions} class
	 *  * {@link ResponseOptions} - Bound to {@link BaseResponseOptions} class
	 *
	 * There may be cases where it makes sense to extend the base request options,
	 * such as to add a search string to be appended to all URLs.
	 * To accomplish this, a new provider for {@link RequestOptions} should
	 * be added in the same injector as `HTTP_PROVIDERS`.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/aCMEXi?p=preview))
	 *
	 * ```
	 * import {provide, bootstrap} from 'angular2/angular2';
	 * import {HTTP_PROVIDERS, BaseRequestOptions, RequestOptions} from 'angular2/http';
	 *
	 * class MyOptions extends BaseRequestOptions {
	 *   search: string = 'coreTeam=true';
	 * }
	 *
	 * bootstrap(App, [HTTP_PROVIDERS, provide(RequestOptions, {useClass: MyOptions})])
	 *   .catch(err => console.error(err));
	 * ```
	 *
	 * Likewise, to use a mock backend for unit tests, the {@link XHRBackend}
	 * provider should be bound to {@link MockBackend}.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/7LWALD?p=preview))
	 *
	 * ```
	 * import {provide, Injector} from 'angular2/angular2';
	 * import {HTTP_PROVIDERS, Http, Response, XHRBackend, MockBackend} from 'angular2/http';
	 *
	 * var people = [{name: 'Jeff'}, {name: 'Tobias'}];
	 *
	 * var injector = Injector.resolveAndCreate([
	 *   HTTP_PROVIDERS,
	 *   MockBackend,
	 *   provide(XHRBackend, {useExisting: MockBackend})
	 * ]);
	 * var http = injector.get(Http);
	 * var backend = injector.get(MockBackend);
	 *
	 * // Listen for any new requests
	 * backend.connections.observer({
	 *   next: connection => {
	 *     var response = new Response({body: people});
	 *     setTimeout(() => {
	 *       // Send a response to the request
	 *       connection.mockRespond(response);
	 *     });
	 *   });
	 *
	 * http.get('people.json').observer({
	 *   next: res => {
	 *     // Response came from mock backend
	 *     console.log('first person', res.json()[0].name);
	 *   }
	 * });
	 * ```
	 */
	exports.HTTP_PROVIDERS = [
	    // TODO(pascal): use factory type annotations once supported in DI
	    // issue: https://github.com/angular/angular/issues/3183
	    angular2_1.provide(http_1.Http, {
	        useFactory: function (xhrBackend, requestOptions) { return new http_1.Http(xhrBackend, requestOptions); },
	        deps: [xhr_backend_1.XHRBackend, base_request_options_1.RequestOptions]
	    }),
	    browser_xhr_1.BrowserXhr,
	    angular2_1.provide(base_request_options_1.RequestOptions, { useClass: base_request_options_1.BaseRequestOptions }),
	    angular2_1.provide(base_response_options_1.ResponseOptions, { useClass: base_response_options_1.BaseResponseOptions }),
	    xhr_backend_1.XHRBackend
	];
	/**
	 * @deprecated
	 */
	exports.HTTP_BINDINGS = exports.HTTP_PROVIDERS;
	/**
	 * Provides a basic set of providers to use the {@link Jsonp} service in any application.
	 *
	 * The `JSONP_PROVIDERS` should be included either in a component's injector,
	 * or in the root injector when bootstrapping an application.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/vmeN4F?p=preview))
	 *
	 * ```
	 * import {Component, NgFor, View} from 'angular2/angular2';
	 * import {JSONP_PROVIDERS, Jsonp} from 'angular2/http';
	 *
	 * @Component({
	 *   selector: 'app',
	 *   providers: [JSONP_PROVIDERS],
	 *   template: `
	 *     <div>
	 *       <h1>People</h1>
	 *       <ul>
	 *         <li *ng-for="#person of people">
	 *           {{person.name}}
	 *         </li>
	 *       </ul>
	 *     </div>
	 *   `,
	 *   directives: [NgFor]
	 * })
	 * export class App {
	 *   people: Array<Object>;
	 *   constructor(jsonp:Jsonp) {
	 *     jsonp.request('people.json').subscribe(res => {
	 *       this.people = res.json();
	 *     })
	 *   }
	 * }
	 * ```
	 *
	 * The primary public API included in `JSONP_PROVIDERS` is the {@link Jsonp} class.
	 * However, other providers required by `Jsonp` are included,
	 * which may be beneficial to override in certain cases.
	 *
	 * The providers included in `JSONP_PROVIDERS` include:
	 *  * {@link Jsonp}
	 *  * {@link JSONPBackend}
	 *  * `BrowserJsonp` - Private factory
	 *  * {@link RequestOptions} - Bound to {@link BaseRequestOptions} class
	 *  * {@link ResponseOptions} - Bound to {@link BaseResponseOptions} class
	 *
	 * There may be cases where it makes sense to extend the base request options,
	 * such as to add a search string to be appended to all URLs.
	 * To accomplish this, a new provider for {@link RequestOptions} should
	 * be added in the same injector as `JSONP_PROVIDERS`.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/TFug7x?p=preview))
	 *
	 * ```
	 * import {provide, bootstrap} from 'angular2/angular2';
	 * import {JSONP_PROVIDERS, BaseRequestOptions, RequestOptions} from 'angular2/http';
	 *
	 * class MyOptions extends BaseRequestOptions {
	 *   search: string = 'coreTeam=true';
	 * }
	 *
	 * bootstrap(App, [JSONP_PROVIDERS, provide(RequestOptions, {useClass: MyOptions})])
	 *   .catch(err => console.error(err));
	 * ```
	 *
	 * Likewise, to use a mock backend for unit tests, the {@link JSONPBackend}
	 * provider should be bound to {@link MockBackend}.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/HDqZWL?p=preview))
	 *
	 * ```
	 * import {provide, Injector} from 'angular2/angular2';
	 * import {JSONP_PROVIDERS, Jsonp, Response, JSONPBackend, MockBackend} from 'angular2/http';
	 *
	 * var people = [{name: 'Jeff'}, {name: 'Tobias'}];
	 * var injector = Injector.resolveAndCreate([
	 *   JSONP_PROVIDERS,
	 *   MockBackend,
	 *   provide(JSONPBackend, {useExisting: MockBackend})
	 * ]);
	 * var jsonp = injector.get(Jsonp);
	 * var backend = injector.get(MockBackend);
	 *
	 * // Listen for any new requests
	 * backend.connections.observer({
	 *   next: connection => {
	 *     var response = new Response({body: people});
	 *     setTimeout(() => {
	 *       // Send a response to the request
	 *       connection.mockRespond(response);
	 *     });
	 *   });

	 * jsonp.get('people.json').observer({
	 *   next: res => {
	 *     // Response came from mock backend
	 *     console.log('first person', res.json()[0].name);
	 *   }
	 * });
	 * ```
	 */
	exports.JSONP_PROVIDERS = [
	    // TODO(pascal): use factory type annotations once supported in DI
	    // issue: https://github.com/angular/angular/issues/3183
	    angular2_1.provide(http_1.Jsonp, {
	        useFactory: function (jsonpBackend, requestOptions) { return new http_1.Jsonp(jsonpBackend, requestOptions); },
	        deps: [jsonp_backend_1.JSONPBackend, base_request_options_1.RequestOptions]
	    }),
	    browser_jsonp_1.BrowserJsonp,
	    angular2_1.provide(base_request_options_1.RequestOptions, { useClass: base_request_options_1.BaseRequestOptions }),
	    angular2_1.provide(base_response_options_1.ResponseOptions, { useClass: base_response_options_1.BaseResponseOptions }),
	    angular2_1.provide(jsonp_backend_1.JSONPBackend, { useClass: jsonp_backend_1.JSONPBackend_ })
	];
	/**
	 * @deprecated
	 */
	exports.JSON_BINDINGS = exports.JSONP_PROVIDERS;
	//# sourceMappingURL=http.js.map

/***/ },
/* 419 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var angular2_1 = __webpack_require__(45);
	var interfaces_1 = __webpack_require__(420);
	var static_request_1 = __webpack_require__(421);
	var base_request_options_1 = __webpack_require__(425);
	var enums_1 = __webpack_require__(424);
	function httpRequest(backend, request) {
	    return backend.createConnection(request).response;
	}
	function mergeOptions(defaultOpts, providedOpts, method, url) {
	    var newOptions = defaultOpts;
	    if (lang_1.isPresent(providedOpts)) {
	        // Hack so Dart can used named parameters
	        newOptions = newOptions.merge(new base_request_options_1.RequestOptions({
	            method: providedOpts.method,
	            url: providedOpts.url,
	            search: providedOpts.search,
	            headers: providedOpts.headers,
	            body: providedOpts.body
	        }));
	    }
	    if (lang_1.isPresent(method)) {
	        return newOptions.merge(new base_request_options_1.RequestOptions({ method: method, url: url }));
	    }
	    else {
	        return newOptions.merge(new base_request_options_1.RequestOptions({ url: url }));
	    }
	}
	/**
	 * Performs http requests using `XMLHttpRequest` as the default backend.
	 *
	 * `Http` is available as an injectable class, with methods to perform http requests. Calling
	 * `request` returns an {@link Observable} which will emit a single {@link Response} when a
	 * response is received.
	 *
	 * ### Example
	 *
	 * ```typescript
	 * import {Http, HTTP_PROVIDERS} from 'angular2/http';
	 * @Component({
	 *   selector: 'http-app',
	 *   viewProviders: [HTTP_PROVIDERS],
	 *   templateUrl: 'people.html'
	 * })
	 * class PeopleComponent {
	 *   constructor(http: Http) {
	 *     http.get('people.json')
	 *       // Call map on the response observable to get the parsed people object
	 *       .map(res => res.json())
	 *       // Subscribe to the observable to get the parsed people object and attach it to the
	 *       // component
	 *       .subscribe(people => this.people = people);
	 *   }
	 * }
	 * ```
	 *
	 *
	 * ### Example
	 *
	 * ```
	 * http.get('people.json').observer({next: (value) => this.people = value});
	 * ```
	 *
	 * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a "Backend" (
	 * {@link XHRBackend} in this case), which could be mocked with dependency injection by replacing
	 * the {@link XHRBackend} provider, as in the following example:
	 *
	 * ### Example
	 *
	 * ```typescript
	 * import {MockBackend, BaseRequestOptions, Http} from 'angular2/http';
	 * var injector = Injector.resolveAndCreate([
	 *   BaseRequestOptions,
	 *   MockBackend,
	 *   provide(Http, {useFactory:
	 *       function(backend, defaultOptions) {
	 *         return new Http(backend, defaultOptions);
	 *       },
	 *       deps: [MockBackend, BaseRequestOptions]})
	 * ]);
	 * var http = injector.get(Http);
	 * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));
	 * ```
	 *
	 **/
	var Http = (function () {
	    function Http(_backend, _defaultOptions) {
	        this._backend = _backend;
	        this._defaultOptions = _defaultOptions;
	    }
	    /**
	     * Performs any type of http request. First argument is required, and can either be a url or
	     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}
	     * object can be provided as the 2nd argument. The options object will be merged with the values
	     * of {@link BaseRequestOptions} before performing the request.
	     */
	    Http.prototype.request = function (url, options) {
	        var responseObservable;
	        if (lang_1.isString(url)) {
	            responseObservable = httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions, options, enums_1.RequestMethods.Get, url)));
	        }
	        else if (url instanceof static_request_1.Request) {
	            responseObservable = httpRequest(this._backend, url);
	        }
	        else {
	            throw exceptions_1.makeTypeError('First argument must be a url string or Request instance.');
	        }
	        return responseObservable;
	    };
	    /**
	     * Performs a request with `get` http method.
	     */
	    Http.prototype.get = function (url, options) {
	        return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions, options, enums_1.RequestMethods.Get, url)));
	    };
	    /**
	     * Performs a request with `post` http method.
	     */
	    Http.prototype.post = function (url, body, options) {
	        return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions.merge(new base_request_options_1.RequestOptions({ body: body })), options, enums_1.RequestMethods.Post, url)));
	    };
	    /**
	     * Performs a request with `put` http method.
	     */
	    Http.prototype.put = function (url, body, options) {
	        return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions.merge(new base_request_options_1.RequestOptions({ body: body })), options, enums_1.RequestMethods.Put, url)));
	    };
	    /**
	     * Performs a request with `delete` http method.
	     */
	    Http.prototype.delete = function (url, options) {
	        return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions, options, enums_1.RequestMethods.Delete, url)));
	    };
	    /**
	     * Performs a request with `patch` http method.
	     */
	    Http.prototype.patch = function (url, body, options) {
	        return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions.merge(new base_request_options_1.RequestOptions({ body: body })), options, enums_1.RequestMethods.Patch, url)));
	    };
	    /**
	     * Performs a request with `head` http method.
	     */
	    Http.prototype.head = function (url, options) {
	        return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions, options, enums_1.RequestMethods.Head, url)));
	    };
	    Http = __decorate([
	        angular2_1.Injectable(), 
	        __metadata('design:paramtypes', [interfaces_1.ConnectionBackend, base_request_options_1.RequestOptions])
	    ], Http);
	    return Http;
	})();
	exports.Http = Http;
	var Jsonp = (function (_super) {
	    __extends(Jsonp, _super);
	    function Jsonp(backend, defaultOptions) {
	        _super.call(this, backend, defaultOptions);
	    }
	    /**
	     * Performs any type of http request. First argument is required, and can either be a url or
	     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}
	     * object can be provided as the 2nd argument. The options object will be merged with the values
	     * of {@link BaseRequestOptions} before performing the request.
	     */
	    Jsonp.prototype.request = function (url, options) {
	        var responseObservable;
	        if (lang_1.isString(url)) {
	            url = new static_request_1.Request(mergeOptions(this._defaultOptions, options, enums_1.RequestMethods.Get, url));
	        }
	        if (url instanceof static_request_1.Request) {
	            if (url.method !== enums_1.RequestMethods.Get) {
	                exceptions_1.makeTypeError('JSONP requests must use GET request method.');
	            }
	            responseObservable = httpRequest(this._backend, url);
	        }
	        else {
	            throw exceptions_1.makeTypeError('First argument must be a url string or Request instance.');
	        }
	        return responseObservable;
	    };
	    Jsonp = __decorate([
	        angular2_1.Injectable(), 
	        __metadata('design:paramtypes', [interfaces_1.ConnectionBackend, base_request_options_1.RequestOptions])
	    ], Jsonp);
	    return Jsonp;
	})(Http);
	exports.Jsonp = Jsonp;
	//# sourceMappingURL=http.js.map

/***/ },
/* 420 */
/***/ function(module, exports) {

	'use strict';/**
	 * Abstract class from which real backends are derived.
	 *
	 * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given
	 * {@link Request}.
	 */
	var ConnectionBackend = (function () {
	    function ConnectionBackend() {
	    }
	    return ConnectionBackend;
	})();
	exports.ConnectionBackend = ConnectionBackend;
	/**
	 * Abstract class from which real connections are derived.
	 */
	var Connection = (function () {
	    function Connection() {
	    }
	    return Connection;
	})();
	exports.Connection = Connection;
	//# sourceMappingURL=interfaces.js.map

/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var headers_1 = __webpack_require__(422);
	var http_utils_1 = __webpack_require__(423);
	var lang_1 = __webpack_require__(49);
	// TODO(jeffbcross): properly implement body accessors
	/**
	 * Creates `Request` instances from provided values.
	 *
	 * The Request's interface is inspired by the Request constructor defined in the [Fetch
	 * Spec](https://fetch.spec.whatwg.org/#request-class),
	 * but is considered a static value whose body can be accessed many times. There are other
	 * differences in the implementation, but this is the most significant.
	 *
	 * `Request` instances are typically created by higher-level classes, like {@link Http} and
	 * {@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.
	 * One such example is when creating services that wrap higher-level services, like {@link Http},
	 * where it may be useful to generate a `Request` with arbitrary headers and search params.
	 *
	 * ```typescript
	 * import {Injectable, Injector} from 'angular2/angular2';
	 * import {HTTP_PROVIDERS, Http, Request, RequestMethods} from 'angular2/http';
	 *
	 * @Injectable()
	 * class AutoAuthenticator {
	 *   constructor(public http:Http) {}
	 *   request(url:string) {
	 *     return this.http.request(new Request({
	 *       method: RequestMethods.Get,
	 *       url: url,
	 *       search: 'password=123'
	 *     }));
	 *   }
	 * }
	 *
	 * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);
	 * var authenticator = injector.get(AutoAuthenticator);
	 * authenticator.request('people.json').subscribe(res => {
	 *   //URL should have included '?password=123'
	 *   console.log('people', res.json());
	 * });
	 * ```
	 */
	var Request = (function () {
	    function Request(requestOptions) {
	        // TODO: assert that url is present
	        var url = requestOptions.url;
	        this.url = requestOptions.url;
	        if (lang_1.isPresent(requestOptions.search)) {
	            var search = requestOptions.search.toString();
	            if (search.length > 0) {
	                var prefix = '?';
	                if (lang_1.StringWrapper.contains(this.url, '?')) {
	                    prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';
	                }
	                // TODO: just delete search-query-looking string in url?
	                this.url = url + prefix + search;
	            }
	        }
	        this._body = requestOptions.body;
	        this.method = http_utils_1.normalizeMethodName(requestOptions.method);
	        // TODO(jeffbcross): implement behavior
	        // Defaults to 'omit', consistent with browser
	        // TODO(jeffbcross): implement behavior
	        this.headers = new headers_1.Headers(requestOptions.headers);
	    }
	    /**
	     * Returns the request's body as string, assuming that body exists. If body is undefined, return
	     * empty
	     * string.
	     */
	    Request.prototype.text = function () { return lang_1.isPresent(this._body) ? this._body.toString() : ''; };
	    return Request;
	})();
	exports.Request = Request;
	//# sourceMappingURL=static_request.js.map

/***/ },
/* 422 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var collection_1 = __webpack_require__(202);
	/**
	 * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as
	 * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).
	 *
	 * The only known difference between this `Headers` implementation and the spec is the
	 * lack of an `entries` method.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/MTdwT6?p=preview))
	 *
	 * ```
	 * import {Headers} from 'angular2/http';
	 *
	 * var firstHeaders = new Headers();
	 * firstHeaders.append('Content-Type', 'image/jpeg');
	 * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'
	 *
	 * // Create headers from Plain Old JavaScript Object
	 * var secondHeaders = new Headers({
	 *   'X-My-Custom-Header': 'Angular'
	 * });
	 * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'
	 *
	 * var thirdHeaders = new Headers(secondHeaders);
	 * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'
	 * ```
	 */
	var Headers = (function () {
	    function Headers(headers) {
	        var _this = this;
	        if (headers instanceof Headers) {
	            this._headersMap = headers._headersMap;
	            return;
	        }
	        this._headersMap = new collection_1.Map();
	        if (lang_1.isBlank(headers)) {
	            return;
	        }
	        // headers instanceof StringMap
	        collection_1.StringMapWrapper.forEach(headers, function (v, k) { _this._headersMap.set(k, collection_1.isListLikeIterable(v) ? v : [v]); });
	    }
	    /**
	     * Appends a header to existing list of header values for a given header name.
	     */
	    Headers.prototype.append = function (name, value) {
	        var mapName = this._headersMap.get(name);
	        var list = collection_1.isListLikeIterable(mapName) ? mapName : [];
	        list.push(value);
	        this._headersMap.set(name, list);
	    };
	    /**
	     * Deletes all header values for the given name.
	     */
	    Headers.prototype.delete = function (name) { this._headersMap.delete(name); };
	    Headers.prototype.forEach = function (fn) {
	        this._headersMap.forEach(fn);
	    };
	    /**
	     * Returns first header that matches given name.
	     */
	    Headers.prototype.get = function (header) { return collection_1.ListWrapper.first(this._headersMap.get(header)); };
	    /**
	     * Check for existence of header by given name.
	     */
	    Headers.prototype.has = function (header) { return this._headersMap.has(header); };
	    /**
	     * Provides names of set headers
	     */
	    Headers.prototype.keys = function () { return collection_1.MapWrapper.keys(this._headersMap); };
	    /**
	     * Sets or overrides header value for given name.
	     */
	    Headers.prototype.set = function (header, value) {
	        var list = [];
	        if (collection_1.isListLikeIterable(value)) {
	            var pushValue = value.join(',');
	            list.push(pushValue);
	        }
	        else {
	            list.push(value);
	        }
	        this._headersMap.set(header, list);
	    };
	    /**
	     * Returns values of all headers.
	     */
	    Headers.prototype.values = function () { return collection_1.MapWrapper.values(this._headersMap); };
	    /**
	     * Returns list of header values for a given name.
	     */
	    Headers.prototype.getAll = function (header) {
	        var headers = this._headersMap.get(header);
	        return collection_1.isListLikeIterable(headers) ? headers : [];
	    };
	    /**
	     * This method is not implemented.
	     */
	    Headers.prototype.entries = function () { throw new exceptions_1.BaseException('"entries" method is not implemented on Headers class'); };
	    return Headers;
	})();
	exports.Headers = Headers;
	//# sourceMappingURL=headers.js.map

/***/ },
/* 423 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var enums_1 = __webpack_require__(424);
	var exceptions_1 = __webpack_require__(204);
	function normalizeMethodName(method) {
	    if (lang_1.isString(method)) {
	        var originalMethod = method;
	        method = method.replace(/(\w)(\w*)/g, function (g0, g1, g2) { return g1.toUpperCase() + g2.toLowerCase(); });
	        method = enums_1.RequestMethods[method];
	        if (typeof method !== 'number')
	            throw exceptions_1.makeTypeError("Invalid request method. The method \"" + originalMethod + "\" is not supported.");
	    }
	    return method;
	}
	exports.normalizeMethodName = normalizeMethodName;
	var lang_2 = __webpack_require__(49);
	exports.isJsObject = lang_2.isJsObject;
	//# sourceMappingURL=http_utils.js.map

/***/ },
/* 424 */
/***/ function(module, exports) {

	'use strict';/**
	 * Supported http methods.
	 */
	(function (RequestMethods) {
	    RequestMethods[RequestMethods["Get"] = 0] = "Get";
	    RequestMethods[RequestMethods["Post"] = 1] = "Post";
	    RequestMethods[RequestMethods["Put"] = 2] = "Put";
	    RequestMethods[RequestMethods["Delete"] = 3] = "Delete";
	    RequestMethods[RequestMethods["Options"] = 4] = "Options";
	    RequestMethods[RequestMethods["Head"] = 5] = "Head";
	    RequestMethods[RequestMethods["Patch"] = 6] = "Patch";
	})(exports.RequestMethods || (exports.RequestMethods = {}));
	var RequestMethods = exports.RequestMethods;
	/**
	 * All possible states in which a connection can be, based on
	 * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an
	 * additional "CANCELLED" state.
	 */
	(function (ReadyStates) {
	    ReadyStates[ReadyStates["Unsent"] = 0] = "Unsent";
	    ReadyStates[ReadyStates["Open"] = 1] = "Open";
	    ReadyStates[ReadyStates["HeadersReceived"] = 2] = "HeadersReceived";
	    ReadyStates[ReadyStates["Loading"] = 3] = "Loading";
	    ReadyStates[ReadyStates["Done"] = 4] = "Done";
	    ReadyStates[ReadyStates["Cancelled"] = 5] = "Cancelled";
	})(exports.ReadyStates || (exports.ReadyStates = {}));
	var ReadyStates = exports.ReadyStates;
	/**
	 * Acceptable response types to be associated with a {@link Response}, based on
	 * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.
	 */
	(function (ResponseTypes) {
	    ResponseTypes[ResponseTypes["Basic"] = 0] = "Basic";
	    ResponseTypes[ResponseTypes["Cors"] = 1] = "Cors";
	    ResponseTypes[ResponseTypes["Default"] = 2] = "Default";
	    ResponseTypes[ResponseTypes["Error"] = 3] = "Error";
	    ResponseTypes[ResponseTypes["Opaque"] = 4] = "Opaque";
	})(exports.ResponseTypes || (exports.ResponseTypes = {}));
	var ResponseTypes = exports.ResponseTypes;
	//# sourceMappingURL=enums.js.map

/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(49);
	var headers_1 = __webpack_require__(422);
	var enums_1 = __webpack_require__(424);
	var angular2_1 = __webpack_require__(45);
	var url_search_params_1 = __webpack_require__(426);
	var http_utils_1 = __webpack_require__(423);
	/**
	 * Creates a request options object to be optionally provided when instantiating a
	 * {@link Request}.
	 *
	 * This class is based on the `RequestInit` description in the [Fetch
	 * Spec](https://fetch.spec.whatwg.org/#requestinit).
	 *
	 * All values are null by default. Typical defaults can be found in the {@link BaseRequestOptions}
	 * class, which sub-classes `RequestOptions`.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/7Wvi3lfLq41aQPKlxB4O?p=preview))
	 *
	 * ```typescript
	 * import {RequestOptions, Request, RequestMethods} from 'angular2/http';
	 *
	 * var options = new RequestOptions({
	 *   method: RequestMethods.Post,
	 *   url: 'https://google.com'
	 * });
	 * var req = new Request(options);
	 * console.log('req.method:', RequestMethods[req.method]); // Post
	 * console.log('options.url:', options.url); // https://google.com
	 * ```
	 */
	var RequestOptions = (function () {
	    function RequestOptions(_a) {
	        var _b = _a === void 0 ? {} : _a, method = _b.method, headers = _b.headers, body = _b.body, url = _b.url, search = _b.search;
	        this.method = lang_1.isPresent(method) ? http_utils_1.normalizeMethodName(method) : null;
	        this.headers = lang_1.isPresent(headers) ? headers : null;
	        this.body = lang_1.isPresent(body) ? body : null;
	        this.url = lang_1.isPresent(url) ? url : null;
	        this.search = lang_1.isPresent(search) ? (lang_1.isString(search) ? new url_search_params_1.URLSearchParams((search)) :
	            (search)) :
	            null;
	    }
	    /**
	     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override
	     * existing values. This method will not change the values of the instance on which it is being
	     * called.
	     *
	     * Note that `headers` and `search` will override existing values completely if present in
	     * the `options` object. If these values should be merged, it should be done prior to calling
	     * `merge` on the `RequestOptions` instance.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/6w8XA8YTkDRcPYpdB9dk?p=preview))
	     *
	     * ```typescript
	     * import {RequestOptions, Request, RequestMethods} from 'angular2/http';
	     *
	     * var options = new RequestOptions({
	     *   method: RequestMethods.Post
	     * });
	     * var req = new Request(options.merge({
	     *   url: 'https://google.com'
	     * }));
	     * console.log('req.method:', RequestMethods[req.method]); // Post
	     * console.log('options.url:', options.url); // null
	     * console.log('req.url:', req.url); // https://google.com
	     * ```
	     */
	    RequestOptions.prototype.merge = function (options) {
	        return new RequestOptions({
	            method: lang_1.isPresent(options) && lang_1.isPresent(options.method) ? options.method : this.method,
	            headers: lang_1.isPresent(options) && lang_1.isPresent(options.headers) ? options.headers : this.headers,
	            body: lang_1.isPresent(options) && lang_1.isPresent(options.body) ? options.body : this.body,
	            url: lang_1.isPresent(options) && lang_1.isPresent(options.url) ? options.url : this.url,
	            search: lang_1.isPresent(options) && lang_1.isPresent(options.search) ?
	                (lang_1.isString(options.search) ? new url_search_params_1.URLSearchParams((options.search)) :
	                    (options.search).clone()) :
	                this.search
	        });
	    };
	    return RequestOptions;
	})();
	exports.RequestOptions = RequestOptions;
	/**
	 * Subclass of {@link RequestOptions}, with default values.
	 *
	 * Default values:
	 *  * method: {@link RequestMethods RequestMethods.Get}
	 *  * headers: empty {@link Headers} object
	 *
	 * This class could be extended and bound to the {@link RequestOptions} class
	 * when configuring an {@link Injector}, in order to override the default options
	 * used by {@link Http} to create and send {@link Request Requests}.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/LEKVSx?p=preview))
	 *
	 * ```typescript
	 * import {provide, bootstrap} from 'angular2/angular2';
	 * import {HTTP_PROVIDERS, Http, BaseRequestOptions, RequestOptions} from 'angular2/http';
	 * import {App} from './myapp';
	 *
	 * class MyOptions extends BaseRequestOptions {
	 *   search: string = 'coreTeam=true';
	 * }
	 *
	 * bootstrap(App, [HTTP_PROVIDERS, provide(RequestOptions, {useClass: MyOptions})]);
	 * ```
	 *
	 * The options could also be extended when manually creating a {@link Request}
	 * object.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/oyBoEvNtDhOSfi9YxaVb?p=preview))
	 *
	 * ```
	 * import {BaseRequestOptions, Request, RequestMethods} from 'angular2/http';
	 *
	 * var options = new BaseRequestOptions();
	 * var req = new Request(options.merge({
	 *   method: RequestMethods.Post,
	 *   url: 'https://google.com'
	 * }));
	 * console.log('req.method:', RequestMethods[req.method]); // Post
	 * console.log('options.url:', options.url); // null
	 * console.log('req.url:', req.url); // https://google.com
	 * ```
	 */
	var BaseRequestOptions = (function (_super) {
	    __extends(BaseRequestOptions, _super);
	    function BaseRequestOptions() {
	        _super.call(this, { method: enums_1.RequestMethods.Get, headers: new headers_1.Headers() });
	    }
	    BaseRequestOptions = __decorate([
	        angular2_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], BaseRequestOptions);
	    return BaseRequestOptions;
	})(RequestOptions);
	exports.BaseRequestOptions = BaseRequestOptions;
	//# sourceMappingURL=base_request_options.js.map

/***/ },
/* 426 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var collection_1 = __webpack_require__(202);
	function paramParser(rawParams) {
	    if (rawParams === void 0) { rawParams = ''; }
	    var map = new collection_1.Map();
	    if (rawParams.length > 0) {
	        var params = rawParams.split('&');
	        params.forEach(function (param) {
	            var split = param.split('=');
	            var key = split[0];
	            var val = split[1];
	            var list = lang_1.isPresent(map.get(key)) ? map.get(key) : [];
	            list.push(val);
	            map.set(key, list);
	        });
	    }
	    return map;
	}
	/**
	 * Map-like representation of url search parameters, based on
	 * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,
	 * with several extensions for merging URLSearchParams objects:
	 *   - setAll()
	 *   - appendAll()
	 *   - replaceAll()
	 */
	var URLSearchParams = (function () {
	    function URLSearchParams(rawParams) {
	        if (rawParams === void 0) { rawParams = ''; }
	        this.rawParams = rawParams;
	        this.paramsMap = paramParser(rawParams);
	    }
	    URLSearchParams.prototype.clone = function () {
	        var clone = new URLSearchParams();
	        clone.appendAll(this);
	        return clone;
	    };
	    URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };
	    URLSearchParams.prototype.get = function (param) {
	        var storedParam = this.paramsMap.get(param);
	        if (collection_1.isListLikeIterable(storedParam)) {
	            return collection_1.ListWrapper.first(storedParam);
	        }
	        else {
	            return null;
	        }
	    };
	    URLSearchParams.prototype.getAll = function (param) {
	        var mapParam = this.paramsMap.get(param);
	        return lang_1.isPresent(mapParam) ? mapParam : [];
	    };
	    URLSearchParams.prototype.set = function (param, val) {
	        var mapParam = this.paramsMap.get(param);
	        var list = lang_1.isPresent(mapParam) ? mapParam : [];
	        collection_1.ListWrapper.clear(list);
	        list.push(val);
	        this.paramsMap.set(param, list);
	    };
	    // A merge operation
	    // For each name-values pair in `searchParams`, perform `set(name, values[0])`
	    //
	    // E.g: "a=[1,2,3], c=[8]" + "a=[4,5,6], b=[7]" = "a=[4], c=[8], b=[7]"
	    //
	    // TODO(@caitp): document this better
	    URLSearchParams.prototype.setAll = function (searchParams) {
	        var _this = this;
	        searchParams.paramsMap.forEach(function (value, param) {
	            var mapParam = _this.paramsMap.get(param);
	            var list = lang_1.isPresent(mapParam) ? mapParam : [];
	            collection_1.ListWrapper.clear(list);
	            list.push(value[0]);
	            _this.paramsMap.set(param, list);
	        });
	    };
	    URLSearchParams.prototype.append = function (param, val) {
	        var mapParam = this.paramsMap.get(param);
	        var list = lang_1.isPresent(mapParam) ? mapParam : [];
	        list.push(val);
	        this.paramsMap.set(param, list);
	    };
	    // A merge operation
	    // For each name-values pair in `searchParams`, perform `append(name, value)`
	    // for each value in `values`.
	    //
	    // E.g: "a=[1,2], c=[8]" + "a=[3,4], b=[7]" = "a=[1,2,3,4], c=[8], b=[7]"
	    //
	    // TODO(@caitp): document this better
	    URLSearchParams.prototype.appendAll = function (searchParams) {
	        var _this = this;
	        searchParams.paramsMap.forEach(function (value, param) {
	            var mapParam = _this.paramsMap.get(param);
	            var list = lang_1.isPresent(mapParam) ? mapParam : [];
	            for (var i = 0; i < value.length; ++i) {
	                list.push(value[i]);
	            }
	            _this.paramsMap.set(param, list);
	        });
	    };
	    // A merge operation
	    // For each name-values pair in `searchParams`, perform `delete(name)`,
	    // followed by `set(name, values)`
	    //
	    // E.g: "a=[1,2,3], c=[8]" + "a=[4,5,6], b=[7]" = "a=[4,5,6], c=[8], b=[7]"
	    //
	    // TODO(@caitp): document this better
	    URLSearchParams.prototype.replaceAll = function (searchParams) {
	        var _this = this;
	        searchParams.paramsMap.forEach(function (value, param) {
	            var mapParam = _this.paramsMap.get(param);
	            var list = lang_1.isPresent(mapParam) ? mapParam : [];
	            collection_1.ListWrapper.clear(list);
	            for (var i = 0; i < value.length; ++i) {
	                list.push(value[i]);
	            }
	            _this.paramsMap.set(param, list);
	        });
	    };
	    URLSearchParams.prototype.toString = function () {
	        var paramsList = [];
	        this.paramsMap.forEach(function (values, k) { values.forEach(function (v) { return paramsList.push(k + '=' + v); }); });
	        return paramsList.join('&');
	    };
	    URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param); };
	    return URLSearchParams;
	})();
	exports.URLSearchParams = URLSearchParams;
	//# sourceMappingURL=url_search_params.js.map

/***/ },
/* 427 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var enums_1 = __webpack_require__(424);
	var static_response_1 = __webpack_require__(428);
	var base_response_options_1 = __webpack_require__(429);
	var angular2_1 = __webpack_require__(45);
	var browser_xhr_1 = __webpack_require__(430);
	var lang_1 = __webpack_require__(49);
	var angular2_2 = __webpack_require__(45);
	/**
	* Creates connections using `XMLHttpRequest`. Given a fully-qualified
	* request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the
	* request.
	*
	* This class would typically not be created or interacted with directly inside applications, though
	* the {@link MockConnection} may be interacted with in tests.
	*/
	var XHRConnection = (function () {
	    function XHRConnection(req, browserXHR, baseResponseOptions) {
	        var _this = this;
	        this.request = req;
	        this.response = new angular2_2.Observable(function (responseObserver) {
	            var _xhr = browserXHR.build();
	            _xhr.open(enums_1.RequestMethods[req.method].toUpperCase(), req.url);
	            // load event handler
	            var onLoad = function () {
	                // responseText is the old-school way of retrieving response (supported by IE8 & 9)
	                // response/responseType properties were introduced in XHR Level2 spec (supported by
	                // IE10)
	                var response = lang_1.isPresent(_xhr.response) ? _xhr.response : _xhr.responseText;
	                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	                var status = _xhr.status === 1223 ? 204 : _xhr.status;
	                // fix status code when it is 0 (0 status is undocumented).
	                // Occurs when accessing file resources or on Android 4.1 stock browser
	                // while retrieving files from application cache.
	                if (status === 0) {
	                    status = response ? 200 : 0;
	                }
	                var responseOptions = new base_response_options_1.ResponseOptions({ body: response, status: status });
	                if (lang_1.isPresent(baseResponseOptions)) {
	                    responseOptions = baseResponseOptions.merge(responseOptions);
	                }
	                responseObserver.next(new static_response_1.Response(responseOptions));
	                // TODO(gdi2290): defer complete if array buffer until done
	                responseObserver.complete();
	            };
	            // error event handler
	            var onError = function (err) {
	                var responseOptions = new base_response_options_1.ResponseOptions({ body: err, type: enums_1.ResponseTypes.Error });
	                if (lang_1.isPresent(baseResponseOptions)) {
	                    responseOptions = baseResponseOptions.merge(responseOptions);
	                }
	                responseObserver.error(new static_response_1.Response(responseOptions));
	            };
	            if (lang_1.isPresent(req.headers)) {
	                req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(name, values.join(',')); });
	            }
	            _xhr.addEventListener('load', onLoad);
	            _xhr.addEventListener('error', onError);
	            _xhr.send(_this.request.text());
	            return function () {
	                _xhr.removeEventListener('load', onLoad);
	                _xhr.removeEventListener('error', onError);
	                _xhr.abort();
	            };
	        });
	    }
	    return XHRConnection;
	})();
	exports.XHRConnection = XHRConnection;
	/**
	 * Creates {@link XHRConnection} instances.
	 *
	 * This class would typically not be used by end users, but could be
	 * overridden if a different backend implementation should be used,
	 * such as in a node backend.
	 *
	 * ### Example
	 *
	 * ```
	 * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from 'angular2/http';
	 * @Component({
	 *   viewProviders: [
	 *     HTTP_PROVIDERS,
	 *     provide(Http, {useFactory: (backend, options) => {
	 *       return new Http(backend, options);
	 *     }, deps: [MyNodeBackend, BaseRequestOptions]})]
	 * })
	 * class MyComponent {
	 *   constructor(http:Http) {
	 *     http.request('people.json').subscribe(res => this.people = res.json());
	 *   }
	 * }
	 * ```
	 *
	 **/
	var XHRBackend = (function () {
	    function XHRBackend(_browserXHR, _baseResponseOptions) {
	        this._browserXHR = _browserXHR;
	        this._baseResponseOptions = _baseResponseOptions;
	    }
	    XHRBackend.prototype.createConnection = function (request) {
	        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);
	    };
	    XHRBackend = __decorate([
	        angular2_1.Injectable(), 
	        __metadata('design:paramtypes', [browser_xhr_1.BrowserXhr, base_response_options_1.ResponseOptions])
	    ], XHRBackend);
	    return XHRBackend;
	})();
	exports.XHRBackend = XHRBackend;
	//# sourceMappingURL=xhr_backend.js.map

/***/ },
/* 428 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var http_utils_1 = __webpack_require__(423);
	/**
	 * Creates `Response` instances from provided values.
	 *
	 * Though this object isn't
	 * usually instantiated by end-users, it is the primary object interacted with when it comes time to
	 * add data to a view.
	 *
	 * ### Example
	 *
	 * ```
	 * http.request('my-friends.txt').subscribe(response => this.friends = response.text());
	 * ```
	 *
	 * The Response's interface is inspired by the Response constructor defined in the [Fetch
	 * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body
	 * can be accessed many times. There are other differences in the implementation, but this is the
	 * most significant.
	 */
	var Response = (function () {
	    function Response(responseOptions) {
	        this._body = responseOptions.body;
	        this.status = responseOptions.status;
	        this.statusText = responseOptions.statusText;
	        this.headers = responseOptions.headers;
	        this.type = responseOptions.type;
	        this.url = responseOptions.url;
	    }
	    /**
	     * Not yet implemented
	     */
	    // TODO: Blob return type
	    Response.prototype.blob = function () { throw new exceptions_1.BaseException('"blob()" method not implemented on Response superclass'); };
	    /**
	     * Attempts to return body as parsed `JSON` object, or raises an exception.
	     */
	    Response.prototype.json = function () {
	        var jsonResponse;
	        if (http_utils_1.isJsObject(this._body)) {
	            jsonResponse = this._body;
	        }
	        else if (lang_1.isString(this._body)) {
	            jsonResponse = lang_1.Json.parse(this._body);
	        }
	        return jsonResponse;
	    };
	    /**
	     * Returns the body as a string, presuming `toString()` can be called on the response body.
	     */
	    Response.prototype.text = function () { return this._body.toString(); };
	    /**
	     * Not yet implemented
	     */
	    // TODO: ArrayBuffer return type
	    Response.prototype.arrayBuffer = function () {
	        throw new exceptions_1.BaseException('"arrayBuffer()" method not implemented on Response superclass');
	    };
	    return Response;
	})();
	exports.Response = Response;
	//# sourceMappingURL=static_response.js.map

/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var angular2_1 = __webpack_require__(45);
	var lang_1 = __webpack_require__(49);
	var headers_1 = __webpack_require__(422);
	var enums_1 = __webpack_require__(424);
	/**
	 * Creates a response options object to be optionally provided when instantiating a
	 * {@link Response}.
	 *
	 * This class is based on the `ResponseInit` description in the [Fetch
	 * Spec](https://fetch.spec.whatwg.org/#responseinit).
	 *
	 * All values are null by default. Typical defaults can be found in the
	 * {@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.
	 *
	 * This class may be used in tests to build {@link Response Responses} for
	 * mock responses (see {@link MockBackend}).
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))
	 *
	 * ```typescript
	 * import {ResponseOptions, Response} from 'angular2/http';
	 *
	 * var options = new ResponseOptions({
	 *   body: '{"name":"Jeff"}'
	 * });
	 * var res = new Response(options);
	 *
	 * console.log('res.json():', res.json()); // Object {name: "Jeff"}
	 * ```
	 */
	var ResponseOptions = (function () {
	    function ResponseOptions(_a) {
	        var _b = _a === void 0 ? {} : _a, body = _b.body, status = _b.status, headers = _b.headers, statusText = _b.statusText, type = _b.type, url = _b.url;
	        this.body = lang_1.isPresent(body) ? body : null;
	        this.status = lang_1.isPresent(status) ? status : null;
	        this.headers = lang_1.isPresent(headers) ? headers : null;
	        this.statusText = lang_1.isPresent(statusText) ? statusText : null;
	        this.type = lang_1.isPresent(type) ? type : null;
	        this.url = lang_1.isPresent(url) ? url : null;
	    }
	    /**
	     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to
	     * override
	     * existing values. This method will not change the values of the instance on which it is being
	     * called.
	     *
	     * This may be useful when sharing a base `ResponseOptions` object inside tests,
	     * where certain properties may change from test to test.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))
	     *
	     * ```typescript
	     * import {ResponseOptions, Response} from 'angular2/http';
	     *
	     * var options = new ResponseOptions({
	     *   body: {name: 'Jeff'}
	     * });
	     * var res = new Response(options.merge({
	     *   url: 'https://google.com'
	     * }));
	     * console.log('options.url:', options.url); // null
	     * console.log('res.json():', res.json()); // Object {name: "Jeff"}
	     * console.log('res.url:', res.url); // https://google.com
	     * ```
	     */
	    ResponseOptions.prototype.merge = function (options) {
	        return new ResponseOptions({
	            body: lang_1.isPresent(options) && lang_1.isPresent(options.body) ? options.body : this.body,
	            status: lang_1.isPresent(options) && lang_1.isPresent(options.status) ? options.status : this.status,
	            headers: lang_1.isPresent(options) && lang_1.isPresent(options.headers) ? options.headers : this.headers,
	            statusText: lang_1.isPresent(options) && lang_1.isPresent(options.statusText) ? options.statusText :
	                this.statusText,
	            type: lang_1.isPresent(options) && lang_1.isPresent(options.type) ? options.type : this.type,
	            url: lang_1.isPresent(options) && lang_1.isPresent(options.url) ? options.url : this.url,
	        });
	    };
	    return ResponseOptions;
	})();
	exports.ResponseOptions = ResponseOptions;
	/**
	 * Subclass of {@link ResponseOptions}, with default values.
	 *
	 * Default values:
	 *  * status: 200
	 *  * headers: empty {@link Headers} object
	 *
	 * This class could be extended and bound to the {@link ResponseOptions} class
	 * when configuring an {@link Injector}, in order to override the default options
	 * used by {@link Http} to create {@link Response Responses}.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))
	 *
	 * ```typescript
	 * import {provide, bootstrap} from 'angular2/angular2';
	 * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from
	 * 'angular2/http';
	 * import {App} from './myapp';
	 *
	 * class MyOptions extends BaseResponseOptions {
	 *   headers:Headers = new Headers({network: 'github'});
	 * }
	 *
	 * bootstrap(App, [HTTP_PROVIDERS, provide(ResponseOptions, {useClass: MyOptions})]);
	 * ```
	 *
	 * The options could also be extended when manually creating a {@link Response}
	 * object.
	 *
	 * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))
	 *
	 * ```
	 * import {BaseResponseOptions, Response} from 'angular2/http';
	 *
	 * var options = new BaseResponseOptions();
	 * var res = new Response(options.merge({
	 *   body: 'Angular2',
	 *   headers: new Headers({framework: 'angular'})
	 * }));
	 * console.log('res.headers.get("framework"):', res.headers.get('framework')); // angular
	 * console.log('res.text():', res.text()); // Angular2;
	 * ```
	 */
	var BaseResponseOptions = (function (_super) {
	    __extends(BaseResponseOptions, _super);
	    function BaseResponseOptions() {
	        _super.call(this, { status: 200, statusText: 'Ok', type: enums_1.ResponseTypes.Default, headers: new headers_1.Headers() });
	    }
	    BaseResponseOptions = __decorate([
	        angular2_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], BaseResponseOptions);
	    return BaseResponseOptions;
	})(ResponseOptions);
	exports.BaseResponseOptions = BaseResponseOptions;
	//# sourceMappingURL=base_response_options.js.map

/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var angular2_1 = __webpack_require__(45);
	// Make sure not to evaluate this in a non-browser environment!
	var BrowserXhr = (function () {
	    function BrowserXhr() {
	    }
	    BrowserXhr.prototype.build = function () { return (new XMLHttpRequest()); };
	    BrowserXhr = __decorate([
	        angular2_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], BrowserXhr);
	    return BrowserXhr;
	})();
	exports.BrowserXhr = BrowserXhr;
	//# sourceMappingURL=browser_xhr.js.map

/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var interfaces_1 = __webpack_require__(420);
	var enums_1 = __webpack_require__(424);
	var static_response_1 = __webpack_require__(428);
	var base_response_options_1 = __webpack_require__(429);
	var angular2_1 = __webpack_require__(45);
	var browser_jsonp_1 = __webpack_require__(432);
	var exceptions_1 = __webpack_require__(204);
	var lang_1 = __webpack_require__(49);
	var angular2_2 = __webpack_require__(45);
	var JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';
	var JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';
	var JSONPConnection = (function () {
	    function JSONPConnection() {
	    }
	    return JSONPConnection;
	})();
	exports.JSONPConnection = JSONPConnection;
	var JSONPConnection_ = (function (_super) {
	    __extends(JSONPConnection_, _super);
	    function JSONPConnection_(req, _dom, baseResponseOptions) {
	        var _this = this;
	        _super.call(this);
	        this._dom = _dom;
	        this.baseResponseOptions = baseResponseOptions;
	        this._finished = false;
	        if (req.method !== enums_1.RequestMethods.Get) {
	            throw exceptions_1.makeTypeError(JSONP_ERR_WRONG_METHOD);
	        }
	        this.request = req;
	        this.response = new angular2_2.Observable(function (responseObserver) {
	            _this.readyState = enums_1.ReadyStates.Loading;
	            var id = _this._id = _dom.nextRequestID();
	            _dom.exposeConnection(id, _this);
	            // Workaround Dart
	            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);
	            var callback = _dom.requestCallback(_this._id);
	            var url = req.url;
	            if (url.indexOf('=JSONP_CALLBACK&') > -1) {
	                url = lang_1.StringWrapper.replace(url, '=JSONP_CALLBACK&', "=" + callback + "&");
	            }
	            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {
	                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + ("=" + callback);
	            }
	            var script = _this._script = _dom.build(url);
	            var onLoad = function (event) {
	                if (_this.readyState === enums_1.ReadyStates.Cancelled)
	                    return;
	                _this.readyState = enums_1.ReadyStates.Done;
	                _dom.cleanup(script);
	                if (!_this._finished) {
	                    var responseOptions_1 = new base_response_options_1.ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: enums_1.ResponseTypes.Error });
	                    if (lang_1.isPresent(baseResponseOptions)) {
	                        responseOptions_1 = baseResponseOptions.merge(responseOptions_1);
	                    }
	                    responseObserver.error(new static_response_1.Response(responseOptions_1));
	                    return;
	                }
	                var responseOptions = new base_response_options_1.ResponseOptions({ body: _this._responseData });
	                if (lang_1.isPresent(_this.baseResponseOptions)) {
	                    responseOptions = _this.baseResponseOptions.merge(responseOptions);
	                }
	                responseObserver.next(new static_response_1.Response(responseOptions));
	                responseObserver.complete();
	            };
	            var onError = function (error) {
	                if (_this.readyState === enums_1.ReadyStates.Cancelled)
	                    return;
	                _this.readyState = enums_1.ReadyStates.Done;
	                _dom.cleanup(script);
	                var responseOptions = new base_response_options_1.ResponseOptions({ body: error.message, type: enums_1.ResponseTypes.Error });
	                if (lang_1.isPresent(baseResponseOptions)) {
	                    responseOptions = baseResponseOptions.merge(responseOptions);
	                }
	                responseObserver.error(new static_response_1.Response(responseOptions));
	            };
	            script.addEventListener('load', onLoad);
	            script.addEventListener('error', onError);
	            _dom.send(script);
	            return function () {
	                _this.readyState = enums_1.ReadyStates.Cancelled;
	                script.removeEventListener('load', onLoad);
	                script.removeEventListener('error', onError);
	                if (lang_1.isPresent(script)) {
	                    _this._dom.cleanup(script);
	                }
	            };
	        });
	    }
	    JSONPConnection_.prototype.finished = function (data) {
	        // Don't leak connections
	        this._finished = true;
	        this._dom.removeConnection(this._id);
	        if (this.readyState === enums_1.ReadyStates.Cancelled)
	            return;
	        this._responseData = data;
	    };
	    return JSONPConnection_;
	})(JSONPConnection);
	exports.JSONPConnection_ = JSONPConnection_;
	var JSONPBackend = (function (_super) {
	    __extends(JSONPBackend, _super);
	    function JSONPBackend() {
	        _super.apply(this, arguments);
	    }
	    return JSONPBackend;
	})(interfaces_1.ConnectionBackend);
	exports.JSONPBackend = JSONPBackend;
	var JSONPBackend_ = (function (_super) {
	    __extends(JSONPBackend_, _super);
	    function JSONPBackend_(_browserJSONP, _baseResponseOptions) {
	        _super.call(this);
	        this._browserJSONP = _browserJSONP;
	        this._baseResponseOptions = _baseResponseOptions;
	    }
	    JSONPBackend_.prototype.createConnection = function (request) {
	        return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);
	    };
	    JSONPBackend_ = __decorate([
	        angular2_1.Injectable(), 
	        __metadata('design:paramtypes', [browser_jsonp_1.BrowserJsonp, base_response_options_1.ResponseOptions])
	    ], JSONPBackend_);
	    return JSONPBackend_;
	})(JSONPBackend);
	exports.JSONPBackend_ = JSONPBackend_;
	//# sourceMappingURL=jsonp_backend.js.map

/***/ },
/* 432 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var angular2_1 = __webpack_require__(45);
	var lang_1 = __webpack_require__(49);
	var _nextRequestId = 0;
	exports.JSONP_HOME = '__ng_jsonp__';
	var _jsonpConnections = null;
	function _getJsonpConnections() {
	    if (_jsonpConnections === null) {
	        _jsonpConnections = lang_1.global[exports.JSONP_HOME] = {};
	    }
	    return _jsonpConnections;
	}
	// Make sure not to evaluate this in a non-browser environment!
	var BrowserJsonp = (function () {
	    function BrowserJsonp() {
	    }
	    // Construct a <script> element with the specified URL
	    BrowserJsonp.prototype.build = function (url) {
	        var node = document.createElement('script');
	        node.src = url;
	        return node;
	    };
	    BrowserJsonp.prototype.nextRequestID = function () { return "__req" + _nextRequestId++; };
	    BrowserJsonp.prototype.requestCallback = function (id) { return exports.JSONP_HOME + "." + id + ".finished"; };
	    BrowserJsonp.prototype.exposeConnection = function (id, connection) {
	        var connections = _getJsonpConnections();
	        connections[id] = connection;
	    };
	    BrowserJsonp.prototype.removeConnection = function (id) {
	        var connections = _getJsonpConnections();
	        connections[id] = null;
	    };
	    // Attach the <script> element to the DOM
	    BrowserJsonp.prototype.send = function (node) { document.body.appendChild((node)); };
	    // Remove <script> element from the DOM
	    BrowserJsonp.prototype.cleanup = function (node) {
	        if (node.parentNode) {
	            node.parentNode.removeChild((node));
	        }
	    };
	    BrowserJsonp = __decorate([
	        angular2_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], BrowserJsonp);
	    return BrowserJsonp;
	})();
	exports.BrowserJsonp = BrowserJsonp;
	//# sourceMappingURL=browser_jsonp.js.map

/***/ },
/* 433 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var angular2_1 = __webpack_require__(45);
	var static_request_1 = __webpack_require__(421);
	var enums_1 = __webpack_require__(424);
	var lang_1 = __webpack_require__(49);
	var exceptions_1 = __webpack_require__(204);
	var Rx = __webpack_require__(52);
	var Subject = Rx.Subject, ReplaySubject = Rx.ReplaySubject;
	/**
	 *
	 * Mock Connection to represent a {@link Connection} for tests.
	 *
	 **/
	var MockConnection = (function () {
	    function MockConnection(req) {
	        this.response = new ReplaySubject(1).take(1);
	        this.readyState = enums_1.ReadyStates.Open;
	        this.request = req;
	    }
	    /**
	     * Sends a mock response to the connection. This response is the value that is emitted to the
	     * {@link EventEmitter} returned by {@link Http}.
	     *
	     * ### Example
	     *
	     * ```
	     * var connection;
	     * backend.connections.subscribe(c => connection = c);
	     * http.request('data.json').subscribe(res => console.log(res.text()));
	     * connection.mockRespond(new Response('fake response')); //logs 'fake response'
	     * ```
	     *
	     */
	    MockConnection.prototype.mockRespond = function (res) {
	        if (this.readyState === enums_1.ReadyStates.Done || this.readyState === enums_1.ReadyStates.Cancelled) {
	            throw new exceptions_1.BaseException('Connection has already been resolved');
	        }
	        this.readyState = enums_1.ReadyStates.Done;
	        this.response.next(res);
	        this.response.complete();
	    };
	    /**
	     * Not yet implemented!
	     *
	     * Sends the provided {@link Response} to the `downloadObserver` of the `Request`
	     * associated with this connection.
	     */
	    MockConnection.prototype.mockDownload = function (res) {
	        // this.request.downloadObserver.onNext(res);
	        // if (res.bytesLoaded === res.totalBytes) {
	        //   this.request.downloadObserver.onCompleted();
	        // }
	    };
	    // TODO(jeffbcross): consider using Response type
	    /**
	     * Emits the provided error object as an error to the {@link Response} {@link EventEmitter}
	     * returned
	     * from {@link Http}.
	     */
	    MockConnection.prototype.mockError = function (err) {
	        // Matches XHR semantics
	        this.readyState = enums_1.ReadyStates.Done;
	        this.response.error(err);
	    };
	    return MockConnection;
	})();
	exports.MockConnection = MockConnection;
	/**
	 * A mock backend for testing the {@link Http} service.
	 *
	 * This class can be injected in tests, and should be used to override providers
	 * to other backends, such as {@link XHRBackend}.
	 *
	 * ### Example
	 *
	 * ```
	 * import {MockBackend, DefaultOptions, Http} from 'angular2/http';
	 * it('should get some data', inject([AsyncTestCompleter], (async) => {
	 *   var connection;
	 *   var injector = Injector.resolveAndCreate([
	 *     MockBackend,
	 *     provide(Http, {useFactory: (backend, defaultOptions) => {
	 *       return new Http(backend, defaultOptions)
	 *     }, deps: [MockBackend, DefaultOptions]})]);
	 *   var http = injector.get(Http);
	 *   var backend = injector.get(MockBackend);
	 *   //Assign any newly-created connection to local variable
	 *   backend.connections.subscribe(c => connection = c);
	 *   http.request('data.json').subscribe((res) => {
	 *     expect(res.text()).toBe('awesome');
	 *     async.done();
	 *   });
	 *   connection.mockRespond(new Response('awesome'));
	 * }));
	 * ```
	 *
	 * This method only exists in the mock implementation, not in real Backends.
	 **/
	var MockBackend = (function () {
	    function MockBackend() {
	        var _this = this;
	        this.connectionsArray = [];
	        this.connections = new Subject();
	        this.connections.subscribe(function (connection) { return _this.connectionsArray.push(connection); });
	        this.pendingConnections = new Subject();
	    }
	    /**
	     * Checks all connections, and raises an exception if any connection has not received a response.
	     *
	     * This method only exists in the mock implementation, not in real Backends.
	     */
	    MockBackend.prototype.verifyNoPendingRequests = function () {
	        var pending = 0;
	        this.pendingConnections.subscribe(function (c) { return pending++; });
	        if (pending > 0)
	            throw new exceptions_1.BaseException(pending + " pending connections to be resolved");
	    };
	    /**
	     * Can be used in conjunction with `verifyNoPendingRequests` to resolve any not-yet-resolve
	     * connections, if it's expected that there are connections that have not yet received a response.
	     *
	     * This method only exists in the mock implementation, not in real Backends.
	     */
	    MockBackend.prototype.resolveAllConnections = function () { this.connections.subscribe(function (c) { return c.readyState = 4; }); };
	    /**
	     * Creates a new {@link MockConnection}. This is equivalent to calling `new
	     * MockConnection()`, except that it also will emit the new `Connection` to the `connections`
	     * emitter of this `MockBackend` instance. This method will usually only be used by tests
	     * against the framework itself, not by end-users.
	     */
	    MockBackend.prototype.createConnection = function (req) {
	        if (!lang_1.isPresent(req) || !(req instanceof static_request_1.Request)) {
	            throw new exceptions_1.BaseException("createConnection requires an instance of Request, got " + req);
	        }
	        var connection = new MockConnection(req);
	        this.connections.next(connection);
	        return connection;
	    };
	    MockBackend = __decorate([
	        angular2_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], MockBackend);
	    return MockBackend;
	})();
	exports.MockBackend = MockBackend;
	//# sourceMappingURL=mock_backend.js.map

/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _angular2Angular2 = __webpack_require__(45);

	var _utilDom = __webpack_require__(435);

	var _utilClickBlock = __webpack_require__(436);

	/**
	 * Component registry service.  For more information on registering
	 * components see the [IdRef API reference](../id/IdRef/).
	 */

	var IonicApp = (function () {
	    function IonicApp(config) {
	        _classCallCheck(this, IonicApp);

	        this._config = config;
	        this._titleSrv = new _angular2Angular2.Title();
	        this._title = '';
	        this._disTime = 0;
	        this._trnsTime = 0;
	        // Our component registry map
	        this.components = {};
	    }

	    /**
	     * Sets the document title.
	     * @param {string} val  Value to set the document title to.
	     */

	    _createClass(IonicApp, [{
	        key: 'setTitle',
	        value: function setTitle(val) {
	            var _this = this;

	            if (val !== this._title) {
	                this._title = val;
	                (0, _utilDom.rafFrames)(4, function () {
	                    _this._titleSrv.setTitle(_this._title);
	                });
	            }
	        }

	        /**
	         * Sets if the app is currently enabled or not, meaning if it's
	         * available to accept new user commands. For example, this is set to `false`
	         * while views transition, a modal slides up, an action-sheet
	         * slides up, etc. After the transition completes it is set back to `true`.
	         * @param {bool} isEnabled
	         * @param {bool} fallback  When `isEnabled` is set to `false`, this argument
	         * is used to set the maximum number of milliseconds that app will wait until
	         * it will automatically enable the app again. It's basically a fallback incase
	         * something goes wrong during a transition and the app wasn't re-enabled correctly.
	         */
	    }, {
	        key: 'setEnabled',
	        value: function setEnabled(isEnabled) {
	            var fallback = arguments.length <= 1 || arguments[1] === undefined ? 700 : arguments[1];

	            this._disTime = isEnabled ? 0 : Date.now() + fallback;
	            if (this._config.get('clickBlock')) {
	                (0, _utilClickBlock.ClickBlock)(!isEnabled, fallback + 100);
	            }
	        }

	        /**
	         * Boolean if the app is actively enabled or not.
	         * @return {bool}
	         */
	    }, {
	        key: 'isEnabled',
	        value: function isEnabled() {
	            return this._disTime < Date.now();
	        }
	    }, {
	        key: 'setTransitioning',
	        value: function setTransitioning(isTransitioning) {
	            var fallback = arguments.length <= 1 || arguments[1] === undefined ? 700 : arguments[1];

	            this._trnsTime = isTransitioning ? Date.now() + fallback : 0;
	        }

	        /**
	         * Boolean if the app is actively transitioning or not.
	         * @return {bool}
	         */
	    }, {
	        key: 'isTransitioning',
	        value: function isTransitioning() {
	            return this._trnsTime > Date.now();
	        }

	        /**
	         * Register a known component with a key, for easy lookups later.
	         * @param {TODO} id  The id to use to register the component
	         * @param {TODO} component  The component to register
	         */
	    }, {
	        key: 'register',
	        value: function register(id, component) {
	            if (this.components[id] && this.components[id] !== component) {}
	            this.components[id] = component;
	        }

	        /**
	         * Unregister a known component with a key.
	         * @param {TODO} id  The id to use to unregister
	         */
	    }, {
	        key: 'unregister',
	        value: function unregister(id) {
	            delete this.components[id];
	        }

	        /**
	         * Get a registered component with the given type (returns the first)
	         * @param {Object} cls the type to search for
	         * @return the matching component, or undefined if none was found
	         */
	    }, {
	        key: 'getRegisteredComponent',
	        value: function getRegisteredComponent(cls) {
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = this.components[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var component = _step.value;

	                    if (component instanceof cls) {
	                        return component;
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator['return']) {
	                        _iterator['return']();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }
	        }

	        /**
	         * Get the component for the given key.
	         * @param {TODO} key  TODO
	         * @return {TODO} TODO
	         */
	    }, {
	        key: 'getComponent',
	        value: function getComponent(id) {
	            return this.components[id];
	        }
	    }]);

	    return IonicApp;
	})();

	exports.IonicApp = IonicApp;

/***/ },
/* 435 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});
	exports.rafPromise = rafPromise;
	exports.rafFrames = rafFrames;
	exports.transitionEnd = transitionEnd;
	exports.animationStart = animationStart;
	exports.animationEnd = animationEnd;
	exports.ready = ready;
	exports.windowLoad = windowLoad;
	exports.pointerCoord = pointerCoord;
	exports.hasPointerMoved = hasPointerMoved;
	exports.isActive = isActive;
	exports.hasFocus = hasFocus;
	exports.isTextInput = isTextInput;
	exports.hasFocusedTextInput = hasFocusedTextInput;
	exports.closest = closest;
	exports.removeElement = removeElement;
	exports.getDimensions = getDimensions;
	exports.windowDimensions = windowDimensions;
	exports.flushDimensionCache = flushDimensionCache;
	exports.parentOffsetEl = parentOffsetEl;
	exports.position = position;
	exports.offset = offset;
	var nativeRaf = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame;
	var nativeCancelRaf = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.webkitCancelRequestAnimationFrame;
	var raf = nativeRaf || function (callback) {
	    var timeCurrent = new Date().getTime(),
	        timeDelta = undefined;
	    /* Dynamically set delay on a per-tick basis to match 60fps. */
	    /* Technique by Erik Moller. MIT license: https://gist.github.com/paulirish/1579671 */
	    timeDelta = Math.max(0, 16 - (timeCurrent - timeLast));
	    timeLast = timeCurrent + timeDelta;
	    return setTimeout(function () {
	        callback(timeCurrent + timeDelta);
	    }, timeDelta);
	};
	exports.raf = raf;
	var rafCancel = nativeRaf ? nativeCancelRaf : function (id) {
	    return window.cancelTimeout(id);
	};
	exports.rafCancel = rafCancel;

	function rafPromise() {
	    return new Promise(function (resolve) {
	        return raf(resolve);
	    });
	}

	function rafFrames(framesToWait, callback) {
	    framesToWait = Math.ceil(framesToWait);
	    if (framesToWait < 2) {
	        raf(callback);
	    } else {
	        setTimeout(function () {
	            raf(callback);
	        }, (framesToWait - 1) * 17);
	    }
	}

	var CSS = {};
	exports.CSS = CSS;
	(function () {
	    // transform
	    var i,
	        keys = ['webkitTransform', 'transform', '-webkit-transform', 'webkit-transform', '-moz-transform', 'moz-transform', 'MozTransform', 'mozTransform', 'msTransform'];
	    for (i = 0; i < keys.length; i++) {
	        if (document.documentElement.style[keys[i]] !== undefined) {
	            CSS.transform = keys[i];
	            break;
	        }
	    }
	    // transition
	    keys = ['webkitTransition', 'mozTransition', 'msTransition', 'transition'];
	    for (i = 0; i < keys.length; i++) {
	        if (document.documentElement.style[keys[i]] !== undefined) {
	            CSS.transition = keys[i];
	            break;
	        }
	    }
	    // The only prefix we care about is webkit for transitions.
	    var isWebkit = CSS.transition.indexOf('webkit') > -1;
	    CSS.prefix = isWebkit ? '-webkit-' : '';
	    // transition duration
	    CSS.transitionDuration = (isWebkit ? '-webkit-' : '') + 'transition-duration';
	    // To be sure transitionend works everywhere, include *both* the webkit and non-webkit events
	    CSS.transitionEnd = (isWebkit ? 'webkitTransitionEnd ' : '') + 'transitionend';
	})();
	if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
	    CSS.animation = 'WebkitAnimation';
	    CSS.animationStart = 'webkitAnimationStart animationstart';
	    CSS.animationEnd = 'webkitAnimationEnd animationend';
	} else {
	    CSS.animation = 'animation';
	    CSS.animationStart = 'animationstart';
	    CSS.animationEnd = 'animationend';
	}

	function transitionEnd(el) {
	    return cssPromise(el, CSS.transitionEnd);
	}

	function animationStart(el, animationName) {
	    return cssPromise(el, CSS.animationStart, animationName);
	}

	function animationEnd(el, animationName) {
	    return cssPromise(el, CSS.animationEnd, animationName);
	}

	function cssPromise(el, eventNames, animationName) {
	    return new Promise(function (resolve) {
	        eventNames.split(' ').forEach(function (eventName) {
	            el.addEventListener(eventName, onEvent);
	        });
	        function onEvent(ev) {
	            if (ev.animationName && animationName) {
	                // do not resolve if a bubbled up ev.animationName
	                // is not the same as the passed in animationName arg
	                if (ev.animationName !== animationName) {
	                    return;
	                }
	            } else if (ev.target !== el) {
	                // do not resolve if the event's target element is not
	                // the same as the element the listener was added to
	                return;
	            }
	            ev.stopPropagation();
	            eventNames.split(' ').forEach(function (eventName) {
	                el.removeEventListener(eventName, onEvent);
	            });
	            resolve(ev);
	        }
	    });
	}

	function ready(callback) {
	    var promise = null;
	    if (!callback) {
	        // a callback wasn't provided, so let's return a promise instead
	        promise = new Promise(function (resolve) {
	            callback = resolve;
	        });
	    }
	    if (document.readyState === 'complete' || document.readyState === 'interactive') {
	        callback();
	    } else {
	        (function () {
	            var completed = function completed() {
	                document.removeEventListener('DOMContentLoaded', completed, false);
	                window.removeEventListener('load', completed, false);
	                callback();
	            };

	            document.addEventListener('DOMContentLoaded', completed, false);
	            window.addEventListener('load', completed, false);
	        })();
	    }
	    return promise;
	}

	function windowLoad(callback) {
	    var promise = null;
	    if (!callback) {
	        // a callback wasn't provided, so let's return a promise instead
	        promise = new Promise(function (resolve) {
	            callback = resolve;
	        });
	    }
	    if (document.readyState === 'complete') {
	        callback();
	    } else {
	        (function () {
	            var completed = function completed() {
	                window.removeEventListener('load', completed, false);
	                callback();
	            };

	            window.addEventListener('load', completed, false);
	        })();
	    }
	    return promise;
	}

	function pointerCoord(ev) {
	    // get coordinates for either a mouse click
	    // or a touch depending on the given event
	    var c = { x: 0, y: 0 };
	    if (ev) {
	        var touches = ev.touches && ev.touches.length ? ev.touches : [ev];
	        var e = ev.changedTouches && ev.changedTouches[0] || touches[0];
	        if (e) {
	            c.x = e.clientX || e.pageX || 0;
	            c.y = e.clientY || e.pageY || 0;
	        }
	    }
	    return c;
	}

	function hasPointerMoved(threshold, startCoord, endCoord) {
	    return startCoord && endCoord && (Math.abs(startCoord.x - endCoord.x) > threshold || Math.abs(startCoord.y - endCoord.y) > threshold);
	}

	function isActive(ele) {
	    return !!(ele && document.activeElement === ele);
	}

	function hasFocus(ele) {
	    return isActive(ele) && ele.parentElement.querySelector(':focus') === ele;
	}

	function isTextInput(ele) {
	    return !!ele && (ele.tagName == 'TEXTAREA' || ele.contentEditable === 'true' || ele.tagName == 'INPUT' && !/^(radio|checkbox|range|file|submit|reset|color|image|button)$/i.test(ele.type));
	}

	function hasFocusedTextInput() {
	    var ele = document.activeElement;
	    if (isTextInput(ele)) {
	        return ele.parentElement.querySelector(':focus') === ele;
	    }
	    return false;
	}

	var matchesFn = undefined;
	['matches', 'webkitMatchesSelector', 'mozMatchesSelector', 'msMatchesSelector'].some(function (fn) {
	    if (typeof document.documentElement[fn] == 'function') {
	        matchesFn = fn;
	    }
	});

	function closest(ele, selector, checkSelf) {
	    if (ele && matchesFn) {
	        // traverse parents
	        ele = checkSelf ? ele : ele.parentElement;
	        while (ele !== null) {
	            if (ele[matchesFn](selector)) {
	                return ele;
	            }
	            ele = ele.parentElement;
	        }
	    }
	    return null;
	}

	function removeElement(ele) {
	    ele && ele.parentNode && ele.parentNode.removeChild(ele);
	}

	/**
	 * Get the element offsetWidth and offsetHeight. Values are cached
	 * to reduce DOM reads. Cache is cleared on a window resize.
	 * @param {TODO} ele  TODO
	 */

	function getDimensions(ion, ele) {
	    if (!ion._dimId) {
	        ion._dimId = ++dimensionIds;
	        if (ion._dimId % 1000 === 0) {
	            // periodically flush dimensions
	            flushDimensionCache();
	        }
	    }
	    var dimensions = dimensionCache[ion._dimId];
	    if (!dimensions) {
	        var _ele = ion.getNativeElement();
	        // make sure we got good values before caching
	        if (_ele.offsetWidth && _ele.offsetHeight) {
	            dimensions = dimensionCache[ion._dimId] = {
	                width: _ele.offsetWidth,
	                height: _ele.offsetHeight,
	                left: _ele.offsetLeft,
	                top: _ele.offsetTop
	            };
	        } else {
	            // do not cache bad values
	            return { width: 0, height: 0, left: 0, top: 0 };
	        }
	    }
	    return dimensions;
	}

	function windowDimensions() {
	    if (!dimensionCache.win) {
	        // make sure we got good values before caching
	        if (window.innerWidth && window.innerHeight) {
	            dimensionCache.win = {
	                width: window.innerWidth,
	                height: window.innerHeight
	            };
	        } else {
	            // do not cache bad values
	            return { width: 0, height: 0 };
	        }
	    }
	    return dimensionCache.win;
	}

	function flushDimensionCache() {
	    dimensionCache = {};
	}

	var dimensionCache = {};
	var dimensionIds = 0;
	function isStaticPositioned(element) {
	    return (element.style.position || 'static') === 'static';
	}
	/**
	 * returns the closest, non-statically positioned parentOffset of a given element
	 * @param element
	 */

	function parentOffsetEl(element) {
	    var offsetParent = element.offsetParent || document;
	    while (offsetParent && offsetParent !== document && isStaticPositioned(offsetParent)) {
	        offsetParent = offsetParent.offsetParent;
	    }
	    return offsetParent || document;
	}

	;
	/**
	 * Get the current coordinates of the element, relative to the offset parent.
	 * Read-only equivalent of [jQuery's position function](http://api.jquery.com/position/).
	 * @param {element} element The element to get the position of.
	 * @returns {object} Returns an object containing the properties top, left, width and height.
	 */

	function position(element) {
	    var elBCR = offset(element);
	    var offsetParentBCR = { top: 0, left: 0 };
	    var offsetParentEl = parentOffsetEl(element);
	    if (offsetParentEl != document) {
	        offsetParentBCR = offset(offsetParentEl);
	        offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;
	        offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;
	    }
	    var boundingClientRect = element.getBoundingClientRect();
	    return {
	        width: boundingClientRect.width || element.offsetWidth,
	        height: boundingClientRect.height || element.offsetHeight,
	        top: elBCR.top - offsetParentBCR.top,
	        left: elBCR.left - offsetParentBCR.left
	    };
	}

	/**
	* Get the current coordinates of the element, relative to the document.
	* Read-only equivalent of [jQuery's offset function](http://api.jquery.com/offset/).
	* @param {element} element The element to get the offset of.
	* @returns {object} Returns an object containing the properties top, left, width and height.
	*/

	function offset(element) {
	    var boundingClientRect = element.getBoundingClientRect();
	    return {
	        width: boundingClientRect.width || element.offsetWidth,
	        height: boundingClientRect.height || element.offsetHeight,
	        top: boundingClientRect.top + (window.pageYOffset || document.documentElement.scrollTop),
	        left: boundingClientRect.left + (window.pageXOffset || document.documentElement.scrollLeft)
	    };
	}

/***/ },
/* 436 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});
	var CSS_CLICK_BLOCK = 'click-block-active';
	var DEFAULT_EXPIRE = 330;
	var cbEle = undefined,
	    fallbackTimerId = undefined;
	var isShowing = false;
	function disableInput(ev) {
	    ev.preventDefault();
	    ev.stopPropagation();
	}
	function show(expire) {
	    clearTimeout(fallbackTimerId);
	    fallbackTimerId = setTimeout(hide, expire || DEFAULT_EXPIRE);
	    if (!isShowing) {
	        isShowing = true;
	        if (cbEle) {
	            cbEle.classList.add(CSS_CLICK_BLOCK);
	        } else {
	            cbEle = document.createElement('div');
	            cbEle.className = 'click-block ' + CSS_CLICK_BLOCK;
	            document.body.appendChild(cbEle);
	        }
	        cbEle.addEventListener('touchmove', disableInput);
	    }
	}
	function hide() {
	    clearTimeout(fallbackTimerId);
	    if (isShowing) {
	        cbEle.classList.remove(CSS_CLICK_BLOCK);
	        isShowing = false;
	        cbEle.removeEventListener('touchmove', disableInput);
	    }
	}
	var ClickBlock = function ClickBlock(shouldShow, expire) {
	    (shouldShow ? show : hide)(expire);
	};
	exports.ClickBlock = ClickBlock;

/***/ },
/* 437 */
/***/ function(module, exports, __webpack_require__) {

	/**
	* @ngdoc service
	* @name Config
	* @module ionic
	* @description
	* Config allows you to set the modes of your components
	*/
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _platformPlatform = __webpack_require__(438);

	var _utilUtil = __webpack_require__(439);

	/**
	 * Config lets you change multiple or a single value in an apps mode configuration. Things such as tab placement, icon changes, and view animations can be set here.
	 *
	 * ```ts
	 * @App({
	 *   template: `<ion-nav [root]="root"></ion-nav>`
	 *   config: {
	 *     backButtonText: 'Go Back',
	 *     iconMode: 'ios',
	 *     modalEnter: 'modal-slide-in',
	 *     modalLeave: 'modal-slide-out',
	 *     tabbarPlacement: 'bottom',
	 *     pageTransition: 'ios',
	 *   }
	 * })
	 * ```
	 *
	 * Config can be overwritting at multiple levels, allowing deeper configuration. Taking the example from earlier, we can override any setting we want based on a platform.
	 * ```ts
	 * @App({
	 *   template: `<ion-nav [root]="root"></ion-nav>`
	 *   config: {
	 *     tabbarPlacement: 'bottom',
	 *     platforms: {
	 *      ios: {
	 *        tabbarPlacement: 'top',
	 *      }
	 *     }
	 *   }
	 * })
	 * ```
	 *
	 * We could also configure these values at a component level. Take `tabbarPlacement`, we can configure this as a property on our `ion-tabs`.
	 *
	 * ```html
	 * <ion-tabs tabbar-placement="top">
	 *    <ion-tab tab-title="Dash" tab-icon="pulse" [root]="tabRoot"></ion-tab>
	 *  </ion-tabs>
	 * ```
	 *
	 * The property will override anything else set in the apps.
	 *
	 * The last way we could configure is through URL query strings. This is useful for testing while in the browser.
	 * Simply add `?ionic<PROPERTYNAME>=<value>` to the url.
	 *
	 * ```
	 * http://localhost:8100/?ionicTabbarPlacement=bottom
	 * ```
	**/

	var Config = (function () {
	    function Config(config) {
	        _classCallCheck(this, Config);

	        this._s = config && (0, _utilUtil.isObject)(config) && !(0, _utilUtil.isArray)(config) ? config : {};
	        this._c = {}; // cached values
	    }

	    /**
	     * For setting and getting multiple config values
	     */
	    /**
	     * @private
	     * @name settings()
	     * @description
	     */

	    _createClass(Config, [{
	        key: 'settings',
	        value: function settings() {
	            var args = arguments;
	            switch (args.length) {
	                case 0:
	                    return this._s;
	                case 1:
	                    // settings({...})
	                    this._s = args[0];
	                    this._c = {}; // clear cache
	                    break;
	                case 2:
	                    // settings('ios', {...})
	                    this._s.platforms = this._s.platforms || {};
	                    this._s.platforms[args[0]] = args[1];
	                    this._c = {}; // clear cache
	                    break;
	            }
	            return this;
	        }

	        /**
	        * For setting a single config values
	        */
	        /**
	         * @private
	         * @name set()
	         * @description
	         */
	    }, {
	        key: 'set',
	        value: function set() {
	            var args = arguments;
	            var arg0 = args[0];
	            var arg1 = args[1];
	            switch (args.length) {
	                case 2:
	                    // set('key', 'value') = set key/value pair
	                    // arg1 = value
	                    this._s[arg0] = arg1;
	                    delete this._c[arg0]; // clear cache
	                    break;
	                case 3:
	                    // setting('ios', 'key', 'value') = set key/value pair for platform
	                    // arg0 = platform
	                    // arg1 = key
	                    // arg2 = value
	                    this._s.platforms = this._s.platforms || {};
	                    this._s.platforms[arg0] = this._s.platforms[arg0] || {};
	                    this._s.platforms[arg0][arg1] = args[2];
	                    delete this._c[arg1]; // clear cache
	                    break;
	            }
	            return this;
	        }

	        /**
	         * For getting a single config values
	         */
	        /**
	         * @private
	         * @name get()
	         * @description
	         */
	    }, {
	        key: 'get',
	        value: function get(key) {
	            if (!(0, _utilUtil.isDefined)(this._c[key])) {
	                // if the value was already set this will all be skipped
	                // if there was no user config then it'll check each of
	                // the user config's platforms, which already contains
	                // settings from default platform configs
	                var userPlatformValue = undefined;
	                var userDefaultValue = this._s[key];
	                var userPlatformModeValue = undefined;
	                var userDefaultModeValue = undefined;
	                var platformValue = undefined;
	                var platformModeValue = undefined;
	                var configObj = null;
	                if (this._platform) {
	                    var queryStringValue = this._platform.query('ionic' + key.toLowerCase());
	                    if ((0, _utilUtil.isDefined)(queryStringValue)) {
	                        return this._c[key] = queryStringValue === 'true' ? true : queryStringValue === 'false' ? false : queryStringValue;
	                    }
	                    // check the platform settings object for this value
	                    // loop though each of the active platforms
	                    // array of active platforms, which also knows the hierarchy,
	                    // with the last one the most important
	                    var activePlatformKeys = this._platform.platforms();
	                    // loop through all of the active platforms we're on
	                    for (var i = 0, l = activePlatformKeys.length; i < l; i++) {
	                        // get user defined platform values
	                        if (this._s.platforms) {
	                            configObj = this._s.platforms[activePlatformKeys[i]];
	                            if (configObj) {
	                                if ((0, _utilUtil.isDefined)(configObj[key])) {
	                                    userPlatformValue = configObj[key];
	                                }
	                                configObj = Config.getModeConfig(configObj.mode);
	                                if (configObj && (0, _utilUtil.isDefined)(configObj[key])) {
	                                    userPlatformModeValue = configObj[key];
	                                }
	                            }
	                        }
	                        // get default platform's setting
	                        configObj = _platformPlatform.Platform.get(activePlatformKeys[i]);
	                        if (configObj && configObj.settings) {
	                            if ((0, _utilUtil.isDefined)(configObj.settings[key])) {
	                                // found a setting for this platform
	                                platformValue = configObj.settings[key];
	                            }
	                            configObj = Config.getModeConfig(configObj.settings.mode);
	                            if (configObj && (0, _utilUtil.isDefined)(configObj[key])) {
	                                // found setting for this platform's mode
	                                platformModeValue = configObj[key];
	                            }
	                        }
	                    }
	                }
	                configObj = Config.getModeConfig(this._s.mode);
	                if (configObj && (0, _utilUtil.isDefined)(configObj[key])) {
	                    userDefaultModeValue = configObj[key];
	                }
	                // cache the value
	                this._c[key] = (0, _utilUtil.isDefined)(userPlatformValue) ? userPlatformValue : (0, _utilUtil.isDefined)(userDefaultValue) ? userDefaultValue : (0, _utilUtil.isDefined)(userPlatformModeValue) ? userPlatformModeValue : (0, _utilUtil.isDefined)(userDefaultModeValue) ? userDefaultModeValue : (0, _utilUtil.isDefined)(platformValue) ? platformValue : (0, _utilUtil.isDefined)(platformModeValue) ? platformModeValue : null;
	            }
	            // return key's value
	            // either it came directly from the user config
	            // or it was from the users platform configs
	            // or it was from the default platform configs
	            // in that order
	            if ((0, _utilUtil.isFunction)(this._c[key])) {
	                return this._c[key](this._platform);
	            }
	            return this._c[key];
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: 'setPlatform',
	        value: function setPlatform(platform) {
	            this._platform = platform;
	        }
	    }], [{
	        key: 'setModeConfig',
	        value: function setModeConfig(mode, config) {
	            modeConfigs[mode] = config;
	        }
	    }, {
	        key: 'getModeConfig',
	        value: function getModeConfig(mode) {
	            return modeConfigs[mode] || null;
	        }
	    }]);

	    return Config;
	})();

	exports.Config = Config;

	var modeConfigs = {};

/***/ },
/* 438 */
/***/ function(module, exports, __webpack_require__) {

	/**
	+* @ngdoc service
	+* @name platform
	+* @module ionic
	+* @description
	+* Platform returns the availble information about your current platform
	+*/
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _utilUtil = __webpack_require__(439);

	var util = _interopRequireWildcard(_utilUtil);

	var _utilDom = __webpack_require__(435);

	var dom = _interopRequireWildcard(_utilDom);

	/**
	 * TODO
	 */

	var Platform = (function () {
	    function Platform() {
	        var _this = this;

	        var platforms = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

	        _classCallCheck(this, Platform);

	        this._platforms = platforms;
	        this._versions = {};
	        this._onResizes = [];
	        this._readyPromise = new Promise(function (res) {
	            _this._readyResolve = res;
	        });
	    }

	    // Methods
	    // **********************************************
	    /**
	     * @param {string} platformName
	     * @returns {bool} returns true/false based on platform you place
	     * @description
	     * Depending on the platform name, isPlatform will return true or flase
	     *
	     * ```
	     * import {Platform} 'ionic/ionic';
	     * export MyClass {
	     *    constructor(platform: Platform){
	     *      this.platform = platform;
	     *      if(this.platform.is('ios'){
	     *        // what ever you need to do for
	     *        // if the platfomr is ios
	     *      }
	     *    }
	     * }
	     * ```
	     */

	    _createClass(Platform, [{
	        key: 'is',
	        value: function is(platformName) {
	            return this._platforms.indexOf(platformName) > -1;
	        }

	        /**
	         * @returns {array} the array of platforms
	         * @description
	         * Depending on what device you are on, `platforms` can return multiple values.
	         * Each possible value is a hierarchy of platforms. For example, on an iPhone,
	         * it would return mobile, ios, and iphone.
	         *
	         * ```
	         * import {Platform} 'ionic/ionic';
	         * export MyClass {
	         *    constructor(platform: Platform){
	         *      this.platform = platform;
	         *      console.log(this.platform.platforms());
	         *      // This will return an array of all the availble platforms
	         *      // From if your on mobile, to mobile os, and device name
	         *    }
	         * }
	         * ```
	         */
	    }, {
	        key: 'platforms',
	        value: function platforms() {
	            // get the array of active platforms, which also knows the hierarchy,
	            // with the last one the most important
	            return this._platforms;
	        }

	        /**
	         * @param {string} optional platformName
	         * @returns {object} An object with various platform info
	         * - `{object=} `cordova`
	         * - `{object=}` `platformOS` {str: "9.1", num: 9.1, major: 9, minor: 1}
	         * - `{object=} `deviceName` Returns the name of the device
	         * - `{object=}` `device platform` R
	         * @description
	         * Returns an object conta
	         *
	         * ```
	         * import {Platform} 'ionic/ionic';
	         * export MyClass {
	         *    constructor(platform: Platform){
	         *      this.platform = platform;
	         *      console.log(this.platform.versions());
	         *      // or pass in a platform name
	         *      console.log(this.platform.versions('ios'));
	         *    }
	         * }
	         * ```
	         *
	         */
	    }, {
	        key: 'versions',
	        value: function versions(platformName) {
	            if (arguments.length) {
	                // get a specific platform's version
	                return this._versions[platformName];
	            }
	            // get all the platforms that have a valid parsed version
	            return this._versions;
	        }
	    }, {
	        key: 'version',
	        value: function version() {
	            for (var platformName in this._versions) {
	                if (this._versions[platformName]) {
	                    return this._versions[platformName];
	                }
	            }
	            return {};
	        }

	        /**
	         * @returns {promise}
	         * @description
	         * Returns a promise when the platform is ready and native functionality can be called
	         *
	         * ```
	         * import {Platform} 'ionic/ionic';
	         * export MyClass {
	         *    constructor(platform: Platform){
	         *      this.platform = platform;
	         *      this.platform.ready().then(() => {
	         *        console.log('Platform ready');
	         *        // The platform is now ready, execute any native code you want
	         *       });
	         *    }
	         * }
	         * ```
	         */
	    }, {
	        key: 'ready',
	        value: function ready() {
	            return this._readyPromise;
	        }

	        /**
	         * @private
	         * TODO
	         * @param {TODO} config  TODO
	         * @returns {TODO} TODO
	         */
	    }, {
	        key: 'prepareReady',
	        value: function prepareReady(config) {
	            var self = this;
	            function resolve() {
	                self._readyResolve(config);
	            }
	            if (this._engineReady) {
	                // the engine provide a ready promise, use this instead
	                this._engineReady(resolve);
	            } else {
	                // there is no custom ready method from the engine
	                // use the default dom ready
	                dom.ready(resolve);
	            }
	        }

	        // Methods meant to be overridden by the engine
	        // **********************************************
	        // Provided NOOP methods so they do not error when
	        // called by engines (the browser) doesn't provide them
	    }, {
	        key: 'on',
	        value: function on() {}
	    }, {
	        key: 'onHardwareBackButton',
	        value: function onHardwareBackButton() {}
	    }, {
	        key: 'registerBackButtonAction',
	        value: function registerBackButtonAction() {}
	    }, {
	        key: 'exitApp',
	        value: function exitApp() {}
	    }, {
	        key: 'fullScreen',
	        value: function fullScreen() {}
	    }, {
	        key: 'showStatusBar',
	        value: function showStatusBar() {}

	        // Getter/Setter Methods
	        // **********************************************
	    }, {
	        key: 'url',
	        value: function url(val) {
	            if (arguments.length) {
	                this._url = val;
	                this._qs = util.getQuerystring(val);
	            }
	            return this._url;
	        }
	    }, {
	        key: 'query',
	        value: function query(key) {
	            return (this._qs || {})[key];
	        }
	    }, {
	        key: 'userAgent',
	        value: function userAgent(val) {
	            if (arguments.length) {
	                this._ua = val;
	            }
	            return this._ua || '';
	        }
	    }, {
	        key: 'navigatorPlatform',
	        value: function navigatorPlatform(val) {
	            if (arguments.length) {
	                this._bPlt = val;
	            }
	            return this._bPlt || '';
	        }
	    }, {
	        key: 'width',
	        value: function width() {
	            return dom.windowDimensions().width;
	        }
	    }, {
	        key: 'height',
	        value: function height() {
	            return dom.windowDimensions().height;
	        }
	    }, {
	        key: 'isPortrait',
	        value: function isPortrait() {
	            return this.width() < this.height();
	        }
	    }, {
	        key: 'isLandscape',
	        value: function isLandscape() {
	            return !this.isPortrait();
	        }
	    }, {
	        key: 'windowResize',
	        value: function windowResize() {
	            var self = this;
	            clearTimeout(self._resizeTimer);
	            self._resizeTimer = setTimeout(function () {
	                dom.flushDimensionCache();
	                for (var i = 0; i < self._onResizes.length; i++) {
	                    try {
	                        self._onResizes[i]();
	                    } catch (e) {
	                        console.error(e);
	                    }
	                }
	            }, 500);
	        }
	    }, {
	        key: 'onResize',
	        value: function onResize(cb) {
	            this._onResizes.push(cb);
	        }

	        // Platform Registry
	        // **********************************************
	        /**
	         * TODO
	         * @param {TODO} platformConfig  TODO
	         */
	    }, {
	        key: 'testQuery',

	        /**
	         * TODO
	         * @param {TODO} queryValue  TODO
	         * @returns {boolean} TODO
	         */
	        value: function testQuery(queryValue, queryTestValue) {
	            var valueSplit = queryValue.toLowerCase().split(';');
	            return valueSplit.indexOf(queryTestValue) > -1;
	        }

	        /**
	         * TODO
	         * @param {TODO} userAgentExpression  TODO
	         * @returns {boolean} TODO
	         */
	    }, {
	        key: 'testUserAgent',
	        value: function testUserAgent(userAgentExpression) {
	            var rgx = new RegExp(userAgentExpression, 'i');
	            return rgx.test(this._ua || '');
	        }

	        /**
	         * TODO
	         * @param {TODO} userAgentExpression  TODO
	         * @returns {Object} TODO
	         */
	    }, {
	        key: 'matchUserAgentVersion',
	        value: function matchUserAgentVersion(userAgentExpression) {
	            if (this._ua && userAgentExpression) {
	                var val = this._ua.match(userAgentExpression);
	                if (val) {
	                    return {
	                        major: val[1],
	                        minor: val[2]
	                    };
	                }
	            }
	        }

	        /**
	         * TODO
	         * @param {TODO} queryValue  TODO
	         * @param {TODO} userAgentExpression  TODO
	         * @returns {boolean} TODO
	         */
	    }, {
	        key: 'isPlatform',
	        value: function isPlatform(queryTestValue, userAgentExpression) {
	            if (!userAgentExpression) {
	                userAgentExpression = queryTestValue;
	            }
	            var queryValue = this.query('ionicplatform');
	            if (queryValue) {
	                return this.testQuery(queryValue, queryTestValue);
	            }
	            return this.testUserAgent(userAgentExpression);
	        }

	        /**
	         * TODO
	         * @param {TODO} config  TODO
	         */
	    }, {
	        key: 'load',
	        value: function load(platformOverride) {
	            var rootPlatformNode = null;
	            var engineNode = null;
	            var self = this;
	            this.platformOverride = platformOverride;
	            // figure out the most specific platform and active engine
	            var tmpPlatform = null;
	            for (var platformName in platformRegistry) {
	                tmpPlatform = this.matchPlatform(platformName);
	                if (tmpPlatform) {
	                    // we found a platform match!
	                    // check if its more specific than the one we already have
	                    if (tmpPlatform.isEngine) {
	                        // because it matched then this should be the active engine
	                        // you cannot have more than one active engine
	                        engineNode = tmpPlatform;
	                    } else if (!rootPlatformNode || tmpPlatform.depth > rootPlatformNode.depth) {
	                        // only find the root node for platforms that are not engines
	                        // set this node as the root since we either don't already
	                        // have one, or this one is more specific that the current one
	                        rootPlatformNode = tmpPlatform;
	                    }
	                }
	            }
	            if (!rootPlatformNode) {
	                rootPlatformNode = new PlatformNode(platformDefault);
	            }
	            // build a Platform instance filled with the
	            // hierarchy of active platforms and settings
	            if (rootPlatformNode) {
	                // check if we found an engine node (cordova/node-webkit/etc)
	                if (engineNode) {
	                    // add the engine to the first in the platform hierarchy
	                    // the original rootPlatformNode now becomes a child
	                    // of the engineNode, which is not the new root
	                    engineNode.child(rootPlatformNode);
	                    rootPlatformNode.parent(engineNode);
	                    rootPlatformNode = engineNode;
	                    // add any events which the engine would provide
	                    // for example, Cordova provides its own ready event
	                    var engineMethods = engineNode.methods();
	                    engineMethods._engineReady = engineMethods.ready;
	                    delete engineMethods.ready;
	                    util.extend(this, engineMethods);
	                }
	                var platformNode = rootPlatformNode;
	                while (platformNode) {
	                    insertSuperset(platformNode);
	                    platformNode = platformNode.child();
	                }
	                // make sure the root noot is actually the root
	                // incase a node was inserted before the root
	                platformNode = rootPlatformNode.parent();
	                while (platformNode) {
	                    rootPlatformNode = platformNode;
	                    platformNode = platformNode.parent();
	                }
	                platformNode = rootPlatformNode;
	                while (platformNode) {
	                    // set the array of active platforms with
	                    // the last one in the array the most important
	                    this._platforms.push(platformNode.name());
	                    // get the platforms version if a version parser was provided
	                    this._versions[platformNode.name()] = platformNode.version(this);
	                    // go to the next platform child
	                    platformNode = platformNode.child();
	                }
	            }
	        }

	        /**
	         * TODO
	         * @param {TODO} platformName  TODO
	         * @returns {TODO} TODO
	         */
	    }, {
	        key: 'matchPlatform',
	        value: function matchPlatform(platformName) {
	            // build a PlatformNode and assign config data to it
	            // use it's getRoot method to build up its hierarchy
	            // depending on which platforms match
	            var platformNode = new PlatformNode(platformName);
	            var rootNode = platformNode.getRoot(this, 0);
	            if (rootNode) {
	                rootNode.depth = 0;
	                var childPlatform = rootNode.child();
	                while (childPlatform) {
	                    rootNode.depth++;
	                    childPlatform = childPlatform.child();
	                }
	            }
	            return rootNode;
	        }
	    }], [{
	        key: 'register',
	        value: function register(platformConfig) {
	            platformRegistry[platformConfig.name] = platformConfig;
	        }
	    }, {
	        key: 'registry',
	        value: function registry() {
	            return platformRegistry;
	        }

	        /**
	         * TODO
	         * @param {TODO} platformName  TODO
	         * @returns {string} TODO
	         */
	    }, {
	        key: 'get',
	        value: function get(platformName) {
	            return platformRegistry[platformName] || {};
	        }
	    }, {
	        key: 'setDefault',
	        value: function setDefault(platformName) {
	            platformDefault = platformName;
	        }
	    }]);

	    return Platform;
	})();

	exports.Platform = Platform;

	function insertSuperset(platformNode) {
	    var supersetPlaformName = platformNode.superset();
	    if (supersetPlaformName) {
	        // add a platform in between two exist platforms
	        // so we can build the correct hierarchy of active platforms
	        var supersetPlatform = new PlatformNode(supersetPlaformName);
	        supersetPlatform.parent(platformNode.parent());
	        supersetPlatform.child(platformNode);
	        if (supersetPlatform.parent()) {
	            supersetPlatform.parent().child(supersetPlatform);
	        }
	        platformNode.parent(supersetPlatform);
	    }
	}

	var PlatformNode = (function () {
	    function PlatformNode(platformName) {
	        _classCallCheck(this, PlatformNode);

	        this.c = Platform.get(platformName);
	        this.isEngine = this.c.isEngine;
	    }

	    _createClass(PlatformNode, [{
	        key: 'name',
	        value: function name() {
	            return this.c.name;
	        }
	    }, {
	        key: 'settings',
	        value: function settings() {
	            return this.c.settings || {};
	        }
	    }, {
	        key: 'superset',
	        value: function superset() {
	            return this.c.superset;
	        }
	    }, {
	        key: 'methods',
	        value: function methods() {
	            return this.c.methods || {};
	        }
	    }, {
	        key: 'parent',
	        value: function parent(val) {
	            if (arguments.length) {
	                this._parent = val;
	            }
	            return this._parent;
	        }
	    }, {
	        key: 'child',
	        value: function child(val) {
	            if (arguments.length) {
	                this._child = val;
	            }
	            return this._child;
	        }
	    }, {
	        key: 'isMatch',
	        value: function isMatch(p) {
	            if (p.platformOverride && !this.isEngine) {
	                return p.platformOverride === this.c.name;
	            } else if (!this.c.isMatch) {
	                return false;
	            }
	            return this.c.isMatch(p);
	        }
	    }, {
	        key: 'version',
	        value: function version(p) {
	            if (this.c.versionParser) {
	                var v = this.c.versionParser(p);
	                if (v) {
	                    var str = v.major + '.' + v.minor;
	                    return {
	                        str: str,
	                        num: parseFloat(str),
	                        major: parseInt(v.major, 10),
	                        minor: parseInt(v.minor, 10)
	                    };
	                }
	            }
	        }
	    }, {
	        key: 'getRoot',
	        value: function getRoot(p) {
	            if (this.isMatch(p)) {
	                var parents = this.getSubsetParents(this.name());
	                if (!parents.length) {
	                    return this;
	                }
	                var platform = null;
	                var rootPlatform = null;
	                for (var i = 0; i < parents.length; i++) {
	                    platform = new PlatformNode(parents[i]);
	                    platform.child(this);
	                    rootPlatform = platform.getRoot(p);
	                    if (rootPlatform) {
	                        this.parent(platform);
	                        return rootPlatform;
	                    }
	                }
	            }
	            return null;
	        }
	    }, {
	        key: 'getSubsetParents',
	        value: function getSubsetParents(subsetPlatformName) {
	            var platformRegistry = Platform.registry();
	            var parentPlatformNames = [];
	            var platform = null;
	            for (var platformName in platformRegistry) {
	                platform = platformRegistry[platformName];
	                if (platform.subsets && platform.subsets.indexOf(subsetPlatformName) > -1) {
	                    parentPlatformNames.push(platformName);
	                }
	            }
	            return parentPlatformNames;
	        }
	    }]);

	    return PlatformNode;
	})();

	var platformRegistry = {};
	var platformDefault = null;

/***/ },
/* 439 */
/***/ function(module, exports) {

	// Simple noop function
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	exports.noop = noop;
	exports.clamp = clamp;
	exports.extend = extend;
	exports.merge = merge;
	exports.debounce = debounce;
	exports.defaults = defaults;
	exports.pascalCaseToDashCase = pascalCaseToDashCase;
	exports.nextUid = nextUid;
	exports.getQuerystring = getQuerystring;
	exports.throttle = throttle;

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function noop() {}

	;
	/**
	 * Given a min and max, restrict the given number
	 * to the range.
	 * @param min the minimum
	 * @param n the value
	 * @param max the maximum
	 */

	function clamp(min, n, max) {
	    return Math.max(min, Math.min(n, max));
	}

	/**
	 * Extend the destination with an arbitrary number of other objects.
	 * @param dst the destination
	 * @param ... the param objects
	 */

	function extend(dst) {
	    return _baseExtend(dst, [].slice.call(arguments, 1), false);
	}

	/**
	 * Do a deep extend (merge).
	 * @param dst the destination
	 * @param ... the param objects
	 */

	function merge(dst) {
	    return _baseExtend(dst, [].slice.call(arguments, 1), true);
	}

	function _baseExtend(dst, objs, deep) {
	    for (var i = 0, ii = objs.length; i < ii; ++i) {
	        var obj = objs[i];
	        if (!obj || !isObject(obj) && !isFunction(obj)) continue;
	        var keys = Object.keys(obj);
	        for (var j = 0, jj = keys.length; j < jj; j++) {
	            var key = keys[j];
	            var src = obj[key];
	            if (deep && isObject(src)) {
	                if (!isObject(dst[key])) dst[key] = isArray(src) ? [] : {};
	                _baseExtend(dst[key], [src], true);
	            } else {
	                dst[key] = src;
	            }
	        }
	    }
	    return dst;
	}

	function debounce(func, wait, immediate) {
	    var timeout, args, context, timestamp, result;
	    return function () {
	        context = this;
	        args = arguments;
	        timestamp = new Date();
	        var later = function later() {
	            var last = new Date() - timestamp;
	            if (last < wait) {
	                timeout = setTimeout(later, wait - last);
	            } else {
	                timeout = null;
	                if (!immediate) result = func.apply(context, args);
	            }
	        };
	        var callNow = immediate && !timeout;
	        if (!timeout) {
	            timeout = setTimeout(later, wait);
	        }
	        if (callNow) result = func.apply(context, args);
	        return result;
	    };
	}

	/**
	 * Apply default arguments if they don't exist in
	 * the first object.
	 * @param the destination to apply defaults to.
	 */

	function defaults(dest) {
	    for (var i = arguments.length - 1; i >= 1; i--) {
	        var source = arguments[i] || {};
	        for (var key in source) {
	            if (source.hasOwnProperty(key) && !dest.hasOwnProperty(key)) {
	                dest[key] = source[key];
	            }
	        }
	    }
	    return dest;
	}

	var isBoolean = function isBoolean(val) {
	    return typeof val === 'boolean';
	};
	exports.isBoolean = isBoolean;
	var isString = function isString(val) {
	    return typeof val === 'string';
	};
	exports.isString = isString;
	var isNumber = function isNumber(val) {
	    return typeof val === 'number';
	};
	exports.isNumber = isNumber;
	var isFunction = function isFunction(val) {
	    return typeof val === 'function';
	};
	exports.isFunction = isFunction;
	var isDefined = function isDefined(val) {
	    return typeof val !== 'undefined';
	};
	exports.isDefined = isDefined;
	var isUndefined = function isUndefined(val) {
	    return typeof val === 'undefined';
	};
	exports.isUndefined = isUndefined;
	var isBlank = function isBlank(val) {
	    return val === undefined || val === null;
	};
	exports.isBlank = isBlank;
	var isObject = function isObject(val) {
	    return typeof val === 'object';
	};
	exports.isObject = isObject;
	var isArray = Array.isArray;
	exports.isArray = isArray;
	var isTrueProperty = function isTrueProperty(val) {
	    return typeof val !== 'undefined' && val !== "false";
	};
	exports.isTrueProperty = isTrueProperty;
	/**
	 * Convert a string in the format thisIsAString to a slug format this-is-a-string
	 */

	function pascalCaseToDashCase() {
	    var str = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

	    return str.charAt(0).toLowerCase() + str.substring(1).replace(/[A-Z]/g, function (match) {
	        return '-' + match.toLowerCase();
	    });
	}

	var uid = 0;

	function nextUid() {
	    return ++uid;
	}

	/**
	 * A simple logger class.
	 */

	var Log = (function () {
	    function Log() {
	        _classCallCheck(this, Log);
	    }

	    _createClass(Log, null, [{
	        key: 'log',
	        value: function log() {
	            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	                args[_key] = arguments[_key];
	            }

	            console.log.apply(console, args);
	        }
	    }, {
	        key: 'info',
	        value: function info() {
	            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                args[_key2] = arguments[_key2];
	            }

	            console.info.apply(console, args);
	        }
	    }, {
	        key: 'warn',
	        value: function warn() {
	            for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	                args[_key3] = arguments[_key3];
	            }

	            console.warn.apply(console, args);
	        }
	    }, {
	        key: 'error',
	        value: function error() {
	            for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	                args[_key4] = arguments[_key4];
	            }

	            console.error.apply(console, args);
	        }
	    }]);

	    return Log;
	})();

	exports.Log = Log;
	var array = {
	    find: function find(arr, cb) {
	        for (var i = 0, ii = arr.length; i < ii; i++) {
	            if (cb(arr[i], i)) return arr[i];
	        }
	    },
	    remove: function remove(arr, itemOrIndex) {
	        var index = -1;
	        if (isNumber(itemOrIndex)) {
	            index = itemOrIndex;
	        } else {
	            index = arr.indexOf(itemOrIndex);
	        }
	        if (index < 0) {
	            return false;
	        }
	        arr.splice(index, 1);
	        return true;
	    }
	};
	exports.array = array;
	/**
	 * Grab the query string param value for the given key.
	 * @param key the key to look for
	 */

	function getQuerystring(url, key) {
	    var queryParams = {};
	    if (url) {
	        var startIndex = url.indexOf('?');
	        if (startIndex !== -1) {
	            var queries = url.slice(startIndex + 1).split('&');
	            queries.forEach(function (param) {
	                var split = param.split('=');
	                queryParams[split[0].toLowerCase()] = split[1].split('#')[0];
	            });
	        }
	        if (key) {
	            return queryParams[key] || '';
	        }
	    }
	    return queryParams;
	}

	/**
	 * Throttle the given fun, only allowing it to be
	 * called at most every `wait` ms.
	 */

	function throttle(func, wait, options) {
	    var context, args, result;
	    var timeout = null;
	    var previous = 0;
	    options || (options = {});
	    var later = function later() {
	        previous = options.leading === false ? 0 : Date.now();
	        timeout = null;
	        result = func.apply(context, args);
	    };
	    return function () {
	        var now = Date.now();
	        if (!previous && options.leading === false) previous = now;
	        var remaining = wait - (now - previous);
	        context = this;
	        args = arguments;
	        if (remaining <= 0) {
	            clearTimeout(timeout);
	            timeout = null;
	            previous = now;
	            result = func.apply(context, args);
	        } else if (!timeout && options.trailing !== false) {
	            timeout = setTimeout(later, remaining);
	        }
	        return result;
	    };
	}

/***/ },
/* 440 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _angular2Angular2 = __webpack_require__(45);

	var _appApp = __webpack_require__(434);

	var _configConfig = __webpack_require__(437);

	var _animationsAnimation = __webpack_require__(441);

	var _ionicUtil = __webpack_require__(442);

	var util = _interopRequireWildcard(_ionicUtil);

	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var OverlayController = (function () {
	    function OverlayController(app, config, zone, renderer) {
	        _classCallCheck(this, OverlayController);

	        this.app = app;
	        this.config = config;
	        this.zone = zone;
	        this.renderer = renderer;
	        this.refs = [];
	    }

	    _createClass(OverlayController, [{
	        key: "open",
	        value: function open(overlayType, componentType) {
	            var _this = this;

	            var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	            if (!this.anchor) {
	                console.error('<ion-overlay></ion-overlay> required in root component template to use: ' + overlayType);
	                return Promise.reject();
	            }
	            var resolve = undefined,
	                reject = undefined;
	            var promise = new Promise(function (res, rej) {
	                resolve = res;reject = rej;
	            });
	            try {
	                this.anchor.append(componentType).then(function (ref) {
	                    var instance = ref && ref.instance;
	                    if (!instance) {
	                        return reject();
	                    }
	                    instance._zIndex = ROOT_Z_INDEX;
	                    for (var i = 0; i < _this.refs.length; i++) {
	                        if (_this.refs[i].instance._zIndex >= ref.instance._zIndex) {
	                            ref.instance._zIndex = _this.refs[i].instance._zIndex + 1;
	                        }
	                    }
	                    _this.renderer.setElementAttribute(ref.location, 'role', 'dialog');
	                    util.extend(instance, opts);
	                    ref._type = overlayType;
	                    ref._handle = opts.handle || overlayType + ref._z;
	                    _this.add(ref);
	                    instance.close = function () {
	                        var closeOpts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	                        _this.close(ref, util.extend(opts, closeOpts));
	                    };
	                    instance.onPageLoaded && instance.onPageLoaded();
	                    instance.onPageWillEnter && instance.onPageWillEnter();
	                    var animation = _animationsAnimation.Animation.create(ref.location.nativeElement, opts.enterAnimation);
	                    if (_this.config.get('animate') === false) {
	                        animation.duration(0);
	                    }
	                    animation.before.addClass(overlayType);
	                    if (overlayType == 'modal') {
	                        animation.before.addClass('show-page');
	                    }
	                    _this.app.setEnabled(false, animation.duration());
	                    _this.app.setTransitioning(true, animation.duration());
	                    _this.zone.runOutsideAngular(function () {
	                        animation.play().then(function () {
	                            animation.dispose();
	                            _this.zone.run(function () {
	                                _this.app.setEnabled(true);
	                                _this.app.setTransitioning(false);
	                                instance.onPageDidEnter && instance.onPageDidEnter();
	                                resolve(instance);
	                            });
	                        });
	                    });
	                })["catch"](function (err) {
	                    console.error(err);
	                });
	            } catch (e) {
	                console.error(e);
	            }
	            return promise;
	        }
	    }, {
	        key: "close",
	        value: function close(ref, opts) {
	            var _this2 = this;

	            var resolve = undefined;
	            var promise = new Promise(function (res) {
	                resolve = res;
	            });
	            var instance = ref.instance;
	            instance.onPageWillLeave && instance.onPageWillLeave();
	            instance.onPageWillUnload && instance.onPageWillUnload();
	            var animation = _animationsAnimation.Animation.create(ref.location.nativeElement, opts.leaveAnimation);
	            if (this.config.get('animate') === false) {
	                animation.duration(0);
	            }
	            this.app.setEnabled(false, animation.duration());
	            this.app.setTransitioning(true, animation.duration());
	            this.zone.runOutsideAngular(function () {
	                animation.play().then(function () {
	                    animation.dispose();
	                    _this2.zone.run(function () {
	                        instance.onPageDidLeave && instance.onPageDidLeave();
	                        instance.onPageDidUnload && instance.onPageDidUnload();
	                        _this2.app.setEnabled(true);
	                        _this2.app.setTransitioning(false);
	                        _this2.remove(ref);
	                        resolve();
	                    });
	                });
	            });
	            return promise;
	        }
	    }, {
	        key: "add",
	        value: function add(ref) {
	            this.refs.push(ref);
	        }
	    }, {
	        key: "remove",
	        value: function remove(ref) {
	            util.array.remove(this.refs, ref);
	            ref.dispose && ref.dispose();
	        }
	    }, {
	        key: "getByType",
	        value: function getByType(overlayType) {
	            for (var i = this.refs.length - 1; i >= 0; i--) {
	                if (overlayType === this.refs[i]._type) {
	                    return this.refs[i].instance;
	                }
	            }
	            return null;
	        }
	    }, {
	        key: "getByHandle",
	        value: function getByHandle(handle, overlayType) {
	            for (var i = this.refs.length - 1; i >= 0; i--) {
	                if (handle === this.refs[i]._handle && overlayType === this.refs[i]._type) {
	                    return this.refs[i].instance;
	                }
	            }
	            return null;
	        }
	    }]);

	    return OverlayController;
	})();
	exports.OverlayController = OverlayController;
	exports.OverlayController = OverlayController = __decorate([(0, _angular2Angular2.Injectable)(), __metadata('design:paramtypes', [typeof (_a = typeof _appApp.IonicApp !== 'undefined' && _appApp.IonicApp) === 'function' && _a || Object, typeof (_b = typeof _configConfig.Config !== 'undefined' && _configConfig.Config) === 'function' && _b || Object, typeof (_c = typeof _angular2Angular2.NgZone !== 'undefined' && _angular2Angular2.NgZone) === 'function' && _c || Object, typeof (_d = typeof _angular2Angular2.Renderer !== 'undefined' && _angular2Angular2.Renderer) === 'function' && _d || Object])], OverlayController);
	var ROOT_Z_INDEX = 1000;
	var _a, _b, _c, _d;

/***/ },
/* 441 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _utilDom = __webpack_require__(435);

	var _utilUtil = __webpack_require__(439);

	/**
	  Animation Steps/Process
	  -----------------------
	  1) Construct animation (doesn't start)
	  2) Client play()'s animation, returns promise
	  3) Add before classes to elements
	  4) Remove before classes from elements
	  5) Elements staged in "from" effect w/ inline styles
	  6) Call onReady()
	  7) Wait for RENDER_DELAY milliseconds (give browser time to render)
	  8) Call onPlay()
	  8) Run from/to animation on elements
	  9) Animations finish async
	 10) Set inline styles w/ the "to" effects on elements
	 11) Add after classes to elements
	 12) Remove after classes from elements
	 13) Call onFinish()
	 14) Resolve play()'s promise
	**/

	var Animation = (function () {
	    function Animation(ele) {
	        var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	        _classCallCheck(this, Animation);

	        this.reset();
	        this._opts = (0, _utilUtil.extend)({
	            renderDelay: 16
	        }, opts);
	        this.elements(ele);
	        if (!document.documentElement.animate) {
	            console.error('Web Animations polyfill missing');
	        }
	    }

	    _createClass(Animation, [{
	        key: 'reset',
	        value: function reset() {
	            this._el = [];
	            this._chld = [];
	            this._ani = [];
	            this._bfAdd = [];
	            this._bfSty = {};
	            this._bfRmv = [];
	            this._afAdd = [];
	            this._afRmv = [];
	            this._readys = [];
	            this._plays = [];
	            this._finishes = [];
	        }
	    }, {
	        key: 'elements',
	        value: function elements(ele) {
	            if (ele) {
	                if (typeof ele === 'string') {
	                    // string query selector
	                    ele = document.querySelectorAll(ele);
	                }
	                if (ele.length) {
	                    // array of elements
	                    for (var i = 0; i < ele.length; i++) {
	                        this.addElement(ele[i]);
	                    }
	                } else {
	                    // single element
	                    this.addElement(ele);
	                }
	            }
	            return this;
	        }
	    }, {
	        key: 'addElement',
	        value: function addElement(ele) {
	            // ensure only HTML Element nodes
	            if (ele) {
	                if (ele.nativeElement) {
	                    // angular ElementRef
	                    ele = ele.nativeElement;
	                }
	                if (ele.nodeType === 1) {
	                    this._el.push(ele);
	                }
	            }
	        }
	    }, {
	        key: 'parent',
	        value: function parent(parentAnimation) {
	            this._parent = parentAnimation;
	            return this;
	        }
	    }, {
	        key: 'add',
	        value: function add(childAnimations) {
	            var _childAnimations = Array.isArray(childAnimations) ? childAnimations : arguments;
	            for (var i = 0; i < _childAnimations.length; i++) {
	                _childAnimations[i].parent(this);
	                this._chld.push(_childAnimations[i]);
	            }
	            return this;
	        }
	    }, {
	        key: 'duration',
	        value: function duration(value) {
	            if (arguments.length) {
	                this._duration = value;
	                return this;
	            }
	            return this._duration || this._parent && this._parent.duration() || 0;
	        }
	    }, {
	        key: 'clearDuration',
	        value: function clearDuration() {
	            this._duration = null;
	            for (var i = 0, l = this._chld.length; i < l; i++) {
	                this._chld[i].clearDuration();
	            }
	        }
	    }, {
	        key: 'easing',
	        value: function easing(name, opts) {
	            if (arguments.length) {
	                this._easing = {
	                    name: name,
	                    opts: opts
	                };
	                return this;
	            }
	            return this._easing || this._parent && this._parent.easing();
	        }
	    }, {
	        key: 'playbackRate',
	        value: function playbackRate(value) {
	            if (arguments.length) {
	                this._rate = value;
	                var i = undefined;
	                for (i = 0; i < this._chld.length; i++) {
	                    this._chld[i].playbackRate(value);
	                }
	                for (i = 0; i < this._ani.length; i++) {
	                    this._ani[i].playbackRate(value);
	                }
	                return this;
	            }
	            return typeof this._rate !== 'undefined' ? this._rate : this._parent && this._parent.playbackRate();
	        }
	    }, {
	        key: 'reverse',
	        value: function reverse() {
	            return this.playbackRate(-1);
	        }
	    }, {
	        key: 'forward',
	        value: function forward() {
	            return this.playbackRate(1);
	        }
	    }, {
	        key: 'from',
	        value: function from(property, value) {
	            if (!this._from) {
	                this._from = {};
	            }
	            this._from[property] = value;
	            return this;
	        }
	    }, {
	        key: 'to',
	        value: function to(property, value) {
	            if (!this._to) {
	                this._to = {};
	            }
	            this._to[property] = value;
	            return this;
	        }
	    }, {
	        key: 'fromTo',
	        value: function fromTo(property, from, to) {
	            return this.from(property, from).to(property, to);
	        }
	    }, {
	        key: 'fadeIn',
	        value: function fadeIn() {
	            return this.fromTo('opacity', 0.001, 1);
	        }
	    }, {
	        key: 'fadeOut',
	        value: function fadeOut() {
	            return this.fromTo('opacity', 0.999, 0);
	        }
	    }, {
	        key: 'play',
	        value: function play(done) {
	            var self = this;
	            // the actual play() method which may or may not start async
	            function beginPlay(beginPlayDone) {
	                var tasks = [];
	                self._chld.forEach(function (childAnimation) {
	                    tasks.push(function (taskDone) {
	                        childAnimation.play(taskDone);
	                    });
	                });
	                self._ani.forEach(function (animation) {
	                    tasks.push(function (taskDone) {
	                        animation.play(taskDone);
	                    });
	                });
	                parallel(tasks, beginPlayDone);
	            }
	            if (!self._parent) {
	                var kickoff = function kickoff() {
	                    // synchronously call all onPlay()'s before play()
	                    self._onPlay();
	                    beginPlay(function () {
	                        self._onFinish();
	                        done();
	                    });
	                };

	                // this is the top level animation and is in full control
	                // of when the async play() should actually kick off
	                // stage all animations and child animations at their starting point
	                self.stage();
	                var promise = undefined;
	                if (!done) {
	                    promise = new Promise(function (res) {
	                        done = res;
	                    });
	                }

	                if (self._duration > 16 && this._opts.renderDelay > 0) {
	                    // begin each animation when everything is rendered in their starting point
	                    // give the browser some time to render everything in place before starting
	                    (0, _utilDom.rafFrames)(this._opts.renderDelay / 16, kickoff);
	                } else {
	                    // no need to render everything in there place before animating in
	                    // just kick it off immediately to render them in their "to" locations
	                    kickoff();
	                }
	                return promise;
	            }
	            // this is a child animation, it is told exactly when to
	            // start by the top level animation
	            beginPlay(done);
	        }
	    }, {
	        key: 'stage',
	        value: function stage() {
	            // before the RENDER_DELAY
	            // before the animations have started
	            if (!this._isStaged) {
	                this._isStaged = true;
	                var i = undefined,
	                    p = undefined,
	                    l = undefined,
	                    j = undefined,
	                    ele = undefined,
	                    animation = undefined;
	                for (i = 0, l = this._chld.length; i < l; i++) {
	                    this._chld[i].stage();
	                }
	                for (i = 0; i < this._el.length; i++) {
	                    ele = this._el[i];
	                    for (j = 0; j < this._bfAdd.length; j++) {
	                        ele.classList.add(this._bfAdd[j]);
	                    }
	                    for (p in this._bfSty) {
	                        ele.style[p] = this._bfSty[p];
	                    }
	                    for (j = 0; j < this._bfRmv.length; j++) {
	                        ele.classList.remove(this._bfRmv[j]);
	                    }
	                }
	                if (this._to) {
	                    // only animate the elements if there are defined "to" effects
	                    for (i = 0; i < this._el.length; i++) {
	                        animation = new Animate(this._el[i], this._from, this._to, this.duration(), this.easing(), this.playbackRate());
	                        if (animation.shouldAnimate) {
	                            this._ani.push(animation);
	                        }
	                    }
	                }
	                for (i = 0; i < this._readys.length; i++) {
	                    this._readys[i](this);
	                }
	            }
	        }
	    }, {
	        key: '_onPlay',
	        value: function _onPlay() {
	            // after the RENDER_DELAY
	            // before the animations have started
	            var i = undefined;
	            this._isFinished = false;
	            for (i = 0; i < this._chld.length; i++) {
	                this._chld[i]._onPlay();
	            }
	            for (i = 0; i < this._plays.length; i++) {
	                this._plays[i](this);
	            }
	        }
	    }, {
	        key: '_onFinish',
	        value: function _onFinish() {
	            // after the animations have finished
	            if (!this._isFinished && !this.isProgress) {
	                this._isFinished = true;
	                var i = undefined,
	                    j = undefined,
	                    ele = undefined;
	                for (i = 0; i < this._chld.length; i++) {
	                    this._chld[i]._onFinish();
	                }
	                if (this.playbackRate() < 0) {
	                    // reverse direction
	                    for (i = 0; i < this._el.length; i++) {
	                        ele = this._el[i];
	                        for (j = 0; j < this._bfAdd.length; j++) {
	                            ele.classList.remove(this._bfAdd[j]);
	                        }
	                        for (j = 0; j < this._bfRmv.length; j++) {
	                            ele.classList.add(this._bfRmv[j]);
	                        }
	                    }
	                } else {
	                    // normal direction
	                    for (i = 0; i < this._el.length; i++) {
	                        ele = this._el[i];
	                        for (j = 0; j < this._afAdd.length; j++) {
	                            ele.classList.add(this._afAdd[j]);
	                        }
	                        for (j = 0; j < this._afRmv.length; j++) {
	                            ele.classList.remove(this._afRmv[j]);
	                        }
	                    }
	                }
	                for (i = 0; i < this._finishes.length; i++) {
	                    this._finishes[i](this);
	                }
	            }
	        }
	    }, {
	        key: 'pause',
	        value: function pause() {
	            var i = undefined;
	            for (i = 0; i < this._chld.length; i++) {
	                this._chld[i].pause();
	            }
	            for (i = 0; i < this._ani.length; i++) {
	                this._ani[i].pause();
	            }
	        }
	    }, {
	        key: 'progressStart',
	        value: function progressStart() {
	            this.isProgress = true;
	            for (var i = 0; i < this._chld.length; i++) {
	                this._chld[i].progressStart();
	            }
	            this.duration(1000);
	            this.play();
	            this.pause();
	        }
	    }, {
	        key: 'progress',
	        value: function progress(value) {
	            value = Math.min(1, Math.max(0, value));
	            this.isProgress = true;
	            var i = undefined;
	            for (i = 0; i < this._chld.length; i++) {
	                this._chld[i].progress(value);
	            }
	            for (i = 0; i < this._ani.length; i++) {
	                this._ani[i].progress(value);
	            }
	        }

	        /**
	         * Get the current time of the first animation
	         * in the list. To get a specific time of an animation, call
	         * subAnimationInstance.getCurrentTime()
	         */
	    }, {
	        key: 'getCurrentTime',
	        value: function getCurrentTime() {
	            if (this._chld.length > 0) {
	                return this._chld[0].getCurrentTime();
	            }
	            if (this._ani.length > 0) {
	                return this._ani[0].getCurrentTime();
	            }
	            return 0;
	        }
	    }, {
	        key: 'progressEnd',
	        value: function progressEnd(shouldComplete) {
	            var rate = arguments.length <= 1 || arguments[1] === undefined ? 3 : arguments[1];

	            var promises = [];
	            this.isProgress = false;
	            for (var i = 0; i < this._chld.length; i++) {
	                promises.push(this._chld[i].progressEnd(shouldComplete));
	            }
	            this._ani.forEach(function (animation) {
	                if (shouldComplete) {
	                    animation.playbackRate(rate);
	                } else {
	                    animation.playbackRate(rate * -1);
	                }
	                promises.push(new Promise(function (resolve) {
	                    animation.play(resolve);
	                }));
	            });
	            return Promise.all(promises);
	        }
	    }, {
	        key: 'onReady',
	        value: function onReady(fn, clear) {
	            if (clear) {
	                this._readys = [];
	            }
	            this._readys.push(fn);
	            return this;
	        }
	    }, {
	        key: 'onPlay',
	        value: function onPlay(fn, clear) {
	            if (clear) {
	                this._plays = [];
	            }
	            this._plays.push(fn);
	            return this;
	        }
	    }, {
	        key: 'onFinish',
	        value: function onFinish(fn, clear) {
	            if (clear) {
	                this._finishes = [];
	            }
	            this._finishes.push(fn);
	            return this;
	        }
	    }, {
	        key: 'clone',
	        value: function clone() {
	            function copy(dest, src) {
	                // undo what stage() may have already done
	                (0, _utilUtil.extend)(dest, src);
	                dest._isFinished = dest._isStaged = dest.isProgress = false;
	                dest._chld = [];
	                dest._ani = [];
	                for (var i = 0; i < src._chld.length; i++) {
	                    dest.add(copy(new Animation(), src._chld[i]));
	                }
	                return dest;
	            }
	            return copy(new Animation(), this);
	        }
	    }, {
	        key: 'dispose',
	        value: function dispose(removeElement) {
	            var i = undefined;
	            for (i = 0; i < this._chld.length; i++) {
	                this._chld[i].dispose(removeElement);
	            }
	            for (i = 0; i < this._ani.length; i++) {
	                this._ani[i].dispose(removeElement);
	            }
	            if (removeElement) {
	                for (i = 0; i < this._el.length; i++) {
	                    this._el[i].parentNode && this._el[i].parentNode.removeChild(this._el[i]);
	                }
	            }
	            this.reset();
	        }

	        /*
	         STATIC CLASSES
	         */
	    }, {
	        key: 'before',
	        get: function get() {
	            var _this = this;

	            return {
	                addClass: function addClass(className) {
	                    _this._bfAdd.push(className);
	                    return _this;
	                },
	                removeClass: function removeClass(className) {
	                    _this._bfRmv.push(className);
	                    return _this;
	                },
	                setStyles: function setStyles(styles) {
	                    _this._bfSty = styles;
	                    return _this;
	                }
	            };
	        }
	    }, {
	        key: 'after',
	        get: function get() {
	            var _this2 = this;

	            return {
	                addClass: function addClass(className) {
	                    _this2._afAdd.push(className);
	                    return _this2;
	                },
	                removeClass: function removeClass(className) {
	                    _this2._afRmv.push(className);
	                    return _this2;
	                }
	            };
	        }
	    }], [{
	        key: 'create',
	        value: function create(element, name) {
	            var AnimationClass = AnimationRegistry[name];
	            if (!AnimationClass) {
	                // couldn't find an animation by the given name
	                // fallback to just the base Animation class
	                AnimationClass = Animation;
	            }
	            return new AnimationClass(element);
	        }
	    }, {
	        key: 'register',
	        value: function register(name, AnimationClass) {
	            AnimationRegistry[name] = AnimationClass;
	        }
	    }]);

	    return Animation;
	})();

	exports.Animation = Animation;

	var Animate = (function () {
	    function Animate(ele, fromEffect, toEffect, duration, easingConfig, playbackRate) {
	        _classCallCheck(this, Animate);

	        // https://w3c.github.io/web-animations/
	        // not using the direct API methods because they're still in flux
	        // however, element.animate() seems locked in and uses the latest
	        // and correct API methods under the hood, so really doesn't matter
	        if (!fromEffect) {
	            return console.error(ele.tagName, 'animation fromEffect required, toEffect:', toEffect);
	        }
	        this.toEffect = parseEffect(toEffect);
	        this.shouldAnimate = duration > 32;
	        if (!this.shouldAnimate) {
	            return inlineStyle(ele, this.toEffect);
	        }
	        this.ele = ele;
	        // stage where the element will start from
	        this.fromEffect = parseEffect(fromEffect);
	        inlineStyle(ele, this.fromEffect);
	        this.duration = duration;
	        this.rate = typeof playbackRate !== 'undefined' ? playbackRate : 1;
	        this.easing = easingConfig && easingConfig.name || 'linear';
	        this.effects = [convertProperties(this.fromEffect)];
	        if (this.easing in EASING_FN) {
	            insertEffects(this.effects, this.fromEffect, this.toEffect, easingConfig);
	        } else if (this.easing in CUBIC_BEZIERS) {
	            this.easing = 'cubic-bezier(' + CUBIC_BEZIERS[this.easing] + ')';
	        }
	        this.effects.push(convertProperties(this.toEffect));
	    }

	    _createClass(Animate, [{
	        key: 'play',
	        value: function play(done) {
	            var self = this;
	            if (self.ani) {
	                self.ani.play();
	            } else {
	                // https://developers.google.com/web/updates/2014/05/Web-Animations---element-animate-is-now-in-Chrome-36
	                // https://w3c.github.io/web-animations/
	                // Future versions will use "new window.Animation" rather than "element.animate()"
	                self.ani = self.ele.animate(self.effects, {
	                    duration: self.duration || 0,
	                    easing: self.easing,
	                    playbackRate: self.rate // old way of setting playbackRate, but still necessary
	                });
	                self.ani.playbackRate = self.rate;
	            }
	            self.ani.onfinish = function () {
	                // lock in where the element will stop at
	                // if the playbackRate is negative then it needs to return
	                // to its "from" effects
	                if (self.ani) {
	                    inlineStyle(self.ele, self.rate < 0 ? self.fromEffect : self.toEffect);
	                    self.ani = self.ani.onfinish = null;
	                    done && done();
	                }
	            };
	        }
	    }, {
	        key: 'pause',
	        value: function pause() {
	            this.ani && this.ani.pause();
	        }
	    }, {
	        key: 'progress',
	        value: function progress(value) {
	            if (this.ani) {
	                // passed a number between 0 and 1
	                if (this.ani.playState !== 'paused') {
	                    this.ani.pause();
	                }
	                // don't let the progress finish the animation
	                // leave it off JUST before it's finished
	                value = Math.min(0.999, Math.max(0.001, value));
	                this.ani.currentTime = this.duration * value;
	            }
	        }
	    }, {
	        key: 'getCurrentTime',
	        value: function getCurrentTime() {
	            return this.ani && this.ani.currentTime || 0;
	        }
	    }, {
	        key: 'playbackRate',
	        value: function playbackRate(value) {
	            this.rate = value;
	            if (this.ani) {
	                this.ani.playbackRate = value;
	            }
	        }
	    }, {
	        key: 'dispose',
	        value: function dispose() {
	            this.ele = this.ani = this.effects = this.toEffect = null;
	        }
	    }]);

	    return Animate;
	})();

	function insertEffects(effects, fromEffect, toEffect, easingConfig) {
	    easingConfig.opts = easingConfig.opts || {};
	    var increment = easingConfig.opts.increment || 0.04;
	    var easingFn = EASING_FN[easingConfig.name];
	    var pos = undefined,
	        tweenEffect = undefined,
	        addEffect = undefined,
	        property = undefined,
	        toProperty = undefined,
	        fromValue = undefined,
	        diffValue = undefined;
	    for (pos = increment; pos <= 1 - increment; pos += increment) {
	        tweenEffect = {};
	        addEffect = false;
	        for (property in toEffect) {
	            toProperty = toEffect[property];
	            if (toProperty.tween) {
	                fromValue = fromEffect[property].num;
	                diffValue = toProperty.num - fromValue;
	                tweenEffect[property] = {
	                    value: roundValue(easingFn(pos, easingConfig.opts) * diffValue + fromValue) + toProperty.unit
	                };
	                addEffect = true;
	            }
	        }
	        if (addEffect) {
	            effects.push(convertProperties(tweenEffect));
	        }
	    }
	}
	function parseEffect(inputEffect) {
	    var val = undefined,
	        r = undefined,
	        num = undefined,
	        property = undefined;
	    var outputEffect = {};
	    for (property in inputEffect) {
	        val = inputEffect[property];
	        r = val.toString().match(/(^-?\d*\.?\d*)(.*)/);
	        num = parseFloat(r[1]);
	        outputEffect[property] = {
	            value: val,
	            num: num,
	            unit: r[0] != r[2] ? r[2] : '',
	            tween: !isNaN(num) && ANIMATE_PROPERTIES.indexOf(property) > -1
	        };
	    }
	    return outputEffect;
	}
	function convertProperties(inputEffect) {
	    var outputEffect = {};
	    var transforms = [];
	    var value = undefined,
	        property = undefined;
	    for (property in inputEffect) {
	        value = inputEffect[property].value;
	        if (TRANSFORMS.indexOf(property) > -1) {
	            transforms.push(property + '(' + value + ')');
	        } else {
	            outputEffect[property] = value;
	        }
	    }
	    if (transforms.length) {
	        transforms.push('translateZ(0px)');
	        outputEffect.transform = transforms.join(' ');
	    }
	    return outputEffect;
	}
	function inlineStyle(ele, effect) {
	    if (ele && effect) {
	        var transforms = [];
	        var value = undefined,
	            property = undefined;
	        for (property in effect) {
	            value = effect[property].value;
	            if (TRANSFORMS.indexOf(property) > -1) {
	                transforms.push(property + '(' + value + ')');
	            } else {
	                ele.style[property] = value;
	            }
	        }
	        if (transforms.length) {
	            transforms.push('translateZ(0px)');
	            ele.style[_utilDom.CSS.transform] = transforms.join(' ');
	        }
	    }
	}
	function roundValue(val) {
	    return Math.round(val * 10000) / 10000;
	}
	var TRANSFORMS = ['translateX', 'translateY', 'translateZ', 'scale', 'scaleX', 'scaleY', 'scaleZ', 'rotate', 'rotateX', 'rotateY', 'rotateZ', 'skewX', 'skewY', 'perspective'];
	var ANIMATE_PROPERTIES = TRANSFORMS.concat('opacity');
	// Robert Penner's Easing Functions
	// http://robertpenner.com/easing/
	var CUBIC_BEZIERS = {
	    // default browser suppored easing
	    // ease
	    // ease-in
	    // ease-out
	    // ease-in-out
	    // Cubic
	    'ease-in-cubic': '0.55,0.055,0.675,0.19',
	    'ease-out-cubic': '0.215,0.61,0.355,1',
	    'ease-in-Out-cubic': '0.645,0.045,0.355,1',
	    // Circ
	    'ease-in-circ': '0.6,0.04,0.98,0.335',
	    'ease-out-circ': '0.075,0.82,0.165,1',
	    'ease-in-out-circ': '0.785,0.135,0.15,0.86',
	    // Expo
	    'ease-in-expo': '0.95,0.05,0.795,0.035',
	    'ease-out-expo': '0.19,1,0.22,1',
	    'ease-in-out-expo': '1,0,0,1',
	    // Quad
	    'ease-in-quad': '0.55,0.085,0.68,0.53',
	    'ease-out-quad': '0.25,0.46,0.45,0.94',
	    'ease-in-out-quad': '0.455,0.03,0.515,0.955',
	    // Quart
	    'ease-in-quart': '0.895,0.03,0.685,0.22',
	    'ease-out-quart': '0.165,0.84,0.44,1',
	    'ease-in-out-quart': '0.77,0,0.175,1',
	    // Quint
	    'ease-in-quint': '0.755,0.05,0.855,0.06',
	    'ease-out-quint': '0.23,1,0.32,1',
	    'ease-in-out-quint': '0.86,0,0.07,1',
	    // Sine
	    'ease-in-sine': '0.47,0,0.745,0.715',
	    'ease-out-sine': '0.39,0.575,0.565,1',
	    'ease-in-out-sine': '0.445,0.05,0.55,0.95',
	    // Back
	    'ease-in-back': '0.6,-0.28,0.735,0.045',
	    'ease-out-back': '0.175,0.885,0.32,1.275',
	    'ease-in-out-back': '0.68,-0.55,0.265,1.55'
	};
	var EASING_FN = {
	    'elastic': function elastic(pos) {
	        return -1 * Math.pow(4, -8 * pos) * Math.sin((pos * 6 - 1) * (2 * Math.PI) / 2) + 1;
	    },
	    'swing-from-to': function swingFromTo(pos, opts) {
	        var s = opts.s || 1.70158;
	        return (pos /= 0.5) < 1 ? 0.5 * (pos * pos * (((s *= 1.525) + 1) * pos - s)) : 0.5 * ((pos -= 2) * pos * (((s *= 1.525) + 1) * pos + s) + 2);
	    },
	    'swing-from': function swingFrom(pos, opts) {
	        var s = opts.s || 1.70158;
	        return pos * pos * ((s + 1) * pos - s);
	    },
	    'swing-to': function swingTo(pos, opts) {
	        var s = opts.s || 1.70158;
	        return (pos -= 1) * pos * ((s + 1) * pos + s) + 1;
	    },
	    'bounce': function bounce(pos) {
	        if (pos < 1 / 2.75) {
	            return 7.5625 * pos * pos;
	        } else if (pos < 2 / 2.75) {
	            return 7.5625 * (pos -= 1.5 / 2.75) * pos + 0.75;
	        } else if (pos < 2.5 / 2.75) {
	            return 7.5625 * (pos -= 2.25 / 2.75) * pos + 0.9375;
	        }
	        return 7.5625 * (pos -= 2.625 / 2.75) * pos + 0.984375;
	    },
	    'bounce-past': function bouncePast(pos) {
	        if (pos < 1 / 2.75) {
	            return 7.5625 * pos * pos;
	        } else if (pos < 2 / 2.75) {
	            return 2 - (7.5625 * (pos -= 1.5 / 2.75) * pos + 0.75);
	        } else if (pos < 2.5 / 2.75) {
	            return 2 - (7.5625 * (pos -= 2.25 / 2.75) * pos + 0.9375);
	        }
	        return 2 - (7.5625 * (pos -= 2.625 / 2.75) * pos + 0.984375);
	    },
	    'ease-out-bounce': function easeOutBounce(pos) {
	        if (pos < 1 / 2.75) {
	            return 7.5625 * pos * pos;
	        } else if (pos < 2 / 2.75) {
	            return 7.5625 * (pos -= 1.5 / 2.75) * pos + 0.75;
	        } else if (pos < 2.5 / 2.75) {
	            return 7.5625 * (pos -= 2.25 / 2.75) * pos + 0.9375;
	        }
	        return 7.5625 * (pos -= 2.625 / 2.75) * pos + 0.984375;
	    },
	    'ease-from-to': function easeFromTo(pos) {
	        if ((pos /= 0.5) < 1) return 0.5 * Math.pow(pos, 4);
	        return -0.5 * ((pos -= 2) * Math.pow(pos, 3) - 2);
	    },
	    'ease-from': function easeFrom(pos, opts) {
	        return Math.pow(pos, opts.s || 4);
	    },
	    'ease-to': function easeTo(pos, opts) {
	        return Math.pow(pos, opts.s || 0.25);
	    },
	    /*
	     * scripty2, Thomas Fuchs (MIT Licence)
	     * https://raw.github.com/madrobby/scripty2/master/src/effects/transitions/transitions.js
	     */
	    'spring': function spring(pos, opts) {
	        var damping = opts.damping || 4.5;
	        var elasticity = opts.elasticity || 6;
	        return 1 - Math.cos(pos * damping * Math.PI) * Math.exp(-pos * elasticity);
	    },
	    'sinusoidal': function sinusoidal(pos) {
	        return -Math.cos(pos * Math.PI) / 2 + 0.5;
	    }
	};
	var AnimationRegistry = {};
	function parallel(tasks, done) {
	    var l = tasks.length;
	    if (!l) {
	        return done();
	    }
	    var completed = 0;
	    function taskCompleted() {
	        completed++;
	        if (completed === l) {
	            done();
	        }
	    }
	    for (var i = 0; i < l; i++) {
	        tasks[i](taskCompleted);
	    }
	}

/***/ },
/* 442 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopExportWildcard(obj, defaults) { var newObj = defaults({}, obj); delete newObj['default']; return newObj; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	var _ionicUtilDom = __webpack_require__(435);

	var domUtil = _interopRequireWildcard(_ionicUtilDom);

	var dom = domUtil;
	exports.dom = dom;

	var _ionicUtilUtil = __webpack_require__(439);

	_defaults(exports, _interopExportWildcard(_ionicUtilUtil, _defaults));

/***/ },
/* 443 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _angular2Angular2 = __webpack_require__(45);

	/**
	 * The Input component is used to focus text input elements.
	 *
	 * @usage
	 * ```html
	 * <ion-input>
	 *   <ion-label>Name</ion-label>
	 *   <input value="Name" type="text">
	 * </ion-input>
	 * ```
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var Form = (function () {
	    function Form() {
	        _classCallCheck(this, Form);

	        this._inputs = [];
	        this._focused = null;
	        this.focusCtrl(document);
	    }

	    _createClass(Form, [{
	        key: "register",
	        value: function register(input) {
	            this._inputs.push(input);
	        }
	    }, {
	        key: "deregister",
	        value: function deregister(input) {
	            var index = this._inputs.indexOf(input);
	            if (index > -1) {
	                this._inputs.splice(index, 1);
	            }
	            if (input === this._focused) {
	                this._focused = null;
	            }
	        }
	    }, {
	        key: "focusCtrl",
	        value: function focusCtrl(document) {
	            // raw DOM fun
	            var focusCtrl = document.createElement('focus-ctrl');
	            focusCtrl.setAttribute('aria-hidden', true);
	            this._blur = document.createElement('button');
	            this._blur.tabIndex = -1;
	            focusCtrl.appendChild(this._blur);
	            document.body.appendChild(focusCtrl);
	        }
	    }, {
	        key: "focusOut",
	        value: function focusOut() {
	            console.debug('focusOut');
	            this._blur.focus();
	        }
	    }, {
	        key: "setAsFocused",
	        value: function setAsFocused(input) {
	            this._focused = input;
	        }

	        /**
	         * Focuses the next input element, if it exists.
	         */
	    }, {
	        key: "focusNext",
	        value: function focusNext(currentInput) {
	            console.debug('focusNext');
	            var index = this._inputs.indexOf(currentInput);
	            if (index > -1 && index + 1 < this._inputs.length) {
	                var nextInput = this._inputs[index + 1];
	                if (nextInput !== this._focused) {
	                    return nextInput.initFocus();
	                }
	            }
	            index = this._inputs.indexOf(this._focused);
	            if (index > 0) {
	                var previousInput = this._inputs[index - 1];
	                if (previousInput) {
	                    previousInput.initFocus();
	                }
	            }
	        }
	    }]);

	    return Form;
	})();
	exports.Form = Form;
	exports.Form = Form = __decorate([(0, _angular2Angular2.Injectable)(), __metadata('design:paramtypes', [])], Form);

/***/ },
/* 444 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _angular2Angular2 = __webpack_require__(45);

	var _configConfig = __webpack_require__(437);

	var _form = __webpack_require__(443);

	var _dom = __webpack_require__(435);

	var dom = _interopRequireWildcard(_dom);

	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var Keyboard = (function () {
	    function Keyboard(config, form, zone) {
	        var _this = this;

	        _classCallCheck(this, Keyboard);

	        this.form = form;
	        this.zone = zone;
	        zone.runOutsideAngular(function () {
	            _this.focusOutline(config.get('focusOutline'), document);
	        });
	    }

	    _createClass(Keyboard, [{
	        key: "isOpen",
	        value: function isOpen() {
	            return dom.hasFocusedTextInput();
	        }
	    }, {
	        key: "onClose",
	        value: function onClose(callback) {
	            var self = this;
	            var promise = null;
	            if (!callback) {
	                // a callback wasn't provided, so let's return a promise instead
	                promise = new Promise(function (resolve) {
	                    callback = resolve;
	                });
	            }
	            self.zone.runOutsideAngular(function () {
	                function checkKeyboard() {
	                    if (!self.isOpen()) {
	                        self.zone.run(function () {
	                            console.debug('keyboard closed');
	                            callback();
	                        });
	                    } else {
	                        setTimeout(checkKeyboard, KEYBOARD_CLOSE_POLLING);
	                    }
	                }
	                setTimeout(checkKeyboard, KEYBOARD_CLOSE_POLLING);
	            });
	            return promise;
	        }
	    }, {
	        key: "close",
	        value: function close() {
	            var _this2 = this;

	            dom.raf(function () {
	                if (dom.hasFocusedTextInput()) {
	                    // only focus out when a text input has focus
	                    _this2.form.focusOut();
	                }
	            });
	        }
	    }, {
	        key: "focusOutline",
	        value: function focusOutline(setting, document) {
	            /* Focus Outline
	             * --------------------------------------------------
	             * By default, when a keydown event happens from a tab key, then
	             * the 'focus-outline' css class is added to the body element
	             * so focusable elements have an outline. On a mousedown or
	             * touchstart event, then the 'focus-outline' css class is removed.
	             *
	             * Config default overrides:
	             * focusOutline: true     - Always add the focus-outline
	             * focusOutline: false    - Do not add the focus-outline
	             */
	            var self = this;
	            var isKeyInputEnabled = false;
	            function cssClass() {
	                dom.raf(function () {
	                    document.body.classList[isKeyInputEnabled ? 'add' : 'remove']('focus-outline');
	                });
	            }
	            if (setting === true) {
	                isKeyInputEnabled = true;
	                return cssClass();
	            } else if (setting === false) {
	                return;
	            }
	            // default is to add the focus-outline when the tab key is used
	            function keyDown(ev) {
	                if (!isKeyInputEnabled && ev.keyCode == 9) {
	                    isKeyInputEnabled = true;
	                    enableKeyInput();
	                }
	            }
	            function pointerDown() {
	                isKeyInputEnabled = false;
	                enableKeyInput();
	            }
	            function enableKeyInput() {
	                cssClass();
	                self.zone.runOutsideAngular(function () {
	                    document.removeEventListener('mousedown', pointerDown);
	                    document.removeEventListener('touchstart', pointerDown);
	                    if (isKeyInputEnabled) {
	                        document.addEventListener('mousedown', pointerDown);
	                        document.addEventListener('touchstart', pointerDown);
	                    }
	                });
	            }
	            document.addEventListener('keydown', keyDown);
	        }
	    }]);

	    return Keyboard;
	})();
	exports.Keyboard = Keyboard;
	exports.Keyboard = Keyboard = __decorate([(0, _angular2Angular2.Injectable)(), __metadata('design:paramtypes', [typeof (_a = typeof _configConfig.Config !== 'undefined' && _configConfig.Config) === 'function' && _a || Object, typeof (_b = typeof _form.Form !== 'undefined' && _form.Form) === 'function' && _b || Object, typeof (_c = typeof _angular2Angular2.NgZone !== 'undefined' && _angular2Angular2.NgZone) === 'function' && _c || Object])], Keyboard);
	var KEYBOARD_CLOSE_POLLING = 150;
	var _a, _b, _c;

/***/ },
/* 445 */
/***/ function(module, exports, __webpack_require__) {

	/**
	* @ngdoc service
	* @name ActionSheet
	* @module ionic
	* @description
	* The ActionSheet is a modal menu with options to select based on an action.
	*/
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _angular2Angular2 = __webpack_require__(45);

	var _overlayOverlayController = __webpack_require__(440);

	var _configConfig = __webpack_require__(437);

	var _iconIcon = __webpack_require__(446);

	var _animationsAnimation = __webpack_require__(441);

	var _ionicUtil = __webpack_require__(442);

	var util = _interopRequireWildcard(_ionicUtil);

	/**
	 * @name ActionSheet
	 * @description
	 * The Action Sheet is a slide-up pane that lets the user choose from a set of options. Dangerous options are made obvious.
	 *
	 * There are easy ways to cancel out of the action sheet, such as tapping the backdrop or even hitting escape on the keyboard for desktop testing.
	 *
	 * @usage
	 * ```ts
	 * openMenu() {
	 *
	 *   this.actionSheet.open({
	 *     buttons: [
	 *       { text: 'Share This' },
	 *       { text: 'Move' }
	 *     ],
	 *     destructiveText: 'Delete',
	 *     titleText: 'Modify your album',
	 *     cancelText: 'Cancel',
	 *     cancel: function() {
	 *       console.log('Canceled');
	 *     },
	 *     destructiveButtonClicked: () => {
	 *       console.log('Destructive clicked');
	 *     },
	 *     buttonClicked: function(index) {
	 *       console.log('Button clicked', index);
	 *       if(index == 1) { return false; }
	 *       return true;
	 *     }
	 *
	 *   }).then(actionSheetRef => {
	 *     this.actionSheetRef = actionSheetRef;
	 *   });
	 *
	 * }
	 * ```
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var ActionSheetCmp = (function () {
	    function ActionSheetCmp() {
	        _classCallCheck(this, ActionSheetCmp);
	    }

	    _createClass(ActionSheetCmp, [{
	        key: "_cancel",
	        value: function _cancel() {
	            this.cancel && this.cancel();
	            return this.close();
	        }
	    }, {
	        key: "_destructive",
	        value: function _destructive() {
	            var shouldClose = this.destructiveButtonClicked();
	            if (shouldClose === true) {
	                return this.close();
	            }
	        }
	    }, {
	        key: "_buttonClicked",
	        value: function _buttonClicked(index) {
	            var shouldClose = this.buttonClicked(index);
	            if (shouldClose === true) {
	                return this.close();
	            }
	        }
	    }]);

	    return ActionSheetCmp;
	})();
	ActionSheetCmp = __decorate([(0, _angular2Angular2.Component)({
	    selector: 'ion-action-sheet',
	    template: '<backdrop (click)="_cancel()" tappable disable-activated></backdrop>' + '<action-sheet-wrapper>' + '<div class="action-sheet-container">' + '<div class="action-sheet-group action-sheet-options">' + '<div class="action-sheet-title" *ng-if="titleText">{{titleText}}</div>' + '<button (click)="_buttonClicked(i)" *ng-for="#b of buttons; #i=index" class="action-sheet-option disable-hover">' + '<icon [name]="b.icon" *ng-if="b.icon"></icon> ' + '{{b.text}}' + '</button>' + '<button *ng-if="destructiveText" (click)="_destructive()" class="action-sheet-destructive disable-hover">' + '<icon [name]="destructiveIcon" *ng-if="destructiveIcon"></icon> ' + '{{destructiveText}}</button>' + '</div>' + '<div class="action-sheet-group action-sheet-cancel" *ng-if="cancelText">' + '<button (click)="_cancel()" class=" disable-hover">' + '<icon [name]="cancelIcon"></icon> ' + '{{cancelText}}</button>' + '</div>' + '</div>' + '</action-sheet-wrapper>',
	    host: {
	        '[style.zIndex]': '_zIndex'
	    },
	    directives: [_angular2Angular2.NgFor, _angular2Angular2.NgIf, _iconIcon.Icon]
	}), __metadata('design:paramtypes', [])], ActionSheetCmp);
	var ActionSheet = (function () {
	    function ActionSheet(ctrl, config) {
	        _classCallCheck(this, ActionSheet);

	        this.ctrl = ctrl;
	        this._defaults = {
	            enterAnimation: config.get('actionSheetEnter'),
	            leaveAnimation: config.get('actionSheetLeave'),
	            cancelIcon: config.get('actionSheetCancelIcon'),
	            destructiveIcon: config.get('actionSheetDestructiveIcon')
	        };
	    }

	    /**
	     * Create and open a new Action Sheet. This is the
	     * public API, and most often you will only use ActionSheet.open()
	     *
	     * @param {Object} [opts={}]  TODO
	     * @return {Promise} Promise that resolves when the action sheet is open.
	     */

	    _createClass(ActionSheet, [{
	        key: "open",
	        value: function open() {
	            var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	            return this.ctrl.open(OVERLAY_TYPE, ActionSheetCmp, util.extend(this._defaults, opts));
	        }

	        /**
	         * TODO
	         * @returns {TODO} TODO
	         */
	    }, {
	        key: "get",
	        value: function get(handle) {
	            if (handle) {
	                return this.ctrl.getByHandle(handle, OVERLAY_TYPE);
	            }
	            return this.ctrl.getByType(OVERLAY_TYPE);
	        }
	    }]);

	    return ActionSheet;
	})();
	exports.ActionSheet = ActionSheet;
	exports.ActionSheet = ActionSheet = __decorate([(0, _angular2Angular2.Injectable)(), __metadata('design:paramtypes', [typeof (_a = typeof _overlayOverlayController.OverlayController !== 'undefined' && _overlayOverlayController.OverlayController) === 'function' && _a || Object, typeof (_b = typeof _configConfig.Config !== 'undefined' && _configConfig.Config) === 'function' && _b || Object])], ActionSheet);
	var OVERLAY_TYPE = 'action-sheet';
	/**
	 * Animations for action sheet
	 */

	var ActionSheetAnimation = (function (_Animation) {
	    _inherits(ActionSheetAnimation, _Animation);

	    function ActionSheetAnimation(element) {
	        _classCallCheck(this, ActionSheetAnimation);

	        _get(Object.getPrototypeOf(ActionSheetAnimation.prototype), "constructor", this).call(this, element);
	        this.easing('cubic-bezier(.36, .66, .04, 1)');
	        this.backdrop = new _animationsAnimation.Animation(element.querySelector('backdrop'));
	        this.wrapper = new _animationsAnimation.Animation(element.querySelector('action-sheet-wrapper'));
	        this.add(this.backdrop, this.wrapper);
	    }

	    return ActionSheetAnimation;
	})(_animationsAnimation.Animation);

	var ActionSheetSlideIn = (function (_ActionSheetAnimation) {
	    _inherits(ActionSheetSlideIn, _ActionSheetAnimation);

	    function ActionSheetSlideIn(element) {
	        _classCallCheck(this, ActionSheetSlideIn);

	        _get(Object.getPrototypeOf(ActionSheetSlideIn.prototype), "constructor", this).call(this, element);
	        this.duration(400);
	        this.backdrop.fromTo('opacity', 0.01, 0.4);
	        this.wrapper.fromTo('translateY', '100%', '0%');
	    }

	    return ActionSheetSlideIn;
	})(ActionSheetAnimation);

	_animationsAnimation.Animation.register('action-sheet-slide-in', ActionSheetSlideIn);

	var ActionSheetSlideOut = (function (_ActionSheetAnimation2) {
	    _inherits(ActionSheetSlideOut, _ActionSheetAnimation2);

	    function ActionSheetSlideOut(element) {
	        _classCallCheck(this, ActionSheetSlideOut);

	        _get(Object.getPrototypeOf(ActionSheetSlideOut.prototype), "constructor", this).call(this, element);
	        this.duration(300);
	        this.backdrop.fromTo('opacity', 0.4, 0.01);
	        this.wrapper.fromTo('translateY', '0%', '100%');
	    }

	    return ActionSheetSlideOut;
	})(ActionSheetAnimation);

	_animationsAnimation.Animation.register('action-sheet-slide-out', ActionSheetSlideOut);

	var ActionSheetMdSlideIn = (function (_ActionSheetSlideIn) {
	    _inherits(ActionSheetMdSlideIn, _ActionSheetSlideIn);

	    function ActionSheetMdSlideIn(element) {
	        _classCallCheck(this, ActionSheetMdSlideIn);

	        _get(Object.getPrototypeOf(ActionSheetMdSlideIn.prototype), "constructor", this).call(this, element);
	        this.duration(450);
	        this.backdrop.fromTo('opacity', 0.01, 0.26);
	    }

	    return ActionSheetMdSlideIn;
	})(ActionSheetSlideIn);

	_animationsAnimation.Animation.register('action-sheet-md-slide-in', ActionSheetMdSlideIn);

	var ActionSheetMdSlideOut = (function (_ActionSheetSlideOut) {
	    _inherits(ActionSheetMdSlideOut, _ActionSheetSlideOut);

	    function ActionSheetMdSlideOut(element) {
	        _classCallCheck(this, ActionSheetMdSlideOut);

	        _get(Object.getPrototypeOf(ActionSheetMdSlideOut.prototype), "constructor", this).call(this, element);
	        this.duration(450);
	        this.backdrop.fromTo('opacity', 0.26, 0.01);
	    }

	    return ActionSheetMdSlideOut;
	})(ActionSheetSlideOut);

	_animationsAnimation.Animation.register('action-sheet-md-slide-out', ActionSheetMdSlideOut);
	var _a, _b;

/***/ },
/* 446 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _angular2Angular2 = __webpack_require__(45);

	var _configConfig = __webpack_require__(437);

	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var Icon = (function () {
	    function Icon(elementRef, config, renderer) {
	        _classCallCheck(this, Icon);

	        this.elementRef = elementRef;
	        this.renderer = renderer;
	        this.config = config;
	        this.mode = config.get('iconMode');
	    }

	    /**
	     * @private
	     */

	    _createClass(Icon, [{
	        key: "onInit",
	        value: function onInit() {
	            var ele = this.elementRef.nativeElement;
	            if (this.mode == 'ios' && this.ios) {
	                this.name = this.ios;
	            } else if (this.mode == 'md' && this.md) {
	                this.name = this.md;
	            } else if (!this.name) {
	                // looping through native dom attributes, eww
	                // https://github.com/angular/angular/issues/3961
	                for (var i = 0, l = ele.attributes.length; i < l; i++) {
	                    if (ele.attributes[i].value === '' && /_|item-|is-active|large|small|class/.test(ele.attributes[i].name) !== true) {
	                        this.name = ele.attributes[i].name;
	                        break;
	                    }
	                }
	            }
	            if (!this.name) return;
	            if (!/^ion-/.test(this.name)) {
	                // not an exact icon being used
	                // add mode specific prefix
	                this.name = 'ion-' + this.mode + '-' + this.name;
	            }
	            this.update();
	        }
	    }, {
	        key: "update",

	        /**
	         * @private
	         */
	        value: function update() {
	            if (this.name && this.mode == 'ios') {
	                if (this.isActive) {
	                    if (/-outline/.test(this.name)) {
	                        this.name = this.name.replace('-outline', '');
	                    }
	                } else if (!/-outline/.test(this.name)) {
	                    this.name += '-outline';
	                }
	            }
	            if (this._name !== this.name) {
	                if (this._name) {
	                    this.renderer.setElementClass(this.elementRef, this._name, false);
	                }
	                this._name = this.name;
	                this.renderer.setElementClass(this.elementRef, this.name, true);
	                this.renderer.setElementAttribute(this.elementRef, 'aria-label', this.name.replace('ion-', '').replace('ios-', '').replace('md-', '').replace('-', ' '));
	            }
	        }
	    }, {
	        key: "isActive",
	        get: function get() {
	            return this._isActive === undefined || this._isActive === true || this._isActive === 'true';
	        },

	        /**
	         * @private
	         */
	        set: function set(val) {
	            this._isActive = val;
	            this.update();
	        }
	    }]);

	    return Icon;
	})();
	exports.Icon = Icon;
	exports.Icon = Icon = __decorate([(0, _angular2Angular2.Directive)({
	    selector: 'icon',
	    inputs: ['name', 'ios', 'md', 'isActive'],
	    host: {
	        'role': 'img'
	    }
	}), __metadata('design:paramtypes', [typeof (_a = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _a || Object, typeof (_b = typeof _configConfig.Config !== 'undefined' && _configConfig.Config) === 'function' && _b || Object, typeof (_c = typeof _angular2Angular2.Renderer !== 'undefined' && _angular2Angular2.Renderer) === 'function' && _c || Object])], Icon);
	var _a, _b, _c;

/***/ },
/* 447 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _angular2Angular2 = __webpack_require__(45);

	var _overlayOverlayController = __webpack_require__(440);

	var _configConfig = __webpack_require__(437);

	var _animationsAnimation = __webpack_require__(441);

	var _ionicUtil = __webpack_require__(442);

	var util = _interopRequireWildcard(_ionicUtil);

	/**
	 * The Modal is a content pane that can go over the user's main view temporarily.
	 * Usually used for making a choice or editing an item.
	 *
	 * @usage
	 * ```ts
	 * class MyApp {
	 *
	 *  constructor(modal: Modal, app: IonicApp, Config: Config) {
	 *    this.modal = modal;
	 *  }
	 *
	 *  openModal() {
	 *    this.modal.open(ContactModal, {
	 *      enterAnimation: 'my-fade-in',
	 *      leaveAnimation: 'my-fade-out',
	 *      handle: 'my-modal'
	 *    });
	 *  }
	 * }
	 * ```
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var Modal = (function () {
	    function Modal(ctrl, config) {
	        _classCallCheck(this, Modal);

	        this.ctrl = ctrl;
	        this._defaults = {
	            enterAnimation: config.get('modalEnter') || 'modal-slide-in',
	            leaveAnimation: config.get('modalLeave') || 'modal-slide-out'
	        };
	    }

	    /**
	     * TODO
	     * @param {Type} componentType  TODO
	     * @param {Object} [opts={}]  TODO
	     * @returns {TODO} TODO
	     */

	    _createClass(Modal, [{
	        key: "open",
	        value: function open(componentType) {
	            var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	            return this.ctrl.open(OVERLAY_TYPE, componentType, util.extend(this._defaults, opts));
	        }

	        /**
	         * TODO
	         * @param {TODO} handle  TODO
	         * @returns {TODO} TODO
	         */
	    }, {
	        key: "get",
	        value: function get(handle) {
	            if (handle) {
	                return this.ctrl.getByHandle(handle, OVERLAY_TYPE);
	            }
	            return this.ctrl.getByType(OVERLAY_TYPE);
	        }
	    }]);

	    return Modal;
	})();
	exports.Modal = Modal;
	exports.Modal = Modal = __decorate([(0, _angular2Angular2.Injectable)(), __metadata('design:paramtypes', [typeof (_a = typeof _overlayOverlayController.OverlayController !== 'undefined' && _overlayOverlayController.OverlayController) === 'function' && _a || Object, typeof (_b = typeof _configConfig.Config !== 'undefined' && _configConfig.Config) === 'function' && _b || Object])], Modal);
	var OVERLAY_TYPE = 'modal';
	/**
	 * Animations for modals
	 */

	var ModalSlideIn = (function (_Animation) {
	    _inherits(ModalSlideIn, _Animation);

	    function ModalSlideIn(element) {
	        _classCallCheck(this, ModalSlideIn);

	        _get(Object.getPrototypeOf(ModalSlideIn.prototype), "constructor", this).call(this, element);
	        this.easing('cubic-bezier(0.36,0.66,0.04,1)').duration(400).fromTo('translateY', '100%', '0%');
	    }

	    return ModalSlideIn;
	})(_animationsAnimation.Animation);

	_animationsAnimation.Animation.register('modal-slide-in', ModalSlideIn);

	var ModalSlideOut = (function (_Animation2) {
	    _inherits(ModalSlideOut, _Animation2);

	    function ModalSlideOut(element) {
	        _classCallCheck(this, ModalSlideOut);

	        _get(Object.getPrototypeOf(ModalSlideOut.prototype), "constructor", this).call(this, element);
	        this.easing('ease-out').duration(250).fromTo('translateY', '0%', '100%');
	    }

	    return ModalSlideOut;
	})(_animationsAnimation.Animation);

	_animationsAnimation.Animation.register('modal-slide-out', ModalSlideOut);

	var ModalMDSlideIn = (function (_Animation3) {
	    _inherits(ModalMDSlideIn, _Animation3);

	    function ModalMDSlideIn(element) {
	        _classCallCheck(this, ModalMDSlideIn);

	        _get(Object.getPrototypeOf(ModalMDSlideIn.prototype), "constructor", this).call(this, element);
	        this.easing('cubic-bezier(0.36,0.66,0.04,1)').duration(280).fromTo('translateY', '40px', '0px').fadeIn();
	    }

	    return ModalMDSlideIn;
	})(_animationsAnimation.Animation);

	_animationsAnimation.Animation.register('modal-md-slide-in', ModalMDSlideIn);

	var ModalMDSlideOut = (function (_Animation4) {
	    _inherits(ModalMDSlideOut, _Animation4);

	    function ModalMDSlideOut(element) {
	        _classCallCheck(this, ModalMDSlideOut);

	        _get(Object.getPrototypeOf(ModalMDSlideOut.prototype), "constructor", this).call(this, element);
	        this.duration(200).easing('cubic-bezier(0.47,0,0.745,0.715)').fromTo('translateY', '0px', '40px').fadeOut();
	    }

	    return ModalMDSlideOut;
	})(_animationsAnimation.Animation);

	_animationsAnimation.Animation.register('modal-md-slide-out', ModalMDSlideOut);
	var _a, _b;

/***/ },
/* 448 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _get = function get(_x4, _x5, _x6) { var _again = true; _function: while (_again) { var object = _x4, property = _x5, receiver = _x6; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x4 = parent; _x5 = property; _x6 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _angular2Angular2 = __webpack_require__(45);

	var _overlayOverlayController = __webpack_require__(440);

	var _configConfig = __webpack_require__(437);

	var _animationsAnimation = __webpack_require__(441);

	var _buttonButton = __webpack_require__(449);

	var _ionicUtil = __webpack_require__(442);

	var util = _interopRequireWildcard(_ionicUtil);

	/**
	 * The Ionic Popup service allows the creation of popup windows that require the user to respond in order to continue.
	 *
	 * The popup service has support for more flexible versions of the built in `alert()`, `prompt()`, and `confirm()` functions that users are used to, in addition to allowing popups with completely custom content and look.
	 *
	 * @usage
	 * ```ts
	 * class myApp {
	 *
	 *   constructor(popup: Popup) {
	 *     this.popup = popup;
	 *   }
	 *
	 *   doAlert() {
	 *     this.popup.alert({
	 *       title: "New Friend!",
	 *       template: "Your friend, Obi wan Kenobi, just accepted your friend request!",
	 *       cssClass: 'my-alert'
	 *     }).then(() => {
	 *       console.log('Alert closed');
	 *     });
	 *   }
	 *
	 *   doPrompt() {
	 *     this.popup.prompt({
	 *       title: "New Album",
	 *       template: "Enter a name for this new album you're so keen on adding",
	 *       inputPlaceholder: "Title",
	 *       okText: "Save",
	 *       okType: "secondary"
	 *     }).then((name) => {
	 *       console.log('Name entered:', name);
	 *     }, () => {
	 *       console.error('Prompt closed');
	 *     });
	 *   }
	 *
	 *   doConfirm() {
	 *     this.popup.confirm({
	 *       title: "Use this lightsaber?",
	 *       subTitle: "You can't exchange lightsabers",
	 *       template: "Do you agree to use this lightsaber to do good across the intergalactic galaxy?",
	 *       cancelText: "Disagree",
	 *       okText: "Agree"
	 *     }).then((result, ev) => {
	 *       console.log('Confirmed!', result);
	 *     }, () => {
	 *       console.error('Not confirmed!');
	 *     });
	 *   }
	 * }
	 * ```
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var Popup = (function () {
	    function Popup(ctrl, config) {
	        _classCallCheck(this, Popup);

	        this.ctrl = ctrl;
	        this._defaults = {
	            enterAnimation: config.get('popupEnter'),
	            leaveAnimation: config.get('popupLeave')
	        };
	    }

	    /**
	     * TODO
	     * @param {TODO} opts  TODO
	     * @returns {object} A promise
	     */

	    _createClass(Popup, [{
	        key: "open",
	        value: function open(opts) {
	            var _this = this;

	            return new Promise(function (resolve, reject) {
	                opts.promiseResolve = resolve;
	                opts.promiseReject = reject;
	                var defaults = util.merge({}, _this._defaults);
	                return _this.ctrl.open(OVERLAY_TYPE, PopupCmp, util.extend(defaults, opts));
	            });
	        }

	        /**
	         * Show a simple alert popup with a message and one button
	         * that the user can tap to close the popup.
	         *
	         * @param {object} opts The options for showing the alert, of the form:
	         *
	         * ```
	         * {
	         *   title: '', // String. The title of the popup.
	         *   cssClass: '', // String (optional). The custom CSS class name.
	         *   subTitle: '', // String (optional). The sub-title of the popup.
	         *   template: '', // String (optional). The html template to place in the popup body.
	         *   templateUrl: '', // String (optional). The URL of an html template to place in the popup body.
	         *   okText: '', // String (default: 'OK'). The text of the OK button.
	         *   okType: '', // String (default: ''). The type of the OK button.
	         * }
	         * ```
	         *
	         * @returns {object} A promise which is resolved when the popup is closed.
	         */
	    }, {
	        key: "alert",
	        value: function alert() {
	            var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	            if (typeof opts === 'string') {
	                opts = {
	                    title: opts
	                };
	            }
	            var button = {
	                text: opts.okText || 'OK',
	                type: opts.okType || '',
	                onTap: function onTap(event, popupRef) {
	                    // Allow it to close
	                    //resolve();
	                }
	            };
	            opts = util.extend({
	                showPrompt: false,
	                cancel: function cancel() {
	                    //reject();
	                },
	                buttons: [button]
	            }, opts);
	            return this.open(opts);
	        }

	        /**
	         * Show a simple confirm popup with a message, Cancel and OK button.
	         *
	         * Resolves the promise with true if the user presses the OK button, and false if the user presses the Cancel button.
	         *
	         * @param {object} opts The options for showing the confirm, of the form:
	         *
	         * ```
	         * {
	         *   title: '', // String. The title of the popup.
	         *   cssClass: '', // String (optional). The custom CSS class name.
	         *   subTitle: '', // String (optional). The sub-title of the popup.
	         *   template: '', // String (optional). The html template to place in the popup body.
	         *   templateUrl: '', // String (optional). The URL of an html template to place in the popup body.
	         *   cancelText: '', // String (default: 'Cancel'). The text of the Cancel button.
	         *   cancelType: '', // String (default: ''). The type of the Cancel button.
	         *   okText: '', // String (default: 'OK'). The text of the OK button.
	         *   okType: '', // String (default: ''). The type of the OK button.
	         * }
	         * ```
	         *
	         * @returns {object} A promise which is resolved when the popup is closed.
	         */
	    }, {
	        key: "confirm",
	        value: function confirm() {
	            var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	            if (typeof opts === 'string') {
	                opts = {
	                    title: opts
	                };
	            }
	            var okButton = {
	                text: opts.okText || 'OK',
	                type: opts.okType || '',
	                onTap: function onTap(event, popupRef) {
	                    // Allow it to close
	                }
	            };
	            var cancelButton = {
	                text: opts.cancelText || 'Cancel',
	                type: opts.cancelType || '',
	                isCancel: true,
	                onTap: function onTap(event, popupRef) {
	                    // Allow it to close
	                }
	            };
	            opts = util.extend({
	                showPrompt: false,
	                cancel: function cancel() {},
	                buttons: [cancelButton, okButton]
	            }, opts);
	            return this.open(opts);
	        }

	        /**
	         * Show a simple prompt popup with a message, input, Cancel and OK button.
	         *
	         * Resolves the promise with the value of the input if the user presses OK, and with undefined if the user presses Cancel.
	         *
	         * @param {object} opts The options for showing the prompt, of the form:
	         *
	         * ```
	         * {
	         *   title: '', // String. The title of the popup.
	         *   cssClass: '', // String (optional). The custom CSS class name.
	         *   subTitle: '', // String (optional). The sub-title of the popup.
	         *   template: '', // String (optional). The html template to place in the popup body.
	         *   templateUrl: '', // String (optional). The URL of an html template to place in the popup body.
	         *   inputType: // String (default: 'text'). The type of input to use.
	         *   inputPlaceholder: // String (default: ''). A placeholder to use for the input.
	         *   cancelText: '', // String (default: 'Cancel'). The text of the Cancel button.
	         *   cancelType: '', // String (default: ''). The type of the Cancel button.
	         *   okText: '', // String (default: 'OK'). The text of the OK button.
	         *   okType: '', // String (default: ''). The type of the OK button.
	         * }
	         * ```
	         *
	         * @returns {object} A promise which is resolved when the popup is closed.
	         */
	    }, {
	        key: "prompt",
	        value: function prompt() {
	            var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	            if (typeof opts === 'string') {
	                opts = {
	                    title: opts
	                };
	            }
	            var okButton = {
	                text: opts.okText || 'OK',
	                type: opts.okType || '',
	                onTap: function onTap(event, popupRef) {
	                    // Allow it to close
	                }
	            };
	            var cancelButton = {
	                text: opts.cancelText || 'Cancel',
	                type: opts.cancelType || '',
	                isCancel: true,
	                onTap: function onTap(event, popupRef) {
	                    // Allow it to close
	                }
	            };
	            opts = util.extend({
	                showPrompt: true,
	                promptPlaceholder: '',
	                cancel: function cancel() {},
	                buttons: [cancelButton, okButton]
	            }, opts);
	            return this.open(opts);
	        }

	        /**
	         * TODO
	         * @param {TODO} handle  TODO
	         * @returns {TODO} TODO
	         */
	    }, {
	        key: "get",
	        value: function get(handle) {
	            if (handle) {
	                return this.ctrl.getByHandle(handle, OVERLAY_TYPE);
	            }
	            return this.ctrl.getByType(OVERLAY_TYPE);
	        }
	    }]);

	    return Popup;
	})();
	exports.Popup = Popup;
	exports.Popup = Popup = __decorate([(0, _angular2Angular2.Injectable)(), __metadata('design:paramtypes', [typeof (_a = typeof _overlayOverlayController.OverlayController !== 'undefined' && _overlayOverlayController.OverlayController) === 'function' && _a || Object, typeof (_b = typeof _configConfig.Config !== 'undefined' && _configConfig.Config) === 'function' && _b || Object])], Popup);
	var OVERLAY_TYPE = 'popup';
	// TODO add button type to button: [type]="button.type"
	var PopupCmp = (function () {
	    function PopupCmp(elementRef) {
	        _classCallCheck(this, PopupCmp);

	        this.elementRef = elementRef;
	    }

	    _createClass(PopupCmp, [{
	        key: "onInit",
	        value: function onInit() {
	            var _this2 = this;

	            setTimeout(function () {
	                // TODO: make more better, no DOM BS
	                _this2.promptInput = _this2.elementRef.nativeElement.querySelector('input');
	                if (_this2.promptInput) {
	                    _this2.promptInput.value = '';
	                }
	            });
	        }
	    }, {
	        key: "buttonTapped",
	        value: function buttonTapped(button, event) {
	            var promptValue = this.promptInput && this.promptInput.value;
	            var retVal = button.onTap && button.onTap(event, this, {
	                promptValue: promptValue
	            });
	            // If the event.preventDefault() wasn't called, close
	            if (!event.defaultPrevented) {
	                // If this is a cancel button, reject the promise
	                if (button.isCancel) {
	                    this.promiseReject();
	                } else {
	                    // Resolve with the prompt value
	                    this.promiseResolve(promptValue);
	                }
	                return this.close();
	            }
	        }
	    }, {
	        key: "_cancel",
	        value: function _cancel(event) {
	            this.cancel && this.cancel(event);
	            if (!event.defaultPrevented) {
	                this.promiseReject();
	                return this.close();
	            }
	        }
	    }]);

	    return PopupCmp;
	})();
	PopupCmp = __decorate([(0, _angular2Angular2.Component)({
	    selector: 'ion-popup',
	    template: '<backdrop (click)="_cancel($event)" tappable disable-activated></backdrop>' + '<popup-wrapper [ng-class]="cssClass">' + '<div class="popup-head">' + '<h2 class="popup-title" [inner-html]="title" *ng-if="title"></h2>' + '<h3 class="popup-sub-title" [inner-html]="subTitle" *ng-if="subTitle"></h3>' + '</div>' + '<div class="popup-body">' + '<div [inner-html]="template" *ng-if="template"></div>' + '<input type="{{inputType || \'text\'}}" placeholder="{{inputPlaceholder}}" *ng-if="showPrompt" class="prompt-input">' + '</div>' + '<div class="popup-buttons" *ng-if="buttons.length">' + '<button *ng-for="#button of buttons" (click)="buttonTapped(button, $event)" [inner-html]="button.text"></button>' + '</div>' + '</popup-wrapper>',
	    host: {
	        '[style.zIndex]': '_zIndex'
	    },
	    directives: [_angular2Angular2.FORM_DIRECTIVES, _angular2Angular2.NgClass, _angular2Angular2.NgIf, _angular2Angular2.NgFor, _buttonButton.Button]
	}), __metadata('design:paramtypes', [typeof (_c = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _c || Object])], PopupCmp);

	var PopupAnimation = (function (_Animation) {
	    _inherits(PopupAnimation, _Animation);

	    function PopupAnimation(element) {
	        _classCallCheck(this, PopupAnimation);

	        _get(Object.getPrototypeOf(PopupAnimation.prototype), "constructor", this).call(this, element);
	        this.easing('ease-in-out').duration(200);
	        this.backdrop = new _animationsAnimation.Animation(element.querySelector('backdrop'));
	        this.wrapper = new _animationsAnimation.Animation(element.querySelector('popup-wrapper'));
	        this.add(this.backdrop, this.wrapper);
	    }

	    /**
	     * Animations for popups
	     */
	    return PopupAnimation;
	})(_animationsAnimation.Animation);

	var PopupPopIn = (function (_PopupAnimation) {
	    _inherits(PopupPopIn, _PopupAnimation);

	    function PopupPopIn(element) {
	        _classCallCheck(this, PopupPopIn);

	        _get(Object.getPrototypeOf(PopupPopIn.prototype), "constructor", this).call(this, element);
	        this.wrapper.fromTo('opacity', '0.01', '1');
	        this.wrapper.fromTo('scale', '1.1', '1');
	        this.backdrop.fromTo('opacity', '0', '0.3');
	    }

	    return PopupPopIn;
	})(PopupAnimation);

	_animationsAnimation.Animation.register('popup-pop-in', PopupPopIn);

	var PopupPopOut = (function (_PopupAnimation2) {
	    _inherits(PopupPopOut, _PopupAnimation2);

	    function PopupPopOut(element) {
	        _classCallCheck(this, PopupPopOut);

	        _get(Object.getPrototypeOf(PopupPopOut.prototype), "constructor", this).call(this, element);
	        this.wrapper.fromTo('opacity', '1', '0');
	        this.wrapper.fromTo('scale', '1', '0.9');
	        this.backdrop.fromTo('opacity', '0.3', '0');
	    }

	    return PopupPopOut;
	})(PopupAnimation);

	_animationsAnimation.Animation.register('popup-pop-out', PopupPopOut);

	var PopupMdPopIn = (function (_PopupPopIn) {
	    _inherits(PopupMdPopIn, _PopupPopIn);

	    function PopupMdPopIn(element) {
	        _classCallCheck(this, PopupMdPopIn);

	        _get(Object.getPrototypeOf(PopupMdPopIn.prototype), "constructor", this).call(this, element);
	        this.backdrop.fromTo('opacity', '0.01', '0.5');
	    }

	    return PopupMdPopIn;
	})(PopupPopIn);

	_animationsAnimation.Animation.register('popup-md-pop-in', PopupMdPopIn);

	var PopupMdPopOut = (function (_PopupPopOut) {
	    _inherits(PopupMdPopOut, _PopupPopOut);

	    function PopupMdPopOut(element) {
	        _classCallCheck(this, PopupMdPopOut);

	        _get(Object.getPrototypeOf(PopupMdPopOut.prototype), "constructor", this).call(this, element);
	        this.backdrop.fromTo('opacity', '0.5', '0');
	    }

	    return PopupMdPopOut;
	})(PopupPopOut);

	_animationsAnimation.Animation.register('popup-md-pop-out', PopupMdPopOut);
	var _a, _b, _c;

/***/ },
/* 449 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _angular2Angular2 = __webpack_require__(45);

	var _configConfig = __webpack_require__(437);

	/**
	 * TODO
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = undefined && undefined.__param || function (paramIndex, decorator) {
	    return function (target, key) {
	        decorator(target, key, paramIndex);
	    };
	};
	var Button = function Button(config, elementRef, renderer, type) {
	    _classCallCheck(this, Button);

	    var element = elementRef.nativeElement;
	    if (config.get('hoverCSS') === false) {
	        renderer.setElementClass(elementRef, 'disable-hover', true);
	    }
	    if (element.hasAttribute('ion-item')) {
	        // no need to put on these icon classes for an ion-item
	        return;
	    }
	    if (type) {
	        renderer.setElementAttribute(elementRef, type, '');
	    }
	    // figure out if and where the icon lives in the button
	    var childNodes = element.childNodes;
	    var childNode = undefined;
	    var nodes = [];
	    for (var i = 0, l = childNodes.length; i < l; i++) {
	        childNode = childNodes[i];
	        if (childNode.nodeType === 3) {
	            // text node
	            if (childNode.textContent.trim() !== '') {
	                nodes.push(TEXT);
	            }
	        } else if (childNode.nodeType === 1) {
	            if (childNode.nodeName === 'ICON') {
	                // icon element node
	                nodes.push(ICON);
	            } else {
	                // element other than an <icon>
	                nodes.push(TEXT);
	            }
	        }
	    }
	    if (nodes.length > 1) {
	        if (nodes[0] === ICON && nodes[1] === TEXT) {
	            element.classList.add('icon-left');
	        } else if (nodes[0] === TEXT && nodes[1] === ICON) {
	            element.classList.add('icon-right');
	        }
	    } else if (nodes.length === 1 && nodes[0] === ICON) {
	        element.classList.add('icon-only');
	    }
	};
	exports.Button = Button;
	exports.Button = Button = __decorate([(0, _angular2Angular2.Directive)({
	    selector: 'button,[button]'
	}), __param(3, (0, _angular2Angular2.Attribute)('type')), __metadata('design:paramtypes', [typeof (_a = typeof _configConfig.Config !== 'undefined' && _configConfig.Config) === 'function' && _a || Object, typeof (_b = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _b || Object, typeof (_c = typeof _angular2Angular2.Renderer !== 'undefined' && _angular2Angular2.Renderer) === 'function' && _c || Object, String])], Button);
	var TEXT = 1;
	var ICON = 2;
	var _a, _b, _c;

/***/ },
/* 450 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _angular2Angular2 = __webpack_require__(45);

	/**
	 * Events is a pub/sub style event system for sending and responding to application-level
	 * events across your app.
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var Events = (function () {
	    function Events() {
	        _classCallCheck(this, Events);

	        this.channels = [];
	    }

	    /**
	     * Subscribe to an event topic. Events that get posted to that topic
	     * will trigger the provided handler.
	     *
	     * @param topic the topic to subscribe to
	     * @param handler the event handler
	     */

	    _createClass(Events, [{
	        key: "subscribe",
	        value: function subscribe(topic) {
	            var _this = this;

	            if (!this.channels[topic]) {
	                this.channels[topic] = [];
	            }

	            for (var _len = arguments.length, handlers = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	                handlers[_key - 1] = arguments[_key];
	            }

	            handlers.forEach(function (handler) {
	                _this.channels[topic].push(handler);
	            });
	        }

	        /**
	         * Unsubscribe from the given topic. Your handler will
	         * no longer receive events published to this topic.
	         *
	         * @param topic the topic to unsubscribe from
	         * @param handler the event handler
	         *
	         * @return true if a handler was removed
	         */
	    }, {
	        key: "unsubscribe",
	        value: function unsubscribe(topic, handler) {
	            var t = this.channels[topic];
	            if (!t) {
	                // Wasn't found, wasn't removed
	                return false;
	            }
	            if (!handler) {
	                // Remove all handlers for this topic
	                delete this.channels[topic];
	                return true;
	            }
	            // We need to find and remove a specific handler
	            var i = t.indexOf(handler);
	            if (i < 0) {
	                // Wasn't found, wasn't removed
	                return false;
	            }
	            t.splice(i, 1);
	            // If the channel is empty now, remove it from the channel map
	            if (!t.length) {
	                delete this.channels[topic];
	            }
	            return true;
	        }

	        /**
	         * Publish an event to the given topic.
	         *
	         * @param topic the topic to publish to
	         * @param eventData the data to send as the event
	         */
	    }, {
	        key: "publish",
	        value: function publish(topic) {
	            for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	                args[_key2 - 1] = arguments[_key2];
	            }

	            var t = this.channels[topic];
	            if (!t) {
	                return null;
	            }
	            var responses = [];
	            t.forEach(function (handler) {
	                responses.push(handler(args));
	            });
	            return responses;
	        }
	    }]);

	    return Events;
	})();
	exports.Events = Events;
	exports.Events = Events = __decorate([(0, _angular2Angular2.Injectable)(), __metadata('design:paramtypes', [])], Events);

/***/ },
/* 451 */
/***/ function(module, exports) {

	/**
	 * @private
	 * Map of possible pages that can be navigated to using an Ionic NavController
	 */
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var NavRegistry = (function () {
	    function NavRegistry() {
	        var pages = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

	        _classCallCheck(this, NavRegistry);

	        this._pages = new Map(pages.map(function (page) {
	            return [page.name, page];
	        }));
	    }

	    _createClass(NavRegistry, [{
	        key: "get",
	        value: function get(pageName) {
	            return this._pages.get(pageName);
	        }
	    }, {
	        key: "set",
	        value: function set(page) {
	            this._pages.set(page.name, page);
	        }
	    }]);

	    return NavRegistry;
	})();

	exports.NavRegistry = NavRegistry;

/***/ },
/* 452 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _angular2Angular2 = __webpack_require__(45);

	/**
	 * Provide multi-language and i18n support in your app. Translate works by
	 * mapping full strings to language translated ones. That means that you don't need
	 * to provide strings for your default language, just new languages.
	 *
	 * @usage
	 * ```js
	 * Translate.translations({
	 *   'de': {
	 *     'Welcome to MyApp': 'Willkommen auf'
	 *   }
	 * })
	 *
	 * Changing the default language:
	 *
	 * Translate.setLanguage('de');
	 * ```
	 *
	 * Usage in a template:
	 *
	 * ```js
	 * <span>{{ 'Welcome to MyApp' | translate }}
	 * ```
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var Translate = (function () {
	    function Translate() {
	        _classCallCheck(this, Translate);

	        this._transMap = {};
	    }

	    _createClass(Translate, [{
	        key: "translations",
	        value: function translations(lang, map) {
	            this._transMap[lang] = map;
	        }
	    }, {
	        key: "setLanguage",
	        value: function setLanguage(lang) {
	            this._language = lang;
	        }
	    }, {
	        key: "getTranslations",
	        value: function getTranslations(lang) {
	            return this._transMap[lang];
	        }
	    }, {
	        key: "translate",
	        value: function translate(key, lang) {
	            // If the language isn't specified and we have no overridden one, return the string passed.
	            if (!lang && !this._language) {
	                return key;
	            }
	            var setLanguage = lang || this._language;
	            var map = this.getTranslations(setLanguage);
	            if (!map) {
	                console.warn('I18N: No translation for key', key, 'using language', setLanguage);
	                return '';
	            }
	            return this._getTranslation(map, key);
	        }
	    }, {
	        key: "_getTranslation",
	        value: function _getTranslation(map, key) {
	            return map && map[key] || '';
	        }
	    }]);

	    return Translate;
	})();
	exports.Translate = Translate;
	exports.Translate = Translate = __decorate([(0, _angular2Angular2.Injectable)(), __metadata('design:paramtypes', [])], Translate);

/***/ },
/* 453 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var FeatureDetect = (function () {
	    function FeatureDetect() {
	        _classCallCheck(this, FeatureDetect);
	    }

	    _createClass(FeatureDetect, [{
	        key: 'run',
	        value: function run(window, document) {
	            this._results = {};
	            for (var _name in featureDetects) {
	                this._results[_name] = featureDetects[_name](window, document, document.body);
	            }
	        }
	    }, {
	        key: 'has',
	        value: function has(featureName) {
	            return !!this._results[featureName];
	        }
	    }], [{
	        key: 'add',
	        value: function add(name, fn) {
	            featureDetects[name] = fn;
	        }
	    }]);

	    return FeatureDetect;
	})();

	exports.FeatureDetect = FeatureDetect;

	var featureDetects = {};
	FeatureDetect.add('sticky', function (window, document) {
	    // css position sticky
	    var ele = document.createElement('div');
	    ele.style.cssText = 'position:-webkit-sticky;position:sticky';
	    return ele.style.position.indexOf('sticky') > -1;
	});
	FeatureDetect.add('hairlines', function (window, document, body) {
	    /**
	    * Hairline Shim
	    * Add the "hairline" CSS class name to the body tag
	    * if the browser supports subpixels.
	    */
	    var canDo = false;
	    if (window.devicePixelRatio >= 2) {
	        var hairlineEle = document.createElement('div');
	        hairlineEle.style.border = '.5px solid transparent';
	        body.appendChild(hairlineEle);
	        if (hairlineEle.offsetHeight === 1) {
	            body.classList.add('hairlines');
	            canDo = true;
	        }
	        body.removeChild(hairlineEle);
	    }
	    return canDo;
	});

/***/ },
/* 454 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});
	exports.initTapClick = initTapClick;
	exports.isActivatable = isActivatable;

	var _utilDom = __webpack_require__(435);

	var _activator = __webpack_require__(455);

	var _ripple = __webpack_require__(456);

	var startCoord = null;
	var pointerTolerance = 4;
	var lastTouch = 0;
	var lastActivated = 0;
	var disableNativeClickUntil = 0;
	var disableNativeClickAmount = 3000;
	var activator = null;
	var isTapPolyfill = false;
	var app = null;
	var win = null;
	var doc = null;
	/**
	 * @private
	 */

	function initTapClick(windowInstance, documentInstance, appInstance, config) {
	    win = windowInstance;
	    doc = documentInstance;
	    app = appInstance;
	    if (config.get('activator') == 'ripple') {
	        activator = new _ripple.RippleActivator(app, config);
	    } else if (config.get('activator') == 'highlight') {
	        activator = new _activator.Activator(app, config);
	    }
	    isTapPolyfill = config.get('tapPolyfill') === true;
	    addListener('click', click, true);
	    addListener('touchstart', touchStart);
	    addListener('touchend', touchEnd);
	    addListener('touchcancel', touchCancel);
	    addListener('mousedown', mouseDown, true);
	    addListener('mouseup', mouseUp, true);
	}

	function touchStart(ev) {
	    touchAction();
	    pointerStart(ev);
	}
	function touchEnd(ev) {
	    touchAction();
	    if (isTapPolyfill && startCoord && app.isEnabled()) {
	        var endCoord = (0, _utilDom.pointerCoord)(ev);
	        if (!(0, _utilDom.hasPointerMoved)(pointerTolerance, startCoord, endCoord)) {
	            console.debug('create click from touch');
	            disableNativeClickUntil = Date.now() + disableNativeClickAmount;
	            var clickEvent = doc.createEvent('MouseEvents');
	            clickEvent.initMouseEvent('click', true, true, win, 1, 0, 0, endCoord.x, endCoord.y, false, false, false, false, 0, null);
	            clickEvent.isIonicTap = true;
	            ev.target.dispatchEvent(clickEvent);
	        }
	    }
	    pointerEnd(ev);
	}
	function touchCancel(ev) {
	    touchAction();
	    pointerCancel(ev);
	}
	function mouseDown(ev) {
	    if (isDisabledNativeClick()) {
	        console.debug('mouseDown prevent');
	        ev.preventDefault();
	        ev.stopPropagation();
	    } else if (lastTouch + disableNativeClickAmount < Date.now()) {
	        pointerStart(ev);
	    }
	}
	function mouseUp(ev) {
	    if (isDisabledNativeClick()) {
	        console.debug('mouseUp prevent');
	        ev.preventDefault();
	        ev.stopPropagation();
	    }
	    if (lastTouch + disableNativeClickAmount < Date.now()) {
	        pointerEnd(ev);
	    }
	}
	function pointerStart(ev) {
	    var activatableEle = getActivatableTarget(ev.target);
	    if (activatableEle) {
	        startCoord = (0, _utilDom.pointerCoord)(ev);
	        var now = Date.now();
	        if (lastActivated + 150 < now) {
	            activator && activator.downAction(ev, activatableEle, startCoord.x, startCoord.y);
	            lastActivated = now;
	        }
	        moveListeners(true);
	    } else {
	        startCoord = null;
	    }
	}
	function pointerEnd(ev) {
	    moveListeners(false);
	    activator && activator.upAction();
	}
	function pointerMove(ev) {
	    var moveCoord = (0, _utilDom.pointerCoord)(ev);
	    if ((0, _utilDom.hasPointerMoved)(10, startCoord, moveCoord)) {
	        pointerCancel(ev);
	    }
	}
	function pointerCancel(ev) {
	    console.debug('pointerCancel from', ev.type);
	    activator && activator.clearState();
	    moveListeners(false);
	}
	function moveListeners(shouldAdd) {
	    if (shouldAdd) {
	        if (isTapPolyfill) {
	            addListener('touchmove', pointerMove);
	        }
	        addListener('mousemove', pointerMove);
	    } else {
	        if (isTapPolyfill) {
	            removeListener('touchmove', pointerMove);
	        }
	        removeListener('mousemove', pointerMove);
	    }
	}
	function setDisableNativeClick() {
	    if (isTapPolyfill) {
	        disableNativeClickTime = Date.now() + disableNativeClickLimit;
	    }
	}
	function isDisabledNativeClick() {
	    return disableNativeClickUntil > Date.now();
	}
	function click(ev) {
	    var preventReason = null;
	    if (!app.isEnabled()) {
	        preventReason = 'appDisabled';
	    } else if (!ev.isIonicTap && isDisabledNativeClick()) {
	        preventReason = 'nativeClick';
	    }
	    if (preventReason !== null) {
	        console.debug('click prevent', preventReason);
	        ev.preventDefault();
	        ev.stopPropagation();
	    }
	}
	function getActivatableTarget(ele) {
	    var targetEle = ele;
	    for (var x = 0; x < 4; x++) {
	        if (!targetEle) break;
	        if (isActivatable(targetEle)) return targetEle;
	        targetEle = targetEle.parentElement;
	    }
	    return null;
	}
	/**
	 * @private
	 */

	function isActivatable(ele) {
	    if (ACTIVATABLE_ELEMENTS.test(ele.tagName)) {
	        return true;
	    }
	    var attributes = ele.attributes;
	    for (var i = 0, l = attributes.length; i < l; i++) {
	        if (ACTIVATABLE_ATTRIBUTES.test(attributes[i].name)) {
	            return true;
	        }
	    }
	    return false;
	}

	function touchAction() {
	    lastTouch = Date.now();
	}
	function addListener(type, listener, useCapture) {
	    doc.addEventListener(type, listener, useCapture);
	}
	function removeListener(type, listener) {
	    doc.removeEventListener(type, listener);
	}
	var ACTIVATABLE_ELEMENTS = /^(A|BUTTON)$/;
	var ACTIVATABLE_ATTRIBUTES = /tappable/;

/***/ },
/* 455 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _utilDom = __webpack_require__(435);

	var Activator = (function () {
	    function Activator(app, config) {
	        _classCallCheck(this, Activator);

	        this.app = app;
	        this.queue = [];
	        this.active = [];
	        this.clearStateDefers = 5;
	        this.clearAttempt = 0;
	        this.activatedClass = config.get('activatedClass') || 'activated';
	        this.x = 0;
	        this.y = 0;
	    }

	    _createClass(Activator, [{
	        key: 'downAction',
	        value: function downAction(ev, activatableEle, pointerX, pointerY, callback) {
	            var _this = this;

	            // the user just pressed down
	            if (this.disableActivated(ev)) return false;
	            // remember where they pressed
	            this.x = pointerX;
	            this.y = pointerY;
	            // queue to have this element activated
	            this.queue.push(activatableEle);
	            (0, _utilDom.rafFrames)(2, function () {
	                var activatableEle = undefined;
	                for (var i = 0; i < _this.queue.length; i++) {
	                    activatableEle = _this.queue[i];
	                    if (activatableEle && activatableEle.parentNode) {
	                        _this.active.push(activatableEle);
	                        activatableEle.classList.add(_this.activatedClass);
	                    }
	                }
	                _this.queue = [];
	            });
	            return true;
	        }
	    }, {
	        key: 'upAction',
	        value: function upAction() {
	            var _this2 = this;

	            // the user was pressing down, then just let up
	            (0, _utilDom.rafFrames)(this.clearStateDefers, function () {
	                _this2.clearState();
	            });
	        }
	    }, {
	        key: 'clearState',
	        value: function clearState() {
	            var _this3 = this;

	            // all states should return to normal
	            if (!this.app.isEnabled() || this.app.isTransitioning()) {
	                // the app is actively disabled, so don't bother deactivating anything.
	                // this makes it easier on the GPU so it doesn't have to redraw any
	                // buttons during a transition. This will retry in XX milliseconds.
	                setTimeout(function () {
	                    _this3.clearState();
	                }, 600);
	            } else {
	                // not actively transitioning, good to deactivate any elements
	                this.deactivate();
	            }
	        }
	    }, {
	        key: 'deactivate',
	        value: function deactivate() {
	            var _this4 = this;

	            // remove the active class from all active elements
	            this.queue = [];
	            (0, _utilDom.rafFrames)(2, function () {
	                for (var i = 0; i < _this4.active.length; i++) {
	                    _this4.active[i].classList.remove(_this4.activatedClass);
	                }
	                _this4.active = [];
	            });
	        }
	    }, {
	        key: 'disableActivated',
	        value: function disableActivated(ev) {
	            if (ev.defaultPrevented) return true;
	            var targetEle = ev.target;
	            for (var x = 0; x < 4; x++) {
	                if (!targetEle) break;
	                if (targetEle.hasAttribute('disable-activated')) return true;
	                targetEle = targetEle.parentElement;
	            }
	            return false;
	        }
	    }]);

	    return Activator;
	})();

	exports.Activator = Activator;

/***/ },
/* 456 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _activator = __webpack_require__(455);

	var _animationsAnimation = __webpack_require__(441);

	var _utilDom = __webpack_require__(435);

	var RippleActivator = (function (_Activator) {
	    _inherits(RippleActivator, _Activator);

	    function RippleActivator(app, config) {
	        _classCallCheck(this, RippleActivator);

	        _get(Object.getPrototypeOf(RippleActivator.prototype), 'constructor', this).call(this, app, config);
	        this.expands = {};
	        this.fades = {};
	        this.expandSpeed = null;
	    }

	    _createClass(RippleActivator, [{
	        key: 'downAction',
	        value: function downAction(ev, activatableEle, pointerX, pointerY) {
	            var _this = this;

	            if (_get(Object.getPrototypeOf(RippleActivator.prototype), 'downAction', this).call(this, ev, activatableEle, pointerX, pointerY)) {
	                // create a new ripple element
	                this.expandSpeed = EXPAND_DOWN_PLAYBACK_RATE;
	                (0, _utilDom.rafFrames)(2, function () {
	                    var clientRect = activatableEle.getBoundingClientRect();
	                    (0, _utilDom.raf)(function () {
	                        _this.createRipple(activatableEle, pointerX, pointerY, clientRect);
	                    });
	                });
	            }
	        }
	    }, {
	        key: 'createRipple',
	        value: function createRipple(activatableEle, pointerX, pointerY, clientRect) {
	            var _this2 = this;

	            var clientPointerX = pointerX - clientRect.left;
	            var clientPointerY = pointerY - clientRect.top;
	            var x = Math.max(Math.abs(clientRect.width - clientPointerX), clientPointerX) * 2;
	            var y = Math.max(Math.abs(clientRect.height - clientPointerY), clientPointerY) * 2;
	            var diameter = Math.max(Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)), 64);
	            var radius = Math.sqrt(clientRect.width + clientRect.height);
	            var duration = 1000 * Math.sqrt(radius / TOUCH_DOWN_ACCEL) + 0.5;
	            var rippleEle = document.createElement('md-ripple');
	            var rippleId = Date.now();
	            var eleStyle = rippleEle.style;
	            eleStyle.width = eleStyle.height = diameter + 'px';
	            eleStyle.marginTop = eleStyle.marginLeft = -(diameter / 2) + 'px';
	            eleStyle.left = clientPointerX + 'px';
	            eleStyle.top = clientPointerY + 'px';
	            activatableEle.appendChild(rippleEle);
	            // create the animation for the fade out, but don't start it yet
	            this.fades[rippleId] = new _animationsAnimation.Animation(rippleEle, { renderDelay: 0 });
	            this.fades[rippleId].fadeOut().duration(FADE_OUT_DURATION).playbackRate(1).onFinish(function () {
	                (0, _utilDom.raf)(function () {
	                    _this2.fades[rippleId].dispose(true);
	                    delete _this2.fades[rippleId];
	                });
	            });
	            // expand the circle from the users starting point
	            // start slow, and when they let up, then speed up the animation
	            this.expands[rippleId] = new _animationsAnimation.Animation(rippleEle, { renderDelay: 0 });
	            this.expands[rippleId].fromTo('scale', '0.001', '1').duration(duration).playbackRate(this.expandSpeed).onFinish(function () {
	                _this2.expands[rippleId].dispose();
	                delete _this2.expands[rippleId];
	                _this2.next();
	            }).play();
	        }
	    }, {
	        key: 'upAction',
	        value: function upAction() {
	            var _this3 = this;

	            this.deactivate();
	            this.expandSpeed = 1;
	            (0, _utilDom.rafFrames)(4, function () {
	                _this3.next();
	            });
	        }
	    }, {
	        key: 'next',
	        value: function next() {
	            var now = Date.now();
	            var rippleId = undefined;
	            for (rippleId in this.expands) {
	                if (parseInt(rippleId, 10) + 4000 < now) {
	                    this.expands[rippleId].dispose(true);
	                    delete this.expands[rippleId];
	                } else if (this.expands[rippleId].playbackRate() === EXPAND_DOWN_PLAYBACK_RATE) {
	                    this.expands[rippleId].playbackRate(EXPAND_OUT_PLAYBACK_RATE);
	                }
	            }
	            for (rippleId in this.fades) {
	                if (parseInt(rippleId, 10) + 4000 < now) {
	                    this.fades[rippleId].dispose(true);
	                    delete this.fades[rippleId];
	                } else if (!this.fades[rippleId].isPlaying) {
	                    this.fades[rippleId].isPlaying = true;
	                    this.fades[rippleId].play();
	                }
	            }
	        }
	    }, {
	        key: 'clearState',
	        value: function clearState() {
	            this.deactivate();
	            this.next();
	        }
	    }]);

	    return RippleActivator;
	})(_activator.Activator);

	exports.RippleActivator = RippleActivator;

	var TOUCH_DOWN_ACCEL = 512;
	var EXPAND_DOWN_PLAYBACK_RATE = 0.35;
	var EXPAND_OUT_PLAYBACK_RATE = 3;
	var FADE_OUT_DURATION = 700;

/***/ },
/* 457 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _config = __webpack_require__(437);

	// iOS Mode Settings
	_config.Config.setModeConfig('ios', {
	    activator: 'highlight',
	    actionSheetEnter: 'action-sheet-slide-in',
	    actionSheetLeave: 'action-sheet-slide-out',
	    actionSheetCancelIcon: '',
	    actionSheetDestructiveIcon: '',
	    backButtonText: 'Back',
	    backButtonIcon: 'ion-ios-arrow-back',
	    iconMode: 'ios',
	    menuType: 'reveal',
	    modalEnter: 'modal-slide-in',
	    modalLeave: 'modal-slide-out',
	    pageTransition: 'ios',
	    pageTransitionDelay: 16,
	    popupEnter: 'popup-pop-in',
	    popupLeave: 'popup-pop-out',
	    tabbarPlacement: 'bottom'
	});
	// Material Design Mode Settings
	_config.Config.setModeConfig('md', {
	    activator: 'ripple',
	    actionSheetEnter: 'action-sheet-md-slide-in',
	    actionSheetLeave: 'action-sheet-md-slide-out',
	    actionSheetCancelIcon: 'ion-md-close',
	    actionSheetDestructiveIcon: 'ion-md-trash',
	    backButtonText: '',
	    backButtonIcon: 'ion-md-arrow-back',
	    iconMode: 'md',
	    menuType: 'overlay',
	    modalEnter: 'modal-md-slide-in',
	    modalLeave: 'modal-md-slide-out',
	    pageTransition: 'md',
	    pageTransitionDelay: 120,
	    popupEnter: 'popup-md-pop-in',
	    popupLeave: 'popup-md-pop-out',
	    tabbarHighlight: true,
	    tabbarPlacement: 'top',
	    tabSubPages: true
	});

/***/ },
/* 458 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});
	exports.Page = Page;
	exports.ConfigComponent = ConfigComponent;
	exports.App = App;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	var _angular2Angular2 = __webpack_require__(45);

	var _ionicUtil = __webpack_require__(442);

	var util = _interopRequireWildcard(_ionicUtil);

	var _bootstrap = __webpack_require__(44);

	var _directives = __webpack_require__(459);

	/**
	 * _For more information on how pages are created, see the [NavController API
	 * reference](../../components/nav/NavController/#creating_pages)._
	 *
	 * The Page decorator indicates that the decorated class is an Ionic
	 * navigation component, meaning it can be navigated to using a NavController.
	 *
	 * Pages have all [IONIC_DIRECTIVES](../IONIC_DIRECTIVES/), which include
	 * all Ionic components and directives, as well as Angular's [CORE_DIRECTIVES](https://angular.io/docs/js/latest/api/core/CORE_DIRECTIVES-const.html)
	 * and [FORM_DIRECTIVES](https://angular.io/docs/js/latest/api/core/FORM_DIRECTIVES-const.html),
	 * already provided to them, so you only need to supply custom components and
	 * directives to your pages:
	 *
	 * ```ts
	 * @Page({
	 *   template: `
	 *     <ion-checkbox my-custom-dir>
	 *     </ion-checkbox>`
	 *   directives: [MyCustomDirective]
	 * })
	 * class MyPage {}
	 * ```
	 * Here [Checkbox](../../../components/checkbox/Checkbox/) will load because
	 * it is in IONIC_DIRECTIVES, so there is no need to add it to the `directives`
	 * array.
	 *
	 * For custom components that use Ionic components, you will need to include
	 * IONIC_DIRECTIVES in the `directives` array:
	 *
	 * ```ts
	 * import {IONIC_DIRECTIVES} from 'ionic/ionic';
	 * @Component({
	 *   selector: 'my-component'
	 *   template: `<div class="my-style">
	 *   						  <ion-checkbox></ion-checkbox>
	 *   						</div>`,
	 *   directives: [IONIC_DIRECTIVES]
	 * })
	 * class MyCustomCheckbox {}
	 *```
	 * Alternatively, you could:
	 * ```ts
	 * import {Checkbox, Icon} from 'ionic/ionic'
	 * ```
	 * along with any other components and add them individually:
	 * ```
	 * @Component({
	 *   ...
	 *   directives: [Checkbox, Icon]
	 * })
	 * ```
	 * However, using IONIC_DIRECTIVES will always *Just Work* with no
	 * performance overhead, so there is really no reason to not always use it.
	 *
	 * Pages have their content automatically wrapped in `<ion-view>`, so although
	 * you may see these tags if you inspect your markup, you don't need to include
	 * them in your templates.
	 */

	function Page() {
	    var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    return function (cls) {
	        config.selector = 'ion-page';
	        config.directives = config.directives ? config.directives.concat(_directives.IONIC_DIRECTIVES) : _directives.IONIC_DIRECTIVES;
	        config.host = config.host || {};
	        config.host['[hidden]'] = '_hidden';
	        config.host['[class.tab-subpage]'] = '_tabSubPage';
	        config.host['[style.zIndex]'] = '_zIndex';
	        var annotations = Reflect.getMetadata('annotations', cls) || [];
	        annotations.push(new _angular2Angular2.Component(config));
	        Reflect.defineMetadata('annotations', annotations, cls);
	        return cls;
	    };
	}

	/**
	 * @private
	 */

	function ConfigComponent(config) {
	    return function (cls) {
	        var annotations = Reflect.getMetadata('annotations', cls) || [];
	        annotations.push(new _angular2Angular2.Component(appendConfig(cls, config)));
	        Reflect.defineMetadata('annotations', annotations, cls);
	        return cls;
	    };
	}

	/**
	 * @private
	 */
	function appendConfig(cls, config) {
	    config.host = config.host || {};
	    cls.defaultInputs = config.defaultInputs || {};
	    config.inputs = config.inputs || [];
	    for (var prop in cls.defaultInputs) {
	        // add the property to the component "inputs"
	        config.inputs.push(prop);
	        // set the component "hostProperties", so the instance's
	        // input value will be used to set the element's attribute
	        config.host['[attr.' + util.pascalCaseToDashCase(prop) + ']'] = prop;
	    }
	    cls.delegates = config.delegates;
	    return config;
	}
	/**
	 * TODO
	 */

	function App() {
	    var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    return function (cls) {
	        // get current annotations
	        var annotations = Reflect.getMetadata('annotations', cls) || [];
	        args.selector = 'ion-app';
	        // auto add Ionic directives
	        args.directives = args.directives ? args.directives.concat(_directives.IONIC_DIRECTIVES) : _directives.IONIC_DIRECTIVES;
	        // if no template was provided, default so it has a root <ion-nav>
	        if (!args.templateUrl && !args.template) {
	            args.template = '<ion-nav></ion-nav>';
	        }
	        // create @Component
	        annotations.push(new _angular2Angular2.Component(args));
	        // redefine with added annotations
	        Reflect.defineMetadata('annotations', annotations, cls);
	        console.time('bootstrap');
	        (0, _angular2Angular2.bootstrap)(cls, (0, _bootstrap.ionicProviders)(args)).then(function () {
	            console.timeEnd('bootstrap');
	        });
	        return cls;
	    };
	}

/***/ },
/* 459 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _angular2Angular2 = __webpack_require__(45);

	var _componentsOverlayOverlay = __webpack_require__(460);

	var _componentsMenuMenu = __webpack_require__(461);

	var _componentsMenuMenuToggle = __webpack_require__(469);

	var _componentsMenuMenuClose = __webpack_require__(476);

	var _componentsButtonButton = __webpack_require__(449);

	var _componentsBlurBlur = __webpack_require__(477);

	var _componentsContentContent = __webpack_require__(478);

	var _componentsScrollScroll = __webpack_require__(480);

	var _componentsScrollPullToRefresh = __webpack_require__(481);

	var _componentsSlidesSlides = __webpack_require__(482);

	var _componentsTabsTabs = __webpack_require__(484);

	var _componentsTabsTab = __webpack_require__(486);

	var _componentsListList = __webpack_require__(487);

	var _componentsItemItem = __webpack_require__(490);

	var _componentsItemItemGroup = __webpack_require__(491);

	var _componentsItemItemSliding = __webpack_require__(492);

	var _componentsToolbarToolbar = __webpack_require__(475);

	var _componentsIconIcon = __webpack_require__(446);

	var _componentsCheckboxCheckbox = __webpack_require__(493);

	var _componentsSwitchSwitch = __webpack_require__(494);

	var _componentsTextInputTextInput = __webpack_require__(495);

	var _componentsTextInputLabel = __webpack_require__(496);

	var _componentsSegmentSegment = __webpack_require__(497);

	var _componentsRadioRadio = __webpack_require__(498);

	var _componentsSearchbarSearchbar = __webpack_require__(499);

	var _componentsNavNav = __webpack_require__(500);

	var _componentsNavNavPush = __webpack_require__(501);

	var _componentsNavNavRouter = __webpack_require__(502);

	var _componentsNavbarNavbar = __webpack_require__(474);

	var _componentsAppId = __webpack_require__(485);

	var _componentsShowHideWhenShowHideWhen = __webpack_require__(503);

	/**
	 * The core Ionic directives as well as Angular's CORE_DIRECTIVES and
	 * FORM_DIRECTIVES.  Automatically available in every [@Page](../Page/) template.
	 */
	var IONIC_DIRECTIVES = [
	// Angular
	_angular2Angular2.CORE_DIRECTIVES, _angular2Angular2.FORM_DIRECTIVES,
	// Content
	_componentsOverlayOverlay.OverlayAnchor, _componentsMenuMenu.Menu, _componentsMenuMenuToggle.MenuToggle, _componentsMenuMenuClose.MenuClose, _componentsButtonButton.Button, _componentsBlurBlur.Blur, _componentsContentContent.Content, _componentsScrollScroll.Scroll, _componentsScrollPullToRefresh.Refresher,
	// Lists
	_componentsListList.List, _componentsListList.ListHeader, _componentsItemItem.Item, _componentsItemItemGroup.ItemGroup, _componentsItemItemGroup.ItemGroupTitle, _componentsItemItemSliding.ItemSliding,
	// Slides
	_componentsSlidesSlides.Slides, _componentsSlidesSlides.Slide, _componentsSlidesSlides.SlideLazy,
	// Tabs
	_componentsTabsTabs.Tabs, _componentsTabsTab.Tab,
	// Toolbar
	_componentsToolbarToolbar.Toolbar, _componentsToolbarToolbar.ToolbarTitle, _componentsToolbarToolbar.ToolbarItem,
	// Media
	_componentsIconIcon.Icon,
	// Forms
	_componentsSearchbarSearchbar.SearchBar, _componentsSegmentSegment.Segment, _componentsSegmentSegment.SegmentButton, _componentsCheckboxCheckbox.Checkbox, _componentsRadioRadio.RadioGroup, _componentsRadioRadio.RadioButton, _componentsSwitchSwitch.Switch, _componentsTextInputTextInput.TextInput, _componentsTextInputTextInput.TextInputElement, _componentsTextInputLabel.Label,
	// Nav
	_componentsNavNav.Nav, _componentsNavbarNavbar.NavbarTemplate, _componentsNavbarNavbar.Navbar, _componentsNavNavPush.NavPush, _componentsNavNavPush.NavPop, _componentsNavNavRouter.NavRouter, _componentsAppId.IdRef, _componentsShowHideWhenShowHideWhen.ShowWhen, _componentsShowHideWhenShowHideWhen.HideWhen];
	exports.IONIC_DIRECTIVES = IONIC_DIRECTIVES;

/***/ },
/* 460 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _angular2Angular2 = __webpack_require__(45);

	var _overlayController = __webpack_require__(440);

	/**
	 * @private
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var OverlayAnchor = (function () {
	    function OverlayAnchor(overlayCtrl, elementRef, loader) {
	        _classCallCheck(this, OverlayAnchor);

	        if (overlayCtrl.anchor) {
	            throw 'An app should only have one <ion-overlay></ion-overlay>';
	        }
	        this.elementRef = elementRef;
	        this.loader = loader;
	        overlayCtrl.anchor = this;
	    }

	    _createClass(OverlayAnchor, [{
	        key: "append",
	        value: function append(componentType) {
	            return this.loader.loadIntoLocation(componentType, this.elementRef, 'contents')["catch"](function (err) {
	                console.error(err);
	            });
	        }
	    }]);

	    return OverlayAnchor;
	})();
	exports.OverlayAnchor = OverlayAnchor;
	exports.OverlayAnchor = OverlayAnchor = __decorate([(0, _angular2Angular2.Component)({
	    selector: 'ion-overlay',
	    template: '<template #contents></template>'
	}), __metadata('design:paramtypes', [typeof (_a = typeof _overlayController.OverlayController !== 'undefined' && _overlayController.OverlayController) === 'function' && _a || Object, typeof (_b = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _b || Object, typeof (_c = typeof _angular2Angular2.DynamicComponentLoader !== 'undefined' && _angular2Angular2.DynamicComponentLoader) === 'function' && _c || Object])], OverlayAnchor);
	var _a, _b, _c;

/***/ },
/* 461 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _angular2Angular2 = __webpack_require__(45);

	var _ion = __webpack_require__(462);

	var _appApp = __webpack_require__(434);

	var _configConfig = __webpack_require__(437);

	var _platformPlatform = __webpack_require__(438);

	var _utilKeyboard = __webpack_require__(444);

	var _menuGestures = __webpack_require__(463);

	var gestures = _interopRequireWildcard(_menuGestures);

	/**
	 * _For basic Menu usage, see the [Menu section](../../../../components/#menus)
	 * of the Component docs._
	 *
	 * Menu is a side-menu navigation that can be dragged out or toggled to show.
	 *
	 * In order to use Menu, you must specify a [reference](https://angular.io/docs/ts/latest/guide/user-input.html#local-variables)
	 * to the content element that Menu should listen on for drag events, using the
	 * `content` property:
	 * ```html
	 * <ion-menu [content]="contentRef">
	 *   <ion-content>
	 *     <ion-list>
	 *     ...
	 *     </ion-list>
	 *   </ion-content>
	 * </ion-menu>
	 *
	 * <ion-nav #content-ref [root]="rootPage"></ion-nav>
	 * ```
	 *
	 * By default, Menus are on the left, but this can be overriden with the `side`
	 * property:
	 * ```html
	 * <ion-menu [content]="contentRef" side="right"></ion-menu>
	 * ```
	 *
	 * Menu supports two display styles: overlay, and reveal. Overlay
	 * is the traditional Android drawer style, and Reveal is the traditional iOS
	 * style. By default, Menu will adjust to the correct style for the platform,
	 * but this can be overriden using the `type` property:
	 * ```html
	 * <ion-menu [content]="contentRef" type="overlay"></ion-menu>
	 * ```
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = undefined && undefined.__param || function (paramIndex, decorator) {
	    return function (target, key) {
	        decorator(target, key, paramIndex);
	    };
	};
	var Menu = (function (_Ion) {
	    _inherits(Menu, _Ion);

	    function Menu(app, elementRef, config, platform, keyboard) {
	        _classCallCheck(this, Menu);

	        _get(Object.getPrototypeOf(Menu.prototype), "constructor", this).call(this, elementRef, config);
	        this.app = app;
	        this.platform = platform;
	        this.keyboard = keyboard;
	        this.opening = new _angular2Angular2.EventEmitter('opening');
	        this.isOpen = false;
	        this._preventTime = 0;
	        this.isEnabled = true;
	    }

	    /**
	     * @private
	     */

	    _createClass(Menu, [{
	        key: "onInit",
	        value: function onInit() {
	            _get(Object.getPrototypeOf(Menu.prototype), "onInit", this).call(this);
	            var content = this.content;
	            this._cntEle = content instanceof Node ? content : content && content.getNativeElement && content.getNativeElement();
	            if (!this._cntEle) {
	                return console.error('Menu: must have a [content] element to listen for drag events on. Example:\n\n<ion-menu [content]="content"></ion-menu>\n\n<ion-nav #content></ion-nav>');
	            }
	            if (this.side !== 'left' && this.side !== 'right') {
	                this.side = 'left';
	            }
	            if (!this.id) {
	                // Auto register
	                this.id = 'menu';
	                this.app.register(this.id, this);
	            }
	            this._initGesture();
	            this._initType(this.type);
	            this._cntEle.classList.add('menu-content');
	            this._cntEle.classList.add('menu-content-' + this.type);
	            var self = this;
	            this.onContentClick = function (ev) {
	                if (self.isEnabled) {
	                    ev.preventDefault();
	                    ev.stopPropagation();
	                    self.close();
	                }
	            };
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "_initGesture",
	        value: function _initGesture() {
	            switch (this.side) {
	                case 'right':
	                    this._gesture = new gestures.RightMenuGesture(this);
	                    break;
	                case 'left':
	                    this._gesture = new gestures.LeftMenuGesture(this);
	                    break;
	            }
	            this._targetGesture = new gestures.TargetGesture(this);
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "_initType",
	        value: function _initType(type) {
	            type = type && type.trim().toLowerCase();
	            if (!type) {
	                type = this.config.get('menuType');
	            }
	            this.type = type;
	        }
	    }, {
	        key: "_getType",
	        value: function _getType() {
	            if (!this._type) {
	                this._type = new menuTypes[this.type](this);
	                if (this.config.get('animate') === false) {
	                    this._type.open.duration(33);
	                    this._type.close.duration(33);
	                }
	            }
	            return this._type;
	        }

	        /**
	         * Sets the state of the Menu to open or not.
	         * @param {boolean} isOpen  If the Menu is open or not.
	         * @return {Promise} TODO
	         */
	    }, {
	        key: "setOpen",
	        value: function setOpen(shouldOpen) {
	            var _this = this;

	            // _isPrevented is used to prevent unwanted opening/closing after swiping open/close
	            // or swiping open the menu while pressing down on the menu-toggle button
	            if (shouldOpen === this.isOpen || this._isPrevented()) {
	                return Promise.resolve();
	            }
	            this._before();
	            return this._getType().setOpen(shouldOpen).then(function () {
	                _this._after(shouldOpen);
	            });
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "setProgressStart",
	        value: function setProgressStart() {
	            // user started swiping the menu open/close
	            if (this._isPrevented() || !this.isEnabled) return;
	            this._before();
	            this._getType().setProgressStart(this.isOpen);
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "setProgess",
	        value: function setProgess(value) {
	            // user actively dragging the menu
	            if (this.isEnabled) {
	                this._prevent();
	                this.app.setTransitioning(true);
	                this._getType().setProgess(value);
	            }
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "setProgressEnd",
	        value: function setProgressEnd(shouldComplete) {
	            var _this2 = this;

	            // user has finished dragging the menu
	            if (this.isEnabled) {
	                this._prevent();
	                this.app.setTransitioning(true);
	                this._getType().setProgressEnd(shouldComplete).then(function (isOpen) {
	                    _this2._after(isOpen);
	                });
	            }
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "_before",
	        value: function _before() {
	            // this places the menu into the correct location before it animates in
	            // this css class doesn't actually kick off any animations
	            if (this.isEnabled) {
	                this.getNativeElement().classList.add('show-menu');
	                this.getBackdropElement().classList.add('show-backdrop');
	                this._prevent();
	                this.app.setTransitioning(true);
	                this.keyboard.close();
	            }
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "_after",
	        value: function _after(isOpen) {
	            // keep opening/closing the menu disabled for a touch more yet
	            if (this.isEnabled) {
	                this._prevent();
	                this.app.setTransitioning(false);
	                this.isOpen = isOpen;
	                this._cntEle.classList[isOpen ? 'add' : 'remove']('menu-content-open');
	                this._cntEle.removeEventListener('click', this.onContentClick);
	                if (isOpen) {
	                    this._cntEle.addEventListener('click', this.onContentClick);
	                } else {
	                    this.getNativeElement().classList.remove('show-menu');
	                    this.getBackdropElement().classList.remove('show-backdrop');
	                }
	            }
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "_prevent",
	        value: function _prevent() {
	            // used to prevent unwanted opening/closing after swiping open/close
	            // or swiping open the menu while pressing down on the menu-toggle
	            this._preventTime = Date.now() + 20;
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "_isPrevented",
	        value: function _isPrevented() {
	            return this._preventTime > Date.now();
	        }

	        /**
	         * TODO
	         * @return {TODO} TODO
	         */
	    }, {
	        key: "open",
	        value: function open() {
	            return this.setOpen(true);
	        }

	        /**
	         * TODO
	         * @return {TODO} TODO
	         */
	    }, {
	        key: "close",
	        value: function close() {
	            return this.setOpen(false);
	        }

	        /**
	         * TODO
	         * @return {TODO} TODO
	         */
	    }, {
	        key: "toggle",
	        value: function toggle() {
	            return this.setOpen(!this.isOpen);
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "enable",
	        value: function enable(shouldEnable) {
	            this.isEnabled = shouldEnable;
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "getMenuElement",
	        value: function getMenuElement() {
	            return this.getNativeElement();
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "getContentElement",
	        value: function getContentElement() {
	            return this._cntEle;
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "getBackdropElement",
	        value: function getBackdropElement() {
	            return this.backdrop.elementRef.nativeElement;
	        }
	    }, {
	        key: "onDestroy",

	        /**
	         * @private
	         */
	        value: function onDestroy() {
	            this.app.unregister(this.id);
	            this._gesture && this._gesture.destroy();
	            this._targetGesture && this._targetGesture.destroy();
	            this._type && this._type.onDestroy();
	            this._cntEle = null;
	        }
	    }], [{
	        key: "register",
	        value: function register(name, cls) {
	            menuTypes[name] = cls;
	        }
	    }]);

	    return Menu;
	})(_ion.Ion);
	exports.Menu = Menu;
	exports.Menu = Menu = __decorate([(0, _angular2Angular2.Component)({
	    selector: 'ion-menu',
	    inputs: ['content', 'dragThreshold', 'id', 'side', 'type'],
	    defaultInputs: {
	        'side': 'left',
	        'menuType': 'reveal'
	    },
	    outputs: ['opening'],
	    host: {
	        'role': 'navigation',
	        '[attr.side]': 'side',
	        '[attr.type]': 'type'
	    },
	    template: '<ng-content></ng-content><backdrop tappable disable-activated></backdrop>',
	    directives: [(0, _angular2Angular2.forwardRef)(function () {
	        return MenuBackdrop;
	    })]
	}), __metadata('design:paramtypes', [typeof (_a = typeof _appApp.IonicApp !== 'undefined' && _appApp.IonicApp) === 'function' && _a || Object, typeof (_b = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _b || Object, typeof (_c = typeof _configConfig.Config !== 'undefined' && _configConfig.Config) === 'function' && _c || Object, typeof (_d = typeof _platformPlatform.Platform !== 'undefined' && _platformPlatform.Platform) === 'function' && _d || Object, typeof (_e = typeof _utilKeyboard.Keyboard !== 'undefined' && _utilKeyboard.Keyboard) === 'function' && _e || Object])], Menu);
	var menuTypes = {};
	var MenuBackdrop = (function () {
	    function MenuBackdrop(menu, elementRef) {
	        _classCallCheck(this, MenuBackdrop);

	        this.menu = menu;
	        this.elementRef = elementRef;
	        menu.backdrop = this;
	    }

	    /**
	     * @private
	     */

	    _createClass(MenuBackdrop, [{
	        key: "clicked",
	        value: function clicked(ev) {
	            console.debug('backdrop clicked');
	            ev.preventDefault();
	            ev.stopPropagation();
	            this.menu.close();
	        }
	    }]);

	    return MenuBackdrop;
	})();
	MenuBackdrop = __decorate([(0, _angular2Angular2.Directive)({
	    selector: 'backdrop',
	    host: {
	        '(click)': 'clicked($event)'
	    }
	}), __param(0, (0, _angular2Angular2.Host)()), __metadata('design:paramtypes', [Menu, typeof (_f = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _f || Object])], MenuBackdrop);
	var _a, _b, _c, _d, _e, _f;

/***/ },
/* 462 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _ionicUtilDom = __webpack_require__(435);

	var dom = _interopRequireWildcard(_ionicUtilDom);

	/**
	 * Base class for all Ionic components. Exposes some common functionality
	 * that all Ionic components need, such as accessing underlying native elements and
	 * sending/receiving app-level events.
	 */

	var Ion = (function () {
	    function Ion(elementRef, config) {
	        _classCallCheck(this, Ion);

	        this.elementRef = elementRef;
	        this.config = config;
	    }

	    _createClass(Ion, [{
	        key: 'onInit',
	        value: function onInit() {
	            var cls = this.constructor;
	            if (cls.defaultInputs && this.config) {
	                for (var prop in cls.defaultInputs) {
	                    // Priority:
	                    // ---------
	                    // 1) Value set from within constructor
	                    // 2) Value set from the host element's attribute
	                    // 3) Value set by the users global config
	                    // 4) Value set by the default mode/platform config
	                    // 5) Value set from the component's default
	                    if (this[prop]) {
	                        // this property has already been set on the instance
	                        // could be from the user setting the element's attribute
	                        // or from the user setting it within the constructor
	                        continue;
	                    }
	                    // get the property values from a global user/platform config
	                    var configVal = this.config.get(prop);
	                    if (configVal) {
	                        this[prop] = configVal;
	                        continue;
	                    }
	                    // wasn't set yet, so go with property's default value
	                    this[prop] = cls.defaultInputs[prop];
	                }
	            }
	        }
	    }, {
	        key: 'getElementRef',
	        value: function getElementRef() {
	            return this.elementRef;
	        }
	    }, {
	        key: 'getNativeElement',
	        value: function getNativeElement() {
	            return this.elementRef.nativeElement;
	        }
	    }, {
	        key: 'getDimensions',
	        value: function getDimensions() {
	            return dom.getDimensions(this);
	        }
	    }, {
	        key: 'width',
	        value: function width() {
	            return dom.getDimensions(this).width;
	        }
	    }, {
	        key: 'height',
	        value: function height() {
	            return dom.getDimensions(this).height;
	        }
	    }]);

	    return Ion;
	})();

	exports.Ion = Ion;

/***/ },
/* 463 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _gesturesSlideEdgeGesture = __webpack_require__(464);

	var _ionicUtil = __webpack_require__(442);

	var util = _interopRequireWildcard(_ionicUtil);

	var MenuContentGesture = (function (_SlideEdgeGesture) {
	    _inherits(MenuContentGesture, _SlideEdgeGesture);

	    function MenuContentGesture(menu, targetEl) {
	        var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	        _classCallCheck(this, MenuContentGesture);

	        _get(Object.getPrototypeOf(MenuContentGesture.prototype), 'constructor', this).call(this, targetEl, util.extend({
	            direction: menu.side === 'left' || menu.side === 'right' ? 'x' : 'y',
	            edge: menu.side,
	            threshold: 75
	        }, options));
	        this.menu = menu;
	        this.listen();
	    }

	    /**
	     * Support dragging the target menu as well as the content.
	     */

	    _createClass(MenuContentGesture, [{
	        key: 'canStart',
	        value: function canStart(ev) {
	            return this.menu.isOpen && this.menu.isEnabled ? true : _get(Object.getPrototypeOf(MenuContentGesture.prototype), 'canStart', this).call(this, ev);
	        }

	        // Set CSS, then wait one frame for it to apply before sliding starts
	    }, {
	        key: 'onSlideBeforeStart',
	        value: function onSlideBeforeStart(slide, ev) {
	            this.menu.setProgressStart();
	        }
	    }, {
	        key: 'onSlide',
	        value: function onSlide(slide, ev) {
	            this.menu.setProgess(slide.distance / slide.max);
	        }
	    }, {
	        key: 'onSlideEnd',
	        value: function onSlideEnd(slide, ev) {
	            var shouldComplete = Math.abs(ev.velocityX) > 0.2 || Math.abs(slide.delta) > Math.abs(slide.max) * 0.5;
	            this.menu.setProgressEnd(shouldComplete);
	        }
	    }, {
	        key: 'getElementStartPos',
	        value: function getElementStartPos(slide, ev) {
	            return this.menu.isOpen ? slide.max : slide.min;
	        }
	    }, {
	        key: 'getSlideBoundaries',
	        value: function getSlideBoundaries() {
	            return {
	                min: 0,
	                max: this.menu.width()
	            };
	        }
	    }]);

	    return MenuContentGesture;
	})(_gesturesSlideEdgeGesture.SlideEdgeGesture);

	var TargetGesture = (function (_MenuContentGesture) {
	    _inherits(TargetGesture, _MenuContentGesture);

	    function TargetGesture(menu) {
	        _classCallCheck(this, TargetGesture);

	        _get(Object.getPrototypeOf(TargetGesture.prototype), 'constructor', this).call(this, menu, menu.getNativeElement(), {
	            threshold: 0
	        });
	    }

	    return TargetGesture;
	})(MenuContentGesture);

	exports.TargetGesture = TargetGesture;

	var LeftMenuGesture = (function (_MenuContentGesture2) {
	    _inherits(LeftMenuGesture, _MenuContentGesture2);

	    function LeftMenuGesture(menu) {
	        _classCallCheck(this, LeftMenuGesture);

	        _get(Object.getPrototypeOf(LeftMenuGesture.prototype), 'constructor', this).call(this, menu, menu.getContentElement());
	    }

	    return LeftMenuGesture;
	})(MenuContentGesture);

	exports.LeftMenuGesture = LeftMenuGesture;

	var RightMenuGesture = (function (_MenuContentGesture3) {
	    _inherits(RightMenuGesture, _MenuContentGesture3);

	    function RightMenuGesture(menu) {
	        _classCallCheck(this, RightMenuGesture);

	        _get(Object.getPrototypeOf(RightMenuGesture.prototype), 'constructor', this).call(this, menu, menu.getContentElement());
	    }

	    _createClass(RightMenuGesture, [{
	        key: 'onSlide',
	        value: function onSlide(slide, ev) {
	            this.menu.setProgess(slide.distance / slide.min);
	        }
	    }, {
	        key: 'getElementStartPos',
	        value: function getElementStartPos(slide, ev) {
	            return this.menu.isOpen ? slide.min : slide.max;
	        }
	    }, {
	        key: 'getSlideBoundaries',
	        value: function getSlideBoundaries() {
	            return {
	                min: -this.menu.width(),
	                max: 0
	            };
	        }
	    }]);

	    return RightMenuGesture;
	})(MenuContentGesture);

	exports.RightMenuGesture = RightMenuGesture;

/***/ },
/* 464 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _ionicGesturesSlideGesture = __webpack_require__(465);

	var _utilUtil = __webpack_require__(439);

	var _utilDom = __webpack_require__(435);

	var SlideEdgeGesture = (function (_SlideGesture) {
	    _inherits(SlideEdgeGesture, _SlideGesture);

	    function SlideEdgeGesture(element) {
	        var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	        _classCallCheck(this, SlideEdgeGesture);

	        (0, _utilUtil.defaults)(opts, {
	            edge: 'left',
	            threshold: 50
	        });
	        _get(Object.getPrototypeOf(SlideEdgeGesture.prototype), 'constructor', this).call(this, element, opts);
	        // Can check corners through use of eg 'left top'
	        this.edges = opts.edge.split(' ');
	        this.threshold = opts.threshold;
	    }

	    _createClass(SlideEdgeGesture, [{
	        key: 'canStart',
	        value: function canStart(ev) {
	            var _this = this;

	            this._d = this.getContainerDimensions();
	            return this.edges.every(function (edge) {
	                return _this._checkEdge(edge, ev.center);
	            });
	        }
	    }, {
	        key: 'getContainerDimensions',
	        value: function getContainerDimensions() {
	            return {
	                left: 0,
	                top: 0,
	                width: (0, _utilDom.windowDimensions)().width,
	                height: (0, _utilDom.windowDimensions)().height
	            };
	        }
	    }, {
	        key: '_checkEdge',
	        value: function _checkEdge(edge, pos) {
	            switch (edge) {
	                case 'left':
	                    return pos.x <= this._d.left + this.threshold;
	                case 'right':
	                    return pos.x >= this._d.width - this.threshold;
	                case 'top':
	                    return pos.y <= this._d.top + this.threshold;
	                case 'bottom':
	                    return pos.y >= this._d.height - this.threshold;
	            }
	        }
	    }]);

	    return SlideEdgeGesture;
	})(_ionicGesturesSlideGesture.SlideGesture);

	exports.SlideEdgeGesture = SlideEdgeGesture;

/***/ },
/* 465 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _ionicGesturesDragGesture = __webpack_require__(466);

	var _ionicUtil = __webpack_require__(442);

	var util = _interopRequireWildcard(_ionicUtil);

	var SlideGesture = (function (_DragGesture) {
	    _inherits(SlideGesture, _DragGesture);

	    function SlideGesture(element) {
	        var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	        _classCallCheck(this, SlideGesture);

	        _get(Object.getPrototypeOf(SlideGesture.prototype), 'constructor', this).call(this, element, opts);
	        this.element = element;
	    }

	    /*
	     * Get the min and max for the slide. pageX/pageY.
	     * Only called on dragstart.
	     */

	    _createClass(SlideGesture, [{
	        key: 'getSlideBoundaries',
	        value: function getSlideBoundaries(slide, ev) {
	            return {
	                min: 0,
	                max: this.element.offsetWidth
	            };
	        }

	        /*
	         * Get the element's pos when the drag starts.
	         * For example, an open side menu starts at 100% and a closed
	         * sidemenu starts at 0%.
	         */
	    }, {
	        key: 'getElementStartPos',
	        value: function getElementStartPos(slide, ev) {
	            return 0;
	        }
	    }, {
	        key: 'canStart',
	        value: function canStart() {
	            return true;
	        }
	    }, {
	        key: 'onDragStart',
	        value: function onDragStart(ev) {
	            var _this = this;

	            if (!this.canStart(ev)) return false;
	            this.slide = {};
	            var promise = this.onSlideBeforeStart(this.slide, ev) || Promise.resolve();
	            promise.then(function () {
	                var _getSlideBoundaries = _this.getSlideBoundaries(_this.slide, ev);

	                var min = _getSlideBoundaries.min;
	                var max = _getSlideBoundaries.max;

	                _this.slide.min = min;
	                _this.slide.max = max;
	                _this.slide.elementStartPos = _this.getElementStartPos(_this.slide, ev);
	                _this.slide.pointerStartPos = ev.center[_this.direction];
	                _this.slide.started = true;
	                _this.onSlideStart(_this.slide, ev);
	            })['catch'](function () {
	                _this.slide = null;
	            });
	        }
	    }, {
	        key: 'onDrag',
	        value: function onDrag(ev) {
	            if (!this.slide || !this.slide.started) return;
	            this.slide.pos = ev.center[this.direction];
	            this.slide.distance = util.clamp(this.slide.min, this.slide.pos - this.slide.pointerStartPos + this.slide.elementStartPos, this.slide.max);
	            this.slide.delta = this.slide.pos - this.slide.pointerStartPos;
	            this.onSlide(this.slide, ev);
	        }
	    }, {
	        key: 'onDragEnd',
	        value: function onDragEnd(ev) {
	            if (!this.slide || !this.slide.started) return;
	            this.onSlideEnd(this.slide, ev);
	            this.slide = null;
	        }
	    }, {
	        key: 'onSlideBeforeStart',
	        value: function onSlideBeforeStart() {}
	    }, {
	        key: 'onSlideStart',
	        value: function onSlideStart() {}
	    }, {
	        key: 'onSlide',
	        value: function onSlide() {}
	    }, {
	        key: 'onSlideEnd',
	        value: function onSlideEnd() {}
	    }]);

	    return SlideGesture;
	})(_ionicGesturesDragGesture.DragGesture);

	exports.SlideGesture = SlideGesture;

/***/ },
/* 466 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _ionicGesturesGesture = __webpack_require__(467);

	var _ionicUtil = __webpack_require__(442);

	var util = _interopRequireWildcard(_ionicUtil);

	var DragGesture = (function (_Gesture) {
	    _inherits(DragGesture, _Gesture);

	    function DragGesture(element) {
	        var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	        _classCallCheck(this, DragGesture);

	        util.defaults(opts, {});
	        _get(Object.getPrototypeOf(DragGesture.prototype), 'constructor', this).call(this, element, opts);
	    }

	    _createClass(DragGesture, [{
	        key: 'listen',
	        value: function listen() {
	            var _this = this;

	            _get(Object.getPrototypeOf(DragGesture.prototype), 'listen', this).call(this);
	            this.on('panstart', function (ev) {
	                if (_this.onDragStart(ev) !== false) {
	                    _this.dragging = true;
	                }
	            });
	            this.on('panmove', function (ev) {
	                if (!_this.dragging) return;
	                if (_this.onDrag(ev) === false) {
	                    _this.dragging = false;
	                }
	            });
	            this.on('panend', function (ev) {
	                if (!_this.dragging) return;
	                _this.onDragEnd(ev);
	                _this.dragging = false;
	            });
	            this.hammertime.get('pan').set(this._options);
	        }
	    }, {
	        key: 'onDrag',
	        value: function onDrag() {}
	    }, {
	        key: 'onDragStart',
	        value: function onDragStart() {}
	    }, {
	        key: 'onDragEnd',
	        value: function onDragEnd() {}
	    }]);

	    return DragGesture;
	})(_ionicGesturesGesture.Gesture);

	exports.DragGesture = DragGesture;

/***/ },
/* 467 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _ionicUtil = __webpack_require__(442);

	var util = _interopRequireWildcard(_ionicUtil);

	var _ionicGesturesHammer = __webpack_require__(468);

	/**
	 * A gesture recognizer class.
	 *
	 * TODO(mlynch): Re-enable the DOM event simulation that was causing issues (or verify hammer does this already, it might);
	 */

	var Gesture = (function () {
	    function Gesture(element) {
	        var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	        _classCallCheck(this, Gesture);

	        util.defaults(opts, {
	            domEvents: true
	        });
	        this.element = element;
	        // Map 'x' or 'y' string to hammerjs opts
	        this.direction = opts.direction || 'x';
	        opts.direction = this.direction === 'x' ? _ionicGesturesHammer.Hammer.DIRECTION_HORIZONTAL : _ionicGesturesHammer.Hammer.DIRECTION_VERTICAL;
	        this._options = opts;
	        this._callbacks = {};
	    }

	    _createClass(Gesture, [{
	        key: 'options',
	        value: function options() {
	            var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	            util.extend(this._options, opts);
	        }
	    }, {
	        key: 'on',
	        value: function on(type, cb) {
	            if (type == 'pinch' || type == 'rotate') {
	                this.hammertime.get('pinch').set({ enable: true });
	            }
	            this.hammertime.on(type, cb);
	            (this._callbacks[type] || (this._callbacks[type] = [])).push(cb);
	        }
	    }, {
	        key: 'off',
	        value: function off(type, cb) {
	            this.hammertime.off(type, this._callbacks[type] ? cb : null);
	        }
	    }, {
	        key: 'listen',
	        value: function listen() {
	            this.hammertime = (0, _ionicGesturesHammer.Hammer)(this.element, this._options);
	        }
	    }, {
	        key: 'unlisten',
	        value: function unlisten() {
	            if (this.hammertime) {
	                for (var type in this._callbacks) {
	                    for (var i = 0; i < this._callbacks[type].length; i++) {
	                        this.hammertime.off(type, this._callbacks[type]);
	                    }
	                }
	                this.hammertime.destroy();
	                this.hammertime = null;
	                this._callbacks = {};
	            }
	        }
	    }, {
	        key: 'destroy',
	        value: function destroy() {
	            this.unlisten();
	        }
	    }]);

	    return Gesture;
	})();

	exports.Gesture = Gesture;

/***/ },
/* 468 */
/***/ function(module, exports) {

	/*! Hammer.JS - v2.0.4 - 2014-09-28
	 * http://hammerjs.github.io/
	 *
	 * Copyright (c) 2014 Jorik Tangelder;
	 * Licensed under the MIT license */
	//(function(window, document, exportName, undefined) {
	//'use strict';
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});
	var VENDOR_PREFIXES = ['', 'webkit', 'moz', 'MS', 'ms', 'o'];
	var TEST_ELEMENT = document.createElement('div');
	var TYPE_FUNCTION = 'function';
	var round = Math.round;
	var abs = Math.abs;
	var now = Date.now;
	/**
	 * set a timeout with a given scope
	 * @param {Function} fn
	 * @param {Number} timeout
	 * @param {Object} context
	 * @returns {number}
	 */
	function setTimeoutContext(fn, timeout, context) {
	    return setTimeout(bindFn(fn, context), timeout);
	}
	/**
	 * if the argument is an array, we want to execute the fn on each entry
	 * if it aint an array we don't want to do a thing.
	 * this is used by all the methods that accept a single and array argument.
	 * @param {*|Array} arg
	 * @param {String} fn
	 * @param {Object} [context]
	 * @returns {Boolean}
	 */
	function invokeArrayArg(arg, fn, context) {
	    if (Array.isArray(arg)) {
	        each(arg, context[fn], context);
	        return true;
	    }
	    return false;
	}
	/**
	 * walk objects and arrays
	 * @param {Object} obj
	 * @param {Function} iterator
	 * @param {Object} context
	 */
	function each(obj, iterator, context) {
	    var i;
	    if (!obj) {
	        return;
	    }
	    if (obj.forEach) {
	        obj.forEach(iterator, context);
	    } else if (obj.length !== undefined) {
	        i = 0;
	        while (i < obj.length) {
	            iterator.call(context, obj[i], i, obj);
	            i++;
	        }
	    } else {
	        for (i in obj) {
	            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
	        }
	    }
	}
	/**
	 * extend object.
	 * means that properties in dest will be overwritten by the ones in src.
	 * @param {Object} dest
	 * @param {Object} src
	 * @param {Boolean} [merge]
	 * @returns {Object} dest
	 */
	function extend(dest, src, merge) {
	    var keys = Object.keys(src);
	    var i = 0;
	    while (i < keys.length) {
	        if (!merge || merge && dest[keys[i]] === undefined) {
	            dest[keys[i]] = src[keys[i]];
	        }
	        i++;
	    }
	    return dest;
	}
	/**
	 * merge the values from src in the dest.
	 * means that properties that exist in dest will not be overwritten by src
	 * @param {Object} dest
	 * @param {Object} src
	 * @returns {Object} dest
	 */
	function merge(dest, src) {
	    return extend(dest, src, true);
	}
	/**
	 * simple class inheritance
	 * @param {Function} child
	 * @param {Function} base
	 * @param {Object} [properties]
	 */
	function inherit(child, base, properties) {
	    var baseP = base.prototype,
	        childP;
	    childP = child.prototype = Object.create(baseP);
	    childP.constructor = child;
	    childP._super = baseP;
	    if (properties) {
	        extend(childP, properties);
	    }
	}
	/**
	 * simple function bind
	 * @param {Function} fn
	 * @param {Object} context
	 * @returns {Function}
	 */
	function bindFn(fn, context) {
	    return function boundFn() {
	        return fn.apply(context, arguments);
	    };
	}
	/**
	 * let a boolean value also be a function that must return a boolean
	 * this first item in args will be used as the context
	 * @param {Boolean|Function} val
	 * @param {Array} [args]
	 * @returns {Boolean}
	 */
	function boolOrFn(val, args) {
	    if (typeof val == TYPE_FUNCTION) {
	        return val.apply(args ? args[0] || undefined : undefined, args);
	    }
	    return val;
	}
	/**
	 * use the val2 when val1 is undefined
	 * @param {*} val1
	 * @param {*} val2
	 * @returns {*}
	 */
	function ifUndefined(val1, val2) {
	    return val1 === undefined ? val2 : val1;
	}
	/**
	 * addEventListener with multiple events at once
	 * @param {EventTarget} target
	 * @param {String} types
	 * @param {Function} handler
	 */
	function addEventListeners(target, types, handler) {
	    each(splitStr(types), function (type) {
	        //console.debug('hammer addEventListener', type, target.tagName);
	        target.addEventListener(type, handler, false);
	    });
	}
	/**
	 * removeEventListener with multiple events at once
	 * @param {EventTarget} target
	 * @param {String} types
	 * @param {Function} handler
	 */
	function removeEventListeners(target, types, handler) {
	    each(splitStr(types), function (type) {
	        //console.debug('hammer removeEventListener', type, target.tagName);
	        target.removeEventListener(type, handler, false);
	    });
	}
	/**
	 * find if a node is in the given parent
	 * @method hasParent
	 * @param {HTMLElement} node
	 * @param {HTMLElement} parent
	 * @return {Boolean} found
	 */
	function hasParent(node, parent) {
	    while (node) {
	        if (node == parent) {
	            return true;
	        }
	        node = node.parentNode;
	    }
	    return false;
	}
	/**
	 * small indexOf wrapper
	 * @param {String} str
	 * @param {String} find
	 * @returns {Boolean} found
	 */
	function inStr(str, find) {
	    return str.indexOf(find) > -1;
	}
	/**
	 * split string on whitespace
	 * @param {String} str
	 * @returns {Array} words
	 */
	function splitStr(str) {
	    return str.trim().split(/\s+/g);
	}
	/**
	 * find if a array contains the object using indexOf or a simple polyFill
	 * @param {Array} src
	 * @param {String} find
	 * @param {String} [findByKey]
	 * @return {Boolean|Number} false when not found, or the index
	 */
	function inArray(src, find, findByKey) {
	    if (src.indexOf && !findByKey) {
	        return src.indexOf(find);
	    } else {
	        var i = 0;
	        while (i < src.length) {
	            if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) {
	                return i;
	            }
	            i++;
	        }
	        return -1;
	    }
	}
	/**
	 * convert array-like objects to real arrays
	 * @param {Object} obj
	 * @returns {Array}
	 */
	function toArray(obj) {
	    return Array.prototype.slice.call(obj, 0);
	}
	/**
	 * unique array with objects based on a key (like 'id') or just by the array's value
	 * @param {Array} src [{id:1},{id:2},{id:1}]
	 * @param {String} [key]
	 * @param {Boolean} [sort=False]
	 * @returns {Array} [{id:1},{id:2}]
	 */
	function uniqueArray(src, key, sort) {
	    var results = [];
	    var values = [];
	    var i = 0;
	    while (i < src.length) {
	        var val = key ? src[i][key] : src[i];
	        if (inArray(values, val) < 0) {
	            results.push(src[i]);
	        }
	        values[i] = val;
	        i++;
	    }
	    if (sort) {
	        if (!key) {
	            results = results.sort();
	        } else {
	            results = results.sort(function sortUniqueArray(a, b) {
	                return a[key] > b[key];
	            });
	        }
	    }
	    return results;
	}
	/**
	 * get the prefixed property
	 * @param {Object} obj
	 * @param {String} property
	 * @returns {String|Undefined} prefixed
	 */
	function prefixed(obj, property) {
	    var prefix, prop;
	    var camelProp = property[0].toUpperCase() + property.slice(1);
	    var i = 0;
	    while (i < VENDOR_PREFIXES.length) {
	        prefix = VENDOR_PREFIXES[i];
	        prop = prefix ? prefix + camelProp : property;
	        if (prop in obj) {
	            return prop;
	        }
	        i++;
	    }
	    return undefined;
	}
	/**
	 * get a unique id
	 * @returns {number} uniqueId
	 */
	var _uniqueId = 1;
	function uniqueId() {
	    return _uniqueId++;
	}
	/**
	 * get the window object of an element
	 * @param {HTMLElement} element
	 * @returns {DocumentView|Window}
	 */
	function getWindowForElement(element) {
	    var doc = element.ownerDocument;
	    return doc.defaultView || doc.parentWindow;
	}
	var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
	var SUPPORT_TOUCH = ('ontouchstart' in window);
	var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
	var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);
	var INPUT_TYPE_TOUCH = 'touch';
	var INPUT_TYPE_PEN = 'pen';
	var INPUT_TYPE_MOUSE = 'mouse';
	var INPUT_TYPE_KINECT = 'kinect';
	var COMPUTE_INTERVAL = 25;
	var INPUT_START = 1;
	var INPUT_MOVE = 2;
	var INPUT_END = 4;
	var INPUT_CANCEL = 8;
	var DIRECTION_NONE = 1;
	var DIRECTION_LEFT = 2;
	var DIRECTION_RIGHT = 4;
	var DIRECTION_UP = 8;
	var DIRECTION_DOWN = 16;
	var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
	var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
	var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;
	var PROPS_XY = ['x', 'y'];
	var PROPS_CLIENT_XY = ['clientX', 'clientY'];
	/**
	 * create new input type manager
	 * @param {Manager} manager
	 * @param {Function} callback
	 * @returns {Input}
	 * @constructor
	 */
	function Input(manager, callback) {
	    var self = this;
	    this.manager = manager;
	    this.callback = callback;
	    this.element = manager.element;
	    this.target = manager.options.inputTarget;
	    // smaller wrapper around the handler, for the scope and the enabled state of the manager,
	    // so when disabled the input events are completely bypassed.
	    this.domHandler = function (ev) {
	        if (boolOrFn(manager.options.enable, [manager])) {
	            self.handler(ev);
	        }
	    };
	    this.init();
	}
	Input.prototype = {
	    /**
	     * should handle the inputEvent data and trigger the callback
	     * @virtual
	     */
	    handler: function handler() {},
	    /**
	     * bind the events
	     */
	    init: function init() {
	        //console.debug('hammer Input init')
	        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
	        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
	        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
	    },
	    /**
	     * unbind the events
	     */
	    destroy: function destroy() {
	        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
	        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
	        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
	    }
	};
	/**
	 * create new input type manager
	 * called by the Manager constructor
	 * @param {Hammer} manager
	 * @returns {Input}
	 */
	function createInputInstance(manager) {
	    var Type;
	    var inputClass = manager.options.inputClass;
	    if (inputClass) {
	        Type = inputClass;
	    } else if (SUPPORT_POINTER_EVENTS) {
	        Type = PointerEventInput;
	    } else if (SUPPORT_ONLY_TOUCH) {
	        Type = TouchInput;
	    } else if (!SUPPORT_TOUCH) {
	        Type = MouseInput;
	    } else {
	        Type = TouchMouseInput;
	    }
	    return new Type(manager, inputHandler);
	}
	/**
	 * handle input events
	 * @param {Manager} manager
	 * @param {String} eventType
	 * @param {Object} input
	 */
	function inputHandler(manager, eventType, input) {
	    var pointersLen = input.pointers.length;
	    var changedPointersLen = input.changedPointers.length;
	    var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;
	    var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;
	    input.isFirst = !!isFirst;
	    input.isFinal = !!isFinal;
	    if (isFirst) {
	        manager.session = {};
	    }
	    // source event is the normalized value of the domEvents
	    // like 'touchstart, mouseup, pointerdown'
	    input.eventType = eventType;
	    // compute scale, rotation etc
	    computeInputData(manager, input);
	    // emit secret event
	    manager.emit('hammer.input', input);
	    manager.recognize(input);
	    manager.session.prevInput = input;
	}
	/**
	 * extend the data with some usable properties like scale, rotate, velocity etc
	 * @param {Object} manager
	 * @param {Object} input
	 */
	function computeInputData(manager, input) {
	    var session = manager.session;
	    var pointers = input.pointers;
	    var pointersLength = pointers.length;
	    // store the first input to calculate the distance and direction
	    if (!session.firstInput) {
	        session.firstInput = simpleCloneInputData(input);
	    }
	    // to compute scale and rotation we need to store the multiple touches
	    if (pointersLength > 1 && !session.firstMultiple) {
	        session.firstMultiple = simpleCloneInputData(input);
	    } else if (pointersLength === 1) {
	        session.firstMultiple = false;
	    }
	    var firstInput = session.firstInput;
	    var firstMultiple = session.firstMultiple;
	    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
	    var center = input.center = getCenter(pointers);
	    input.timeStamp = now();
	    input.deltaTime = input.timeStamp - firstInput.timeStamp;
	    input.angle = getAngle(offsetCenter, center);
	    input.distance = getDistance(offsetCenter, center);
	    computeDeltaXY(session, input);
	    input.offsetDirection = getDirection(input.deltaX, input.deltaY);
	    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
	    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;
	    computeIntervalInputData(session, input);
	    // find the correct target
	    var target = manager.element;
	    if (hasParent(input.srcEvent.target, target)) {
	        target = input.srcEvent.target;
	    }
	    input.target = target;
	}
	function computeDeltaXY(session, input) {
	    var center = input.center;
	    var offset = session.offsetDelta || {};
	    var prevDelta = session.prevDelta || {};
	    var prevInput = session.prevInput || {};
	    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
	        prevDelta = session.prevDelta = {
	            x: prevInput.deltaX || 0,
	            y: prevInput.deltaY || 0
	        };
	        offset = session.offsetDelta = {
	            x: center.x,
	            y: center.y
	        };
	    }
	    input.deltaX = prevDelta.x + (center.x - offset.x);
	    input.deltaY = prevDelta.y + (center.y - offset.y);
	}
	/**
	 * velocity is calculated every x ms
	 * @param {Object} session
	 * @param {Object} input
	 */
	function computeIntervalInputData(session, input) {
	    var last = session.lastInterval || input,
	        deltaTime = input.timeStamp - last.timeStamp,
	        velocity,
	        velocityX,
	        velocityY,
	        direction;
	    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
	        var deltaX = last.deltaX - input.deltaX;
	        var deltaY = last.deltaY - input.deltaY;
	        var v = getVelocity(deltaTime, deltaX, deltaY);
	        velocityX = v.x;
	        velocityY = v.y;
	        velocity = abs(v.x) > abs(v.y) ? v.x : v.y;
	        direction = getDirection(deltaX, deltaY);
	        session.lastInterval = input;
	    } else {
	        // use latest velocity info if it doesn't overtake a minimum period
	        velocity = last.velocity;
	        velocityX = last.velocityX;
	        velocityY = last.velocityY;
	        direction = last.direction;
	    }
	    input.velocity = velocity;
	    input.velocityX = velocityX;
	    input.velocityY = velocityY;
	    input.direction = direction;
	}
	/**
	 * create a simple clone from the input used for storage of firstInput and firstMultiple
	 * @param {Object} input
	 * @returns {Object} clonedInputData
	 */
	function simpleCloneInputData(input) {
	    // make a simple copy of the pointers because we will get a reference if we don't
	    // we only need clientXY for the calculations
	    var pointers = [];
	    var i = 0;
	    while (i < input.pointers.length) {
	        pointers[i] = {
	            clientX: round(input.pointers[i].clientX),
	            clientY: round(input.pointers[i].clientY)
	        };
	        i++;
	    }
	    return {
	        timeStamp: now(),
	        pointers: pointers,
	        center: getCenter(pointers),
	        deltaX: input.deltaX,
	        deltaY: input.deltaY
	    };
	}
	/**
	 * get the center of all the pointers
	 * @param {Array} pointers
	 * @return {Object} center contains `x` and `y` properties
	 */
	function getCenter(pointers) {
	    var pointersLength = pointers.length;
	    // no need to loop when only one touch
	    if (pointersLength === 1) {
	        return {
	            x: round(pointers[0].clientX),
	            y: round(pointers[0].clientY)
	        };
	    }
	    var x = 0,
	        y = 0,
	        i = 0;
	    while (i < pointersLength) {
	        x += pointers[i].clientX;
	        y += pointers[i].clientY;
	        i++;
	    }
	    return {
	        x: round(x / pointersLength),
	        y: round(y / pointersLength)
	    };
	}
	/**
	 * calculate the velocity between two points. unit is in px per ms.
	 * @param {Number} deltaTime
	 * @param {Number} x
	 * @param {Number} y
	 * @return {Object} velocity `x` and `y`
	 */
	function getVelocity(deltaTime, x, y) {
	    return {
	        x: x / deltaTime || 0,
	        y: y / deltaTime || 0
	    };
	}
	/**
	 * get the direction between two points
	 * @param {Number} x
	 * @param {Number} y
	 * @return {Number} direction
	 */
	function getDirection(x, y) {
	    if (x === y) {
	        return DIRECTION_NONE;
	    }
	    if (abs(x) >= abs(y)) {
	        return x > 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
	    }
	    return y > 0 ? DIRECTION_UP : DIRECTION_DOWN;
	}
	/**
	 * calculate the absolute distance between two points
	 * @param {Object} p1 {x, y}
	 * @param {Object} p2 {x, y}
	 * @param {Array} [props] containing x and y keys
	 * @return {Number} distance
	 */
	function getDistance(p1, p2, props) {
	    if (!props) {
	        props = PROPS_XY;
	    }
	    var x = p2[props[0]] - p1[props[0]],
	        y = p2[props[1]] - p1[props[1]];
	    return Math.sqrt(x * x + y * y);
	}
	/**
	 * calculate the angle between two coordinates
	 * @param {Object} p1
	 * @param {Object} p2
	 * @param {Array} [props] containing x and y keys
	 * @return {Number} angle
	 */
	function getAngle(p1, p2, props) {
	    if (!props) {
	        props = PROPS_XY;
	    }
	    var x = p2[props[0]] - p1[props[0]],
	        y = p2[props[1]] - p1[props[1]];
	    return Math.atan2(y, x) * 180 / Math.PI;
	}
	/**
	 * calculate the rotation degrees between two pointersets
	 * @param {Array} start array of pointers
	 * @param {Array} end array of pointers
	 * @return {Number} rotation
	 */
	function getRotation(start, end) {
	    return getAngle(end[1], end[0], PROPS_CLIENT_XY) - getAngle(start[1], start[0], PROPS_CLIENT_XY);
	}
	/**
	 * calculate the scale factor between two pointersets
	 * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
	 * @param {Array} start array of pointers
	 * @param {Array} end array of pointers
	 * @return {Number} scale
	 */
	function getScale(start, end) {
	    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
	}
	var MOUSE_INPUT_MAP = {
	    mousedown: INPUT_START,
	    mousemove: INPUT_MOVE,
	    mouseup: INPUT_END
	};
	var MOUSE_ELEMENT_EVENTS = 'mousedown';
	var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';
	/**
	 * Mouse events input
	 * @constructor
	 * @extends Input
	 */
	function MouseInput() {
	    this.evEl = MOUSE_ELEMENT_EVENTS;
	    this.evWin = MOUSE_WINDOW_EVENTS;
	    this.allow = true; // used by Input.TouchMouse to disable mouse events
	    this.pressed = false; // mousedown state
	    Input.apply(this, arguments);
	}
	inherit(MouseInput, Input, {
	    /**
	     * handle mouse events
	     * @param {Object} ev
	     */
	    handler: function MEhandler(ev) {
	        var eventType = MOUSE_INPUT_MAP[ev.type];
	        // on start we want to have the left mouse button down
	        if (eventType & INPUT_START && ev.button === 0) {
	            this.pressed = true;
	        }
	        if (eventType & INPUT_MOVE && ev.which !== 1) {
	            eventType = INPUT_END;
	        }
	        // mouse must be down, and mouse events are allowed (see the TouchMouse input)
	        if (!this.pressed || !this.allow) {
	            return;
	        }
	        if (eventType & INPUT_END) {
	            this.pressed = false;
	        }
	        this.callback(this.manager, eventType, {
	            pointers: [ev],
	            changedPointers: [ev],
	            pointerType: INPUT_TYPE_MOUSE,
	            srcEvent: ev
	        });
	    }
	});
	var POINTER_INPUT_MAP = {
	    pointerdown: INPUT_START,
	    pointermove: INPUT_MOVE,
	    pointerup: INPUT_END,
	    pointercancel: INPUT_CANCEL,
	    pointerout: INPUT_CANCEL
	};
	// in IE10 the pointer types is defined as an enum
	var IE10_POINTER_TYPE_ENUM = {
	    2: INPUT_TYPE_TOUCH,
	    3: INPUT_TYPE_PEN,
	    4: INPUT_TYPE_MOUSE,
	    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
	};
	var POINTER_ELEMENT_EVENTS = 'pointerdown';
	var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';
	// IE10 has prefixed support, and case-sensitive
	if (window.MSPointerEvent) {
	    POINTER_ELEMENT_EVENTS = 'MSPointerDown';
	    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
	}
	/**
	 * Pointer events input
	 * @constructor
	 * @extends Input
	 */
	function PointerEventInput() {
	    this.evEl = POINTER_ELEMENT_EVENTS;
	    this.evWin = POINTER_WINDOW_EVENTS;
	    Input.apply(this, arguments);
	    this.store = this.manager.session.pointerEvents = [];
	}
	inherit(PointerEventInput, Input, {
	    /**
	     * handle mouse events
	     * @param {Object} ev
	     */
	    handler: function PEhandler(ev) {
	        var store = this.store;
	        var removePointer = false;
	        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
	        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
	        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;
	        var isTouch = pointerType == INPUT_TYPE_TOUCH;
	        // get index of the event in the store
	        var storeIndex = inArray(store, ev.pointerId, 'pointerId');
	        // start and mouse must be down
	        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
	            if (storeIndex < 0) {
	                store.push(ev);
	                storeIndex = store.length - 1;
	            }
	        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
	            removePointer = true;
	        }
	        // it not found, so the pointer hasn't been down (so it's probably a hover)
	        if (storeIndex < 0) {
	            return;
	        }
	        // update the event in the store
	        store[storeIndex] = ev;
	        this.callback(this.manager, eventType, {
	            pointers: store,
	            changedPointers: [ev],
	            pointerType: pointerType,
	            srcEvent: ev
	        });
	        if (removePointer) {
	            // remove from the store
	            store.splice(storeIndex, 1);
	        }
	    }
	});
	var SINGLE_TOUCH_INPUT_MAP = {
	    touchstart: INPUT_START,
	    touchmove: INPUT_MOVE,
	    touchend: INPUT_END,
	    touchcancel: INPUT_CANCEL
	};
	var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
	var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';
	/**
	 * Touch events input
	 * @constructor
	 * @extends Input
	 */
	function SingleTouchInput() {
	    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
	    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
	    this.started = false;
	    Input.apply(this, arguments);
	}
	inherit(SingleTouchInput, Input, {
	    handler: function TEhandler(ev) {
	        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];
	        // should we handle the touch events?
	        if (type === INPUT_START) {
	            this.started = true;
	        }
	        if (!this.started) {
	            return;
	        }
	        var touches = normalizeSingleTouches.call(this, ev, type);
	        // when done, reset the started state
	        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
	            this.started = false;
	        }
	        this.callback(this.manager, type, {
	            pointers: touches[0],
	            changedPointers: touches[1],
	            pointerType: INPUT_TYPE_TOUCH,
	            srcEvent: ev
	        });
	    }
	});
	/**
	 * @this {TouchInput}
	 * @param {Object} ev
	 * @param {Number} type flag
	 * @returns {undefined|Array} [all, changed]
	 */
	function normalizeSingleTouches(ev, type) {
	    var all = toArray(ev.touches);
	    var changed = toArray(ev.changedTouches);
	    if (type & (INPUT_END | INPUT_CANCEL)) {
	        all = uniqueArray(all.concat(changed), 'identifier', true);
	    }
	    return [all, changed];
	}
	var TOUCH_INPUT_MAP = {
	    touchstart: INPUT_START,
	    touchmove: INPUT_MOVE,
	    touchend: INPUT_END,
	    touchcancel: INPUT_CANCEL
	};
	var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';
	/**
	 * Multi-user touch events input
	 * @constructor
	 * @extends Input
	 */
	function TouchInput() {
	    this.evTarget = TOUCH_TARGET_EVENTS;
	    this.targetIds = {};
	    Input.apply(this, arguments);
	}
	inherit(TouchInput, Input, {
	    handler: function MTEhandler(ev) {
	        var type = TOUCH_INPUT_MAP[ev.type];
	        var touches = getTouches.call(this, ev, type);
	        if (!touches) {
	            return;
	        }
	        this.callback(this.manager, type, {
	            pointers: touches[0],
	            changedPointers: touches[1],
	            pointerType: INPUT_TYPE_TOUCH,
	            srcEvent: ev
	        });
	    }
	});
	/**
	 * @this {TouchInput}
	 * @param {Object} ev
	 * @param {Number} type flag
	 * @returns {undefined|Array} [all, changed]
	 */
	function getTouches(ev, type) {
	    var allTouches = toArray(ev.touches);
	    var targetIds = this.targetIds;
	    // when there is only one touch, the process can be simplified
	    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
	        targetIds[allTouches[0].identifier] = true;
	        return [allTouches, allTouches];
	    }
	    var i,
	        targetTouches,
	        changedTouches = toArray(ev.changedTouches),
	        changedTargetTouches = [],
	        target = this.target;
	    // get target touches from touches
	    targetTouches = allTouches.filter(function (touch) {
	        return hasParent(touch.target, target);
	    });
	    // collect touches
	    if (type === INPUT_START) {
	        i = 0;
	        while (i < targetTouches.length) {
	            targetIds[targetTouches[i].identifier] = true;
	            i++;
	        }
	    }
	    // filter changed touches to only contain touches that exist in the collected target ids
	    i = 0;
	    while (i < changedTouches.length) {
	        if (targetIds[changedTouches[i].identifier]) {
	            changedTargetTouches.push(changedTouches[i]);
	        }
	        // cleanup removed touches
	        if (type & (INPUT_END | INPUT_CANCEL)) {
	            delete targetIds[changedTouches[i].identifier];
	        }
	        i++;
	    }
	    if (!changedTargetTouches.length) {
	        return;
	    }
	    return [
	    // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
	    uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true), changedTargetTouches];
	}
	/**
	 * Combined touch and mouse input
	 *
	 * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
	 * This because touch devices also emit mouse events while doing a touch.
	 *
	 * @constructor
	 * @extends Input
	 */
	function TouchMouseInput() {
	    Input.apply(this, arguments);
	    var handler = bindFn(this.handler, this);
	    this.touch = new TouchInput(this.manager, handler);
	    this.mouse = new MouseInput(this.manager, handler);
	}
	inherit(TouchMouseInput, Input, {
	    /**
	     * handle mouse and touch events
	     * @param {Hammer} manager
	     * @param {String} inputEvent
	     * @param {Object} inputData
	     */
	    handler: function TMEhandler(manager, inputEvent, inputData) {
	        var isTouch = inputData.pointerType == INPUT_TYPE_TOUCH,
	            isMouse = inputData.pointerType == INPUT_TYPE_MOUSE;
	        // when we're in a touch event, so  block all upcoming mouse events
	        // most mobile browser also emit mouseevents, right after touchstart
	        if (isTouch) {
	            this.mouse.allow = false;
	        } else if (isMouse && !this.mouse.allow) {
	            return;
	        }
	        // reset the allowMouse when we're done
	        if (inputEvent & (INPUT_END | INPUT_CANCEL)) {
	            this.mouse.allow = true;
	        }
	        this.callback(manager, inputEvent, inputData);
	    },
	    /**
	     * remove the event listeners
	     */
	    destroy: function destroy() {
	        this.touch.destroy();
	        this.mouse.destroy();
	    }
	});
	var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
	var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;
	// magical touchAction value
	var TOUCH_ACTION_COMPUTE = 'compute';
	var TOUCH_ACTION_AUTO = 'auto';
	var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
	var TOUCH_ACTION_NONE = 'none';
	var TOUCH_ACTION_PAN_X = 'pan-x';
	var TOUCH_ACTION_PAN_Y = 'pan-y';
	/**
	 * Touch Action
	 * sets the touchAction property or uses the js alternative
	 * @param {Manager} manager
	 * @param {String} value
	 * @constructor
	 */
	function TouchAction(manager, value) {
	    this.manager = manager;
	    this.set(value);
	}
	TouchAction.prototype = {
	    /**
	     * set the touchAction value on the element or enable the polyfill
	     * @param {String} value
	     */
	    set: function set(value) {
	        // find out the touch-action by the event handlers
	        if (value == TOUCH_ACTION_COMPUTE) {
	            value = this.compute();
	        }
	        if (NATIVE_TOUCH_ACTION) {
	            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
	        }
	        this.actions = value.toLowerCase().trim();
	    },
	    /**
	     * just re-set the touchAction value
	     */
	    update: function update() {
	        this.set(this.manager.options.touchAction);
	    },
	    /**
	     * compute the value for the touchAction property based on the recognizer's settings
	     * @returns {String} value
	     */
	    compute: function compute() {
	        var actions = [];
	        each(this.manager.recognizers, function (recognizer) {
	            if (boolOrFn(recognizer.options.enable, [recognizer])) {
	                actions = actions.concat(recognizer.getTouchAction());
	            }
	        });
	        return cleanTouchActions(actions.join(' '));
	    },
	    /**
	     * this method is called on each input cycle and provides the preventing of the browser behavior
	     * @param {Object} input
	     */
	    preventDefaults: function preventDefaults(input) {
	        // not needed with native support for the touchAction property
	        if (NATIVE_TOUCH_ACTION) {
	            return;
	        }
	        var srcEvent = input.srcEvent;
	        var direction = input.offsetDirection;
	        // if the touch action did prevented once this session
	        if (this.manager.session.prevented) {
	            srcEvent.preventDefault();
	            return;
	        }
	        var actions = this.actions;
	        var hasNone = inStr(actions, TOUCH_ACTION_NONE);
	        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
	        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
	        if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {
	            return this.preventSrc(srcEvent);
	        }
	    },
	    /**
	     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
	     * @param {Object} srcEvent
	     */
	    preventSrc: function preventSrc(srcEvent) {
	        this.manager.session.prevented = true;
	        srcEvent.preventDefault();
	    }
	};
	/**
	 * when the touchActions are collected they are not a valid value, so we need to clean things up. *
	 * @param {String} actions
	 * @returns {*}
	 */
	function cleanTouchActions(actions) {
	    // none
	    if (inStr(actions, TOUCH_ACTION_NONE)) {
	        return TOUCH_ACTION_NONE;
	    }
	    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
	    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
	    // pan-x and pan-y can be combined
	    if (hasPanX && hasPanY) {
	        return TOUCH_ACTION_PAN_X + ' ' + TOUCH_ACTION_PAN_Y;
	    }
	    // pan-x OR pan-y
	    if (hasPanX || hasPanY) {
	        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
	    }
	    // manipulation
	    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
	        return TOUCH_ACTION_MANIPULATION;
	    }
	    return TOUCH_ACTION_AUTO;
	}
	/**
	 * Recognizer flow explained; *
	 * All recognizers have the initial state of POSSIBLE when a input session starts.
	 * The definition of a input session is from the first input until the last input, with all it's movement in it. *
	 * Example session for mouse-input: mousedown -> mousemove -> mouseup
	 *
	 * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
	 * which determines with state it should be.
	 *
	 * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
	 * POSSIBLE to give it another change on the next cycle.
	 *
	 *               Possible
	 *                  |
	 *            +-----+---------------+
	 *            |                     |
	 *      +-----+-----+               |
	 *      |           |               |
	 *   Failed      Cancelled          |
	 *                          +-------+------+
	 *                          |              |
	 *                      Recognized       Began
	 *                                         |
	 *                                      Changed
	 *                                         |
	 *                                  Ended/Recognized
	 */
	var STATE_POSSIBLE = 1;
	var STATE_BEGAN = 2;
	var STATE_CHANGED = 4;
	var STATE_ENDED = 8;
	var STATE_RECOGNIZED = STATE_ENDED;
	var STATE_CANCELLED = 16;
	var STATE_FAILED = 32;
	/**
	 * Recognizer
	 * Every recognizer needs to extend from this class.
	 * @constructor
	 * @param {Object} options
	 */
	function Recognizer(options) {
	    this.id = uniqueId();
	    this.manager = null;
	    this.options = merge(options || {}, this.defaults);
	    // default is enable true
	    this.options.enable = ifUndefined(this.options.enable, true);
	    this.state = STATE_POSSIBLE;
	    this.simultaneous = {};
	    this.requireFail = [];
	}
	Recognizer.prototype = {
	    /**
	     * @virtual
	     * @type {Object}
	     */
	    defaults: {},
	    /**
	     * set options
	     * @param {Object} options
	     * @return {Recognizer}
	     */
	    set: function set(options) {
	        extend(this.options, options);
	        // also update the touchAction, in case something changed about the directions/enabled state
	        this.manager && this.manager.touchAction.update();
	        return this;
	    },
	    /**
	     * recognize simultaneous with an other recognizer.
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    recognizeWith: function recognizeWith(otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
	            return this;
	        }
	        var simultaneous = this.simultaneous;
	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        if (!simultaneous[otherRecognizer.id]) {
	            simultaneous[otherRecognizer.id] = otherRecognizer;
	            otherRecognizer.recognizeWith(this);
	        }
	        return this;
	    },
	    /**
	     * drop the simultaneous link. it doesnt remove the link on the other recognizer.
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    dropRecognizeWith: function dropRecognizeWith(otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
	            return this;
	        }
	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        delete this.simultaneous[otherRecognizer.id];
	        return this;
	    },
	    /**
	     * recognizer can only run when an other is failing
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    requireFailure: function requireFailure(otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
	            return this;
	        }
	        var requireFail = this.requireFail;
	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        if (inArray(requireFail, otherRecognizer) === -1) {
	            requireFail.push(otherRecognizer);
	            otherRecognizer.requireFailure(this);
	        }
	        return this;
	    },
	    /**
	     * drop the requireFailure link. it does not remove the link on the other recognizer.
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    dropRequireFailure: function dropRequireFailure(otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
	            return this;
	        }
	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        var index = inArray(this.requireFail, otherRecognizer);
	        if (index > -1) {
	            this.requireFail.splice(index, 1);
	        }
	        return this;
	    },
	    /**
	     * has require failures boolean
	     * @returns {boolean}
	     */
	    hasRequireFailures: function hasRequireFailures() {
	        return this.requireFail.length > 0;
	    },
	    /**
	     * if the recognizer can recognize simultaneous with an other recognizer
	     * @param {Recognizer} otherRecognizer
	     * @returns {Boolean}
	     */
	    canRecognizeWith: function canRecognizeWith(otherRecognizer) {
	        return !!this.simultaneous[otherRecognizer.id];
	    },
	    /**
	     * You should use `tryEmit` instead of `emit` directly to check
	     * that all the needed recognizers has failed before emitting.
	     * @param {Object} input
	     */
	    emit: function emit(input) {
	        var self = this;
	        var state = this.state;
	        function emit(withState) {
	            self.manager.emit(self.options.event + (withState ? stateStr(state) : ''), input);
	        }
	        // 'panstart' and 'panmove'
	        if (state < STATE_ENDED) {
	            emit(true);
	        }
	        emit(); // simple 'eventName' events
	        // panend and pancancel
	        if (state >= STATE_ENDED) {
	            emit(true);
	        }
	    },
	    /**
	     * Check that all the require failure recognizers has failed,
	     * if true, it emits a gesture event,
	     * otherwise, setup the state to FAILED.
	     * @param {Object} input
	     */
	    tryEmit: function tryEmit(input) {
	        if (this.canEmit()) {
	            return this.emit(input);
	        }
	        // it's failing anyway
	        this.state = STATE_FAILED;
	    },
	    /**
	     * can we emit?
	     * @returns {boolean}
	     */
	    canEmit: function canEmit() {
	        var i = 0;
	        while (i < this.requireFail.length) {
	            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
	                return false;
	            }
	            i++;
	        }
	        return true;
	    },
	    /**
	     * update the recognizer
	     * @param {Object} inputData
	     */
	    recognize: function recognize(inputData) {
	        // make a new copy of the inputData
	        // so we can change the inputData without messing up the other recognizers
	        var inputDataClone = extend({}, inputData);
	        // is is enabled and allow recognizing?
	        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
	            this.reset();
	            this.state = STATE_FAILED;
	            return;
	        }
	        // reset when we've reached the end
	        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
	            this.state = STATE_POSSIBLE;
	        }
	        this.state = this.process(inputDataClone);
	        // the recognizer has recognized a gesture
	        // so trigger an event
	        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
	            this.tryEmit(inputDataClone);
	        }
	    },
	    /**
	     * return the state of the recognizer
	     * the actual recognizing happens in this method
	     * @virtual
	     * @param {Object} inputData
	     * @returns {Const} STATE
	     */
	    process: function process(inputData) {},
	    /**
	     * return the preferred touch-action
	     * @virtual
	     * @returns {Array}
	     */
	    getTouchAction: function getTouchAction() {},
	    /**
	     * called when the gesture isn't allowed to recognize
	     * like when another is being recognized or it is disabled
	     * @virtual
	     */
	    reset: function reset() {}
	};
	/**
	 * get a usable string, used as event postfix
	 * @param {Const} state
	 * @returns {String} state
	 */
	function stateStr(state) {
	    if (state & STATE_CANCELLED) {
	        return 'cancel';
	    } else if (state & STATE_ENDED) {
	        return 'end';
	    } else if (state & STATE_CHANGED) {
	        return 'move';
	    } else if (state & STATE_BEGAN) {
	        return 'start';
	    }
	    return '';
	}
	/**
	 * direction cons to string
	 * @param {Const} direction
	 * @returns {String}
	 */
	function directionStr(direction) {
	    if (direction == DIRECTION_DOWN) {
	        return 'down';
	    } else if (direction == DIRECTION_UP) {
	        return 'up';
	    } else if (direction == DIRECTION_LEFT) {
	        return 'left';
	    } else if (direction == DIRECTION_RIGHT) {
	        return 'right';
	    }
	    return '';
	}
	/**
	 * get a recognizer by name if it is bound to a manager
	 * @param {Recognizer|String} otherRecognizer
	 * @param {Recognizer} recognizer
	 * @returns {Recognizer}
	 */
	function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
	    var manager = recognizer.manager;
	    if (manager) {
	        return manager.get(otherRecognizer);
	    }
	    return otherRecognizer;
	}
	/**
	 * This recognizer is just used as a base for the simple attribute recognizers.
	 * @constructor
	 * @extends Recognizer
	 */
	function AttrRecognizer() {
	    Recognizer.apply(this, arguments);
	}
	inherit(AttrRecognizer, Recognizer, {
	    /**
	     * @namespace
	     * @memberof AttrRecognizer
	     */
	    defaults: {
	        /**
	         * @type {Number}
	         * @default 1
	         */
	        pointers: 1
	    },
	    /**
	     * Used to check if it the recognizer receives valid input, like input.distance > 10.
	     * @memberof AttrRecognizer
	     * @param {Object} input
	     * @returns {Boolean} recognized
	     */
	    attrTest: function attrTest(input) {
	        var optionPointers = this.options.pointers;
	        return optionPointers === 0 || input.pointers.length === optionPointers;
	    },
	    /**
	     * Process the input and return the state for the recognizer
	     * @memberof AttrRecognizer
	     * @param {Object} input
	     * @returns {*} State
	     */
	    process: function process(input) {
	        var state = this.state;
	        var eventType = input.eventType;
	        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
	        var isValid = this.attrTest(input);
	        // on cancel input and we've recognized before, return STATE_CANCELLED
	        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
	            return state | STATE_CANCELLED;
	        } else if (isRecognized || isValid) {
	            if (eventType & INPUT_END) {
	                return state | STATE_ENDED;
	            } else if (!(state & STATE_BEGAN)) {
	                return STATE_BEGAN;
	            }
	            return state | STATE_CHANGED;
	        }
	        return STATE_FAILED;
	    }
	});
	/**
	 * Pan
	 * Recognized when the pointer is down and moved in the allowed direction.
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function PanRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	    this.pX = null;
	    this.pY = null;
	}
	inherit(PanRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof PanRecognizer
	     */
	    defaults: {
	        event: 'pan',
	        threshold: 10,
	        pointers: 1,
	        direction: DIRECTION_ALL
	    },
	    getTouchAction: function getTouchAction() {
	        var direction = this.options.direction;
	        var actions = [];
	        if (direction & DIRECTION_HORIZONTAL) {
	            actions.push(TOUCH_ACTION_PAN_Y);
	        }
	        if (direction & DIRECTION_VERTICAL) {
	            actions.push(TOUCH_ACTION_PAN_X);
	        }
	        return actions;
	    },
	    directionTest: function directionTest(input) {
	        var options = this.options;
	        var hasMoved = true;
	        var distance = input.distance;
	        var direction = input.direction;
	        var x = input.deltaX;
	        var y = input.deltaY;
	        // lock to axis?
	        if (!(direction & options.direction)) {
	            if (options.direction & DIRECTION_HORIZONTAL) {
	                direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
	                hasMoved = x != this.pX;
	                distance = Math.abs(input.deltaX);
	            } else {
	                direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
	                hasMoved = y != this.pY;
	                distance = Math.abs(input.deltaY);
	            }
	        }
	        input.direction = direction;
	        return hasMoved && distance > options.threshold && direction & options.direction;
	    },
	    attrTest: function attrTest(input) {
	        return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));
	    },
	    emit: function emit(input) {
	        this.pX = input.deltaX;
	        this.pY = input.deltaY;
	        var direction = directionStr(input.direction);
	        if (direction) {
	            this.manager.emit(this.options.event + direction, input);
	        }
	        this._super.emit.call(this, input);
	    }
	});
	/**
	 * Pinch
	 * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function PinchRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	}
	inherit(PinchRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof PinchRecognizer
	     */
	    defaults: {
	        event: 'pinch',
	        threshold: 0,
	        pointers: 2
	    },
	    getTouchAction: function getTouchAction() {
	        return [TOUCH_ACTION_NONE];
	    },
	    attrTest: function attrTest(input) {
	        return this._super.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
	    },
	    emit: function emit(input) {
	        this._super.emit.call(this, input);
	        if (input.scale !== 1) {
	            var inOut = input.scale < 1 ? 'in' : 'out';
	            this.manager.emit(this.options.event + inOut, input);
	        }
	    }
	});
	/**
	 * Press
	 * Recognized when the pointer is down for x ms without any movement.
	 * @constructor
	 * @extends Recognizer
	 */
	function PressRecognizer() {
	    Recognizer.apply(this, arguments);
	    this._timer = null;
	    this._input = null;
	}
	inherit(PressRecognizer, Recognizer, {
	    /**
	     * @namespace
	     * @memberof PressRecognizer
	     */
	    defaults: {
	        event: 'press',
	        pointers: 1,
	        time: 500,
	        threshold: 5 // a minimal movement is ok, but keep it low
	    },
	    getTouchAction: function getTouchAction() {
	        return [TOUCH_ACTION_AUTO];
	    },
	    process: function process(input) {
	        var options = this.options;
	        var validPointers = input.pointers.length === options.pointers;
	        var validMovement = input.distance < options.threshold;
	        var validTime = input.deltaTime > options.time;
	        this._input = input;
	        // we only allow little movement
	        // and we've reached an end event, so a tap is possible
	        if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {
	            this.reset();
	        } else if (input.eventType & INPUT_START) {
	            this.reset();
	            this._timer = setTimeoutContext(function () {
	                this.state = STATE_RECOGNIZED;
	                this.tryEmit();
	            }, options.time, this);
	        } else if (input.eventType & INPUT_END) {
	            return STATE_RECOGNIZED;
	        }
	        return STATE_FAILED;
	    },
	    reset: function reset() {
	        clearTimeout(this._timer);
	    },
	    emit: function emit(input) {
	        if (this.state !== STATE_RECOGNIZED) {
	            return;
	        }
	        if (input && input.eventType & INPUT_END) {
	            this.manager.emit(this.options.event + 'up', input);
	        } else {
	            this._input.timeStamp = now();
	            this.manager.emit(this.options.event, this._input);
	        }
	    }
	});
	/**
	 * Rotate
	 * Recognized when two or more pointer are moving in a circular motion.
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function RotateRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	}
	inherit(RotateRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof RotateRecognizer
	     */
	    defaults: {
	        event: 'rotate',
	        threshold: 0,
	        pointers: 2
	    },
	    getTouchAction: function getTouchAction() {
	        return [TOUCH_ACTION_NONE];
	    },
	    attrTest: function attrTest(input) {
	        return this._super.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
	    }
	});
	/**
	 * Swipe
	 * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function SwipeRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	}
	inherit(SwipeRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof SwipeRecognizer
	     */
	    defaults: {
	        event: 'swipe',
	        threshold: 10,
	        velocity: 0.65,
	        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
	        pointers: 1
	    },
	    getTouchAction: function getTouchAction() {
	        return PanRecognizer.prototype.getTouchAction.call(this);
	    },
	    attrTest: function attrTest(input) {
	        var direction = this.options.direction;
	        var velocity;
	        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
	            velocity = input.velocity;
	        } else if (direction & DIRECTION_HORIZONTAL) {
	            velocity = input.velocityX;
	        } else if (direction & DIRECTION_VERTICAL) {
	            velocity = input.velocityY;
	        }
	        return this._super.attrTest.call(this, input) && direction & input.direction && input.distance > this.options.threshold && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
	    },
	    emit: function emit(input) {
	        var direction = directionStr(input.direction);
	        if (direction) {
	            this.manager.emit(this.options.event + direction, input);
	        }
	        this.manager.emit(this.options.event, input);
	    }
	});
	/**
	 * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
	 * between the given interval and position. The delay option can be used to recognize multi-taps without firing
	 * a single tap.
	 *
	 * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
	 * multi-taps being recognized.
	 * @constructor
	 * @extends Recognizer
	 */
	function TapRecognizer() {
	    Recognizer.apply(this, arguments);
	    // previous time and center,
	    // used for tap counting
	    this.pTime = false;
	    this.pCenter = false;
	    this._timer = null;
	    this._input = null;
	    this.count = 0;
	}
	inherit(TapRecognizer, Recognizer, {
	    /**
	     * @namespace
	     * @memberof PinchRecognizer
	     */
	    defaults: {
	        event: 'tap',
	        pointers: 1,
	        taps: 1,
	        interval: 300,
	        time: 250,
	        threshold: 2,
	        posThreshold: 10 // a multi-tap can be a bit off the initial position
	    },
	    getTouchAction: function getTouchAction() {
	        return [TOUCH_ACTION_MANIPULATION];
	    },
	    process: function process(input) {
	        var options = this.options;
	        var validPointers = input.pointers.length === options.pointers;
	        var validMovement = input.distance < options.threshold;
	        var validTouchTime = input.deltaTime < options.time;
	        this.reset();
	        if (input.eventType & INPUT_START && this.count === 0) {
	            return this.failTimeout();
	        }
	        // we only allow little movement
	        // and we've reached an end event, so a tap is possible
	        if (validMovement && validTouchTime && validPointers) {
	            if (input.eventType != INPUT_END) {
	                return this.failTimeout();
	            }
	            var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
	            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;
	            this.pTime = input.timeStamp;
	            this.pCenter = input.center;
	            if (!validMultiTap || !validInterval) {
	                this.count = 1;
	            } else {
	                this.count += 1;
	            }
	            this._input = input;
	            // if tap count matches we have recognized it,
	            // else it has began recognizing...
	            var tapCount = this.count % options.taps;
	            if (tapCount === 0) {
	                // no failing requirements, immediately trigger the tap event
	                // or wait as long as the multitap interval to trigger
	                if (!this.hasRequireFailures()) {
	                    return STATE_RECOGNIZED;
	                } else {
	                    this._timer = setTimeoutContext(function () {
	                        this.state = STATE_RECOGNIZED;
	                        this.tryEmit();
	                    }, options.interval, this);
	                    return STATE_BEGAN;
	                }
	            }
	        }
	        return STATE_FAILED;
	    },
	    failTimeout: function failTimeout() {
	        this._timer = setTimeoutContext(function () {
	            this.state = STATE_FAILED;
	        }, this.options.interval, this);
	        return STATE_FAILED;
	    },
	    reset: function reset() {
	        clearTimeout(this._timer);
	    },
	    emit: function emit() {
	        if (this.state == STATE_RECOGNIZED) {
	            this._input.tapCount = this.count;
	            this.manager.emit(this.options.event, this._input);
	        }
	    }
	});
	/**
	 * Simple way to create an manager with a default set of recognizers.
	 * @param {HTMLElement} element
	 * @param {Object} [options]
	 * @constructor
	 */
	function Hammer(element, options) {
	    options = options || {};
	    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
	    return new Manager(element, options);
	}
	/**
	 * @const {string}
	 */
	Hammer.VERSION = '2.0.4';
	/**
	 * default settings
	 * @namespace
	 */
	Hammer.defaults = {
	    /**
	     * set if DOM events are being triggered.
	     * But this is slower and unused by simple implementations, so disabled by default.
	     * @type {Boolean}
	     * @default false
	     */
	    domEvents: false,
	    /**
	     * The value for the touchAction property/fallback.
	     * When set to `compute` it will magically set the correct value based on the added recognizers.
	     * @type {String}
	     * @default compute
	     */
	    touchAction: TOUCH_ACTION_COMPUTE,
	    /**
	     * @type {Boolean}
	     * @default true
	     */
	    enable: true,
	    /**
	     * EXPERIMENTAL FEATURE -- can be removed/changed
	     * Change the parent input target element.
	     * If Null, then it is being set the to main element.
	     * @type {Null|EventTarget}
	     * @default null
	     */
	    inputTarget: null,
	    /**
	     * force an input class
	     * @type {Null|Function}
	     * @default null
	     */
	    inputClass: null,
	    /**
	     * Default recognizer setup when calling `Hammer()`
	     * When creating a new Manager these will be skipped.
	     * @type {Array}
	     */
	    preset: [
	    // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
	    [RotateRecognizer, { enable: false }], [PinchRecognizer, { enable: false }, ['rotate']], [SwipeRecognizer, { direction: DIRECTION_HORIZONTAL }], [PanRecognizer, { direction: DIRECTION_HORIZONTAL }, ['swipe']], [TapRecognizer], [TapRecognizer, { event: 'doubletap', taps: 2 }, ['tap']], [PressRecognizer]],
	    /**
	     * Some CSS properties can be used to improve the working of Hammer.
	     * Add them to this method and they will be set when creating a new Manager.
	     * @namespace
	     */
	    cssProps: {
	        /**
	         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
	         * @type {String}
	         * @default 'none'
	         */
	        userSelect: 'none',
	        /**
	         * Disable the Windows Phone grippers when pressing an element.
	         * @type {String}
	         * @default 'none'
	         */
	        touchSelect: 'none',
	        /**
	         * Disables the default callout shown when you touch and hold a touch target.
	         * On iOS, when you touch and hold a touch target such as a link, Safari displays
	         * a callout containing information about the link. This property allows you to disable that callout.
	         * @type {String}
	         * @default 'none'
	         */
	        touchCallout: 'none',
	        /**
	         * Specifies whether zooming is enabled. Used by IE10>
	         * @type {String}
	         * @default 'none'
	         */
	        contentZooming: 'none',
	        /**
	         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
	         * @type {String}
	         * @default 'none'
	         */
	        userDrag: 'none',
	        /**
	         * Overrides the highlight color shown when the user taps a link or a JavaScript
	         * clickable element in iOS. This property obeys the alpha value, if specified.
	         * @type {String}
	         * @default 'rgba(0,0,0,0)'
	         */
	        tapHighlightColor: 'rgba(0,0,0,0)'
	    }
	};
	var STOP = 1;
	var FORCED_STOP = 2;
	/**
	 * Manager
	 * @param {HTMLElement} element
	 * @param {Object} [options]
	 * @constructor
	 */
	function Manager(element, options) {
	    options = options || {};
	    this.options = merge(options, Hammer.defaults);
	    this.options.inputTarget = this.options.inputTarget || element;
	    this.handlers = {};
	    this.session = {};
	    this.recognizers = [];
	    this.element = element;
	    this.input = createInputInstance(this);
	    this.touchAction = new TouchAction(this, this.options.touchAction);
	    toggleCssProps(this, true);
	    each(options.recognizers, function (item) {
	        var recognizer = this.add(new item[0](item[1]));
	        item[2] && recognizer.recognizeWith(item[2]);
	        item[3] && recognizer.requireFailure(item[3]);
	    }, this);
	}
	Manager.prototype = {
	    /**
	     * set options
	     * @param {Object} options
	     * @returns {Manager}
	     */
	    set: function set(options) {
	        extend(this.options, options);
	        // Options that need a little more setup
	        if (options.touchAction) {
	            this.touchAction.update();
	        }
	        if (options.inputTarget) {
	            // Clean up existing event listeners and reinitialize
	            this.input.destroy();
	            this.input.target = options.inputTarget;
	            this.input.init();
	        }
	        return this;
	    },
	    /**
	     * stop recognizing for this session.
	     * This session will be discarded, when a new [input]start event is fired.
	     * When forced, the recognizer cycle is stopped immediately.
	     * @param {Boolean} [force]
	     */
	    stop: function stop(force) {
	        this.session.stopped = force ? FORCED_STOP : STOP;
	    },
	    /**
	     * run the recognizers!
	     * called by the inputHandler function on every movement of the pointers (touches)
	     * it walks through all the recognizers and tries to detect the gesture that is being made
	     * @param {Object} inputData
	     */
	    recognize: function recognize(inputData) {
	        var session = this.session;
	        if (session.stopped) {
	            return;
	        }
	        // run the touch-action polyfill
	        this.touchAction.preventDefaults(inputData);
	        var recognizer;
	        var recognizers = this.recognizers;
	        // this holds the recognizer that is being recognized.
	        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
	        // if no recognizer is detecting a thing, it is set to `null`
	        var curRecognizer = session.curRecognizer;
	        // reset when the last recognizer is recognized
	        // or when we're in a new session
	        if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {
	            curRecognizer = session.curRecognizer = null;
	        }
	        var i = 0;
	        while (i < recognizers.length) {
	            recognizer = recognizers[i];
	            // find out if we are allowed try to recognize the input for this one.
	            // 1.   allow if the session is NOT forced stopped (see the .stop() method)
	            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
	            //      that is being recognized.
	            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
	            //      this can be setup with the `recognizeWith()` method on the recognizer.
	            if (session.stopped !== FORCED_STOP && (!curRecognizer || recognizer == curRecognizer || recognizer.canRecognizeWith(curRecognizer))) {
	                recognizer.recognize(inputData);
	            } else {
	                recognizer.reset();
	            }
	            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
	            // current active recognizer. but only if we don't already have an active recognizer
	            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
	                curRecognizer = session.curRecognizer = recognizer;
	            }
	            i++;
	        }
	    },
	    /**
	     * get a recognizer by its event name.
	     * @param {Recognizer|String} recognizer
	     * @returns {Recognizer|Null}
	     */
	    get: function get(recognizer) {
	        if (recognizer instanceof Recognizer) {
	            return recognizer;
	        }
	        var recognizers = this.recognizers;
	        for (var i = 0; i < recognizers.length; i++) {
	            if (recognizers[i].options.event == recognizer) {
	                return recognizers[i];
	            }
	        }
	        return null;
	    },
	    /**
	     * add a recognizer to the manager
	     * existing recognizers with the same event name will be removed
	     * @param {Recognizer} recognizer
	     * @returns {Recognizer|Manager}
	     */
	    add: function add(recognizer) {
	        if (invokeArrayArg(recognizer, 'add', this)) {
	            return this;
	        }
	        // remove existing
	        var existing = this.get(recognizer.options.event);
	        if (existing) {
	            this.remove(existing);
	        }
	        this.recognizers.push(recognizer);
	        recognizer.manager = this;
	        this.touchAction.update();
	        return recognizer;
	    },
	    /**
	     * remove a recognizer by name or instance
	     * @param {Recognizer|String} recognizer
	     * @returns {Manager}
	     */
	    remove: function remove(recognizer) {
	        if (invokeArrayArg(recognizer, 'remove', this)) {
	            return this;
	        }
	        var recognizers = this.recognizers;
	        recognizer = this.get(recognizer);
	        recognizers.splice(inArray(recognizers, recognizer), 1);
	        this.touchAction.update();
	        return this;
	    },
	    /**
	     * bind event
	     * @param {String} events
	     * @param {Function} handler
	     * @returns {EventEmitter} this
	     */
	    on: function on(events, handler) {
	        var handlers = this.handlers;
	        each(splitStr(events), function (event) {
	            handlers[event] = handlers[event] || [];
	            handlers[event].push(handler);
	        });
	        return this;
	    },
	    /**
	     * unbind event, leave emit blank to remove all handlers
	     * @param {String} events
	     * @param {Function} [handler]
	     * @returns {EventEmitter} this
	     */
	    off: function off(events, handler) {
	        var handlers = this.handlers;
	        each(splitStr(events), function (event) {
	            if (!handler) {
	                delete handlers[event];
	            } else {
	                handlers[event].splice(inArray(handlers[event], handler), 1);
	            }
	        });
	        return this;
	    },
	    /**
	     * emit event to the listeners
	     * @param {String} event
	     * @param {Object} data
	     */
	    emit: function emit(event, data) {
	        // we also want to trigger dom events
	        if (this.options.domEvents) {
	            triggerDomEvent(event, data);
	        }
	        // no handlers, so skip it all
	        var handlers = this.handlers[event] && this.handlers[event].slice();
	        if (!handlers || !handlers.length) {
	            return;
	        }
	        data.type = event;
	        data.preventDefault = function () {
	            data.srcEvent.preventDefault();
	        };
	        var i = 0;
	        while (i < handlers.length) {
	            handlers[i](data);
	            i++;
	        }
	    },
	    /**
	     * destroy the manager and unbinds all events
	     * it doesn't unbind dom events, that is the user own responsibility
	     */
	    destroy: function destroy() {
	        this.element && toggleCssProps(this, false);
	        this.handlers = {};
	        this.session = {};
	        this.input.destroy();
	        this.element = null;
	    }
	};
	/**
	 * add/remove the css properties as defined in manager.options.cssProps
	 * @param {Manager} manager
	 * @param {Boolean} add
	 */
	function toggleCssProps(manager, add) {
	    var element = manager.element;
	    each(manager.options.cssProps, function (value, name) {
	        element.style[prefixed(element.style, name)] = add ? value : '';
	    });
	}
	/**
	 * trigger dom event
	 * @param {String} event
	 * @param {Object} data
	 */
	function triggerDomEvent(event, data) {
	    var gestureEvent = document.createEvent('Event');
	    gestureEvent.initEvent(event, true, true);
	    gestureEvent.gesture = data;
	    data.target.dispatchEvent(gestureEvent);
	}
	extend(Hammer, {
	    INPUT_START: INPUT_START,
	    INPUT_MOVE: INPUT_MOVE,
	    INPUT_END: INPUT_END,
	    INPUT_CANCEL: INPUT_CANCEL,
	    STATE_POSSIBLE: STATE_POSSIBLE,
	    STATE_BEGAN: STATE_BEGAN,
	    STATE_CHANGED: STATE_CHANGED,
	    STATE_ENDED: STATE_ENDED,
	    STATE_RECOGNIZED: STATE_RECOGNIZED,
	    STATE_CANCELLED: STATE_CANCELLED,
	    STATE_FAILED: STATE_FAILED,
	    DIRECTION_NONE: DIRECTION_NONE,
	    DIRECTION_LEFT: DIRECTION_LEFT,
	    DIRECTION_RIGHT: DIRECTION_RIGHT,
	    DIRECTION_UP: DIRECTION_UP,
	    DIRECTION_DOWN: DIRECTION_DOWN,
	    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
	    DIRECTION_VERTICAL: DIRECTION_VERTICAL,
	    DIRECTION_ALL: DIRECTION_ALL,
	    Manager: Manager,
	    Input: Input,
	    TouchAction: TouchAction,
	    TouchInput: TouchInput,
	    MouseInput: MouseInput,
	    PointerEventInput: PointerEventInput,
	    TouchMouseInput: TouchMouseInput,
	    SingleTouchInput: SingleTouchInput,
	    Recognizer: Recognizer,
	    AttrRecognizer: AttrRecognizer,
	    Tap: TapRecognizer,
	    Pan: PanRecognizer,
	    Swipe: SwipeRecognizer,
	    Pinch: PinchRecognizer,
	    Rotate: RotateRecognizer,
	    Press: PressRecognizer,
	    on: addEventListeners,
	    off: removeEventListeners,
	    each: each,
	    merge: merge,
	    extend: extend,
	    inherit: inherit,
	    bindFn: bindFn,
	    prefixed: prefixed
	});
	/*
	if (typeof define == TYPE_FUNCTION && define.amd) {
	    define(function() {
	        return Hammer;
	    });
	} else if (typeof module != 'undefined' && module.exports) {
	    module.exports = Hammer;
	} else {
	    window[exportName] = Hammer;
	}
	*/
	exports.Hammer = Hammer;

	//})(window, document, 'Hammer');

/***/ },
/* 469 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _angular2Angular2 = __webpack_require__(45);

	var _ion = __webpack_require__(462);

	var _appApp = __webpack_require__(434);

	var _navViewController = __webpack_require__(470);

	var _navbarNavbar = __webpack_require__(474);

	/**
	* TODO
	*/
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = undefined && undefined.__param || function (paramIndex, decorator) {
	    return function (target, key) {
	        decorator(target, key, paramIndex);
	    };
	};
	var MenuToggle = (function (_Ion) {
	    _inherits(MenuToggle, _Ion);

	    function MenuToggle(app, elementRef, viewCtrl, navbar) {
	        _classCallCheck(this, MenuToggle);

	        _get(Object.getPrototypeOf(MenuToggle.prototype), "constructor", this).call(this, elementRef, null);
	        this.app = app;
	        this.viewCtrl = viewCtrl;
	        this.withinNavbar = !!navbar;
	    }

	    /**
	    * TODO
	    * @param {TODO} event  TODO
	    */

	    _createClass(MenuToggle, [{
	        key: "toggle",
	        value: function toggle() {
	            var menu = this.app.getComponent(this.menuToggle || 'menu');
	            menu && menu.toggle();
	        }
	    }, {
	        key: "isHidden",
	        get: function get() {
	            if (this.withinNavbar && this.viewCtrl) {
	                return !this.viewCtrl.isRoot();
	            }
	            return false;
	        }
	    }]);

	    return MenuToggle;
	})(_ion.Ion);
	exports.MenuToggle = MenuToggle;
	exports.MenuToggle = MenuToggle = __decorate([(0, _angular2Angular2.Directive)({
	    selector: '[menu-toggle]',
	    inputs: ['menuToggle'],
	    host: {
	        '(click)': 'toggle()',
	        '[hidden]': 'isHidden',
	        'menu-toggle': '' //ensures the attr is there for css when using [menu-toggle]
	    }
	}), __param(2, (0, _angular2Angular2.Optional)()), __param(3, (0, _angular2Angular2.Optional)()), __metadata('design:paramtypes', [typeof (_a = typeof _appApp.IonicApp !== 'undefined' && _appApp.IonicApp) === 'function' && _a || Object, typeof (_b = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _b || Object, typeof (_c = typeof _navViewController.ViewController !== 'undefined' && _navViewController.ViewController) === 'function' && _c || Object, typeof (_d = typeof _navbarNavbar.Navbar !== 'undefined' && _navbarNavbar.Navbar) === 'function' && _d || Object])], MenuToggle);
	var _a, _b, _c, _d;

/***/ },
/* 470 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _navController = __webpack_require__(471);

	/**
	 * TODO
	 */

	var ViewController = (function () {
	    function ViewController(navCtrl, componentType) {
	        var params = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	        _classCallCheck(this, ViewController);

	        this.navCtrl = navCtrl;
	        this.componentType = componentType;
	        this.params = new _navController.NavParams(params);
	        this.instance = null;
	        this.state = 0;
	        this._destroys = [];
	    }

	    /**
	     * TODO
	     * @returns {boolean} TODO
	     */

	    _createClass(ViewController, [{
	        key: 'enableBack',
	        value: function enableBack() {
	            // update if it's possible to go back from this nav item
	            if (this.navCtrl) {
	                var previousItem = this.navCtrl.getPrevious(this);
	                // the previous view may exist, but if it's about to be destroyed
	                // it shouldn't be able to go back to
	                return !!(previousItem && !previousItem.shouldDestroy);
	            }
	            return false;
	        }
	    }, {
	        key: 'setInstance',
	        value: function setInstance(instance) {
	            this.instance = instance;
	        }
	    }, {
	        key: 'isRoot',
	        value: function isRoot() {
	            return this.index === 0;
	        }
	    }, {
	        key: 'addDestroy',
	        value: function addDestroy(destroyFn) {
	            this._destroys.push(destroyFn);
	        }
	    }, {
	        key: 'destroy',
	        value: function destroy() {
	            for (var i = 0; i < this._destroys.length; i++) {
	                this._destroys[i]();
	            }
	            this._destroys = [];
	        }
	    }, {
	        key: 'setNavbarTemplateRef',
	        value: function setNavbarTemplateRef(templateRef) {
	            this._nbTmpRef = templateRef;
	        }
	    }, {
	        key: 'getNavbarTemplateRef',
	        value: function getNavbarTemplateRef() {
	            return this._nbTmpRef;
	        }
	    }, {
	        key: 'getNavbarViewRef',
	        value: function getNavbarViewRef() {
	            return this._nbVwRef;
	        }
	    }, {
	        key: 'setNavbarViewRef',
	        value: function setNavbarViewRef(viewContainerRef) {
	            this._nbVwRef = viewContainerRef;
	        }
	    }, {
	        key: 'setPageRef',
	        value: function setPageRef(elementRef) {
	            this._pgRef = elementRef;
	        }
	    }, {
	        key: 'pageRef',
	        value: function pageRef() {
	            return this._pgRef;
	        }
	    }, {
	        key: 'setContentRef',
	        value: function setContentRef(elementRef) {
	            this._cntRef = elementRef;
	        }
	    }, {
	        key: 'contentRef',
	        value: function contentRef() {
	            return this._cntRef;
	        }
	    }, {
	        key: 'setContent',
	        value: function setContent(directive) {
	            this._cntDir = directive;
	        }
	    }, {
	        key: 'getContent',
	        value: function getContent() {
	            return this._cntDir;
	        }
	    }, {
	        key: 'setNavbar',
	        value: function setNavbar(directive) {
	            this._nbDir = directive;
	        }
	    }, {
	        key: 'getNavbar',
	        value: function getNavbar() {
	            return this._nbDir;
	        }
	    }, {
	        key: 'hasNavbar',
	        value: function hasNavbar() {
	            return !!this.getNavbar();
	        }
	    }, {
	        key: 'navbarRef',
	        value: function navbarRef() {
	            var navbar = this.getNavbar();
	            return navbar && navbar.getElementRef();
	        }
	    }, {
	        key: 'titleRef',
	        value: function titleRef() {
	            var navbar = this.getNavbar();
	            return navbar && navbar.getTitleRef();
	        }
	    }, {
	        key: 'navbarItemRefs',
	        value: function navbarItemRefs() {
	            var navbar = this.getNavbar();
	            return navbar && navbar.getItemRefs();
	        }
	    }, {
	        key: 'backBtnRef',
	        value: function backBtnRef() {
	            var navbar = this.getNavbar();
	            return navbar && navbar.getBackButtonRef();
	        }
	    }, {
	        key: 'backBtnTextRef',
	        value: function backBtnTextRef() {
	            var navbar = this.getNavbar();
	            return navbar && navbar.getBackButtonTextRef();
	        }
	    }, {
	        key: 'navbarBgRef',
	        value: function navbarBgRef() {
	            var navbar = this.getNavbar();
	            return navbar && navbar.getBackgroundRef();
	        }
	    }, {
	        key: 'hideBackButton',
	        value: function hideBackButton(shouldHide) {
	            var navbar = this.getNavbar();
	            if (navbar) {
	                navbar.hideBackButton = !!shouldHide;
	            }
	        }

	        /**
	         * The view has loaded. This event only happens once per view being
	         * created. If a view leaves but is cached, then this will not
	         * fire again on a subsequent viewing. This method is a good place
	         * to put your setup code for the view; however, it is not the
	         * recommended method to use when a view becomes active.
	         */
	    }, {
	        key: 'loaded',
	        value: function loaded() {
	            if (!this.shouldDestroy) {
	                this.instance && this.instance.onPageLoaded && this.instance.onPageLoaded();
	            }
	        }

	        /**
	         * The view is about to enter and become the active view.
	         */
	    }, {
	        key: 'willEnter',
	        value: function willEnter() {
	            if (!this.shouldDestroy) {
	                this.instance && this.instance.onPageWillEnter && this.instance.onPageWillEnter();
	            }
	        }

	        /**
	         * The view has fully entered and is now the active view. This
	         * will fire, whether it was the first load or loaded from the cache.
	         */
	    }, {
	        key: 'didEnter',
	        value: function didEnter() {
	            var navbar = this.getNavbar();
	            navbar && navbar.didEnter();
	            this.instance && this.instance.onPageDidEnter && this.instance.onPageDidEnter();
	        }

	        /**
	         * The view has is about to leave and no longer be the active view.
	         */
	    }, {
	        key: 'willLeave',
	        value: function willLeave() {
	            this.instance && this.instance.onPageWillLeave && this.instance.onPageWillLeave();
	        }

	        /**
	         * The view has finished leaving and is no longer the active view. This
	         * will fire, whether it is cached or unloaded.
	         */
	    }, {
	        key: 'didLeave',
	        value: function didLeave() {
	            this.instance && this.instance.onPageDidLeave && this.instance.onPageDidLeave();
	        }

	        /**
	         * The view is about to be destroyed and have its elements removed.
	         */
	    }, {
	        key: 'willUnload',
	        value: function willUnload() {
	            this.instance && this.instance.onPageWillUnload && this.instance.onPageWillUnload();
	        }

	        /**
	         * The view has been destroyed and its elements have been removed.
	         */
	    }, {
	        key: 'didUnload',
	        value: function didUnload() {
	            this.instance && this.instance.onPageDidUnload && this.instance.onPageDidUnload();
	        }
	    }, {
	        key: 'domCache',
	        value: function domCache(isActiveView, isPreviousView) {
	            if (this.instance) {
	                this.instance._hidden = !isActiveView && !isPreviousView;
	            }
	        }
	    }, {
	        key: 'index',
	        get: function get() {
	            return this.navCtrl ? this.navCtrl.indexOf(this) : -1;
	        }
	    }]);

	    return ViewController;
	})();

	exports.ViewController = ViewController;

/***/ },
/* 471 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x12, _x13, _x14) { var _again = true; _function: while (_again) { var object = _x12, property = _x13, receiver = _x14; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x12 = parent; _x13 = property; _x14 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _angular2Angular2 = __webpack_require__(45);

	var _ion = __webpack_require__(462);

	var _viewController = __webpack_require__(470);

	var _transitionsTransition = __webpack_require__(472);

	var _swipeBack = __webpack_require__(473);

	var _ionicUtil = __webpack_require__(442);

	var util = _interopRequireWildcard(_ionicUtil);

	var _utilDom = __webpack_require__(435);

	/**
	 * _For examples on the basic usage of NavController, check out the [Navigation section](../../../../components/#navigation)
	 * of the Component docs._
	 *
	 * NavController is the base class for navigation controller components like
	 * [`Nav`](../Nav/) and [`Tab`](../../Tabs/Tab/). You use navigation controllers
	 * to navigate to [pages](#creating_pages) in your app. At a basic level, a
	 * navigation controller is an array of pages representing a particular history
	 * (of a Tab for example). This array can be manipulated to navigate throughout
	 * an app by pushing and popping pages or inserting and removing them at
	 * arbitrary locations in history.
	 *
	 * The current page is the last one in the array, or the top of the stack if we
	 * think of it that way.  [Pushing](#push) a new page onto the top of the
	 * navigation stack causes the new page to be animated in, while [popping](#pop)
	 * the current page will navigate to the previous page in the stack.
	 *
	 * Unless you are using a directive like [NavPush](../NavPush/), or need a
	 * specific NavController, most times you will inject and use a reference to the
	 * nearest NavController to manipulate the navigation stack.
	 *
	 * <h3 id="injecting_nav_controller">Injecting NavController</h3>
	 * Injecting NavController will always get you an instance of the nearest
	 * NavController, regardless of whether it is a Tab or a Nav.
	 *
	 * Behind the scenes, when Ionic instantiates a new NavController, it creates an
	 * injector with NavController bound to that instance (usually either a Nav or
	 * Tab) and adds the injector to its own providers.  For more information on
	 * providers and dependency injection, see [Providers and DI]().
	 *
	 * ```ts
	 * // class NavController
	 * this.providers = Injector.resolve([
	 *   provide(NavController, {useValue: this})
	 * ]);
	 * ```
	 *
	 * Instead, you can inject NavController and know that it is the correct
	 * navigation controller for most situations (for more advanced situations, see
	 * [Menu](../../Menu/Menu/) and [Tab](../../Tab/Tab/)).
	 *
	 * ```ts
	 *  class MyComponent {
	 *    constructor(nav: NavController) {
	 *      this.nav = nav;
	 *    }
	 *  }
	 * ```
	 *
	 * <h2 id="creating_pages">Page creation</h2>
	 * _For more information on the `@Page` decorator see the [@Page API
	 * reference](../../../config/Page/)._
	 *
	 * Pages are created when they are added to the navigation stack.  For methods
	 * like [push()](#push), the NavController takes any component class that is
	 * decorated with @Page as its first argument.  The NavController then
	 * [compiles]() that component, adds it to the DOM in a similar fashion to
	 * Angular's [DynamicComponentLoader](https://angular.io/docs/js/latest/api/core/DynamicComponentLoader-interface.html),
	 * and animates it into view.
	 *
	 * By default, pages are cached and left in the DOM if they are navigated away
	 * from but still in the navigation stack (the exiting page on a `push()` for
	 * example).  They are destroyed when removed from the navigation stack (on
	 * [pop()](#pop) or [setRoot()](#setRoot)).
	 *
	 *
	 * <h2 id="Lifecycle">Lifecycle events</h2>
	 * Lifecycle events are fired during various stages of navigation.  They can be
	 * defined in any `@Page` decorated component class.
	 *
	 * ```ts
	 * @Page({
	 *   template: 'Hello World'
	 * })
	 * class HelloWorld {
	 *   onPageLoaded() {
	 *     console.log("I'm alive!");
	 *   }
	 * }
	 * ```
	 *
	 * - `onPageLoaded` - Runs when the page has loaded. This event only happens once per page being created and added to the DOM. If a page leaves but is cached, then this event will not fire again on a subsequent viewing. The `onPageLoaded` event is good place to put your setup code for the page.
	 * - `onPageWillEnter` - Runs when the page is about to enter and become the active page.
	 * - `onPageDidEnter` - Runs when the page has fully entered and is now the active page. This event will fire, whether it was the first load or a cached page.
	 * - `onPageWillLeave` - Runs when the page is about to leave and no longer be the active page.
	 * - `onPageDidLeave` - Runs when the page has finished leaving and is no longer the active page.
	 * - `onPageWillUnload` - Runs when the page is about to be destroyed and have its elements removed.
	 * - `onPageDidUnload` - Runs after the page has been destroyed and its elements have been removed.
	 *
	 */

	var NavController = (function (_Ion) {
	    _inherits(NavController, _Ion);

	    function NavController(parentnavCtrl, app, config, elementRef, compiler, loader, viewManager, zone, renderer) {
	        _classCallCheck(this, NavController);

	        _get(Object.getPrototypeOf(NavController.prototype), 'constructor', this).call(this, elementRef, config);
	        this.parent = parentnavCtrl;
	        this.app = app;
	        this.config = config;
	        this._compiler = compiler;
	        this._loader = loader;
	        this._viewManager = viewManager;
	        this._zone = zone;
	        this.renderer = renderer;
	        this._views = [];
	        this._sbTrans = null;
	        this._sbEnabled = config.get('swipeBackEnabled') || false;
	        this._sbThreshold = config.get('swipeBackThreshold') || 40;
	        this.id = ++ctrlIds;
	        this._ids = -1;
	        // build a new injector for child ViewControllers to use
	        this.providers = _angular2Angular2.Injector.resolve([(0, _angular2Angular2.provide)(NavController, { useValue: this })]);
	    }

	    /**
	     * TODO
	     * @param {TODO} componentType  TODO
	     * @param {TODO} [params={}]  TODO
	     * @param {TODO} [opts={}]  TODO
	     * @returns {Promise} TODO
	     */

	    _createClass(NavController, [{
	        key: 'push',
	        value: function push(componentType) {
	            var _this = this;

	            var params = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	            var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	            if (!componentType) {
	                return Promise.reject();
	            }
	            if (typeof componentType !== 'function') {
	                throw 'Loading component must be a component class, not "' + componentType.toString() + '"';
	            }
	            var resolve = undefined;
	            var promise = new Promise(function (res) {
	                resolve = res;
	            });
	            // do not animate if this is the first in the stack
	            if (!this._views.length) {
	                opts.animate = false;
	            }
	            // default the direction to "forward"
	            opts.direction = opts.direction || 'forward';
	            // the active view is going to be the leaving one (if one exists)
	            var leavingView = this.getActive() || new _viewController.ViewController();
	            leavingView.shouldCache = util.isBoolean(opts.cacheLeavingView) ? opts.cacheLeavingView : true;
	            leavingView.shouldDestroy = !leavingView.shouldCache;
	            if (leavingView.shouldDestroy) {
	                leavingView.willUnload();
	            }
	            // create a new ViewController
	            var enteringView = new _viewController.ViewController(this, componentType, params);
	            enteringView.shouldDestroy = false;
	            enteringView.shouldCache = false;
	            // add the view to the stack
	            this._add(enteringView);
	            if (opts.preCleanup !== false) {
	                (0, _utilDom.raf)(function () {
	                    _this._cleanup(enteringView);
	                });
	            }
	            if (this.router) {
	                // notify router of the state change
	                this.router.stateChange('push', enteringView, params);
	            }
	            // start the transition
	            this._transition(enteringView, leavingView, opts, resolve);
	            return promise;
	        }

	        /**
	         * TODO
	         * @param {TODO} [opts={}]  TODO
	         * @returns {Promise} TODO
	         */
	    }, {
	        key: 'pop',
	        value: function pop() {
	            var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	            if (!this.canGoBack()) {
	                return Promise.reject();
	            }
	            var resolve = undefined;
	            var promise = new Promise(function (res) {
	                resolve = res;
	            });
	            // default the direction to "back"
	            opts.direction = opts.direction || 'back';
	            // get the active view and set that it is staged to be leaving
	            // was probably the one popped from the stack
	            var leavingView = this.getActive() || new _viewController.ViewController();
	            leavingView.shouldCache = util.isBoolean(opts.cacheLeavingView) ? opts.cacheLeavingView : false;
	            leavingView.shouldDestroy = !leavingView.shouldCache;
	            if (leavingView.shouldDestroy) {
	                leavingView.willUnload();
	            }
	            // the entering view is now the new last view
	            // Note: we might not have an entering view if this is the
	            // only view on the history stack.
	            var enteringView = this.getPrevious(leavingView);
	            if (enteringView) {
	                if (this.router) {
	                    // notify router of the state change
	                    this.router.stateChange('pop', enteringView);
	                }
	                // start the transition
	                this._transition(enteringView, leavingView, opts, resolve);
	            } else {
	                this._transComplete();
	                resolve();
	            }
	            return promise;
	        }

	        /**
	         * @private
	         * Pop to a specific view in the history stack
	         *
	         * @param view {ViewController} to pop to
	         * @param opts {object} pop options
	         */
	    }, {
	        key: 'popTo',
	        value: function popTo(viewCtrl) {
	            var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	            // Get the target index of the view to pop to
	            var viewIndex = this._views.indexOf(viewCtrl);
	            var targetIndex = viewIndex + 1;
	            // Don't pop to the view if it wasn't found, or the target is beyond the view list
	            if (viewIndex < 0 || targetIndex > this._views.length - 1) {
	                return Promise.resolve();
	            }
	            var resolve = undefined;
	            var promise = new Promise(function (res) {
	                resolve = res;
	            });
	            opts.direction = opts.direction || 'back';
	            // get the views to auto remove without having to do a transiton for each
	            // the last view (the currently active one) will do a normal transition out
	            if (this._views.length > 1) {
	                var autoRemoveItems = this._views.slice(targetIndex, this._views.length);
	                for (var i = 0; i < autoRemoveItems.length; i++) {
	                    autoRemoveItems[i].shouldDestroy = true;
	                    autoRemoveItems[i].shouldCache = false;
	                    autoRemoveItems[i].willUnload();
	                }
	            }
	            var leavingView = this.getPrevious(viewCtrl);
	            if (this.router) {
	                this.router.stateChange('pop', viewCtrl);
	            }
	            this._transition(viewCtrl, leavingView, opts, resolve);
	            return promise;
	        }

	        /**
	         * Pop to the root view.
	         * @param opts extra animation options
	         */
	    }, {
	        key: 'popToRoot',
	        value: function popToRoot() {
	            var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	            return this.popTo(this.first(), opts);
	        }

	        /**
	         * Inserts a view into the nav stack at the specified index.
	         * @param {TODO} componentType  TODO
	         * @param {TODO} index TODO
	         * @returns {Promise} TODO
	         */
	    }, {
	        key: 'insert',
	        value: function insert(componentType, index) {
	            var params = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	            var opts = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

	            if (!componentType || index < 0) {
	                return Promise.reject();
	            }
	            // push it onto the end
	            if (index >= this._views.length) {
	                return this.push(componentType, params, opts);
	            }
	            // create new ViewController, but don't render yet
	            var viewCtrl = new _viewController.ViewController(this, componentType);
	            viewCtrl.state = CACHED_STATE;
	            viewCtrl.shouldDestroy = false;
	            viewCtrl.shouldCache = false;
	            this._incrementId(viewCtrl);
	            this._views.splice(index, 0, viewCtrl);
	            return Promise.resolve();
	        }

	        /**
	         * Removes a view from the nav stack at the specified index.
	         * @param {TODO} index TODO
	         * @returns {Promise} TODO
	         */
	    }, {
	        key: 'remove',
	        value: function remove(index) {
	            var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	            if (index < 0 || index >= this._views.length) {
	                return Promise.reject("Index out of range");
	            }
	            var viewToRemove = this._views[index];
	            if (this.isActive(viewToRemove)) {
	                return this.pop(opts);
	            }
	            viewToRemove.shouldDestroy = true;
	            this._cleanup();
	            return Promise.resolve();
	        }

	        /**
	         * Set the view stack to reflect the given component classes.
	         * @param {TODO} components  TODO
	         * @param {TODO} [opts={}]  TODO
	         * @returns {Promise} TODO
	         */
	    }, {
	        key: 'setViews',
	        value: function setViews(components) {
	            var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	            if (!components || !components.length) {
	                return Promise.resolve();
	            }
	            // if animate has not been set then default to false
	            opts.animate = opts.animate || false;
	            opts.preCleanup = false;
	            // ensure leaving views are not cached, and should be destroyed
	            opts.cacheLeavingView = false;
	            // get the views to auto remove without having to do a transiton for each
	            // the last view (the currently active one) will do a normal transition out
	            if (this._views.length > 1) {
	                var autoRemoveItems = this._views.slice(0, this._views.length - 1);
	                for (var i = 0; i < autoRemoveItems.length; i++) {
	                    autoRemoveItems[i].shouldDestroy = true;
	                    autoRemoveItems[i].shouldCache = false;
	                    autoRemoveItems[i].willUnload();
	                }
	            }
	            var componentObj = null;
	            var componentType = null;
	            var viewCtrl = null;
	            // create the ViewControllers that go before the new active ViewController in the stack
	            // but the previous views won't should render yet
	            if (components.length > 1) {
	                var newBeforeItems = components.slice(0, components.length - 1);
	                for (var j = 0; j < newBeforeItems.length; j++) {
	                    componentObj = newBeforeItems[j];
	                    if (componentObj) {
	                        // could be an object with a componentType property, or it is a componentType
	                        componentType = componentObj.componentType || componentObj;
	                        viewCtrl = new _viewController.ViewController(this, componentType, componentObj.params);
	                        viewCtrl.state = CACHED_STATE;
	                        viewCtrl.shouldDestroy = false;
	                        viewCtrl.shouldCache = false;
	                        // add the item to the stack
	                        this._add(viewCtrl);
	                    }
	                }
	            }
	            // get the component that will become the active item
	            // it'll be the last one in the given components array
	            componentObj = components[components.length - 1];
	            componentType = componentObj.componentType || componentObj;
	            // transition the leaving and entering
	            return this.push(componentType, componentObj.params, opts);
	        }

	        /**
	         * TODO
	         * @param {TODO} componentType  TODO
	         * @param {TODO} [params={}]  TODO
	         * @param {TODO} [opts={}]  TODO
	         * @returns {Promise} TODO
	         */
	    }, {
	        key: 'setRoot',
	        value: function setRoot(componentType) {
	            var params = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	            var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	            return this.setViews([{
	                componentType: componentType,
	                params: params
	            }], opts);
	        }

	        /**
	         * TODO
	         * @param {TODO} enteringView  TODO
	         * @param {TODO} leavingView  TODO
	         * @param {TODO} opts  TODO
	         * @param {Function} done  TODO
	         * @returns {any} TODO
	         */
	    }, {
	        key: '_transition',
	        value: function _transition(enteringView, leavingView, opts, done) {
	            var _this2 = this;

	            if (!enteringView || enteringView === leavingView) {
	                return done();
	            }
	            if (!opts.animation) {
	                opts.animation = this.config.get('pageTransition');
	            }
	            if (this.config.get('animate') === false) {
	                opts.animate = false;
	            }
	            // wait for the new view to complete setup
	            this._stage(enteringView, function () {
	                if (enteringView.shouldDestroy) {
	                    // already marked as a view that will be destroyed, don't continue
	                    return done();
	                }
	                _this2._setZIndex(enteringView.instance, leavingView && leavingView.instance, opts.direction);
	                _this2._zone.runOutsideAngular(function () {
	                    enteringView.shouldDestroy = false;
	                    enteringView.shouldCache = false;
	                    if (!opts.preload) {
	                        enteringView.willEnter();
	                        leavingView.willLeave();
	                    }
	                    // set that the new view pushed on the stack is staged to be entering/leaving
	                    // staged state is important for the transition to find the correct view
	                    enteringView.state = STAGED_ENTERING_STATE;
	                    leavingView.state = STAGED_LEAVING_STATE;
	                    // init the transition animation
	                    opts.renderDelay = _this2.config.get('pageTransitionDelay');
	                    var transAnimation = _transitionsTransition.Transition.create(_this2, opts);
	                    if (opts.animate === false) {
	                        // force it to not animate the elements, just apply the "to" styles
	                        transAnimation.clearDuration();
	                        transAnimation.duration(0);
	                    }
	                    var duration = transAnimation.duration();
	                    if (duration > 64) {
	                        // block any clicks during the transition and provide a
	                        // fallback to remove the clickblock if something goes wrong
	                        _this2.app.setEnabled(false, duration);
	                        _this2.app.setTransitioning(true, duration);
	                    }
	                    // start the transition
	                    transAnimation.play(function () {
	                        // transition has completed, update each view's state
	                        enteringView.state = ACTIVE_STATE;
	                        leavingView.state = CACHED_STATE;
	                        // dispose any views that shouldn't stay around
	                        transAnimation.dispose();
	                        if (!opts.preload) {
	                            enteringView.didEnter();
	                            leavingView.didLeave();
	                        }
	                        // all done!
	                        _this2._zone.run(function () {
	                            _this2._transComplete();
	                            done();
	                        });
	                    });
	                });
	            });
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: '_stage',
	        value: function _stage(viewCtrl, done) {
	            if (viewCtrl.instance || viewCtrl.shouldDestroy) {
	                // already compiled this view
	                return done();
	            }
	            // get the pane the NavController wants to use
	            // the pane is where all this content will be placed into
	            this.loadPage(viewCtrl, null, function () {
	                // this ViewController instance has finished loading
	                try {
	                    viewCtrl.loaded();
	                } catch (e) {
	                    console.error(e);
	                }
	                done();
	            });
	        }
	    }, {
	        key: 'loadPage',
	        value: function loadPage(viewCtrl, navbarContainerRef, done) {
	            var _this3 = this;

	            var providers = this.providers.concat(_angular2Angular2.Injector.resolve([(0, _angular2Angular2.provide)(_viewController.ViewController, { useValue: viewCtrl }), (0, _angular2Angular2.provide)(NavParams, { useValue: viewCtrl.params })]));
	            console.time('loadPage ' + viewCtrl.componentType.name + ': loadIntoLocation');
	            this._loader.loadIntoLocation(viewCtrl.componentType, this.elementRef, 'contents', providers).then(function (componentRef) {
	                console.timeEnd('loadPage ' + viewCtrl.componentType.name + ': loadIntoLocation');
	                viewCtrl.addDestroy(function () {
	                    componentRef.dispose();
	                });
	                // a new ComponentRef has been created
	                // set the ComponentRef's instance to this ViewController
	                viewCtrl.setInstance(componentRef.instance);
	                // remember the ElementRef to the ion-page elementRef that was just created
	                viewCtrl.setPageRef(componentRef.location);
	                if (!navbarContainerRef) {
	                    navbarContainerRef = viewCtrl.getNavbarViewRef();
	                }
	                var navbarTemplateRef = viewCtrl.getNavbarTemplateRef();
	                if (navbarContainerRef && navbarTemplateRef) {
	                    (function () {
	                        console.time('loadPage ' + viewCtrl.componentType.name + ': createEmbeddedView');
	                        var navbarView = navbarContainerRef.createEmbeddedView(navbarTemplateRef);
	                        console.timeEnd('loadPage ' + viewCtrl.componentType.name + ': createEmbeddedView');
	                        viewCtrl.addDestroy(function () {
	                            var index = navbarContainerRef.indexOf(navbarView);
	                            if (index > -1) {
	                                navbarContainerRef.remove(index);
	                            }
	                        });
	                    })();
	                }
	                if (_this3._views.length === 1) {
	                    _this3._zone.runOutsideAngular(function () {
	                        setTimeout(function () {
	                            _this3.renderer.setElementClass(_this3.elementRef, 'has-views', true);
	                        }, 200);
	                    });
	                }
	                done(viewCtrl);
	            });
	        }
	    }, {
	        key: '_setZIndex',
	        value: function _setZIndex(enteringInstance, leavingInstance, direction) {
	            if (!leavingInstance) {
	                enteringInstance._zIndex = 10;
	            } else if (direction === 'back') {
	                // moving back
	                enteringInstance._zIndex = leavingInstance._zIndex - 1;
	            } else {
	                // moving forward
	                enteringInstance._zIndex = leavingInstance._zIndex + 1;
	            }
	        }

	        /**
	         * @private
	         * TODO
	         */
	    }, {
	        key: 'swipeBackStart',
	        value: function swipeBackStart() {
	            var _this4 = this;

	            return;
	            if (!this.app.isEnabled() || !this.canSwipeBack()) {
	                return;
	            }
	            // disables the app during the transition
	            this.app.setEnabled(false);
	            this.app.setTransitioning(true);
	            // default the direction to "back"
	            var opts = {
	                direction: 'back'
	            };
	            // get the active view and set that it is staged to be leaving
	            // was probably the one popped from the stack
	            var leavingView = this.getActive() || new _viewController.ViewController();
	            leavingView.shouldDestroy = true;
	            leavingView.shouldCache = false;
	            leavingView.willLeave();
	            leavingView.willUnload();
	            // the entering view is now the new last view
	            var enteringView = this.getPrevious(leavingView);
	            enteringView.shouldDestroy = false;
	            enteringView.shouldCache = false;
	            enteringView.willEnter();
	            // wait for the new view to complete setup
	            enteringView._stage(function () {
	                _this4._zone.runOutsideAngular(function () {
	                    // set that the new view pushed on the stack is staged to be entering/leaving
	                    // staged state is important for the transition to find the correct view
	                    enteringView.state = STAGED_ENTERING_STATE;
	                    leavingView.state = STAGED_LEAVING_STATE;
	                    // init the swipe back transition animation
	                    _this4._sbTrans = _transitionsTransition.Transition.create(_this4, opts);
	                    _this4._sbTrans.easing('linear').progressStart();
	                });
	            });
	        }

	        /**
	         * @private
	         * TODO
	         * @param {TODO} progress  TODO
	         */
	    }, {
	        key: 'swipeBackProgress',
	        value: function swipeBackProgress(value) {
	            return;
	            if (this._sbTrans) {
	                // continue to disable the app while actively dragging
	                this.app.setEnabled(false, 4000);
	                this.app.setTransitioning(true, 4000);
	                // set the transition animation's progress
	                this._sbTrans.progress(value);
	            }
	        }

	        /**
	         * @private
	         * @param {TODO} completeSwipeBack  Should the swipe back complete or not.
	         * @param {number} rate  How fast it closes
	         */
	    }, {
	        key: 'swipeBackEnd',
	        value: function swipeBackEnd(completeSwipeBack, rate) {
	            var _this5 = this;

	            return;
	            if (!this._sbTrans) return;
	            // disables the app during the transition
	            this.app.setEnabled(false);
	            this.app.setTransitioning(true);
	            this._sbTrans.progressEnd(completeSwipeBack, rate).then(function () {
	                _this5._zone.run(function () {
	                    // find the views that were entering and leaving
	                    var enteringView = _this5.getStagedEnteringView();
	                    var leavingView = _this5.getStagedLeavingView();
	                    if (enteringView && leavingView) {
	                        // finish up the animation
	                        if (completeSwipeBack) {
	                            // swipe back has completed navigating back
	                            // update each view's state
	                            enteringView.state = ACTIVE_STATE;
	                            leavingView.state = CACHED_STATE;
	                            enteringView.didEnter();
	                            leavingView.didLeave();
	                            if (_this5.router) {
	                                // notify router of the pop state change
	                                _this5.router.stateChange('pop', enteringView);
	                            }
	                        } else {
	                            // cancelled the swipe back, they didn't end up going back
	                            // return views to their original state
	                            leavingView.state = ACTIVE_STATE;
	                            enteringView.state = CACHED_STATE;
	                            leavingView.willEnter();
	                            leavingView.didEnter();
	                            enteringView.didLeave();
	                            leavingView.shouldDestroy = false;
	                            enteringView.shouldDestroy = false;
	                        }
	                    }
	                    // empty out and dispose the swipe back transition animation
	                    _this5._sbTrans && _this5._sbTrans.dispose();
	                    _this5._sbTrans = null;
	                    // all done!
	                    _this5._transComplete();
	                });
	            });
	        }

	        /**
	         * @private
	         * TODO
	         */
	    }, {
	        key: '_sbComplete',
	        value: function _sbComplete() {
	            return;
	            if (this.canSwipeBack()) {
	                // it is possible to swipe back
	                if (this.sbGesture) {
	                    // this is already an active gesture, don't create another one
	                    return;
	                }
	                var opts = {
	                    edge: 'left',
	                    threshold: this._sbThreshold
	                };
	                this.sbGesture = new _swipeBack.SwipeBackGesture(this.getNativeElement(), opts, this);
	                console.debug('SwipeBackGesture listen');
	                this.sbGesture.listen();
	            } else if (this.sbGesture) {
	                // it is not possible to swipe back and there is an
	                // active sbGesture, so unlisten it
	                console.debug('SwipeBackGesture unlisten');
	                this.sbGesture.unlisten();
	                this.sbGesture = null;
	            }
	        }

	        /**
	         * TODO
	         * @param {TODO} val  TODO
	         * @returns {TODO} TODO
	         */
	    }, {
	        key: 'isSwipeBackEnabled',
	        value: function isSwipeBackEnabled(val) {
	            if (arguments.length) {
	                this._sbEnabled = !!val;
	            }
	            return this._sbEnabled;
	        }

	        /**
	         * If it's possible to use swipe back or not. If it's not possible
	         * to go back, or swipe back is not enable then this will return false.
	         * If it is possible to go back, and swipe back is enabled, then this
	         * will return true.
	         * @returns {boolean}
	         */
	    }, {
	        key: 'canSwipeBack',
	        value: function canSwipeBack() {
	            return this._sbEnabled && this.canGoBack();
	        }

	        /**
	         * Returns `true` if there's a valid previous view that we can pop back to.
	         * Otherwise returns false.
	         * @returns {boolean}
	         */
	    }, {
	        key: 'canGoBack',
	        value: function canGoBack() {
	            var activeView = this.getActive();
	            if (activeView) {
	                return activeView.enableBack();
	            }
	            return false;
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: '_transComplete',
	        value: function _transComplete() {
	            var _this6 = this;

	            this._views.forEach(function (view) {
	                if (view) {
	                    if (view.shouldDestroy) {
	                        view.didUnload();
	                    } else if (view.state === CACHED_STATE && view.shouldCache) {
	                        view.shouldCache = false;
	                    }
	                }
	            });
	            // allow clicks again, but still set an enable time
	            // meaning nothing with this view controller can happen for XXms
	            this.app.setEnabled(true);
	            this.app.setTransitioning(false);
	            this._sbComplete();
	            (0, _utilDom.raf)(function () {
	                _this6._cleanup();
	            });
	        }
	    }, {
	        key: '_cleanup',
	        value: function _cleanup(activeView) {
	            var _this7 = this;

	            // the active view, and the previous view, should be rendered in dom and ready to go
	            // all others, like a cached page 2 back, should be display: none and not rendered
	            var destroys = [];
	            activeView = activeView || this.getActive();
	            var previousView = this.getPrevious(activeView);
	            this._views.forEach(function (view) {
	                if (view) {
	                    if (view.shouldDestroy) {
	                        destroys.push(view);
	                    } else {
	                        var isActiveView = view === activeView;
	                        var isPreviousView = view === previousView;
	                        view.domCache && view.domCache(isActiveView, isPreviousView);
	                    }
	                }
	            });
	            // all views being destroyed should be removed from the list of views
	            // and completely removed from the dom
	            destroys.forEach(function (view) {
	                _this7._remove(view);
	                view.destroy();
	            });
	        }

	        /**
	         * TODO
	         * @param {TODO} nbContainer  TODO
	         * @returns {TODO} TODO
	         */
	    }, {
	        key: 'navbarViewContainer',
	        value: function navbarViewContainer(nbContainer) {
	            if (nbContainer) {
	                this._nbContainer = nbContainer;
	            }
	            if (this._nbContainer) {
	                return this._nbContainer;
	            }
	            if (this.parent) {
	                return this.parent.navbarViewContainer();
	            }
	        }

	        /**
	         * TODO
	         * @returns {TODO} TODO
	         */
	    }, {
	        key: 'anchorElementRef',
	        value: function anchorElementRef() {
	            if (arguments.length) {
	                this._anchorER = arguments[0];
	            }
	            return this._anchorER;
	        }

	        /**
	         * @private
	         * TODO
	         * @param {TODO} view  TODO
	         * @returns {TODO} TODO
	         */
	    }, {
	        key: '_add',
	        value: function _add(view) {
	            this._incrementId(view);
	            this._views.push(view);
	        }
	    }, {
	        key: '_incrementId',
	        value: function _incrementId(view) {
	            view.id = this.id + '-' + ++this._ids;
	        }

	        /**
	         * @private
	         * TODO
	         * @param {TODO} viewOrIndex  TODO
	         * @returns {TODO} TODO
	         */
	    }, {
	        key: '_remove',
	        value: function _remove(viewOrIndex) {
	            util.array.remove(this._views, viewOrIndex);
	        }

	        /**
	         * TODO
	         * @returns {TODO} TODO
	         */
	    }, {
	        key: 'getActive',
	        value: function getActive() {
	            for (var i = this._views.length - 1; i >= 0; i--) {
	                if (this._views[i].state === ACTIVE_STATE && !this._views[i].shouldDestroy) {
	                    return this._views[i];
	                }
	            }
	            return null;
	        }

	        /**
	         * TODO
	         * @param {TODO} index  TODO
	         * @returns {TODO} TODO
	         */
	    }, {
	        key: 'getByIndex',
	        value: function getByIndex(index) {
	            if (index < this._views.length && index > -1) {
	                return this._views[index];
	            }
	            return null;
	        }

	        /**
	         * TODO
	         * @param {TODO} view  TODO
	         * @returns {TODO} TODO
	         */
	    }, {
	        key: 'getPrevious',
	        value: function getPrevious(view) {
	            if (view) {
	                var viewIndex = this._views.indexOf(view);
	                for (var i = viewIndex - 1; i >= 0; i--) {
	                    if (!this._views[i].shouldDestroy) {
	                        return this._views[i];
	                    }
	                }
	            }
	            return null;
	        }

	        /**
	         * TODO
	         * @returns {TODO} TODO
	         */
	    }, {
	        key: 'getStagedEnteringView',
	        value: function getStagedEnteringView() {
	            for (var i = 0, ii = this._views.length; i < ii; i++) {
	                if (this._views[i].state === STAGED_ENTERING_STATE) {
	                    return this._views[i];
	                }
	            }
	            return null;
	        }

	        /**
	         * TODO
	         * @returns {TODO} TODO
	         */
	    }, {
	        key: 'getStagedLeavingView',
	        value: function getStagedLeavingView() {
	            for (var i = 0, ii = this._views.length; i < ii; i++) {
	                if (this._views[i].state === STAGED_LEAVING_STATE) {
	                    return this._views[i];
	                }
	            }
	            return null;
	        }

	        /**
	         * First view in this nav controller's stack. This would
	         * not return an view which is about to be destroyed.
	         * @returns {TODO} TODO
	         */
	    }, {
	        key: 'first',
	        value: function first() {
	            for (var i = 0, l = this._views.length; i < l; i++) {
	                if (!this._views[i].shouldDestroy) {
	                    return this._views[i];
	                }
	            }
	            return null;
	        }

	        /**
	         * Last view in this nav controller's stack. This would
	         * not return an view which is about to be destroyed.
	         * @returns {TODO} TODO
	         */
	    }, {
	        key: 'last',
	        value: function last() {
	            for (var i = this._views.length - 1; i >= 0; i--) {
	                if (!this._views[i].shouldDestroy) {
	                    return this._views[i];
	                }
	            }
	            return null;
	        }

	        /**
	         * TODO
	         * @param {TODO} view  TODO
	         * @returns {TODO} TODO
	         */
	    }, {
	        key: 'indexOf',
	        value: function indexOf(view) {
	            return this._views.indexOf(view);
	        }

	        /**
	         * Number of sibling views in the nav controller. This does
	         * not include views which are about to be destroyed.
	         * @returns {TODO} TODO
	         */
	    }, {
	        key: 'length',
	        value: function length() {
	            var len = 0;
	            for (var i = 0, l = this._views.length; i < l; i++) {
	                if (!this._views[i].shouldDestroy) {
	                    len++;
	                }
	            }
	            return len;
	        }

	        /**
	         * TODO
	         * @returns {TODO} TODO
	         */
	    }, {
	        key: 'instances',
	        value: function instances() {
	            var instances = [];
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = this._views[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var view = _step.value;

	                    if (view.instance) {
	                        instances.push(view.instance);
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator['return']) {
	                        _iterator['return']();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            return instances;
	        }

	        /**
	         * TODO
	         * @param {TODO} view  TODO
	         * @returns {TODO} TODO
	         */
	    }, {
	        key: 'isActive',
	        value: function isActive(view) {
	            return view && view.state === ACTIVE_STATE;
	        }

	        /**
	         * TODO
	         * @param {TODO} view  TODO
	         * @returns {TODO} TODO
	         */
	    }, {
	        key: 'isStagedEntering',
	        value: function isStagedEntering(view) {
	            return view && view.state === STAGED_ENTERING_STATE;
	        }

	        /**
	         * TODO
	         * @param {TODO} router  TODO
	         */
	    }, {
	        key: 'registerRouter',
	        value: function registerRouter(router) {
	            this.router = router;
	        }
	    }]);

	    return NavController;
	})(_ion.Ion);

	exports.NavController = NavController;

	var ACTIVE_STATE = 1;
	var CACHED_STATE = 2;
	var STAGED_ENTERING_STATE = 3;
	var STAGED_LEAVING_STATE = 4;
	var ctrlIds = -1;
	/**
	 * TODO
	 */

	var NavParams = (function () {
	    /**
	     * TODO
	     * @param {TODO} data  TODO
	     */

	    function NavParams(data) {
	        _classCallCheck(this, NavParams);

	        this.data = data || {};
	    }

	    /**
	     * TODO
	     * @param {TODO} param  TODO
	     */

	    _createClass(NavParams, [{
	        key: 'get',
	        value: function get(param) {
	            return this.data[param];
	        }
	    }]);

	    return NavParams;
	})();

	exports.NavParams = NavParams;

/***/ },
/* 472 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var Transition = (function () {
	    function Transition() {
	        _classCallCheck(this, Transition);
	    }

	    _createClass(Transition, null, [{
	        key: 'create',
	        value: function create(navCtrl) {
	            var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	            var name = opts.animation || 'ios';
	            var TransitionClass = transitionRegistry[name];
	            if (!TransitionClass) {
	                TransitionClass = transitionRegistry.ios;
	            }
	            return new TransitionClass(navCtrl, opts);
	        }
	    }, {
	        key: 'register',
	        value: function register(name, TransitionClass) {
	            transitionRegistry[name] = TransitionClass;
	        }
	    }]);

	    return Transition;
	})();

	exports.Transition = Transition;

	var transitionRegistry = {};

/***/ },
/* 473 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _ionicGesturesSlideEdgeGesture = __webpack_require__(464);

	var SwipeBackGesture = (function (_SlideEdgeGesture) {
	    _inherits(SwipeBackGesture, _SlideEdgeGesture);

	    function SwipeBackGesture(element, opts, navCtrl) {
	        if (opts === undefined) opts = {};

	        _classCallCheck(this, SwipeBackGesture);

	        _get(Object.getPrototypeOf(SwipeBackGesture.prototype), 'constructor', this).call(this, element, opts);
	        // Can check corners through use of eg 'left top'
	        this.edges = opts.edge.split(' ');
	        this.threshold = opts.threshold;
	        this.navCtrl = navCtrl;
	    }

	    _createClass(SwipeBackGesture, [{
	        key: 'onSlideStart',
	        value: function onSlideStart() {
	            this.navCtrl.swipeBackStart();
	        }
	    }, {
	        key: 'onSlide',
	        value: function onSlide(slide, ev) {
	            this.navCtrl.swipeBackProgress(slide.distance / slide.max);
	        }
	    }, {
	        key: 'onSlideEnd',
	        value: function onSlideEnd(slide, ev) {
	            var shouldComplete = Math.abs(ev.velocityX) > 0.2 || Math.abs(slide.delta) > Math.abs(slide.max) * 0.5;
	            // TODO: calculate a better playback rate depending on velocity and distance
	            this.navCtrl.swipeBackEnd(shouldComplete, 1);
	        }
	    }]);

	    return SwipeBackGesture;
	})(_ionicGesturesSlideEdgeGesture.SlideEdgeGesture);

	exports.SwipeBackGesture = SwipeBackGesture;

/***/ },
/* 474 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _angular2Angular2 = __webpack_require__(45);

	var _ion = __webpack_require__(462);

	var _iconIcon = __webpack_require__(446);

	var _toolbarToolbar = __webpack_require__(475);

	var _configConfig = __webpack_require__(437);

	var _appApp = __webpack_require__(434);

	var _navViewController = __webpack_require__(470);

	var _navNavController = __webpack_require__(471);

	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = undefined && undefined.__param || function (paramIndex, decorator) {
	    return function (target, key) {
	        decorator(target, key, paramIndex);
	    };
	};

	var BackButton = (function (_Ion) {
	    _inherits(BackButton, _Ion);

	    function BackButton(navCtrl, elementRef, navbar) {
	        _classCallCheck(this, BackButton);

	        _get(Object.getPrototypeOf(BackButton.prototype), "constructor", this).call(this, elementRef, null);
	        this.navCtrl = navCtrl;
	        navbar && navbar.setBackButtonRef(elementRef);
	    }

	    _createClass(BackButton, [{
	        key: "goBack",
	        value: function goBack(ev) {
	            ev.stopPropagation();
	            ev.preventDefault();
	            this.navCtrl && this.navCtrl.pop();
	        }
	    }]);

	    return BackButton;
	})(_ion.Ion);
	BackButton = __decorate([(0, _angular2Angular2.Directive)({
	    selector: '.back-button',
	    host: {
	        '(click)': 'goBack($event)'
	    }
	}), __param(0, (0, _angular2Angular2.Optional)()), __param(2, (0, _angular2Angular2.Optional)()), __param(2, (0, _angular2Angular2.Inject)((0, _angular2Angular2.forwardRef)(function () {
	    return Navbar;
	}))), __metadata('design:paramtypes', [typeof (_a = typeof _navNavController.NavController !== 'undefined' && _navNavController.NavController) === 'function' && _a || Object, typeof (_b = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _b || Object, Navbar])], BackButton);
	var BackButtonText = function BackButtonText(elementRef, navbar) {
	    _classCallCheck(this, BackButtonText);

	    navbar.setBackButtonTextRef(elementRef);
	};
	BackButtonText = __decorate([(0, _angular2Angular2.Directive)({
	    selector: '.back-button-text'
	}), __param(1, (0, _angular2Angular2.Inject)((0, _angular2Angular2.forwardRef)(function () {
	    return Navbar;
	}))), __metadata('design:paramtypes', [typeof (_c = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _c || Object, Navbar])], BackButtonText);
	var ToolbarBackground = function ToolbarBackground(elementRef, navbar) {
	    _classCallCheck(this, ToolbarBackground);

	    navbar.setBackgroundRef(elementRef);
	};
	ToolbarBackground = __decorate([(0, _angular2Angular2.Directive)({
	    selector: 'toolbar-background'
	}), __param(1, (0, _angular2Angular2.Inject)((0, _angular2Angular2.forwardRef)(function () {
	    return Navbar;
	}))), __metadata('design:paramtypes', [typeof (_d = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _d || Object, Navbar])], ToolbarBackground);
	var Navbar = (function (_ToolbarBase) {
	    _inherits(Navbar, _ToolbarBase);

	    function Navbar(app, viewCtrl, elementRef, config, renderer) {
	        _classCallCheck(this, Navbar);

	        _get(Object.getPrototypeOf(Navbar.prototype), "constructor", this).call(this, elementRef, config);
	        this.app = app;
	        this.renderer = renderer;
	        var navbarStyle = config.get('navbarStyle');
	        if (navbarStyle) {
	            renderer.setElementAttribute(elementRef, navbarStyle, '');
	        }
	        viewCtrl && viewCtrl.setNavbar(this);
	        this.bbIcon = config.get('backButtonIcon');
	        this.bbDefault = config.get('backButtonText');
	    }

	    /**
	     * @private
	     */

	    _createClass(Navbar, [{
	        key: "onInit",
	        value: function onInit() {
	            _get(Object.getPrototypeOf(Navbar.prototype), "onInit", this).call(this);
	            var hideBackButton = this.hideBackButton;
	            if (typeof hideBackButton === 'string') {
	                this.hideBackButton = hideBackButton === '' || hideBackButton === 'true';
	            }
	            if (this.navbarStyle) {
	                this.renderer.setElementAttribute(this.elementRef, this.navbarStyle, '');
	            }
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "getBackButtonRef",
	        value: function getBackButtonRef() {
	            return this.bbRef;
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "setBackButtonRef",
	        value: function setBackButtonRef(backButtonElementRef) {
	            this.bbRef = backButtonElementRef;
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "getBackButtonTextRef",
	        value: function getBackButtonTextRef() {
	            return this.bbtRef;
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "setBackButtonTextRef",
	        value: function setBackButtonTextRef(backButtonTextElementRef) {
	            this.bbtRef = backButtonTextElementRef;
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "setBackgroundRef",
	        value: function setBackgroundRef(backgrouneElementRef) {
	            this.bgRef = backgrouneElementRef;
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "getBackgroundRef",
	        value: function getBackgroundRef() {
	            return this.bgRef;
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "didEnter",
	        value: function didEnter() {
	            this.app.setTitle(this.getTitleText());
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "setHidden",
	        value: function setHidden(isHidden) {
	            this._hidden = isHidden;
	        }
	    }]);

	    return Navbar;
	})(_toolbarToolbar.ToolbarBase);
	exports.Navbar = Navbar;
	exports.Navbar = Navbar = __decorate([(0, _angular2Angular2.Component)({
	    selector: 'ion-navbar',
	    template: '<toolbar-background></toolbar-background>' + '<button class="back-button" [hidden]="hideBackButton">' + '<icon class="back-button-icon" [name]="bbIcon"></icon>' + '<span class="back-button-text">' + '<span class="back-default">{{bbDefault}}</span>' + '</span>' + '</button>' + '<ng-content select="[menu-toggle]"></ng-content>' + '<ng-content select="ion-nav-items[primary]"></ng-content>' + '<ng-content select="ion-nav-items[secondary]"></ng-content>' + '<toolbar-content>' + '<ng-content></ng-content>' + '</toolbar-content>',
	    host: {
	        '[hidden]': '_hidden',
	        'class': 'toolbar'
	    },
	    inputs: ['hideBackButton', 'navbarStyle'],
	    directives: [BackButton, BackButtonText, _iconIcon.Icon, ToolbarBackground]
	}), __param(1, (0, _angular2Angular2.Optional)()), __metadata('design:paramtypes', [typeof (_e = typeof _appApp.IonicApp !== 'undefined' && _appApp.IonicApp) === 'function' && _e || Object, typeof (_f = typeof _navViewController.ViewController !== 'undefined' && _navViewController.ViewController) === 'function' && _f || Object, typeof (_g = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _g || Object, typeof (_h = typeof _configConfig.Config !== 'undefined' && _configConfig.Config) === 'function' && _h || Object, typeof (_j = typeof _angular2Angular2.Renderer !== 'undefined' && _angular2Angular2.Renderer) === 'function' && _j || Object])], Navbar);
	/**
	 * @private
	 * Used to find and register headers in a view, and this directive's
	 * content will be moved up to the common navbar location, and created
	 * using the same context as the view's content area.
	*/
	var NavbarTemplate = function NavbarTemplate(viewContainerRef, templateRef, viewCtrl) {
	    _classCallCheck(this, NavbarTemplate);

	    if (viewCtrl) {
	        viewCtrl.setNavbarTemplateRef(templateRef);
	        viewCtrl.setNavbarViewRef(viewContainerRef);
	    }
	};
	exports.NavbarTemplate = NavbarTemplate;
	exports.NavbarTemplate = NavbarTemplate = __decorate([(0, _angular2Angular2.Directive)({
	    selector: 'template[navbar]'
	}), __param(2, (0, _angular2Angular2.Optional)()), __metadata('design:paramtypes', [typeof (_k = typeof _angular2Angular2.ViewContainerRef !== 'undefined' && _angular2Angular2.ViewContainerRef) === 'function' && _k || Object, typeof (_l = typeof _angular2Angular2.TemplateRef !== 'undefined' && _angular2Angular2.TemplateRef) === 'function' && _l || Object, typeof (_m = typeof _navViewController.ViewController !== 'undefined' && _navViewController.ViewController) === 'function' && _m || Object])], NavbarTemplate);
	var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;

/***/ },
/* 475 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _angular2Angular2 = __webpack_require__(45);

	var _ion = __webpack_require__(462);

	var _configConfig = __webpack_require__(437);

	var _navbarNavbar = __webpack_require__(474);

	/**
	 * TODO
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = undefined && undefined.__param || function (paramIndex, decorator) {
	    return function (target, key) {
	        decorator(target, key, paramIndex);
	    };
	};

	var ToolbarBase = (function (_Ion) {
	    _inherits(ToolbarBase, _Ion);

	    function ToolbarBase(elementRef, config) {
	        _classCallCheck(this, ToolbarBase);

	        _get(Object.getPrototypeOf(ToolbarBase.prototype), "constructor", this).call(this, elementRef, config);
	        this.itemRefs = [];
	        this.titleRef = null;
	    }

	    /**
	     * TODO
	     */

	    /**
	     * @private
	     */

	    _createClass(ToolbarBase, [{
	        key: "setTitleCmp",
	        value: function setTitleCmp(titleCmp) {
	            this.titleCmp = titleCmp;
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "getTitleText",
	        value: function getTitleText() {
	            return this.titleCmp && this.titleCmp.getTitleText() || '';
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "getTitleRef",
	        value: function getTitleRef() {
	            return this.titleCmp && this.titleCmp.elementRef;
	        }

	        /**
	         * @private
	         * A toolbar items include the left and right side `ion-nav-items`,
	         * and every `menu-toggle`. It does not include the `ion-title`.
	         * @returns {TODO} Array of this toolbar's item ElementRefs.
	         */
	    }, {
	        key: "getItemRefs",
	        value: function getItemRefs() {
	            return this.itemRefs;
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "addItemRef",
	        value: function addItemRef(itemElementRef) {
	            this.itemRefs.push(itemElementRef);
	        }
	    }]);

	    return ToolbarBase;
	})(_ion.Ion);

	exports.ToolbarBase = ToolbarBase;
	var Toolbar = (function (_ToolbarBase) {
	    _inherits(Toolbar, _ToolbarBase);

	    function Toolbar(elementRef, config) {
	        _classCallCheck(this, Toolbar);

	        _get(Object.getPrototypeOf(Toolbar.prototype), "constructor", this).call(this, elementRef, config);
	    }

	    return Toolbar;
	})(ToolbarBase);
	exports.Toolbar = Toolbar;
	exports.Toolbar = Toolbar = __decorate([(0, _angular2Angular2.Component)({
	    selector: 'ion-toolbar',
	    template: '<toolbar-background></toolbar-background>' + '<ng-content select="[menu-toggle]"></ng-content>' + '<ng-content select="ion-nav-items[primary]"></ng-content>' + '<ng-content select="ion-nav-items[secondary]"></ng-content>' + '<toolbar-content>' + '<ng-content></ng-content>' + '</toolbar-content>',
	    host: {
	        'class': 'toolbar'
	    }
	}), __metadata('design:paramtypes', [typeof (_a = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _a || Object, typeof (_b = typeof _configConfig.Config !== 'undefined' && _configConfig.Config) === 'function' && _b || Object])], Toolbar);
	var ToolbarTitle = (function (_Ion2) {
	    _inherits(ToolbarTitle, _Ion2);

	    function ToolbarTitle(elementRef, toolbar, navbar) {
	        _classCallCheck(this, ToolbarTitle);

	        _get(Object.getPrototypeOf(ToolbarTitle.prototype), "constructor", this).call(this, elementRef, null);
	        toolbar && toolbar.setTitleCmp(this);
	        navbar && navbar.setTitleCmp(this);
	    }

	    _createClass(ToolbarTitle, [{
	        key: "getTitleText",
	        value: function getTitleText() {
	            return this.getNativeElement().textContent;
	        }
	    }]);

	    return ToolbarTitle;
	})(_ion.Ion);
	exports.ToolbarTitle = ToolbarTitle;
	exports.ToolbarTitle = ToolbarTitle = __decorate([(0, _angular2Angular2.Component)({
	    selector: 'ion-title',
	    template: '<div class="toolbar-title">' + '<ng-content></ng-content>' + '</div>'
	}), __param(1, (0, _angular2Angular2.Optional)()), __param(2, (0, _angular2Angular2.Optional)()), __param(2, (0, _angular2Angular2.Inject)((0, _angular2Angular2.forwardRef)(function () {
	    return _navbarNavbar.Navbar;
	}))), __metadata('design:paramtypes', [typeof (_c = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _c || Object, Toolbar, typeof (_d = typeof _navbarNavbar.Navbar !== 'undefined' && _navbarNavbar.Navbar) === 'function' && _d || Object])], ToolbarTitle);
	/**
	 * @private
	 */
	var ToolbarItem = (function (_Ion3) {
	    _inherits(ToolbarItem, _Ion3);

	    function ToolbarItem(elementRef, toolbar, navbar) {
	        _classCallCheck(this, ToolbarItem);

	        _get(Object.getPrototypeOf(ToolbarItem.prototype), "constructor", this).call(this, elementRef, null);
	        toolbar && toolbar.addItemRef(elementRef);
	        navbar && navbar.addItemRef(elementRef);
	    }

	    return ToolbarItem;
	})(_ion.Ion);
	exports.ToolbarItem = ToolbarItem;
	exports.ToolbarItem = ToolbarItem = __decorate([(0, _angular2Angular2.Directive)({
	    selector: 'ion-nav-items,[menu-toggle]'
	}), __param(1, (0, _angular2Angular2.Optional)()), __param(2, (0, _angular2Angular2.Optional)()), __param(2, (0, _angular2Angular2.Inject)((0, _angular2Angular2.forwardRef)(function () {
	    return _navbarNavbar.Navbar;
	}))), __metadata('design:paramtypes', [typeof (_e = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _e || Object, Toolbar, typeof (_f = typeof _navbarNavbar.Navbar !== 'undefined' && _navbarNavbar.Navbar) === 'function' && _f || Object])], ToolbarItem);
	var _a, _b, _c, _d, _e, _f;

/***/ },
/* 476 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _angular2Angular2 = __webpack_require__(45);

	var _ion = __webpack_require__(462);

	var _appApp = __webpack_require__(434);

	/**
	* TODO
	*/
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var MenuClose = (function (_Ion) {
	    _inherits(MenuClose, _Ion);

	    function MenuClose(app, elementRef) {
	        _classCallCheck(this, MenuClose);

	        _get(Object.getPrototypeOf(MenuClose.prototype), "constructor", this).call(this, elementRef, null);
	        this.app = app;
	    }

	    _createClass(MenuClose, [{
	        key: "close",
	        value: function close() {
	            var menu = this.app.getComponent(this.menuClose || 'menu');
	            menu && menu.close();
	        }
	    }]);

	    return MenuClose;
	})(_ion.Ion);
	exports.MenuClose = MenuClose;
	exports.MenuClose = MenuClose = __decorate([(0, _angular2Angular2.Directive)({
	    selector: '[menu-close]',
	    inputs: ['menuClose'],
	    host: {
	        '(click)': 'close()'
	    }
	}), __metadata('design:paramtypes', [typeof (_a = typeof _appApp.IonicApp !== 'undefined' && _appApp.IonicApp) === 'function' && _a || Object, typeof (_b = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _b || Object])], MenuClose);
	var _a, _b;

/***/ },
/* 477 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _angular2Angular2 = __webpack_require__(45);

	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var Blur = function Blur(elementRef, renderer) {
	    _classCallCheck(this, Blur);

	    this.elementRef = elementRef;
	    this.renderer = renderer;
	    renderer.setElementStyle(elementRef, '-webkit-backdrop-filter', 'blur(10px)');
	};
	exports.Blur = Blur;
	exports.Blur = Blur = __decorate([(0, _angular2Angular2.Directive)({
	    selector: '[ion-blur]'
	}), __metadata('design:paramtypes', [typeof (_a = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _a || Object, typeof (_b = typeof _angular2Angular2.Renderer !== 'undefined' && _angular2Angular2.Renderer) === 'function' && _b || Object])], Blur);
	var _a, _b;

/***/ },
/* 478 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _angular2Angular2 = __webpack_require__(45);

	var _ion = __webpack_require__(462);

	var _configConfig = __webpack_require__(437);

	var _utilDom = __webpack_require__(435);

	var _utilKeyboard = __webpack_require__(444);

	var _navViewController = __webpack_require__(470);

	var _animationsAnimation = __webpack_require__(441);

	var _animationsScrollTo = __webpack_require__(479);

	/**
	 * The Content component provides an easy to use content area that can be configured to use Ionic's custom Scroll View, or the built in overflow scrolling of the browser.
	 *
	 * While we recommend using the custom Scroll features in Ionic in most cases, sometimes (for performance reasons) only the browser's native overflow scrolling will suffice, and so we've made it easy to toggle between the Ionic scroll implementation and overflow scrolling.
	 *
	 * You can implement pull-to-refresh with the [Refresher](../../scroll/Refresher) component.
	 *
	 * @usage
	 * ```html
	 * <ion-content>
	 *   Add your content here!
	 * </ion-content>
	 * ```
	 *
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = undefined && undefined.__param || function (paramIndex, decorator) {
	    return function (target, key) {
	        decorator(target, key, paramIndex);
	    };
	};
	var Content = (function (_Ion) {
	    _inherits(Content, _Ion);

	    /**
	     * @param {ElementRef} elementRef  A reference to the component's DOM element.
	     * @param {Config} config  The config object to change content's default settings.
	     */

	    function Content(elementRef, config, keyboard, viewCtrl, _zone) {
	        _classCallCheck(this, Content);

	        _get(Object.getPrototypeOf(Content.prototype), "constructor", this).call(this, elementRef, config);
	        this._zone = _zone;
	        this.scrollPadding = 0;
	        this.keyboard = keyboard;
	        if (viewCtrl) {
	            viewCtrl.setContent(this);
	            viewCtrl.setContentRef(elementRef);
	        }
	    }

	    /**
	     * @private
	     */

	    _createClass(Content, [{
	        key: "onInit",
	        value: function onInit() {
	            _get(Object.getPrototypeOf(Content.prototype), "onInit", this).call(this);
	            this.scrollElement = this.getNativeElement().children[0];
	        }

	        /**
	         * Adds the specified scroll handler to the content' scroll element.
	         * @param {Function} handler  The scroll event handler.
	         * @returns {Function} A function that removes the scroll handler.
	         */
	    }, {
	        key: "addScrollEventListener",
	        value: function addScrollEventListener(handler) {
	            var _this = this;

	            if (!this.scrollElement) {
	                return;
	            }
	            // ensure we're not creating duplicates
	            this.scrollElement.removeEventListener('scroll', handler);
	            this.scrollElement.addEventListener('scroll', handler);
	            return function () {
	                _this.scrollElement.removeEventListener('scroll', handler);
	            };
	        }
	    }, {
	        key: "onScrollEnd",
	        value: function onScrollEnd(callback) {
	            var lastScrollTop = null;
	            var framesUnchanged = 0;
	            var scrollElement = this.scrollElement;
	            function next() {
	                var currentScrollTop = scrollElement.scrollTop;
	                if (lastScrollTop !== null) {
	                    if (Math.round(lastScrollTop) === Math.round(currentScrollTop)) {
	                        framesUnchanged++;
	                    } else {
	                        framesUnchanged = 0;
	                    }
	                    if (framesUnchanged > 9) {
	                        return callback();
	                    }
	                }
	                lastScrollTop = currentScrollTop;
	                (0, _utilDom.raf)(function () {
	                    (0, _utilDom.raf)(next);
	                });
	            }
	            setTimeout(next, 100);
	        }

	        /**
	         * Adds the specified touchmove handler to the content's scroll element.
	         * @param {Function} handler  The touchmove handler.
	         * @returns {Function} A function that removes the touchmove handler.
	         */
	    }, {
	        key: "addTouchMoveListener",
	        value: function addTouchMoveListener(handler) {
	            var _this2 = this;

	            if (!this.scrollElement) {
	                return;
	            }
	            // ensure we're not creating duplicates
	            this.scrollElement.removeEventListener('touchmove', handler);
	            this.scrollElement.addEventListener('touchmove', handler);
	            return function () {
	                _this2.scrollElement.removeEventListener('touchmove', handler);
	            };
	        }

	        /**
	         * Scroll to the specified position.
	         * @param {TODO} x  The x-value to scroll to.
	         * @param {TODO} y  The y-value to scroll to.
	         * @param {Number} duration  Duration of the scroll animation.
	         * @param {TODO} tolerance  TODO
	         * @returns {TODO} TODO
	         */
	    }, {
	        key: "scrollTo",
	        value: function scrollTo(x, y, duration, tolerance) {
	            if (this._scrollTo) {
	                this._scrollTo.dispose();
	            }
	            this._scrollTo = new _animationsScrollTo.ScrollTo(this.scrollElement);
	            return this._scrollTo.start(x, y, duration, tolerance);
	        }
	    }, {
	        key: "scrollToTop",
	        value: function scrollToTop() {
	            if (this._scrollTo) {
	                this._scrollTo.dispose();
	            }
	            this._scrollTo = new _animationsScrollTo.ScrollTo(this.scrollElement);
	            return this._scrollTo.start(0, 0, 300, 0);
	        }

	        /**
	         * @private
	         * Returns the content and scroll elements' dimensions.
	         * @returns {Object} dimensions  The content and scroll elements' dimensions
	         * {Number} dimensions.contentHeight  content offsetHeight
	         * {Number} dimensions.contentTop  content offsetTop
	         * {Number} dimensions.contentBottom  content offsetTop+offsetHeight
	         * {Number} dimensions.contentWidth  content offsetWidth
	         * {Number} dimensions.contentLeft  content offsetLeft
	         * {Number} dimensions.contentRight  content offsetLeft + offsetWidth
	         * {Number} dimensions.scrollHeight  scroll scrollHeight
	         * {Number} dimensions.scrollTop  scroll scrollTop
	         * {Number} dimensions.scrollBottom  scroll scrollTop + scrollHeight
	         * {Number} dimensions.scrollWidth  scroll scrollWidth
	         * {Number} dimensions.scrollLeft  scroll scrollLeft
	         * {Number} dimensions.scrollRight  scroll scrollLeft + scrollWidth
	         */
	    }, {
	        key: "getDimensions",
	        value: function getDimensions() {
	            var scrollElement = this.scrollElement;
	            var parentElement = scrollElement.parentElement;
	            return {
	                contentHeight: parentElement.offsetHeight,
	                contentTop: parentElement.offsetTop,
	                contentBottom: parentElement.offsetTop + parentElement.offsetHeight,
	                contentWidth: parentElement.offsetWidth,
	                contentLeft: parentElement.offsetLeft,
	                contentRight: parentElement.offsetLeft + parentElement.offsetWidth,
	                scrollHeight: scrollElement.scrollHeight,
	                scrollTop: scrollElement.scrollTop,
	                scrollBottom: scrollElement.scrollTop + scrollElement.scrollHeight,
	                scrollWidth: scrollElement.scrollWidth,
	                scrollLeft: scrollElement.scrollLeft,
	                scrollRight: scrollElement.scrollLeft + scrollElement.scrollWidth
	            };
	        }

	        /**
	         * @private
	         * Adds padding to the bottom of the scroll element when the keyboard is open
	         * so content below the keyboard can be scrolled into view.
	         */
	    }, {
	        key: "addScrollPadding",
	        value: function addScrollPadding(newScrollPadding) {
	            var _this3 = this;

	            if (newScrollPadding > this.scrollPadding) {
	                console.debug('addScrollPadding', newScrollPadding);
	                this.scrollPadding = newScrollPadding;
	                this.scrollElement.style.paddingBottom = newScrollPadding + 'px';
	                if (!this.keyboardPromise) {
	                    console.debug('add scroll keyboard close callback', newScrollPadding);
	                    this.keyboardPromise = this.keyboard.onClose(function () {
	                        console.debug('scroll keyboard closed', newScrollPadding);
	                        if (_this3) {
	                            if (_this3.scrollPadding && _this3.scrollElement) {
	                                var _close = new _animationsAnimation.Animation(_this3.scrollElement);
	                                _close.duration(150).fromTo('paddingBottom', _this3.scrollPadding + 'px', '0px').play();
	                            }
	                            _this3.scrollPadding = 0;
	                            _this3.keyboardPromise = null;
	                        }
	                    });
	                }
	            }
	        }
	    }]);

	    return Content;
	})(_ion.Ion);
	exports.Content = Content;
	exports.Content = Content = __decorate([(0, _angular2Angular2.Component)({
	    selector: 'ion-content',
	    template: '<scroll-content>' + '<ng-content></ng-content>' + '</scroll-content>'
	}), __param(3, (0, _angular2Angular2.Optional)()), __metadata('design:paramtypes', [typeof (_a = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _a || Object, typeof (_b = typeof _configConfig.Config !== 'undefined' && _configConfig.Config) === 'function' && _b || Object, typeof (_c = typeof _utilKeyboard.Keyboard !== 'undefined' && _utilKeyboard.Keyboard) === 'function' && _c || Object, typeof (_d = typeof _navViewController.ViewController !== 'undefined' && _navViewController.ViewController) === 'function' && _d || Object, typeof (_e = typeof _angular2Angular2.NgZone !== 'undefined' && _angular2Angular2.NgZone) === 'function' && _e || Object])], Content);
	var _a, _b, _c, _d, _e;

/***/ },
/* 479 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _utilDom = __webpack_require__(435);

	var ScrollTo = (function () {
	    function ScrollTo(ele, x, y, duration) {
	        _classCallCheck(this, ScrollTo);

	        if (typeof ele === 'string') {
	            // string query selector
	            ele = document.querySelector(ele);
	        }
	        if (ele) {
	            if (ele.nativeElement) {
	                // angular ElementRef
	                ele = ele.nativeElement;
	            }
	            if (ele.nodeType === 1) {
	                this._el = ele;
	            }
	        }
	    }

	    // decelerating to zero velocity

	    _createClass(ScrollTo, [{
	        key: 'start',
	        value: function start(x, y, duration, tolerance) {
	            // scroll animation loop w/ easing
	            // credit https://gist.github.com/dezinezync/5487119
	            var self = this;
	            if (!self._el) {
	                // invalid element
	                return Promise.resolve();
	            }
	            x = x || 0;
	            y = y || 0;
	            tolerance = tolerance || 0;
	            var ele = self._el;
	            var fromY = ele.scrollTop;
	            var fromX = ele.scrollLeft;
	            var xDistance = Math.abs(x - fromX);
	            var yDistance = Math.abs(y - fromY);
	            if (yDistance <= tolerance && xDistance <= tolerance) {
	                // prevent scrolling if already close to there
	                this._el = ele = null;
	                return Promise.resolve();
	            }
	            return new Promise(function (resolve, reject) {
	                var start = undefined;
	                // start scroll loop
	                self.isPlaying = true;
	                // chill out for a frame first
	                (0, _utilDom.raf)(function () {
	                    start = Date.now();
	                    (0, _utilDom.raf)(step);
	                });
	                // scroll loop
	                function step() {
	                    var time = Math.min(1, (Date.now() - start) / duration);
	                    // where .5 would be 50% of time on a linear scale easedT gives a
	                    // fraction based on the easing method
	                    var easedT = easeOutCubic(time);
	                    if (fromY != y) {
	                        ele.scrollTop = parseInt(easedT * (y - fromY) + fromY, 10);
	                    }
	                    if (fromX != x) {
	                        ele.scrollLeft = parseInt(easedT * (x - fromX) + fromX, 10);
	                    }
	                    if (time < 1 && self.isPlaying) {
	                        (0, _utilDom.raf)(step);
	                    } else if (!self.isPlaying) {
	                        // stopped
	                        this._el = ele = null;
	                        reject();
	                    } else {
	                        // done
	                        this._el = ele = null;
	                        resolve();
	                    }
	                }
	            });
	        }
	    }, {
	        key: 'stop',
	        value: function stop() {
	            this.isPlaying = false;
	        }
	    }, {
	        key: 'dispose',
	        value: function dispose() {
	            this.stop();
	            this._el = null;
	        }
	    }]);

	    return ScrollTo;
	})();

	exports.ScrollTo = ScrollTo;
	function easeOutCubic(t) {
	    return --t * t * t + 1;
	}

/***/ },
/* 480 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _angular2Angular2 = __webpack_require__(45);

	var _ion = __webpack_require__(462);

	var _configConfig = __webpack_require__(437);

	/**
	 * Scroll is a non-flexboxed scroll area that can scroll horizontally or
	 * vertically.
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var Scroll = (function (_Ion) {
	    _inherits(Scroll, _Ion);

	    function Scroll(elementRef, Config) {
	        _classCallCheck(this, Scroll);

	        _get(Object.getPrototypeOf(Scroll.prototype), "constructor", this).call(this, elementRef, Config);
	        this.maxScale = 3;
	        this.zoomDuration = 250;
	    }

	    /**
	     * @private
	     */

	    _createClass(Scroll, [{
	        key: "onInit",
	        value: function onInit() {
	            this.scrollElement = this.getNativeElement().children[0];
	        }

	        /**
	         * Add a scroll event handler to the scroll element if it exists.
	         * @param {Function} handler  The scroll handler to add to the scroll element.
	         * @returns {?Function} a function to remove the specified handler, otherwise
	         * undefined if the scroll element doesn't exist.
	         */
	    }, {
	        key: "addScrollEventListener",
	        value: function addScrollEventListener(handler) {
	            var _this = this;

	            if (!this.scrollElement) {
	                return;
	            }
	            this.scrollElement.addEventListener('scroll', handler);
	            return function () {
	                _this.scrollElement.removeEventListener('scroll', handler);
	            };
	        }
	    }]);

	    return Scroll;
	})(_ion.Ion);
	exports.Scroll = Scroll;
	exports.Scroll = Scroll = __decorate([(0, _angular2Angular2.Component)({
	    selector: 'ion-scroll',
	    inputs: ['scrollX', 'scrollY', 'zoom', 'maxZoom'],
	    host: {
	        '[class.scroll-x]': 'scrollX',
	        '[class.scroll-y]': 'scrollY'
	    },
	    template: '<scroll-content>' + '<div class="scroll-zoom-wrapper">' + '<ng-content></ng-content>' + '</div>' + '</scroll-content>'
	}), __metadata('design:paramtypes', [typeof (_a = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _a || Object, typeof (_b = typeof _configConfig.Config !== 'undefined' && _configConfig.Config) === 'function' && _b || Object])], Scroll);
	var _a, _b;

/***/ },
/* 481 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _angular2Angular2 = __webpack_require__(45);

	var _contentContent = __webpack_require__(478);

	var _ionicUtil = __webpack_require__(442);

	var util = _interopRequireWildcard(_ionicUtil);

	var _ionicUtilDom = __webpack_require__(435);

	/**
	 * Allows you to add pull-to-refresh to an Content component.
	 *
	 * Place it as the first child of your Content or Scroll element.
	 *
	 * When refreshing is complete, call `refresher.complete()` from your controller.
	 *
	 *  @usage
	 *  ```ts
	 *  <ion-refresher (starting)="doStarting()" (refresh)="doRefresh($event, refresher)" (pulling)="doPulling($event, amt)">
	 *
	 *
	 *  doRefresh(refresher) {
	 *    console.log('Refreshing!', refresher);
	 *
	 *    setTimeout(() => {
	 *      console.log('Pull to refresh complete!', refresher);
	 *      refresher.complete();
	 *    })
	 *  }
	 *
	 *  doStarting() {
	 *    console.log('Pull started!');
	 *  }
	 *
	 *  doPulling(amt) {
	 *    console.log('You have pulled', amt);
	 *  }
	 *  ```
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = undefined && undefined.__param || function (paramIndex, decorator) {
	    return function (target, key) {
	        decorator(target, key, paramIndex);
	    };
	};
	var Refresher = (function () {
	    /**
	     * TODO
	     * @param {Content} content  TODO
	     * @param {ElementRef} elementRef  TODO
	     */

	    function Refresher(content, element) {
	        _classCallCheck(this, Refresher);

	        this.ele = element.nativeElement;
	        this.ele.classList.add('content');
	        this.content = content;
	        this.refresh = new _angular2Angular2.EventEmitter('refresh');
	        this.starting = new _angular2Angular2.EventEmitter('starting');
	        this.pulling = new _angular2Angular2.EventEmitter('pulling');
	    }

	    _createClass(Refresher, [{
	        key: "onInit",
	        value: function onInit() {
	            this.initEvents();
	        }

	        /**
	         * Initialize touch and scroll event listeners.
	         */
	    }, {
	        key: "initEvents",
	        value: function initEvents() {
	            var sp = this.content.getNativeElement();
	            var sc = this.content.scrollElement;
	            this.isDragging = false;
	            this.isOverscrolling = false;
	            this.dragOffset = 0;
	            this.lastOverscroll = 0;
	            this.ptrThreshold = 60;
	            this.activated = false;
	            this.scrollTime = 500;
	            this.startY = null;
	            this.deltaY = null;
	            this.canOverscroll = true;
	            this.scrollHost = sp;
	            this.scrollChild = sc;
	            util.defaults(this, {
	                pullingIcon: 'ion-android-arrow-down',
	                refreshingIcon: 'ion-ionic'
	            });
	            this.showSpinner = !util.isDefined(this.refreshingIcon) && this.spinner != 'none';
	            this.showIcon = util.isDefined(this.refreshingIcon);
	            this._touchMoveListener = this._handleTouchMove.bind(this);
	            this._touchEndListener = this._handleTouchEnd.bind(this);
	            this._handleScrollListener = this._handleScroll.bind(this);
	            sc.addEventListener('touchmove', this._touchMoveListener);
	            sc.addEventListener('touchend', this._touchEndListener);
	            sc.addEventListener('scroll', this._handleScrollListener);
	        }
	    }, {
	        key: "onDehydrate",
	        value: function onDehydrate() {
	            console.log('DEHYDRATION');
	            var sc = this.content.scrollElement;
	            sc.removeEventListener('touchmove', this._touchMoveListener);
	            sc.removeEventListener('touchend', this._touchEndListener);
	            sc.removeEventListener('scroll', this._handleScrollListener);
	        }

	        /**
	         * TODO
	         * @param {TODO} val  TODO
	         */
	    }, {
	        key: "overscroll",
	        value: function overscroll(val) {
	            this.scrollChild.style[_ionicUtilDom.CSS.transform] = 'translateY(' + val + 'px)';
	            this.lastOverscroll = val;
	        }

	        /**
	         * TODO
	         * @param {TODO} target  TODO
	         * @param {TODO} newScrollTop  TODO
	         */
	    }, {
	        key: "nativescroll",
	        value: function nativescroll(target, newScrollTop) {
	            // creates a scroll event that bubbles, can be cancelled, and with its view
	            // and detail property initialized to window and 1, respectively
	            target.scrollTop = newScrollTop;
	            var e = document.createEvent("UIEvents");
	            e.initUIEvent("scroll", true, true, window, 1);
	            target.dispatchEvent(e);
	        }

	        /**
	         * TODO
	         * @param {TODO} enabled  TODO
	         */
	    }, {
	        key: "setScrollLock",
	        value: function setScrollLock(enabled) {
	            var _this = this;

	            // set the scrollbar to be position:fixed in preparation to overscroll
	            // or remove it so the app can be natively scrolled
	            if (enabled) {
	                (0, _ionicUtilDom.raf)(function () {
	                    _this.scrollChild.classList.add('overscroll');
	                    _this.show();
	                });
	            } else {
	                (0, _ionicUtilDom.raf)(function () {
	                    _this.scrollChild.classList.remove('overscroll');
	                    _this.hide();
	                    _this.deactivate();
	                });
	            }
	        }

	        /**
	         * TODO
	         */
	    }, {
	        key: "activate",
	        value: function activate() {
	            //this.ele.classList.add('active');
	            this.isActive = true;
	            //this.starting.next();
	        }

	        /**
	         * TODO
	         */
	    }, {
	        key: "deactivate",
	        value: function deactivate() {
	            var _this2 = this;

	            // give tail 150ms to finish
	            setTimeout(function () {
	                _this2.isActive = false;
	                _this2.isRefreshing = false;
	                _this2.isRefreshingTail = false;
	                // deactivateCallback
	                if (_this2.activated) _this2.activated = false;
	            }, 150);
	        }
	    }, {
	        key: "start",
	        value: function start() {
	            // startCallback
	            this.isRefreshing = true;
	            this.refresh.next(this);
	            //$scope.$onRefresh();
	        }

	        /**
	         * TODO
	         */
	    }, {
	        key: "show",
	        value: function show() {
	            // showCallback
	            this.ele.classList.remove('invisible');
	        }

	        /**
	         * TODO
	         */
	    }, {
	        key: "hide",
	        value: function hide() {
	            // showCallback
	            this.ele.classList.add('invisible');
	        }

	        /**
	         * TODO
	         */
	    }, {
	        key: "tail",
	        value: function tail() {
	            // tailCallback
	            this.ele.classList.add('refreshing-tail');
	        }

	        /**
	         * TODO
	         */
	    }, {
	        key: "complete",
	        value: function complete() {
	            var _this3 = this;

	            setTimeout(function () {
	                (0, _ionicUtilDom.raf)(_this3.tail.bind(_this3));
	                // scroll back to home during tail animation
	                _this3.scrollTo(0, _this3.scrollTime, _this3.deactivate.bind(_this3));
	                // return to native scrolling after tail animation has time to finish
	                setTimeout(function () {
	                    if (_this3.isOverscrolling) {
	                        _this3.isOverscrolling = false;
	                        _this3.setScrollLock(false);
	                    }
	                }, _this3.scrollTime);
	            }, this.scrollTime);
	        }

	        /**
	         * TODO
	         * @param {TODO} Y  TODO
	         * @param {TODO} duration  TODO
	         * @param {Function} callback  TODO
	         */
	    }, {
	        key: "scrollTo",
	        value: function scrollTo(Y, duration, callback) {
	            // scroll animation loop w/ easing
	            // credit https://gist.github.com/dezinezync/5487119
	            var start = Date.now(),
	                from = this.lastOverscroll;
	            if (from === Y) {
	                callback();
	                return; /* Prevent scrolling to the Y point if already there */
	            }
	            // decelerating to zero velocity
	            function easeOutCubic(t) {
	                return --t * t * t + 1;
	            }
	            // scroll loop
	            function scroll() {
	                var currentTime = Date.now(),
	                    time = Math.min(1, (currentTime - start) / duration),

	                // where .5 would be 50% of time on a linear scale easedT gives a
	                // fraction based on the easing method
	                easedT = easeOutCubic(time);
	                this.overscroll(parseInt(easedT * (Y - from) + from, 10));
	                if (time < 1) {
	                    (0, _ionicUtilDom.raf)(scroll.bind(this));
	                } else {
	                    if (Y < 5 && Y > -5) {
	                        this.isOverscrolling = false;
	                        this.setScrollLock(false);
	                    }
	                    callback && callback();
	                }
	            }
	            // start scroll loop
	            (0, _ionicUtilDom.raf)(scroll.bind(this));
	        }

	        /**
	         * @private
	         * TODO
	         * @param {Event} e  TODO
	         */
	    }, {
	        key: "_handleTouchMove",
	        value: function _handleTouchMove(e) {
	            //console.log('TOUCHMOVE', e);
	            // if multitouch or regular scroll event, get out immediately
	            if (!this.canOverscroll || e.touches.length > 1) {
	                return;
	            }
	            //if this is a new drag, keep track of where we start
	            if (this.startY === null) {
	                this.startY = parseInt(e.touches[0].screenY, 10);
	            }
	            // how far have we dragged so far?
	            this.deltaY = parseInt(e.touches[0].screenY, 10) - this.startY;
	            // if we've dragged up and back down in to native scroll territory
	            if (this.deltaY - this.dragOffset <= 0 || this.scrollHost.scrollTop !== 0) {
	                if (this.isOverscrolling) {
	                    this.isOverscrolling = false;
	                    this.setScrollLock(false);
	                }
	                if (this.isDragging) {
	                    this.nativescroll(this.scrollHost, parseInt(this.deltaY - this.dragOffset, 10) * -1);
	                }
	                // if we're not at overscroll 0 yet, 0 out
	                if (this.lastOverscroll !== 0) {
	                    this.overscroll(0);
	                }
	                return;
	            } else if (this.deltaY > 0 && this.scrollHost.scrollTop === 0 && !this.isOverscrolling) {
	                // starting overscroll, but drag started below scrollTop 0, so we need to offset the position
	                this.dragOffset = this.deltaY;
	            }
	            // prevent native scroll events while overscrolling
	            e.preventDefault();
	            // if not overscrolling yet, initiate overscrolling
	            if (!this.isOverscrolling) {
	                this.isOverscrolling = true;
	                this.setScrollLock(true);
	            }
	            this.isDragging = true;
	            // overscroll according to the user's drag so far
	            this.overscroll(parseInt((this.deltaY - this.dragOffset) / 3, 10));
	            // Pass an incremental pull amount to the EventEmitter
	            this.pulling.next(this.lastOverscroll);
	            // update the icon accordingly
	            if (!this.activated && this.lastOverscroll > this.ptrThreshold) {
	                this.activated = true;
	                (0, _ionicUtilDom.raf)(this.activate.bind(this));
	            } else if (this.activated && this.lastOverscroll < this.ptrThreshold) {
	                this.activated = false;
	                (0, _ionicUtilDom.raf)(this.deactivate.bind(this));
	            }
	        }

	        /**
	         * @private
	         * TODO
	         * @param {Event} e  TODO
	         */
	    }, {
	        key: "_handleTouchEnd",
	        value: function _handleTouchEnd(e) {
	            console.log('TOUCHEND', e);
	            // if this wasn't an overscroll, get out immediately
	            if (!this.canOverscroll && !this.isDragging) {
	                return;
	            }
	            // reset Y
	            this.startY = null;
	            // the user has overscrolled but went back to native scrolling
	            if (!this.isDragging) {
	                this.dragOffset = 0;
	                this.isOverscrolling = false;
	                this.setScrollLock(false);
	            } else {
	                this.isDragging = false;
	                this.dragOffset = 0;
	                // the user has scroll far enough to trigger a refresh
	                if (this.lastOverscroll > this.ptrThreshold) {
	                    this.start();
	                    this.scrollTo(this.ptrThreshold, this.scrollTime);
	                } else {
	                    this.scrollTo(0, this.scrollTime, this.deactivate.bind(this));
	                    this.isOverscrolling = false;
	                }
	            }
	        }

	        /**
	         * @private
	         * TODO
	         * @param {Event} e  TODO
	         */
	    }, {
	        key: "_handleScroll",
	        value: function _handleScroll(e) {
	            console.log('SCROLL', e.target.scrollTop);
	        }
	    }]);

	    return Refresher;
	})();
	exports.Refresher = Refresher;
	exports.Refresher = Refresher = __decorate([(0, _angular2Angular2.Component)({
	    selector: 'ion-refresher',
	    inputs: ['pullingIcon', 'pullingText', 'refreshingIcon', 'refreshingText', 'spinner', 'disablePullingRotation'],
	    outputs: ['refresh', 'starting', 'pulling'],
	    host: {
	        '[class.active]': 'isActive',
	        '[class.refreshing]': 'isRefreshing',
	        '[class.refreshingTail]': 'isRefreshingTail'
	    },
	    template: '<div class="refresher-content" [class.refresher-with-text]="pullingText || refreshingText">' + '<div class="icon-pulling">' + '<i class="icon" [ng-class]="pullingIcon"></i>' + '</div>' + '<div class="text-pulling" [inner-html]="pullingText" *ng-if="pullingText"></div>' + '<div class="icon-refreshing">' + '<i class="icon" [ng-class]="refreshingIcon"></i>' + '</div>' + '<div class="text-refreshing" [inner-html]="refreshingText" *ng-if="refreshingText"></div>' + '</div>',
	    directives: [_angular2Angular2.NgIf, _angular2Angular2.NgClass]
	}), __param(0, (0, _angular2Angular2.Host)()), __metadata('design:paramtypes', [typeof (_a = typeof _contentContent.Content !== 'undefined' && _contentContent.Content) === 'function' && _a || Object, typeof (_b = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _b || Object])], Refresher);
	var _a, _b;

/***/ },
/* 482 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _angular2Angular2 = __webpack_require__(45);

	var _ion = __webpack_require__(462);

	var _ionicAnimationsAnimation = __webpack_require__(441);

	var _ionicGesturesGesture = __webpack_require__(467);

	var _configConfig = __webpack_require__(437);

	var _ionicUtil = __webpack_require__(442);

	var _utilDom = __webpack_require__(435);

	var util = _interopRequireWildcard(_ionicUtil);

	var _swiperWidget = __webpack_require__(483);

	/**
	 * Slides is a slide box implementation based on Swiper.js
	 *
	 * Swiper.js:
	 * The most modern mobile touch slider and framework with hardware accelerated transitions
	 *
	 * http://www.idangero.us/swiper/
	 *
	 * Copyright 2015, Vladimir Kharlampidi
	 * The iDangero.us
	 * http://www.idangero.us/
	 *
	 * Licensed under MIT
	 *
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = undefined && undefined.__param || function (paramIndex, decorator) {
	    return function (target, key) {
	        decorator(target, key, paramIndex);
	    };
	};
	var Slides = (function (_Ion) {
	    _inherits(Slides, _Ion);

	    /**
	     * TODO
	     * @param {ElementRef} elementRef  TODO
	     */

	    function Slides(elementRef, config) {
	        var _this = this;

	        _classCallCheck(this, Slides);

	        _get(Object.getPrototypeOf(Slides.prototype), "constructor", this).call(this, elementRef, config);
	        this.rapidUpdate = util.debounce(function () {
	            _this.update();
	        }, 10);
	    }

	    _createClass(Slides, [{
	        key: "onInit",
	        value: function onInit() {
	            var _this2 = this;

	            if (!this.options) {
	                this.options = {};
	            }
	            this.showPager = util.isTrueProperty(this.pager);
	            var options = util.defaults({
	                pagination: '.swiper-pagination',
	                paginationClickable: true,
	                lazyLoading: true,
	                preloadImages: false
	            }, this.options);
	            options.onTap = function (swiper, e) {
	                _this2.onTap(swiper, e);
	                return _this2.options.onTap && _this2.options.onTap(swiper, e);
	            };
	            options.onClick = function (swiper, e) {
	                _this2.onClick(swiper, e);
	                return _this2.options.onClick && _this2.options.onClick(swiper, e);
	            };
	            options.onDoubleTap = function (swiper, e) {
	                _this2.onDoubleTap(swiper, e);
	                return _this2.options.onDoubleTap && _this2.options.onDoubleTap(swiper, e);
	            };
	            options.onTransitionStart = function (swiper, e) {
	                _this2.onTransitionStart(swiper, e);
	                return _this2.options.onTransitionStart && _this2.options.onTransitionStart(swiper, e);
	            };
	            options.onTransitionEnd = function (swiper, e) {
	                _this2.onTransitionEnd(swiper, e);
	                return _this2.options.onTransitionEnd && _this2.options.onTransitionEnd(swiper, e);
	            };
	            options.onSlideChangeStart = function (swiper) {
	                return _this2.options.onSlideChangeStart && _this2.options.onSlideChangeStart(swiper);
	            };
	            options.onSlideChangeEnd = function (swiper) {
	                return _this2.options.onSlideChangeEnd && _this2.options.onSlideChangeEnd(swiper);
	            };
	            options.onLazyImageLoad = function (swiper, slide, img) {
	                return _this2.options.onLazyImageLoad && _this2.options.onLazyImageLoad(swiper, slide, img);
	            };
	            options.onLazyImageReady = function (swiper, slide, img) {
	                return _this2.options.onLazyImageReady && _this2.options.onLazyImageReady(swiper, slide, img);
	            };
	            var swiper = new _swiperWidget.Swiper(this.getNativeElement().children[0], options);
	            this.slider = swiper;
	            /*
	            * TODO: Finish this
	            if(util.isTrueProperty(this.zoom)) {
	              this.enableZoom = true;
	              setTimeout(() => {
	                this.initZoom();
	              })
	            }
	            */
	        }
	    }, {
	        key: "onTap",
	        value: function onTap(swiper, e) {}
	    }, {
	        key: "onClick",
	        value: function onClick(swiper, e) {}
	    }, {
	        key: "onDoubleTap",
	        value: function onDoubleTap(swiper, e) {
	            this.toggleZoom(swiper, e);
	        }
	    }, {
	        key: "onLazyImageLoad",
	        value: function onLazyImageLoad(swiper, slide, img) {}
	    }, {
	        key: "onLazyImageReady",
	        value: function onLazyImageReady(swiper, slide, img) {}

	        /*
	        nextButton(swiper, e) {
	        }
	        prevButton() {
	        }
	        indexButton() {
	        }
	        */
	    }, {
	        key: "initZoom",
	        value: function initZoom() {
	            var _this3 = this;

	            this.zoomDuration = this.zoomDuration || 230;
	            this.maxScale = this.zoomMax || 3;
	            this.zoomElement = this.getNativeElement().children[0].children[0];
	            this.zoomElement && this.zoomElement.classList.add('ion-scroll-zoom');
	            this.zoomGesture = new _ionicGesturesGesture.Gesture(this.zoomElement);
	            this.zoomGesture.listen();
	            this.scale = 1;
	            this.zoomLastPosX = 0;
	            this.zoomLastPosY = 0;
	            var last_scale = undefined,
	                startX = undefined,
	                startY = undefined,
	                posX = 0,
	                posY = 0,
	                zoomRect = undefined;
	            this.viewportWidth = this.getNativeElement().offsetWidth;
	            this.viewportHeight = this.getNativeElement().offsetHeight;
	            this.zoomElement.addEventListener('touchstart', function (e) {
	                _this3.onTouchStart(e);
	            });
	            this.zoomElement.addEventListener('touchmove', function (e) {
	                _this3.onTouchMove(e);
	            });
	            this.zoomElement.addEventListener('touchend', function (e) {
	                _this3.onTouchEnd(e);
	            });
	            this.zoomGesture.on('pinchstart', function (e) {
	                last_scale = _this3.scale;
	                console.log('Last scale', e.scale);
	            });
	            this.zoomGesture.on('pinch', function (e) {
	                _this3.scale = Math.max(1, Math.min(last_scale * e.scale, 10));
	                console.log('Scaling', _this3.scale);
	                _this3.zoomElement.style[_utilDom.CSS.transform] = 'scale(' + _this3.scale + ')';
	                zoomRect = _this3.zoomElement.getBoundingClientRect();
	            });
	            this.zoomGesture.on('pinchend', function (e) {
	                //last_scale = Math.max(1, Math.min(last_scale * e.scale, 10));
	                if (_this3.scale > _this3.maxScale) {
	                    var za = new _ionicAnimationsAnimation.Animation(_this3.zoomElement).duration(_this3.zoomDuration).easing('linear').from('scale', _this3.scale).to('scale', _this3.maxScale);
	                    za.play();
	                    _this3.scale = _this3.maxScale;
	                }
	            });
	        }
	    }, {
	        key: "resetZoom",
	        value: function resetZoom() {
	            if (this.zoomElement) {
	                this.zoomElement.parentElement.style[_utilDom.CSS.transform] = '';
	                this.zoomElement.style[_utilDom.CSS.transform] = 'scale(1)';
	            }
	            this.scale = 1;
	            this.zoomLastPosX = 0;
	            this.zoomLastPosY = 0;
	        }
	    }, {
	        key: "toggleZoom",
	        value: function toggleZoom(swiper, e) {
	            console.log('Try toggle zoom');
	            if (!this.enableZoom) {
	                return;
	            }
	            console.log('Toggling zoom', e);
	            /*
	            let x = e.pointers[0].clientX;
	            let y = e.pointers[0].clientY;
	                 let mx = this.viewportWidth / 2;
	            let my = this.viewportHeight / 2;
	                 let tx, ty;
	                 if(x > mx) {
	              // Greater than half
	              tx = -x;
	            } else {
	              // Less than or equal to half
	              tx = (this.viewportWidth - x);
	            }
	            if(y > my) {
	              ty = -y;
	            } else {
	              ty = y-my;
	            }
	                 console.log(y);
	            */
	            var zi = new _ionicAnimationsAnimation.Animation(this.touch.target.children[0]).duration(this.zoomDuration).easing('linear').fill('none');
	            var zw = new _ionicAnimationsAnimation.Animation(this.touch.target.children[0]).duration(this.zoomDuration).easing('linear');
	            var za = new _ionicAnimationsAnimation.Animation();
	            za.fill('none');
	            za.add(zi); //, zw);
	            if (this.scale > 1) {
	                // Zoom out
	                //zw.fromTo('translateX', posX + 'px', '0px');
	                //zw.fromTo('translateY', posY + 'px', '0px');
	                zi.from('scale', this.scale);
	                zi.to('scale', 1);
	                za.play();
	                //posX = 0;
	                //posY = 0;
	                this.scale = 1;
	            } else {
	                // Zoom in
	                //zw.fromTo('translateX', posX + 'px', tx + 'px');
	                //zw.fromTo('translateY', posY + 'px', ty + 'px');
	                zi.from('scale', this.scale);
	                zi.to('scale', this.maxScale);
	                za.play();
	                //posX = tx;
	                //posY = ty;
	                this.scale = this.maxScale;
	            }
	        }
	    }, {
	        key: "onTransitionStart",
	        value: function onTransitionStart(swiper) {}
	    }, {
	        key: "onTransitionEnd",
	        value: function onTransitionEnd(swiper) {}
	    }, {
	        key: "onTouchStart",
	        value: function onTouchStart(e) {
	            console.log('Touch start', e);
	            //TODO: Support mice as well
	            var target = _ionicUtil.dom.closest(e.target, '.slide').children[0].children[0];
	            this.touch = {
	                startX: e.touches[0].clientX,
	                startY: e.touches[0].clientY,
	                deltaX: 0,
	                deltaY: 0,
	                lastX: 0,
	                lastY: 0,
	                target: target.parentElement,
	                zoomable: target,
	                zoomableWidth: target.offsetWidth,
	                zoomableHeight: target.offsetHeight
	            };
	            console.log('Target', this.touch.target);
	            //TODO: android prevent default
	        }
	    }, {
	        key: "onTouchMove",
	        value: function onTouchMove(e) {
	            this.touch.deltaX = e.touches[0].clientX - this.touch.startX;
	            this.touch.deltaY = e.touches[0].clientY - this.touch.startY;
	            // TODO: Make sure we need to transform (image is bigger than viewport)
	            var zoomableScaledWidth = this.touch.zoomableWidth * this.scale;
	            var zoomableScaledHeight = this.touch.zoomableHeight * this.scale;
	            var x1 = Math.min(this.viewportWidth / 2 - zoomableScaledWidth / 2, 0);
	            var x2 = -x1;
	            var y1 = Math.min(this.viewportHeight / 2 - zoomableScaledHeight / 2, 0);
	            var y2 = -y1;
	            console.log('BOUNDS', x1, x2, y1, y2);
	            if (this.scale <= 1) {
	                return;
	            }
	            console.log('PAN', e);
	            // Move image
	            this.touch.x = this.touch.deltaX + this.touch.lastX;
	            this.touch.y = this.touch.deltaY + this.touch.lastY;
	            console.log(this.touch.x, this.touch.y);
	            if (this.touch.x < x1) {
	                console.log('OUT ON LEFT');
	            }
	            if (this.touch.x > x2) {
	                console.log('OUT ON RIGHT');
	            }
	            if (this.touch.x > this.viewportWidth) {} else if (-this.touch.x > this.viewportWidth) {} else {
	                console.log('TRANSFORM', this.touch.x, this.touch.y, this.touch.target);
	                //this.touch.target.style[CSS.transform] = 'translateX(' + this.touch.x + 'px) translateY(' + this.touch.y + 'px)';
	                this.touch.target.style[_utilDom.CSS.transform] = 'translateX(' + this.touch.x + 'px) translateY(' + this.touch.y + 'px)';
	                e.preventDefault();
	                e.stopPropagation();
	                return false;
	            }
	        }
	    }, {
	        key: "onTouchEnd",
	        value: function onTouchEnd(e) {
	            console.log('PANEND', e);
	            if (this.scale > 1) {
	                if (Math.abs(this.touch.x) > this.viewportWidth) {
	                    posX = posX > 0 ? this.viewportWidth - 1 : -(this.viewportWidth - 1);
	                    console.log('Setting on posx', this.touch.x);
	                }
	                /*
	                if(posY > this.viewportHeight/2) {
	                  let z = new Animation(this.zoomElement.parentElement);
	                  z.fromTo('translateY', posY + 'px', Math.min(this.viewportHeight/2 + 30, posY));
	                  z.play();
	                } else {
	                  let z = new Animation(this.zoomElement.parentElement);
	                  z.fromTo('translateY', posY + 'px', Math.max(this.viewportHeight/2 - 30, posY));
	                  z.play();
	                }
	                */
	                this.touch.lastX = this.touch.x;
	                this.touch.lastY = this.touch.y;
	            }
	        }

	        /**
	         * Update the underlying slider implementation. Call this if you've added or removed
	         * child slides.
	         */
	    }, {
	        key: "update",
	        value: function update() {
	            var _this4 = this;

	            setTimeout(function () {
	                _this4.slider.update();
	                // Don't allow pager to show with > 10 slides
	                if (_this4.slider.slides.length > 10) {
	                    _this4.showPager = false;
	                }
	            });
	        }
	    }, {
	        key: "next",
	        value: function next() {
	            this.slider.slideNext();
	        }
	    }, {
	        key: "prev",
	        value: function prev() {
	            this.slider.slidePrev();
	        }
	    }, {
	        key: "getIndex",
	        value: function getIndex() {
	            return this.slider.activeIndex;
	        }
	    }, {
	        key: "getNumSlides",
	        value: function getNumSlides() {
	            return this.slider.slides.length;
	        }
	    }, {
	        key: "isAtEnd",
	        value: function isAtEnd() {
	            return this.slider.isEnd;
	        }
	    }, {
	        key: "isAtBeginning",
	        value: function isAtBeginning() {
	            return this.slider.isBeginning;
	        }
	    }, {
	        key: "getSliderWidget",
	        value: function getSliderWidget() {
	            return this.slider;
	        }
	    }]);

	    return Slides;
	})(_ion.Ion);
	exports.Slides = Slides;
	exports.Slides = Slides = __decorate([(0, _angular2Angular2.Component)({
	    selector: 'ion-slides',
	    inputs: ['loop', 'index', 'bounce', 'pager', 'options', 'zoom', 'zoomDuration', 'zoomMax'],
	    template: '<div class="swiper-container">' + '<div class="swiper-wrapper">' + '<ng-content></ng-content>' + '</div>' + '<div [class.hide]="!showPager" class="swiper-pagination"></div>' + '</div>',
	    directives: [_angular2Angular2.NgClass]
	}), __metadata('design:paramtypes', [typeof (_a = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _a || Object, typeof (_b = typeof _configConfig.Config !== 'undefined' && _configConfig.Config) === 'function' && _b || Object])], Slides);
	/**
	 * TODO
	 */
	var Slide =
	/**
	 * TODO
	 * @param {Slides} slides  The containing slidebox.
	 * @param {ElementRef} elementRef  TODO
	 */
	function Slide(elementRef, slides) {
	    _classCallCheck(this, Slide);

	    this.ele = elementRef.nativeElement;
	    this.ele.classList.add('swiper-slide');
	    slides.rapidUpdate();
	};
	exports.Slide = Slide;
	exports.Slide = Slide = __decorate([(0, _angular2Angular2.Component)({
	    selector: 'ion-slide',
	    inputs: ['zoom'],
	    template: '<div class="slide-zoom"><ng-content></ng-content></div>'
	}), __param(1, (0, _angular2Angular2.Host)()), __metadata('design:paramtypes', [typeof (_c = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _c || Object, Slides])], Slide);
	var SlideLazy = function SlideLazy(elementRef) {
	    _classCallCheck(this, SlideLazy);

	    elementRef.getNativeElement().classList.add('swiper-lazy');
	};
	exports.SlideLazy = SlideLazy;
	exports.SlideLazy = SlideLazy = __decorate([(0, _angular2Angular2.Directive)({
	    selector: 'slide-lazy'
	}), __metadata('design:paramtypes', [typeof (_d = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _d || Object])], SlideLazy);
	var _a, _b, _c, _d;

/***/ },
/* 483 */
/***/ function(module, exports) {

	/**
	 * Swiper 3.1.2
	 * Most modern mobile touch slider and framework with hardware accelerated transitions
	 *
	 * http://www.idangero.us/swiper/
	 *
	 * Copyright 2015, Vladimir Kharlampidi
	 * The iDangero.us
	 * http://www.idangero.us/
	 *
	 * Licensed under MIT
	 *
	 * Released on: August 22, 2015
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.Swiper = Swiper;var $; /*===========================
	Swiper
	===========================*/function Swiper(container,params){if(!(this instanceof Swiper))return new Swiper(container,params);var defaults={direction:'horizontal',touchEventsTarget:'container',initialSlide:0,speed:300, // autoplay
	autoplay:false,autoplayDisableOnInteraction:true, // To support iOS's swipe-to-go-back gesture (when being used in-app, with UIWebView).
	iOSEdgeSwipeDetection:false,iOSEdgeSwipeThreshold:20, // Free mode
	freeMode:false,freeModeMomentum:true,freeModeMomentumRatio:1,freeModeMomentumBounce:true,freeModeMomentumBounceRatio:1,freeModeSticky:false, // Set wrapper width
	setWrapperSize:false, // Virtual Translate
	virtualTranslate:false, // Effects
	effect:'slide',coverflow:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:true},cube:{slideShadows:true,shadow:true,shadowOffset:20,shadowScale:0.94},fade:{crossFade:false}, // Parallax
	parallax:false, // Scrollbar
	scrollbar:null,scrollbarHide:true, // Keyboard Mousewheel
	keyboardControl:false,mousewheelControl:false,mousewheelReleaseOnEdges:false,mousewheelInvert:false,mousewheelForceToAxis:false,mousewheelSensitivity:1, // Hash Navigation
	hashnav:false, // Slides grid
	spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:'column',slidesPerGroup:1,centeredSlides:false,slidesOffsetBefore:0,slidesOffsetAfter:0, // Round length
	roundLengths:false, // Touches
	touchRatio:1,touchAngle:45,simulateTouch:true,shortSwipes:true,longSwipes:true,longSwipesRatio:0.5,longSwipesMs:300,followFinger:true,onlyExternal:false,threshold:0,touchMoveStopPropagation:true, // Pagination
	pagination:null,paginationElement:'span',paginationClickable:false,paginationHide:false,paginationBulletRender:null, // Resistance
	resistance:true,resistanceRatio:0.85, // Next/prev buttons
	nextButton:null,prevButton:null, // Progress
	watchSlidesProgress:false,watchSlidesVisibility:false, // Cursor
	grabCursor:false, // Clicks
	preventClicks:true,preventClicksPropagation:true,slideToClickedSlide:false, // Lazy Loading
	lazyLoading:false,lazyLoadingInPrevNext:false,lazyLoadingOnTransitionStart:false, // Images
	preloadImages:true,updateOnImagesReady:true, // loop
	loop:false,loopAdditionalSlides:0,loopedSlides:null, // Control
	control:undefined,controlInverse:false,controlBy:'slide', // Swiping/no swiping
	allowSwipeToPrev:true,allowSwipeToNext:true,swipeHandler:null,noSwiping:true,noSwipingClass:'swiper-no-swiping', // NS
	slideClass:'swiper-slide',slideActiveClass:'swiper-slide-active',slideVisibleClass:'swiper-slide-visible',slideDuplicateClass:'swiper-slide-duplicate',slideNextClass:'swiper-slide-next',slidePrevClass:'swiper-slide-prev',wrapperClass:'swiper-wrapper',bulletClass:'swiper-pagination-bullet',bulletActiveClass:'swiper-pagination-bullet-active',buttonDisabledClass:'swiper-button-disabled',paginationHiddenClass:'swiper-pagination-hidden', // Observer
	observer:false,observeParents:false, // Accessibility
	a11y:false,prevSlideMessage:'Previous slide',nextSlideMessage:'Next slide',firstSlideMessage:'This is the first slide',lastSlideMessage:'This is the last slide',paginationBulletMessage:'Go to slide {{index}}', // Callbacks
	runCallbacksOnInit:true};var initialVirtualTranslate=params && params.virtualTranslate;params = params || {};for(var def in defaults) {if(typeof params[def] === 'undefined'){params[def] = defaults[def];}else if(typeof params[def] === 'object'){for(var deepDef in defaults[def]) {if(typeof params[def][deepDef] === 'undefined'){params[def][deepDef] = defaults[def][deepDef];}}}} // Swiper
	var s=this; // Version
	s.version = '3.1.0'; // Params
	s.params = params; // Classname
	s.classNames = []; /*=========================
	      Dom Library and plugins
	      ===========================*/if(typeof $ !== 'undefined' && typeof Dom7 !== 'undefined'){$ = Dom7;}if(typeof $ === 'undefined'){if(typeof Dom7 === 'undefined'){$ = window.Dom7 || window.Zepto || window.jQuery;}else {$ = Dom7;}if(!$)return;} // Export it to Swiper instance
	s.$ = $; /*=========================
	      Preparation - Define Container, Wrapper and Pagination
	      ===========================*/s.container = $(container);if(s.container.length === 0)return;if(s.container.length > 1){s.container.each(function(){new Swiper(this,params);});return;} // Save instance in container HTML Element and in data
	s.container[0].swiper = s;s.container.data('swiper',s);s.classNames.push('swiper-container-' + s.params.direction);if(s.params.freeMode){s.classNames.push('swiper-container-free-mode');}if(!s.support.flexbox){s.classNames.push('swiper-container-no-flexbox');s.params.slidesPerColumn = 1;} // Enable slides progress when required
	if(s.params.parallax || s.params.watchSlidesVisibility){s.params.watchSlidesProgress = true;} // Coverflow / 3D
	if(['cube','coverflow'].indexOf(s.params.effect) >= 0){if(s.support.transforms3d){s.params.watchSlidesProgress = true;s.classNames.push('swiper-container-3d');}else {s.params.effect = 'slide';}}if(s.params.effect !== 'slide'){s.classNames.push('swiper-container-' + s.params.effect);}if(s.params.effect === 'cube'){s.params.resistanceRatio = 0;s.params.slidesPerView = 1;s.params.slidesPerColumn = 1;s.params.slidesPerGroup = 1;s.params.centeredSlides = false;s.params.spaceBetween = 0;s.params.virtualTranslate = true;s.params.setWrapperSize = false;}if(s.params.effect === 'fade'){s.params.slidesPerView = 1;s.params.slidesPerColumn = 1;s.params.slidesPerGroup = 1;s.params.watchSlidesProgress = true;s.params.spaceBetween = 0;if(typeof initialVirtualTranslate === 'undefined'){s.params.virtualTranslate = true;}} // Grab Cursor
	if(s.params.grabCursor && s.support.touch){s.params.grabCursor = false;} // Wrapper
	s.wrapper = s.container.children('.' + s.params.wrapperClass); // Pagination
	if(s.params.pagination){s.paginationContainer = $(s.params.pagination);if(s.params.paginationClickable){s.paginationContainer.addClass('swiper-pagination-clickable');}} // Is Horizontal
	function isH(){return s.params.direction === 'horizontal';} // RTL
	s.rtl = isH() && (s.container[0].dir.toLowerCase() === 'rtl' || s.container.css('direction') === 'rtl');if(s.rtl){s.classNames.push('swiper-container-rtl');} // Wrong RTL support
	if(s.rtl){s.wrongRTL = s.wrapper.css('display') === '-webkit-box';} // Columns
	if(s.params.slidesPerColumn > 1){s.classNames.push('swiper-container-multirow');} // Check for Android
	if(s.device.android){s.classNames.push('swiper-container-android');} // Add classes
	s.container.addClass(s.classNames.join(' ')); // Translate
	s.translate = 0; // Progress
	s.progress = 0; // Velocity
	s.velocity = 0; /*=========================
	      Locks, unlocks
	      ===========================*/s.lockSwipeToNext = function(){s.params.allowSwipeToNext = false;};s.lockSwipeToPrev = function(){s.params.allowSwipeToPrev = false;};s.lockSwipes = function(){s.params.allowSwipeToNext = s.params.allowSwipeToPrev = false;};s.unlockSwipeToNext = function(){s.params.allowSwipeToNext = true;};s.unlockSwipeToPrev = function(){s.params.allowSwipeToPrev = true;};s.unlockSwipes = function(){s.params.allowSwipeToNext = s.params.allowSwipeToPrev = true;}; /*=========================
	      Round helper
	      ===========================*/function round(a){return Math.floor(a);} /*=========================
	      Set grab cursor
	      ===========================*/if(s.params.grabCursor){s.container[0].style.cursor = 'move';s.container[0].style.cursor = '-webkit-grab';s.container[0].style.cursor = '-moz-grab';s.container[0].style.cursor = 'grab';} /*=========================
	      Update on Images Ready
	      ===========================*/s.imagesToLoad = [];s.imagesLoaded = 0;s.loadImage = function(imgElement,src,checkForComplete,callback){var image;function onReady(){if(callback)callback();}if(!imgElement.complete || !checkForComplete){if(src){image = new window.Image();image.onload = onReady;image.onerror = onReady;image.src = src;}else {onReady();}}else {onReady();}};s.preloadImages = function(){s.imagesToLoad = s.container.find('img');function _onReady(){if(typeof s === 'undefined' || s === null)return;if(s.imagesLoaded !== undefined)s.imagesLoaded++;if(s.imagesLoaded === s.imagesToLoad.length){if(s.params.updateOnImagesReady)s.update();s.emit('onImagesReady',s);}}for(var i=0;i < s.imagesToLoad.length;i++) {s.loadImage(s.imagesToLoad[i],s.imagesToLoad[i].currentSrc || s.imagesToLoad[i].getAttribute('src'),true,_onReady);}}; /*=========================
	      Autoplay
	      ===========================*/s.autoplayTimeoutId = undefined;s.autoplaying = false;s.autoplayPaused = false;function autoplay(){s.autoplayTimeoutId = setTimeout(function(){if(s.params.loop){s.fixLoop();s._slideNext();}else {if(!s.isEnd){s._slideNext();}else {if(!params.autoplayStopOnLast){s._slideTo(0);}else {s.stopAutoplay();}}}},s.params.autoplay);}s.startAutoplay = function(){if(typeof s.autoplayTimeoutId !== 'undefined')return false;if(!s.params.autoplay)return false;if(s.autoplaying)return false;s.autoplaying = true;s.emit('onAutoplayStart',s);autoplay();};s.stopAutoplay = function(internal){if(!s.autoplayTimeoutId)return;if(s.autoplayTimeoutId)clearTimeout(s.autoplayTimeoutId);s.autoplaying = false;s.autoplayTimeoutId = undefined;s.emit('onAutoplayStop',s);};s.pauseAutoplay = function(speed){if(s.autoplayPaused)return;if(s.autoplayTimeoutId)clearTimeout(s.autoplayTimeoutId);s.autoplayPaused = true;if(speed === 0){s.autoplayPaused = false;autoplay();}else {s.wrapper.transitionEnd(function(){if(!s)return;s.autoplayPaused = false;if(!s.autoplaying){s.stopAutoplay();}else {autoplay();}});}}; /*=========================
	      Min/Max Translate
	      ===========================*/s.minTranslate = function(){return -s.snapGrid[0];};s.maxTranslate = function(){return -s.snapGrid[s.snapGrid.length - 1];}; /*=========================
	      Slider/slides sizes
	      ===========================*/s.updateContainerSize = function(){var width,height;if(typeof s.params.width !== 'undefined'){width = s.params.width;}else {width = s.container[0].clientWidth;}if(typeof s.params.height !== 'undefined'){height = s.params.height;}else {height = s.container[0].clientHeight;}if(width === 0 && isH() || height === 0 && !isH()){return;} //Subtract paddings
	width = width - parseInt(s.container.css('padding-left'),10) - parseInt(s.container.css('padding-right'),10);height = height - parseInt(s.container.css('padding-top'),10) - parseInt(s.container.css('padding-bottom'),10); // Store values
	s.width = width;s.height = height;s.size = isH()?s.width:s.height;};s.updateSlidesSize = function(){s.slides = s.wrapper.children('.' + s.params.slideClass);s.snapGrid = [];s.slidesGrid = [];s.slidesSizesGrid = [];var spaceBetween=s.params.spaceBetween,slidePosition=-s.params.slidesOffsetBefore,i,prevSlideSize=0,index=0;if(typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0){spaceBetween = parseFloat(spaceBetween.replace('%','')) / 100 * s.size;}s.virtualSize = -spaceBetween; // reset margins
	if(s.rtl)s.slides.css({marginLeft:'',marginTop:''});else s.slides.css({marginRight:'',marginBottom:''});var slidesNumberEvenToRows;if(s.params.slidesPerColumn > 1){if(Math.floor(s.slides.length / s.params.slidesPerColumn) === s.slides.length / s.params.slidesPerColumn){slidesNumberEvenToRows = s.slides.length;}else {slidesNumberEvenToRows = Math.ceil(s.slides.length / s.params.slidesPerColumn) * s.params.slidesPerColumn;}} // Calc slides
	var slideSize;var slidesPerColumn=s.params.slidesPerColumn;var slidesPerRow=slidesNumberEvenToRows / slidesPerColumn;var numFullColumns=slidesPerRow - (s.params.slidesPerColumn * slidesPerRow - s.slides.length);for(i = 0;i < s.slides.length;i++) {slideSize = 0;var slide=s.slides.eq(i);if(s.params.slidesPerColumn > 1){ // Set slides order
	var newSlideOrderIndex;var column,row;if(s.params.slidesPerColumnFill === 'column'){column = Math.floor(i / slidesPerColumn);row = i - column * slidesPerColumn;if(column > numFullColumns || column === numFullColumns && row === slidesPerColumn - 1){if(++row >= slidesPerColumn){row = 0;column++;}}newSlideOrderIndex = column + row * slidesNumberEvenToRows / slidesPerColumn;slide.css({'-webkit-box-ordinal-group':newSlideOrderIndex,'-moz-box-ordinal-group':newSlideOrderIndex,'-ms-flex-order':newSlideOrderIndex,'-webkit-order':newSlideOrderIndex,'order':newSlideOrderIndex});}else {row = Math.floor(i / slidesPerRow);column = i - row * slidesPerRow;}slide.css({'margin-top':row !== 0 && s.params.spaceBetween && s.params.spaceBetween + 'px'}).attr('data-swiper-column',column).attr('data-swiper-row',row);}if(slide.css('display') === 'none')continue;if(s.params.slidesPerView === 'auto'){slideSize = isH()?slide.outerWidth(true):slide.outerHeight(true);if(s.params.roundLengths)slideSize = round(slideSize);}else {slideSize = (s.size - (s.params.slidesPerView - 1) * spaceBetween) / s.params.slidesPerView;if(s.params.roundLengths)slideSize = round(slideSize);if(isH()){s.slides[i].style.width = slideSize + 'px';}else {s.slides[i].style.height = slideSize + 'px';}}s.slides[i].swiperSlideSize = slideSize;s.slidesSizesGrid.push(slideSize);if(s.params.centeredSlides){slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;if(i === 0)slidePosition = slidePosition - s.size / 2 - spaceBetween;if(Math.abs(slidePosition) < 1 / 1000)slidePosition = 0;if(index % s.params.slidesPerGroup === 0)s.snapGrid.push(slidePosition);s.slidesGrid.push(slidePosition);}else {if(index % s.params.slidesPerGroup === 0)s.snapGrid.push(slidePosition);s.slidesGrid.push(slidePosition);slidePosition = slidePosition + slideSize + spaceBetween;}s.virtualSize += slideSize + spaceBetween;prevSlideSize = slideSize;index++;}s.virtualSize = Math.max(s.virtualSize,s.size) + s.params.slidesOffsetAfter;var newSlidesGrid;if(s.rtl && s.wrongRTL && (s.params.effect === 'slide' || s.params.effect === 'coverflow')){s.wrapper.css({width:s.virtualSize + s.params.spaceBetween + 'px'});}if(!s.support.flexbox || s.params.setWrapperSize){if(isH())s.wrapper.css({width:s.virtualSize + s.params.spaceBetween + 'px'});else s.wrapper.css({height:s.virtualSize + s.params.spaceBetween + 'px'});}if(s.params.slidesPerColumn > 1){s.virtualSize = (slideSize + s.params.spaceBetween) * slidesNumberEvenToRows;s.virtualSize = Math.ceil(s.virtualSize / s.params.slidesPerColumn) - s.params.spaceBetween;s.wrapper.css({width:s.virtualSize + s.params.spaceBetween + 'px'});if(s.params.centeredSlides){newSlidesGrid = [];for(i = 0;i < s.snapGrid.length;i++) {if(s.snapGrid[i] < s.virtualSize + s.snapGrid[0])newSlidesGrid.push(s.snapGrid[i]);}s.snapGrid = newSlidesGrid;}} // Remove last grid elements depending on width
	if(!s.params.centeredSlides){newSlidesGrid = [];for(i = 0;i < s.snapGrid.length;i++) {if(s.snapGrid[i] <= s.virtualSize - s.size){newSlidesGrid.push(s.snapGrid[i]);}}s.snapGrid = newSlidesGrid;if(Math.floor(s.virtualSize - s.size) > Math.floor(s.snapGrid[s.snapGrid.length - 1])){s.snapGrid.push(s.virtualSize - s.size);}}if(s.snapGrid.length === 0)s.snapGrid = [0];if(s.params.spaceBetween !== 0){if(isH()){if(s.rtl)s.slides.css({marginLeft:spaceBetween + 'px'});else s.slides.css({marginRight:spaceBetween + 'px'});}else s.slides.css({marginBottom:spaceBetween + 'px'});}if(s.params.watchSlidesProgress){s.updateSlidesOffset();}};s.updateSlidesOffset = function(){for(var i=0;i < s.slides.length;i++) {s.slides[i].swiperSlideOffset = isH()?s.slides[i].offsetLeft:s.slides[i].offsetTop;}}; /*=========================
	      Slider/slides progress
	      ===========================*/s.updateSlidesProgress = function(translate){if(typeof translate === 'undefined'){translate = s.translate || 0;}if(s.slides.length === 0)return;if(typeof s.slides[0].swiperSlideOffset === 'undefined')s.updateSlidesOffset();var offsetCenter=-translate;if(s.rtl)offsetCenter = translate; // Visible Slides
	var containerBox=s.container[0].getBoundingClientRect();var sideBefore=isH()?'left':'top';var sideAfter=isH()?'right':'bottom';s.slides.removeClass(s.params.slideVisibleClass);for(var i=0;i < s.slides.length;i++) {var slide=s.slides[i];var slideProgress=(offsetCenter - slide.swiperSlideOffset) / (slide.swiperSlideSize + s.params.spaceBetween);if(s.params.watchSlidesVisibility){var slideBefore=-(offsetCenter - slide.swiperSlideOffset);var slideAfter=slideBefore + s.slidesSizesGrid[i];var isVisible=slideBefore >= 0 && slideBefore < s.size || slideAfter > 0 && slideAfter <= s.size || slideBefore <= 0 && slideAfter >= s.size;if(isVisible){s.slides.eq(i).addClass(s.params.slideVisibleClass);}}slide.progress = s.rtl?-slideProgress:slideProgress;}};s.updateProgress = function(translate){if(typeof translate === 'undefined'){translate = s.translate || 0;}var translatesDiff=s.maxTranslate() - s.minTranslate();if(translatesDiff === 0){s.progress = 0;s.isBeginning = s.isEnd = true;}else {s.progress = (translate - s.minTranslate()) / translatesDiff;s.isBeginning = s.progress <= 0;s.isEnd = s.progress >= 1;}if(s.isBeginning)s.emit('onReachBeginning',s);if(s.isEnd)s.emit('onReachEnd',s);if(s.params.watchSlidesProgress)s.updateSlidesProgress(translate);s.emit('onProgress',s,s.progress);};s.updateActiveIndex = function(){var translate=s.rtl?s.translate:-s.translate;var newActiveIndex,i,snapIndex;for(i = 0;i < s.slidesGrid.length;i++) {if(typeof s.slidesGrid[i + 1] !== 'undefined'){if(translate >= s.slidesGrid[i] && translate < s.slidesGrid[i + 1] - (s.slidesGrid[i + 1] - s.slidesGrid[i]) / 2){newActiveIndex = i;}else if(translate >= s.slidesGrid[i] && translate < s.slidesGrid[i + 1]){newActiveIndex = i + 1;}}else {if(translate >= s.slidesGrid[i]){newActiveIndex = i;}}} // Normalize slideIndex
	if(newActiveIndex < 0 || typeof newActiveIndex === 'undefined')newActiveIndex = 0; // for (i = 0; i < s.slidesGrid.length; i++) {
	// if (- translate >= s.slidesGrid[i]) {
	// newActiveIndex = i;
	// }
	// }
	snapIndex = Math.floor(newActiveIndex / s.params.slidesPerGroup);if(snapIndex >= s.snapGrid.length)snapIndex = s.snapGrid.length - 1;if(newActiveIndex === s.activeIndex){return;}s.snapIndex = snapIndex;s.previousIndex = s.activeIndex;s.activeIndex = newActiveIndex;s.updateClasses();}; /*=========================
	      Classes
	      ===========================*/s.updateClasses = function(){s.slides.removeClass(s.params.slideActiveClass + ' ' + s.params.slideNextClass + ' ' + s.params.slidePrevClass);var activeSlide=s.slides.eq(s.activeIndex); // Active classes
	activeSlide.addClass(s.params.slideActiveClass);activeSlide.next('.' + s.params.slideClass).addClass(s.params.slideNextClass);activeSlide.prev('.' + s.params.slideClass).addClass(s.params.slidePrevClass); // Pagination
	if(s.bullets && s.bullets.length > 0){s.bullets.removeClass(s.params.bulletActiveClass);var bulletIndex;if(s.params.loop){bulletIndex = Math.ceil(s.activeIndex - s.loopedSlides) / s.params.slidesPerGroup;if(bulletIndex > s.slides.length - 1 - s.loopedSlides * 2){bulletIndex = bulletIndex - (s.slides.length - s.loopedSlides * 2);}if(bulletIndex > s.bullets.length - 1)bulletIndex = bulletIndex - s.bullets.length;}else {if(typeof s.snapIndex !== 'undefined'){bulletIndex = s.snapIndex;}else {bulletIndex = s.activeIndex || 0;}}if(s.paginationContainer.length > 1){s.bullets.each(function(){if($(this).index() === bulletIndex)$(this).addClass(s.params.bulletActiveClass);});}else {s.bullets.eq(bulletIndex).addClass(s.params.bulletActiveClass);}} // Next/active buttons
	if(!s.params.loop){if(s.params.prevButton){if(s.isBeginning){$(s.params.prevButton).addClass(s.params.buttonDisabledClass);if(s.params.a11y && s.a11y)s.a11y.disable($(s.params.prevButton));}else {$(s.params.prevButton).removeClass(s.params.buttonDisabledClass);if(s.params.a11y && s.a11y)s.a11y.enable($(s.params.prevButton));}}if(s.params.nextButton){if(s.isEnd){$(s.params.nextButton).addClass(s.params.buttonDisabledClass);if(s.params.a11y && s.a11y)s.a11y.disable($(s.params.nextButton));}else {$(s.params.nextButton).removeClass(s.params.buttonDisabledClass);if(s.params.a11y && s.a11y)s.a11y.enable($(s.params.nextButton));}}}}; /*=========================
	      Pagination
	      ===========================*/s.updatePagination = function(){if(!s.params.pagination)return;if(s.paginationContainer && s.paginationContainer.length > 0){var bulletsHTML='';var numberOfBullets=s.params.loop?Math.ceil((s.slides.length - s.loopedSlides * 2) / s.params.slidesPerGroup):s.snapGrid.length;for(var i=0;i < numberOfBullets;i++) {if(s.params.paginationBulletRender){bulletsHTML += s.params.paginationBulletRender(i,s.params.bulletClass);}else {bulletsHTML += '<' + s.params.paginationElement + ' class="' + s.params.bulletClass + '"></' + s.params.paginationElement + '>';}}s.paginationContainer.html(bulletsHTML);s.bullets = s.paginationContainer.find('.' + s.params.bulletClass);if(s.params.paginationClickable && s.params.a11y && s.a11y){s.a11y.initPagination();}}}; /*=========================
	      Common update method
	      ===========================*/s.update = function(updateTranslate){s.updateContainerSize();s.updateSlidesSize();s.updateProgress();s.updatePagination();s.updateClasses();if(s.params.scrollbar && s.scrollbar){s.scrollbar.set();}function forceSetTranslate(){newTranslate = Math.min(Math.max(s.translate,s.maxTranslate()),s.minTranslate());s.setWrapperTranslate(newTranslate);s.updateActiveIndex();s.updateClasses();}if(updateTranslate){var translated,newTranslate;if(s.controller && s.controller.spline){s.controller.spline = undefined;}if(s.params.freeMode){forceSetTranslate();}else {if((s.params.slidesPerView === 'auto' || s.params.slidesPerView > 1) && s.isEnd && !s.params.centeredSlides){translated = s.slideTo(s.slides.length - 1,0,false,true);}else {translated = s.slideTo(s.activeIndex,0,false,true);}if(!translated){forceSetTranslate();}}}}; /*=========================
	      Resize Handler
	      ===========================*/s.onResize = function(forceUpdatePagination){ // Disable locks on resize
	var allowSwipeToPrev=s.params.allowSwipeToPrev;var allowSwipeToNext=s.params.allowSwipeToNext;s.params.allowSwipeToPrev = s.params.allowSwipeToNext = true;s.updateContainerSize();s.updateSlidesSize();if(s.params.slidesPerView === 'auto' || s.params.freeMode || forceUpdatePagination)s.updatePagination();if(s.params.scrollbar && s.scrollbar){s.scrollbar.set();}if(s.controller && s.controller.spline){s.controller.spline = undefined;}if(s.params.freeMode){var newTranslate=Math.min(Math.max(s.translate,s.maxTranslate()),s.minTranslate());s.setWrapperTranslate(newTranslate);s.updateActiveIndex();s.updateClasses();}else {s.updateClasses();if((s.params.slidesPerView === 'auto' || s.params.slidesPerView > 1) && s.isEnd && !s.params.centeredSlides){s.slideTo(s.slides.length - 1,0,false,true);}else {s.slideTo(s.activeIndex,0,false,true);}} // Return locks after resize
	s.params.allowSwipeToPrev = allowSwipeToPrev;s.params.allowSwipeToNext = allowSwipeToNext;}; /*=========================
	      Events
	      ===========================*/ //Define Touch Events
	var desktopEvents=['mousedown','mousemove','mouseup'];if(window.navigator.pointerEnabled)desktopEvents = ['pointerdown','pointermove','pointerup'];else if(window.navigator.msPointerEnabled)desktopEvents = ['MSPointerDown','MSPointerMove','MSPointerUp'];s.touchEvents = {start:s.support.touch || !s.params.simulateTouch?'touchstart':desktopEvents[0],move:s.support.touch || !s.params.simulateTouch?'touchmove':desktopEvents[1],end:s.support.touch || !s.params.simulateTouch?'touchend':desktopEvents[2]}; // WP8 Touch Events Fix
	if(window.navigator.pointerEnabled || window.navigator.msPointerEnabled){(s.params.touchEventsTarget === 'container'?s.container:s.wrapper).addClass('swiper-wp8-' + s.params.direction);} // Attach/detach events
	s.initEvents = function(detach){console.debug('swiper initEvents',detach?'detach':'attach');var actionDom=detach?'off':'on';var action=detach?'removeEventListener':'addEventListener';var touchEventsTarget=s.params.touchEventsTarget === 'container'?s.container[0]:s.wrapper[0];var target=s.support.touch?touchEventsTarget:document;var moveCapture=s.params.nested?true:false; //Touch Events
	if(s.browser.ie){touchEventsTarget[action](s.touchEvents.start,s.onTouchStart,false);target[action](s.touchEvents.move,s.onTouchMove,moveCapture);target[action](s.touchEvents.end,s.onTouchEnd,false);}else {if(s.support.touch){touchEventsTarget[action](s.touchEvents.start,s.onTouchStart,false);touchEventsTarget[action](s.touchEvents.move,s.onTouchMove,moveCapture);touchEventsTarget[action](s.touchEvents.end,s.onTouchEnd,false);}if(params.simulateTouch && !s.device.ios && !s.device.android){touchEventsTarget[action]('mousedown',s.onTouchStart,false);document[action]('mousemove',s.onTouchMove,moveCapture);document[action]('mouseup',s.onTouchEnd,false);}}window[action]('resize',s.onResize); // Next, Prev, Index
	if(s.params.nextButton){$(s.params.nextButton)[actionDom]('click',s.onClickNext);if(s.params.a11y && s.a11y)$(s.params.nextButton)[actionDom]('keydown',s.a11y.onEnterKey);}if(s.params.prevButton){$(s.params.prevButton)[actionDom]('click',s.onClickPrev);if(s.params.a11y && s.a11y)$(s.params.prevButton)[actionDom]('keydown',s.a11y.onEnterKey);}if(s.params.pagination && s.params.paginationClickable){$(s.paginationContainer)[actionDom]('click','.' + s.params.bulletClass,s.onClickIndex);if(s.params.a11y && s.a11y)$(s.paginationContainer)[actionDom]('keydown','.' + s.params.bulletClass,s.a11y.onEnterKey);} // Prevent Links Clicks
	if(s.params.preventClicks || s.params.preventClicksPropagation)touchEventsTarget[action]('click',s.preventClicks,true);};s.attachEvents = function(detach){s.initEvents();};s.detachEvents = function(){s.initEvents(true);}; /*=========================
	      Handle Clicks
	      ===========================*/ // Prevent Clicks
	s.allowClick = true;s.preventClicks = function(e){if(!s.allowClick){if(s.params.preventClicks)e.preventDefault();if(s.params.preventClicksPropagation && s.animating){e.stopPropagation();e.stopImmediatePropagation();}}}; // Clicks
	s.onClickNext = function(e){e.preventDefault();if(s.isEnd && !s.params.loop)return;s.slideNext();};s.onClickPrev = function(e){e.preventDefault();if(s.isBeginning && !s.params.loop)return;s.slidePrev();};s.onClickIndex = function(e){e.preventDefault();var index=$(this).index() * s.params.slidesPerGroup;if(s.params.loop)index = index + s.loopedSlides;s.slideTo(index);}; /*=========================
	      Handle Touches
	      ===========================*/function findElementInEvent(e,selector){var el=$(e.target);if(!el.is(selector)){if(typeof selector === 'string'){el = el.parents(selector);}else if(selector.nodeType){var found;el.parents().each(function(index,_el){if(_el === selector)found = selector;});if(!found)return undefined;else return selector;}}if(el.length === 0){return undefined;}return el[0];}s.updateClickedSlide = function(e){var slide=findElementInEvent(e,'.' + s.params.slideClass);var slideFound=false;if(slide){for(var i=0;i < s.slides.length;i++) {if(s.slides[i] === slide)slideFound = true;}}if(slide && slideFound){s.clickedSlide = slide;s.clickedIndex = $(slide).index();}else {s.clickedSlide = undefined;s.clickedIndex = undefined;return;}if(s.params.slideToClickedSlide && s.clickedIndex !== undefined && s.clickedIndex !== s.activeIndex){var slideToIndex=s.clickedIndex,realIndex;if(s.params.loop){realIndex = $(s.clickedSlide).attr('data-swiper-slide-index');if(slideToIndex > s.slides.length - s.params.slidesPerView){s.fixLoop();slideToIndex = s.wrapper.children('.' + s.params.slideClass + '[data-swiper-slide-index="' + realIndex + '"]').eq(0).index();setTimeout(function(){s.slideTo(slideToIndex);},0);}else if(slideToIndex < s.params.slidesPerView - 1){s.fixLoop();var duplicatedSlides=s.wrapper.children('.' + s.params.slideClass + '[data-swiper-slide-index="' + realIndex + '"]');slideToIndex = duplicatedSlides.eq(duplicatedSlides.length - 1).index();setTimeout(function(){s.slideTo(slideToIndex);},0);}else {s.slideTo(slideToIndex);}}else {s.slideTo(slideToIndex);}}};var isTouched,isMoved,touchStartTime,isScrolling,currentTranslate,startTranslate,allowThresholdMove, // Form elements to match
	formElements='input, select, textarea, button', // Last click time
	lastClickTime=Date.now(),clickTimeout, //Velocities
	velocities=[],allowMomentumBounce; // Animating Flag
	s.animating = false; // Touches information
	s.touches = {startX:0,startY:0,currentX:0,currentY:0,diff:0}; // Touch handlers
	var isTouchEvent,startMoving;s.onTouchStart = function(e){if(e.originalEvent)e = e.originalEvent;isTouchEvent = e.type === 'touchstart';if(!isTouchEvent && 'which' in e && e.which === 3)return;if(s.params.noSwiping && findElementInEvent(e,'.' + s.params.noSwipingClass)){s.allowClick = true;return;}if(s.params.swipeHandler){if(!findElementInEvent(e,s.params.swipeHandler))return;}var startX=s.touches.currentX = e.type === 'touchstart'?e.targetTouches[0].pageX:e.pageX;var startY=s.touches.currentY = e.type === 'touchstart'?e.targetTouches[0].pageY:e.pageY; // Do NOT start if iOS edge swipe is detected. Otherwise iOS app (UIWebView) cannot swipe-to-go-back anymore
	if(s.device.ios && s.params.iOSEdgeSwipeDetection && startX <= s.params.iOSEdgeSwipeThreshold){return;}isTouched = true;isMoved = false;isScrolling = undefined;startMoving = undefined;s.touches.startX = startX;s.touches.startY = startY;touchStartTime = Date.now();s.allowClick = true;s.updateContainerSize();s.swipeDirection = undefined;if(s.params.threshold > 0)allowThresholdMove = false;if(e.type !== 'touchstart'){var preventDefault=true;if($(e.target).is(formElements))preventDefault = false;if(document.activeElement && $(document.activeElement).is(formElements)){document.activeElement.blur();}if(preventDefault){e.preventDefault();}}s.emit('onTouchStart',s,e);};s.onTouchMove = function(e){if(e.originalEvent)e = e.originalEvent;if(isTouchEvent && e.type === 'mousemove')return;if(e.preventedByNestedSwiper)return;if(s.params.onlyExternal){ // isMoved = true;
	s.allowClick = false;if(isTouched){s.touches.startX = s.touches.currentX = e.type === 'touchmove'?e.targetTouches[0].pageX:e.pageX;s.touches.startY = s.touches.currentY = e.type === 'touchmove'?e.targetTouches[0].pageY:e.pageY;touchStartTime = Date.now();}return;}if(isTouchEvent && document.activeElement){if(e.target === document.activeElement && $(e.target).is(formElements)){isMoved = true;s.allowClick = false;return;}}s.emit('onTouchMove',s,e);if(e.targetTouches && e.targetTouches.length > 1)return;s.touches.currentX = e.type === 'touchmove'?e.targetTouches[0].pageX:e.pageX;s.touches.currentY = e.type === 'touchmove'?e.targetTouches[0].pageY:e.pageY;if(typeof isScrolling === 'undefined'){var touchAngle=Math.atan2(Math.abs(s.touches.currentY - s.touches.startY),Math.abs(s.touches.currentX - s.touches.startX)) * 180 / Math.PI;isScrolling = isH()?touchAngle > s.params.touchAngle:90 - touchAngle > s.params.touchAngle;}if(isScrolling){s.emit('onTouchMoveOpposite',s,e);}if(typeof startMoving === 'undefined' && s.browser.ieTouch){if(s.touches.currentX !== s.touches.startX || s.touches.currentY !== s.touches.startY){startMoving = true;}}if(!isTouched)return;if(isScrolling){isTouched = false;return;}if(!startMoving && s.browser.ieTouch){return;}s.allowClick = false;s.emit('onSliderMove',s,e);e.preventDefault();if(s.params.touchMoveStopPropagation && !s.params.nested){e.stopPropagation();}if(!isMoved){if(params.loop){s.fixLoop();}startTranslate = s.getWrapperTranslate();s.setWrapperTransition(0);if(s.animating){s.wrapper.trigger('webkitTransitionEnd transitionend oTransitionEnd MSTransitionEnd msTransitionEnd');}if(s.params.autoplay && s.autoplaying){if(s.params.autoplayDisableOnInteraction){s.stopAutoplay();}else {s.pauseAutoplay();}}allowMomentumBounce = false; //Grab Cursor
	if(s.params.grabCursor){s.container[0].style.cursor = 'move';s.container[0].style.cursor = '-webkit-grabbing';s.container[0].style.cursor = '-moz-grabbin';s.container[0].style.cursor = 'grabbing';}}isMoved = true;var diff=s.touches.diff = isH()?s.touches.currentX - s.touches.startX:s.touches.currentY - s.touches.startY;diff = diff * s.params.touchRatio;if(s.rtl)diff = -diff;s.swipeDirection = diff > 0?'prev':'next';currentTranslate = diff + startTranslate;var disableParentSwiper=true;if(diff > 0 && currentTranslate > s.minTranslate()){disableParentSwiper = false;if(s.params.resistance)currentTranslate = s.minTranslate() - 1 + Math.pow(-s.minTranslate() + startTranslate + diff,s.params.resistanceRatio);}else if(diff < 0 && currentTranslate < s.maxTranslate()){disableParentSwiper = false;if(s.params.resistance)currentTranslate = s.maxTranslate() + 1 - Math.pow(s.maxTranslate() - startTranslate - diff,s.params.resistanceRatio);}if(disableParentSwiper){e.preventedByNestedSwiper = true;} // Directions locks
	if(!s.params.allowSwipeToNext && s.swipeDirection === 'next' && currentTranslate < startTranslate){currentTranslate = startTranslate;}if(!s.params.allowSwipeToPrev && s.swipeDirection === 'prev' && currentTranslate > startTranslate){currentTranslate = startTranslate;}if(!s.params.followFinger)return; // Threshold
	if(s.params.threshold > 0){if(Math.abs(diff) > s.params.threshold || allowThresholdMove){if(!allowThresholdMove){allowThresholdMove = true;s.touches.startX = s.touches.currentX;s.touches.startY = s.touches.currentY;currentTranslate = startTranslate;s.touches.diff = isH()?s.touches.currentX - s.touches.startX:s.touches.currentY - s.touches.startY;return;}}else {currentTranslate = startTranslate;return;}} // Update active index in free mode
	if(s.params.freeMode || s.params.watchSlidesProgress){s.updateActiveIndex();}if(s.params.freeMode){ //Velocity
	if(velocities.length === 0){velocities.push({position:s.touches[isH()?'startX':'startY'],time:touchStartTime});}velocities.push({position:s.touches[isH()?'currentX':'currentY'],time:new window.Date().getTime()});} // Update progress
	s.updateProgress(currentTranslate); // Update translate
	s.setWrapperTranslate(currentTranslate);};s.onTouchEnd = function(e){if(e.originalEvent)e = e.originalEvent;s.emit('onTouchEnd',s,e);if(!isTouched)return; //Return Grab Cursor
	if(s.params.grabCursor && isMoved && isTouched){s.container[0].style.cursor = 'move';s.container[0].style.cursor = '-webkit-grab';s.container[0].style.cursor = '-moz-grab';s.container[0].style.cursor = 'grab';} // Time diff
	var touchEndTime=Date.now();var timeDiff=touchEndTime - touchStartTime; // Tap, doubleTap, Click
	if(s.allowClick){s.updateClickedSlide(e);s.emit('onTap',s,e);if(timeDiff < 300 && touchEndTime - lastClickTime > 300){if(clickTimeout)clearTimeout(clickTimeout);clickTimeout = setTimeout(function(){if(!s)return;if(s.params.paginationHide && s.paginationContainer.length > 0 && !$(e.target).hasClass(s.params.bulletClass)){s.paginationContainer.toggleClass(s.params.paginationHiddenClass);}s.emit('onClick',s,e);},300);}if(timeDiff < 300 && touchEndTime - lastClickTime < 300){if(clickTimeout)clearTimeout(clickTimeout);s.emit('onDoubleTap',s,e);}}lastClickTime = Date.now();setTimeout(function(){if(s)s.allowClick = true;},0);if(!isTouched || !isMoved || !s.swipeDirection || s.touches.diff === 0 || currentTranslate === startTranslate){isTouched = isMoved = false;return;}isTouched = isMoved = false;var currentPos;if(s.params.followFinger){currentPos = s.rtl?s.translate:-s.translate;}else {currentPos = -currentTranslate;}if(s.params.freeMode){if(currentPos < -s.minTranslate()){s.slideTo(s.activeIndex);return;}else if(currentPos > -s.maxTranslate()){if(s.slides.length < s.snapGrid.length){s.slideTo(s.snapGrid.length - 1);}else {s.slideTo(s.slides.length - 1);}return;}if(s.params.freeModeMomentum){if(velocities.length > 1){var lastMoveEvent=velocities.pop(),velocityEvent=velocities.pop();var distance=lastMoveEvent.position - velocityEvent.position;var time=lastMoveEvent.time - velocityEvent.time;s.velocity = distance / time;s.velocity = s.velocity / 2;if(Math.abs(s.velocity) < 0.02){s.velocity = 0;} // this implies that the user stopped moving a finger then released.
	// There would be no events with distance zero, so the last event is stale.
	if(time > 150 || new window.Date().getTime() - lastMoveEvent.time > 300){s.velocity = 0;}}else {s.velocity = 0;}velocities.length = 0;var momentumDuration=1000 * s.params.freeModeMomentumRatio;var momentumDistance=s.velocity * momentumDuration;var newPosition=s.translate + momentumDistance;if(s.rtl)newPosition = -newPosition;var doBounce=false;var afterBouncePosition;var bounceAmount=Math.abs(s.velocity) * 20 * s.params.freeModeMomentumBounceRatio;if(newPosition < s.maxTranslate()){if(s.params.freeModeMomentumBounce){if(newPosition + s.maxTranslate() < -bounceAmount){newPosition = s.maxTranslate() - bounceAmount;}afterBouncePosition = s.maxTranslate();doBounce = true;allowMomentumBounce = true;}else {newPosition = s.maxTranslate();}}else if(newPosition > s.minTranslate()){if(s.params.freeModeMomentumBounce){if(newPosition - s.minTranslate() > bounceAmount){newPosition = s.minTranslate() + bounceAmount;}afterBouncePosition = s.minTranslate();doBounce = true;allowMomentumBounce = true;}else {newPosition = s.minTranslate();}}else if(s.params.freeModeSticky){var j=0,nextSlide;for(j = 0;j < s.snapGrid.length;j += 1) {if(s.snapGrid[j] > -newPosition){nextSlide = j;break;}}if(Math.abs(s.snapGrid[nextSlide] - newPosition) < Math.abs(s.snapGrid[nextSlide - 1] - newPosition) || s.swipeDirection === 'next'){newPosition = s.snapGrid[nextSlide];}else {newPosition = s.snapGrid[nextSlide - 1];}if(!s.rtl)newPosition = -newPosition;} //Fix duration
	if(s.velocity !== 0){if(s.rtl){momentumDuration = Math.abs((-newPosition - s.translate) / s.velocity);}else {momentumDuration = Math.abs((newPosition - s.translate) / s.velocity);}}else if(s.params.freeModeSticky){s.slideReset();return;}if(s.params.freeModeMomentumBounce && doBounce){s.updateProgress(afterBouncePosition);s.setWrapperTransition(momentumDuration);s.setWrapperTranslate(newPosition);s.onTransitionStart();s.animating = true;s.wrapper.transitionEnd(function(){if(!s || !allowMomentumBounce)return;s.emit('onMomentumBounce',s);s.setWrapperTransition(s.params.speed);s.setWrapperTranslate(afterBouncePosition);s.wrapper.transitionEnd(function(){if(!s)return;s.onTransitionEnd();});});}else if(s.velocity){s.updateProgress(newPosition);s.setWrapperTransition(momentumDuration);s.setWrapperTranslate(newPosition);s.onTransitionStart();if(!s.animating){s.animating = true;s.wrapper.transitionEnd(function(){if(!s)return;s.onTransitionEnd();});}}else {s.updateProgress(newPosition);}s.updateActiveIndex();}if(!s.params.freeModeMomentum || timeDiff >= s.params.longSwipesMs){s.updateProgress();s.updateActiveIndex();}return;} // Find current slide
	var i,stopIndex=0,groupSize=s.slidesSizesGrid[0];for(i = 0;i < s.slidesGrid.length;i += s.params.slidesPerGroup) {if(typeof s.slidesGrid[i + s.params.slidesPerGroup] !== 'undefined'){if(currentPos >= s.slidesGrid[i] && currentPos < s.slidesGrid[i + s.params.slidesPerGroup]){stopIndex = i;groupSize = s.slidesGrid[i + s.params.slidesPerGroup] - s.slidesGrid[i];}}else {if(currentPos >= s.slidesGrid[i]){stopIndex = i;groupSize = s.slidesGrid[s.slidesGrid.length - 1] - s.slidesGrid[s.slidesGrid.length - 2];}}} // Find current slide size
	var ratio=(currentPos - s.slidesGrid[stopIndex]) / groupSize;if(timeDiff > s.params.longSwipesMs){ // Long touches
	if(!s.params.longSwipes){s.slideTo(s.activeIndex);return;}if(s.swipeDirection === 'next'){if(ratio >= s.params.longSwipesRatio)s.slideTo(stopIndex + s.params.slidesPerGroup);else s.slideTo(stopIndex);}if(s.swipeDirection === 'prev'){if(ratio > 1 - s.params.longSwipesRatio)s.slideTo(stopIndex + s.params.slidesPerGroup);else s.slideTo(stopIndex);}}else { // Short swipes
	if(!s.params.shortSwipes){s.slideTo(s.activeIndex);return;}if(s.swipeDirection === 'next'){s.slideTo(stopIndex + s.params.slidesPerGroup);}if(s.swipeDirection === 'prev'){s.slideTo(stopIndex);}}}; /*=========================
	      Transitions
	      ===========================*/s._slideTo = function(slideIndex,speed){return s.slideTo(slideIndex,speed,true,true);};s.slideTo = function(slideIndex,speed,runCallbacks,internal){if(typeof runCallbacks === 'undefined')runCallbacks = true;if(typeof slideIndex === 'undefined')slideIndex = 0;if(slideIndex < 0)slideIndex = 0;s.snapIndex = Math.floor(slideIndex / s.params.slidesPerGroup);if(s.snapIndex >= s.snapGrid.length)s.snapIndex = s.snapGrid.length - 1;var translate=-s.snapGrid[s.snapIndex]; // Stop autoplay
	if(s.params.autoplay && s.autoplaying){if(internal || !s.params.autoplayDisableOnInteraction){s.pauseAutoplay(speed);}else {s.stopAutoplay();}} // Update progress
	s.updateProgress(translate); // Normalize slideIndex
	for(var i=0;i < s.slidesGrid.length;i++) {if(-Math.floor(translate * 100) >= Math.floor(s.slidesGrid[i] * 100)){slideIndex = i;}} // Directions locks
	if(!s.params.allowSwipeToNext && translate < s.translate && translate < s.minTranslate()){return false;}if(!s.params.allowSwipeToPrev && translate > s.translate && translate > s.maxTranslate()){if((s.activeIndex || 0) !== slideIndex)return false;} // Update Index
	if(typeof speed === 'undefined')speed = s.params.speed;s.previousIndex = s.activeIndex || 0;s.activeIndex = slideIndex;if(translate === s.translate){s.updateClasses();return false;}s.updateClasses();s.onTransitionStart(runCallbacks);var translateX=isH()?translate:0,translateY=isH()?0:translate;if(speed === 0){s.setWrapperTransition(0);s.setWrapperTranslate(translate);s.onTransitionEnd(runCallbacks);}else {s.setWrapperTransition(speed);s.setWrapperTranslate(translate);if(!s.animating){s.animating = true;s.wrapper.transitionEnd(function(){if(!s)return;s.onTransitionEnd(runCallbacks);});}}return true;};s.onTransitionStart = function(runCallbacks){if(typeof runCallbacks === 'undefined')runCallbacks = true;if(s.lazy)s.lazy.onTransitionStart();if(runCallbacks){s.emit('onTransitionStart',s);if(s.activeIndex !== s.previousIndex){s.emit('onSlideChangeStart',s);}}};s.onTransitionEnd = function(runCallbacks){s.animating = false;s.setWrapperTransition(0);if(typeof runCallbacks === 'undefined')runCallbacks = true;if(s.lazy)s.lazy.onTransitionEnd();if(runCallbacks){s.emit('onTransitionEnd',s);if(s.activeIndex !== s.previousIndex){s.emit('onSlideChangeEnd',s);}}if(s.params.hashnav && s.hashnav){s.hashnav.setHash();}};s.slideNext = function(runCallbacks,speed,internal){if(s.params.loop){if(s.animating)return false;s.fixLoop();var clientLeft=s.container[0].clientLeft;return s.slideTo(s.activeIndex + s.params.slidesPerGroup,speed,runCallbacks,internal);}else return s.slideTo(s.activeIndex + s.params.slidesPerGroup,speed,runCallbacks,internal);};s._slideNext = function(speed){return s.slideNext(true,speed,true);};s.slidePrev = function(runCallbacks,speed,internal){if(s.params.loop){if(s.animating)return false;s.fixLoop();var clientLeft=s.container[0].clientLeft;return s.slideTo(s.activeIndex - 1,speed,runCallbacks,internal);}else return s.slideTo(s.activeIndex - 1,speed,runCallbacks,internal);};s._slidePrev = function(speed){return s.slidePrev(true,speed,true);};s.slideReset = function(runCallbacks,speed,internal){return s.slideTo(s.activeIndex,speed,runCallbacks);}; /*=========================
	      Translate/transition helpers
	      ===========================*/s.setWrapperTransition = function(duration,byController){s.wrapper.transition(duration);if(s.params.effect !== 'slide' && s.effects[s.params.effect]){s.effects[s.params.effect].setTransition(duration);}if(s.params.parallax && s.parallax){s.parallax.setTransition(duration);}if(s.params.scrollbar && s.scrollbar){s.scrollbar.setTransition(duration);}if(s.params.control && s.controller){s.controller.setTransition(duration,byController);}s.emit('onSetTransition',s,duration);};s.setWrapperTranslate = function(translate,updateActiveIndex,byController){var x=0,y=0,z=0;if(isH()){x = s.rtl?-translate:translate;}else {y = translate;}if(!s.params.virtualTranslate){if(s.support.transforms3d)s.wrapper.transform('translate3d(' + x + 'px, ' + y + 'px, ' + z + 'px)');else s.wrapper.transform('translate(' + x + 'px, ' + y + 'px)');}s.translate = isH()?x:y;if(updateActiveIndex)s.updateActiveIndex();if(s.params.effect !== 'slide' && s.effects[s.params.effect]){s.effects[s.params.effect].setTranslate(s.translate);}if(s.params.parallax && s.parallax){s.parallax.setTranslate(s.translate);}if(s.params.scrollbar && s.scrollbar){s.scrollbar.setTranslate(s.translate);}if(s.params.control && s.controller){s.controller.setTranslate(s.translate,byController);}s.emit('onSetTranslate',s,s.translate);};s.getTranslate = function(el,axis){var matrix,curTransform,curStyle,transformMatrix; // automatic axis detection
	if(typeof axis === 'undefined'){axis = 'x';}if(s.params.virtualTranslate){return s.rtl?-s.translate:s.translate;}curStyle = window.getComputedStyle(el,null);if(window.WebKitCSSMatrix){ // Some old versions of Webkit choke when 'none' is passed; pass
	// empty string instead in this case
	transformMatrix = new window.WebKitCSSMatrix(curStyle.webkitTransform === 'none'?'':curStyle.webkitTransform);}else {transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(','matrix(1, 0, 0, 1,');matrix = transformMatrix.toString().split(',');}if(axis === 'x'){ //Latest Chrome and webkits Fix
	if(window.WebKitCSSMatrix)curTransform = transformMatrix.m41;else if(matrix.length === 16)curTransform = parseFloat(matrix[12]);else curTransform = parseFloat(matrix[4]);}if(axis === 'y'){ //Latest Chrome and webkits Fix
	if(window.WebKitCSSMatrix)curTransform = transformMatrix.m42;else if(matrix.length === 16)curTransform = parseFloat(matrix[13]);else curTransform = parseFloat(matrix[5]);}if(s.rtl && curTransform)curTransform = -curTransform;return curTransform || 0;};s.getWrapperTranslate = function(axis){if(typeof axis === 'undefined'){axis = isH()?'x':'y';}return s.getTranslate(s.wrapper[0],axis);}; /*=========================
	      Observer
	      ===========================*/s.observers = [];function initObserver(target,options){options = options || {}; // create an observer instance
	var ObserverFunc=window.MutationObserver || window.WebkitMutationObserver;var observer=new ObserverFunc(function(mutations){mutations.forEach(function(mutation){s.onResize(true);s.emit('onObserverUpdate',s,mutation);});});observer.observe(target,{attributes:typeof options.attributes === 'undefined'?true:options.attributes,childList:typeof options.childList === 'undefined'?true:options.childList,characterData:typeof options.characterData === 'undefined'?true:options.characterData});s.observers.push(observer);}s.initObservers = function(){if(s.params.observeParents){var containerParents=s.container.parents();for(var i=0;i < containerParents.length;i++) {initObserver(containerParents[i]);}} // Observe container
	initObserver(s.container[0],{childList:false}); // Observe wrapper
	initObserver(s.wrapper[0],{attributes:false});};s.disconnectObservers = function(){for(var i=0;i < s.observers.length;i++) {s.observers[i].disconnect();}s.observers = [];}; /*=========================
	      Loop
	      ===========================*/ // Create looped slides
	s.createLoop = function(){ // Remove duplicated slides
	s.wrapper.children('.' + s.params.slideClass + '.' + s.params.slideDuplicateClass).remove();var slides=s.wrapper.children('.' + s.params.slideClass);if(s.params.slidesPerView === 'auto' && !s.params.loopedSlides)s.params.loopedSlides = slides.length;s.loopedSlides = parseInt(s.params.loopedSlides || s.params.slidesPerView,10);s.loopedSlides = s.loopedSlides + s.params.loopAdditionalSlides;if(s.loopedSlides > slides.length){s.loopedSlides = slides.length;}var prependSlides=[],appendSlides=[],i;slides.each(function(index,el){var slide=$(this);if(index < s.loopedSlides)appendSlides.push(el);if(index < slides.length && index >= slides.length - s.loopedSlides)prependSlides.push(el);slide.attr('data-swiper-slide-index',index);});for(i = 0;i < appendSlides.length;i++) {s.wrapper.append($(appendSlides[i].cloneNode(true)).addClass(s.params.slideDuplicateClass));}for(i = prependSlides.length - 1;i >= 0;i--) {s.wrapper.prepend($(prependSlides[i].cloneNode(true)).addClass(s.params.slideDuplicateClass));}};s.destroyLoop = function(){s.wrapper.children('.' + s.params.slideClass + '.' + s.params.slideDuplicateClass).remove();s.slides.removeAttr('data-swiper-slide-index');};s.fixLoop = function(){var newIndex; //Fix For Negative Oversliding
	if(s.activeIndex < s.loopedSlides){newIndex = s.slides.length - s.loopedSlides * 3 + s.activeIndex;newIndex = newIndex + s.loopedSlides;s.slideTo(newIndex,0,false,true);}else if(s.params.slidesPerView === 'auto' && s.activeIndex >= s.loopedSlides * 2 || s.activeIndex > s.slides.length - s.params.slidesPerView * 2){newIndex = -s.slides.length + s.activeIndex + s.loopedSlides;newIndex = newIndex + s.loopedSlides;s.slideTo(newIndex,0,false,true);}}; /*=========================
	      Append/Prepend/Remove Slides
	      ===========================*/s.appendSlide = function(slides){if(s.params.loop){s.destroyLoop();}if(typeof slides === 'object' && slides.length){for(var i=0;i < slides.length;i++) {if(slides[i])s.wrapper.append(slides[i]);}}else {s.wrapper.append(slides);}if(s.params.loop){s.createLoop();}if(!(s.params.observer && s.support.observer)){s.update(true);}};s.prependSlide = function(slides){if(s.params.loop){s.destroyLoop();}var newActiveIndex=s.activeIndex + 1;if(typeof slides === 'object' && slides.length){for(var i=0;i < slides.length;i++) {if(slides[i])s.wrapper.prepend(slides[i]);}newActiveIndex = s.activeIndex + slides.length;}else {s.wrapper.prepend(slides);}if(s.params.loop){s.createLoop();}if(!(s.params.observer && s.support.observer)){s.update(true);}s.slideTo(newActiveIndex,0,false);};s.removeSlide = function(slidesIndexes){if(s.params.loop){s.destroyLoop();s.slides = s.wrapper.children('.' + s.params.slideClass);}var newActiveIndex=s.activeIndex,indexToRemove;if(typeof slidesIndexes === 'object' && slidesIndexes.length){for(var i=0;i < slidesIndexes.length;i++) {indexToRemove = slidesIndexes[i];if(s.slides[indexToRemove])s.slides.eq(indexToRemove).remove();if(indexToRemove < newActiveIndex)newActiveIndex--;}newActiveIndex = Math.max(newActiveIndex,0);}else {indexToRemove = slidesIndexes;if(s.slides[indexToRemove])s.slides.eq(indexToRemove).remove();if(indexToRemove < newActiveIndex)newActiveIndex--;newActiveIndex = Math.max(newActiveIndex,0);}if(s.params.loop){s.createLoop();}if(!(s.params.observer && s.support.observer)){s.update(true);}if(s.params.loop){s.slideTo(newActiveIndex + s.loopedSlides,0,false);}else {s.slideTo(newActiveIndex,0,false);}};s.removeAllSlides = function(){var slidesIndexes=[];for(var i=0;i < s.slides.length;i++) {slidesIndexes.push(i);}s.removeSlide(slidesIndexes);}; /*=========================
	      Effects
	      ===========================*/s.effects = {fade:{setTranslate:function setTranslate(){for(var i=0;i < s.slides.length;i++) {var slide=s.slides.eq(i);var offset=slide[0].swiperSlideOffset;var tx=-offset;if(!s.params.virtualTranslate)tx = tx - s.translate;var ty=0;if(!isH()){ty = tx;tx = 0;}var slideOpacity=s.params.fade.crossFade?Math.max(1 - Math.abs(slide[0].progress),0):1 + Math.min(Math.max(slide[0].progress,-1),0);slide.css({opacity:slideOpacity}).transform('translate3d(' + tx + 'px, ' + ty + 'px, 0px)');}},setTransition:function setTransition(duration){s.slides.transition(duration);if(s.params.virtualTranslate && duration !== 0){var eventTriggered=false;s.slides.transitionEnd(function(){if(eventTriggered)return;if(!s)return;eventTriggered = true;s.animating = false;var triggerEvents=['webkitTransitionEnd','transitionend','oTransitionEnd','MSTransitionEnd','msTransitionEnd'];for(var i=0;i < triggerEvents.length;i++) {s.wrapper.trigger(triggerEvents[i]);}});}}},cube:{setTranslate:function setTranslate(){var wrapperRotate=0,cubeShadow;if(s.params.cube.shadow){if(isH()){cubeShadow = s.wrapper.find('.swiper-cube-shadow');if(cubeShadow.length === 0){cubeShadow = $('<div class="swiper-cube-shadow"></div>');s.wrapper.append(cubeShadow);}cubeShadow.css({height:s.width + 'px'});}else {cubeShadow = s.container.find('.swiper-cube-shadow');if(cubeShadow.length === 0){cubeShadow = $('<div class="swiper-cube-shadow"></div>');s.container.append(cubeShadow);}}}for(var i=0;i < s.slides.length;i++) {var slide=s.slides.eq(i);var slideAngle=i * 90;var round=Math.floor(slideAngle / 360);if(s.rtl){slideAngle = -slideAngle;round = Math.floor(-slideAngle / 360);}var progress=Math.max(Math.min(slide[0].progress,1),-1);var tx=0,ty=0,tz=0;if(i % 4 === 0){tx = -round * 4 * s.size;tz = 0;}else if((i - 1) % 4 === 0){tx = 0;tz = -round * 4 * s.size;}else if((i - 2) % 4 === 0){tx = s.size + round * 4 * s.size;tz = s.size;}else if((i - 3) % 4 === 0){tx = -s.size;tz = 3 * s.size + s.size * 4 * round;}if(s.rtl){tx = -tx;}if(!isH()){ty = tx;tx = 0;}var transform='rotateX(' + (isH()?0:-slideAngle) + 'deg) rotateY(' + (isH()?slideAngle:0) + 'deg) translate3d(' + tx + 'px, ' + ty + 'px, ' + tz + 'px)';if(progress <= 1 && progress > -1){wrapperRotate = i * 90 + progress * 90;if(s.rtl)wrapperRotate = -i * 90 - progress * 90;}slide.transform(transform);if(s.params.cube.slideShadows){ //Set shadows
	var shadowBefore=isH()?slide.find('.swiper-slide-shadow-left'):slide.find('.swiper-slide-shadow-top');var shadowAfter=isH()?slide.find('.swiper-slide-shadow-right'):slide.find('.swiper-slide-shadow-bottom');if(shadowBefore.length === 0){shadowBefore = $('<div class="swiper-slide-shadow-' + (isH()?'left':'top') + '"></div>');slide.append(shadowBefore);}if(shadowAfter.length === 0){shadowAfter = $('<div class="swiper-slide-shadow-' + (isH()?'right':'bottom') + '"></div>');slide.append(shadowAfter);}var shadowOpacity=slide[0].progress;if(shadowBefore.length)shadowBefore[0].style.opacity = -slide[0].progress;if(shadowAfter.length)shadowAfter[0].style.opacity = slide[0].progress;}}s.wrapper.css({'-webkit-transform-origin':'50% 50% -' + s.size / 2 + 'px','-moz-transform-origin':'50% 50% -' + s.size / 2 + 'px','-ms-transform-origin':'50% 50% -' + s.size / 2 + 'px','transform-origin':'50% 50% -' + s.size / 2 + 'px'});if(s.params.cube.shadow){if(isH()){cubeShadow.transform('translate3d(0px, ' + (s.width / 2 + s.params.cube.shadowOffset) + 'px, ' + -s.width / 2 + 'px) rotateX(90deg) rotateZ(0deg) scale(' + s.params.cube.shadowScale + ')');}else {var shadowAngle=Math.abs(wrapperRotate) - Math.floor(Math.abs(wrapperRotate) / 90) * 90;var multiplier=1.5 - (Math.sin(shadowAngle * 2 * Math.PI / 360) / 2 + Math.cos(shadowAngle * 2 * Math.PI / 360) / 2);var scale1=s.params.cube.shadowScale,scale2=s.params.cube.shadowScale / multiplier,offset=s.params.cube.shadowOffset;cubeShadow.transform('scale3d(' + scale1 + ', 1, ' + scale2 + ') translate3d(0px, ' + (s.height / 2 + offset) + 'px, ' + -s.height / 2 / scale2 + 'px) rotateX(-90deg)');}}var zFactor=s.isSafari || s.isUiWebView?-s.size / 2:0;s.wrapper.transform('translate3d(0px,0,' + zFactor + 'px) rotateX(' + (isH()?0:wrapperRotate) + 'deg) rotateY(' + (isH()?-wrapperRotate:0) + 'deg)');},setTransition:function setTransition(duration){s.slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);if(s.params.cube.shadow && !isH()){s.container.find('.swiper-cube-shadow').transition(duration);}}},coverflow:{setTranslate:function setTranslate(){var transform=s.translate;var center=isH()?-transform + s.width / 2:-transform + s.height / 2;var rotate=isH()?s.params.coverflow.rotate:-s.params.coverflow.rotate;var translate=s.params.coverflow.depth; //Each slide offset from center
	for(var i=0,length=s.slides.length;i < length;i++) {var slide=s.slides.eq(i);var slideSize=s.slidesSizesGrid[i];var slideOffset=slide[0].swiperSlideOffset;var offsetMultiplier=(center - slideOffset - slideSize / 2) / slideSize * s.params.coverflow.modifier;var rotateY=isH()?rotate * offsetMultiplier:0;var rotateX=isH()?0:rotate * offsetMultiplier; // var rotateZ = 0
	var translateZ=-translate * Math.abs(offsetMultiplier);var translateY=isH()?0:s.params.coverflow.stretch * offsetMultiplier;var translateX=isH()?s.params.coverflow.stretch * offsetMultiplier:0; //Fix for ultra small values
	if(Math.abs(translateX) < 0.001)translateX = 0;if(Math.abs(translateY) < 0.001)translateY = 0;if(Math.abs(translateZ) < 0.001)translateZ = 0;if(Math.abs(rotateY) < 0.001)rotateY = 0;if(Math.abs(rotateX) < 0.001)rotateX = 0;var slideTransform='translate3d(' + translateX + 'px,' + translateY + 'px,' + translateZ + 'px)  rotateX(' + rotateX + 'deg) rotateY(' + rotateY + 'deg)';slide.transform(slideTransform);slide[0].style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;if(s.params.coverflow.slideShadows){ //Set shadows
	var shadowBefore=isH()?slide.find('.swiper-slide-shadow-left'):slide.find('.swiper-slide-shadow-top');var shadowAfter=isH()?slide.find('.swiper-slide-shadow-right'):slide.find('.swiper-slide-shadow-bottom');if(shadowBefore.length === 0){shadowBefore = $('<div class="swiper-slide-shadow-' + (isH()?'left':'top') + '"></div>');slide.append(shadowBefore);}if(shadowAfter.length === 0){shadowAfter = $('<div class="swiper-slide-shadow-' + (isH()?'right':'bottom') + '"></div>');slide.append(shadowAfter);}if(shadowBefore.length)shadowBefore[0].style.opacity = offsetMultiplier > 0?offsetMultiplier:0;if(shadowAfter.length)shadowAfter[0].style.opacity = -offsetMultiplier > 0?-offsetMultiplier:0;}} //Set correct perspective for IE10
	if(s.browser.ie){var ws=s.wrapper[0].style;ws.perspectiveOrigin = center + 'px 50%';}},setTransition:function setTransition(duration){s.slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);}}}; /*=========================
	      Images Lazy Loading
	      ===========================*/s.lazy = {initialImageLoaded:false,loadImageInSlide:function loadImageInSlide(index,loadInDuplicate){if(typeof index === 'undefined')return;if(typeof loadInDuplicate === 'undefined')loadInDuplicate = true;if(s.slides.length === 0)return;var slide=s.slides.eq(index);var img=slide.find('.swiper-lazy:not(.swiper-lazy-loaded):not(.swiper-lazy-loading)');if(slide.hasClass('swiper-lazy') && !slide.hasClass('swiper-lazy-loaded') && !slide.hasClass('swiper-lazy-loading')){img.add(slide[0]);}if(img.length === 0)return;img.each(function(){var _img=$(this);_img.addClass('swiper-lazy-loading');var background=_img.attr('data-background');var src=_img.attr('data-src');s.loadImage(_img[0],src || background,false,function(){if(background){_img.css('background-image','url(' + background + ')');_img.removeAttr('data-background');}else {_img.attr('src',src);_img.removeAttr('data-src');}_img.addClass('swiper-lazy-loaded').removeClass('swiper-lazy-loading');slide.find('.swiper-lazy-preloader, .preloader').remove();if(s.params.loop && loadInDuplicate){var slideOriginalIndex=slide.attr('data-swiper-slide-index');if(slide.hasClass(s.params.slideDuplicateClass)){var originalSlide=s.wrapper.children('[data-swiper-slide-index="' + slideOriginalIndex + '"]:not(.' + s.params.slideDuplicateClass + ')');s.lazy.loadImageInSlide(originalSlide.index(),false);}else {var duplicatedSlide=s.wrapper.children('.' + s.params.slideDuplicateClass + '[data-swiper-slide-index="' + slideOriginalIndex + '"]');s.lazy.loadImageInSlide(duplicatedSlide.index(),false);}}s.emit('onLazyImageReady',s,slide[0],_img[0]);});s.emit('onLazyImageLoad',s,slide[0],_img[0]);});},load:function load(){var i;if(s.params.watchSlidesVisibility){s.wrapper.children('.' + s.params.slideVisibleClass).each(function(){s.lazy.loadImageInSlide($(this).index());});}else {if(s.params.slidesPerView > 1){for(i = s.activeIndex;i < s.activeIndex + s.params.slidesPerView;i++) {if(s.slides[i])s.lazy.loadImageInSlide(i);}}else {s.lazy.loadImageInSlide(s.activeIndex);}}if(s.params.lazyLoadingInPrevNext){if(s.params.slidesPerView > 1){ // Next Slides
	for(i = s.activeIndex + s.params.slidesPerView;i < s.activeIndex + s.params.slidesPerView + s.params.slidesPerView;i++) {if(s.slides[i])s.lazy.loadImageInSlide(i);} // Prev Slides
	for(i = s.activeIndex - s.params.slidesPerView;i < s.activeIndex;i++) {if(s.slides[i])s.lazy.loadImageInSlide(i);}}else {var nextSlide=s.wrapper.children('.' + s.params.slideNextClass);if(nextSlide.length > 0)s.lazy.loadImageInSlide(nextSlide.index());var prevSlide=s.wrapper.children('.' + s.params.slidePrevClass);if(prevSlide.length > 0)s.lazy.loadImageInSlide(prevSlide.index());}}},onTransitionStart:function onTransitionStart(){if(s.params.lazyLoading){if(s.params.lazyLoadingOnTransitionStart || !s.params.lazyLoadingOnTransitionStart && !s.lazy.initialImageLoaded){s.lazy.load();}}},onTransitionEnd:function onTransitionEnd(){if(s.params.lazyLoading && !s.params.lazyLoadingOnTransitionStart){s.lazy.load();}}}; /*=========================
	      Scrollbar
	      ===========================*/s.scrollbar = {set:function set(){if(!s.params.scrollbar)return;var sb=s.scrollbar;sb.track = $(s.params.scrollbar);sb.drag = sb.track.find('.swiper-scrollbar-drag');if(sb.drag.length === 0){sb.drag = $('<div class="swiper-scrollbar-drag"></div>');sb.track.append(sb.drag);}sb.drag[0].style.width = '';sb.drag[0].style.height = '';sb.trackSize = isH()?sb.track[0].offsetWidth:sb.track[0].offsetHeight;sb.divider = s.size / s.virtualSize;sb.moveDivider = sb.divider * (sb.trackSize / s.size);sb.dragSize = sb.trackSize * sb.divider;if(isH()){sb.drag[0].style.width = sb.dragSize + 'px';}else {sb.drag[0].style.height = sb.dragSize + 'px';}if(sb.divider >= 1){sb.track[0].style.display = 'none';}else {sb.track[0].style.display = '';}if(s.params.scrollbarHide){sb.track[0].style.opacity = 0;}},setTranslate:function setTranslate(){if(!s.params.scrollbar)return;var diff;var sb=s.scrollbar;var translate=s.translate || 0;var newPos;var newSize=sb.dragSize;newPos = (sb.trackSize - sb.dragSize) * s.progress;if(s.rtl && isH()){newPos = -newPos;if(newPos > 0){newSize = sb.dragSize - newPos;newPos = 0;}else if(-newPos + sb.dragSize > sb.trackSize){newSize = sb.trackSize + newPos;}}else {if(newPos < 0){newSize = sb.dragSize + newPos;newPos = 0;}else if(newPos + sb.dragSize > sb.trackSize){newSize = sb.trackSize - newPos;}}if(isH()){if(s.support.transforms3d){sb.drag.transform('translate3d(' + newPos + 'px, 0, 0)');}else {sb.drag.transform('translateX(' + newPos + 'px)');}sb.drag[0].style.width = newSize + 'px';}else {if(s.support.transforms3d){sb.drag.transform('translate3d(0px, ' + newPos + 'px, 0)');}else {sb.drag.transform('translateY(' + newPos + 'px)');}sb.drag[0].style.height = newSize + 'px';}if(s.params.scrollbarHide){clearTimeout(sb.timeout);sb.track[0].style.opacity = 1;sb.timeout = setTimeout(function(){sb.track[0].style.opacity = 0;sb.track.transition(400);},1000);}},setTransition:function setTransition(duration){if(!s.params.scrollbar)return;s.scrollbar.drag.transition(duration);}}; /*=========================
	      Controller
	      ===========================*/s.controller = {LinearSpline:function LinearSpline(x,y){this.x = x;this.y = y;this.lastIndex = x.length - 1; // Given an x value (x2), return the expected y2 value:
	// (x1,y1) is the known point before given value,
	// (x3,y3) is the known point after given value.
	var i1,i3;var l=this.x.length;this.interpolate = function(x2){if(!x2)return 0; // Get the indexes of x1 and x3 (the array indexes before and after given x2):
	i3 = binarySearch(this.x,x2);i1 = i3 - 1; // We have our indexes i1 & i3, so we can calculate already:
	// y2 := ((x2âˆ’x1) Ã— (y3âˆ’y1)) Ã· (x3âˆ’x1) + y1
	return (x2 - this.x[i1]) * (this.y[i3] - this.y[i1]) / (this.x[i3] - this.x[i1]) + this.y[i1];};var binarySearch=(function(){var maxIndex,minIndex,guess;return function(array,val){minIndex = -1;maxIndex = array.length;while(maxIndex - minIndex > 1) if(array[guess = maxIndex + minIndex >> 1] <= val){minIndex = guess;}else {maxIndex = guess;}return maxIndex;};})();}, //xxx: for now i will just save one spline function to to
	getInterpolateFunction:function getInterpolateFunction(c){if(!s.controller.spline)s.controller.spline = s.params.loop?new s.controller.LinearSpline(s.slidesGrid,c.slidesGrid):new s.controller.LinearSpline(s.snapGrid,c.snapGrid);},setTranslate:function setTranslate(translate,byController){var controlled=s.params.control;var multiplier,controlledTranslate;function setControlledTranslate(c){ // this will create an Interpolate function based on the snapGrids
	// x is the Grid of the scrolled scroller and y will be the controlled scroller
	// it makes sense to create this only once and recall it for the interpolation
	// the function does a lot of value caching for performance
	translate = c.rtl && c.params.direction === 'horizontal'?-s.translate:s.translate;if(s.params.controlBy === 'slide'){s.controller.getInterpolateFunction(c); // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid
	// but it did not work out
	controlledTranslate = -s.controller.spline.interpolate(-translate);}if(!controlledTranslate || s.params.controlBy === 'container'){multiplier = (c.maxTranslate() - c.minTranslate()) / (s.maxTranslate() - s.minTranslate());controlledTranslate = (translate - s.minTranslate()) * multiplier + c.minTranslate();}if(s.params.controlInverse){controlledTranslate = c.maxTranslate() - controlledTranslate;}c.updateProgress(controlledTranslate);c.setWrapperTranslate(controlledTranslate,false,s);c.updateActiveIndex();}if(s.isArray(controlled)){for(var i=0;i < controlled.length;i++) {if(controlled[i] !== byController && controlled[i] instanceof Swiper){setControlledTranslate(controlled[i]);}}}else if(controlled instanceof Swiper && byController !== controlled){setControlledTranslate(controlled);}},setTransition:function setTransition(duration,byController){var controlled=s.params.control;var i;function setControlledTransition(c){c.setWrapperTransition(duration,s);if(duration !== 0){c.onTransitionStart();c.wrapper.transitionEnd(function(){if(!controlled)return;if(c.params.loop && s.params.controlBy === 'slide'){c.fixLoop();}c.onTransitionEnd();});}}if(s.isArray(controlled)){for(i = 0;i < controlled.length;i++) {if(controlled[i] !== byController && controlled[i] instanceof Swiper){setControlledTransition(controlled[i]);}}}else if(controlled instanceof Swiper && byController !== controlled){setControlledTransition(controlled);}}}; /*=========================
	      Hash Navigation
	      ===========================*/s.hashnav = {init:function init(){if(!s.params.hashnav)return;s.hashnav.initialized = true;var hash=document.location.hash.replace('#','');if(!hash)return;var speed=0;for(var i=0,length=s.slides.length;i < length;i++) {var slide=s.slides.eq(i);var slideHash=slide.attr('data-hash');if(slideHash === hash && !slide.hasClass(s.params.slideDuplicateClass)){var index=slide.index();s.slideTo(index,speed,s.params.runCallbacksOnInit,true);}}},setHash:function setHash(){if(!s.hashnav.initialized || !s.params.hashnav)return;document.location.hash = s.slides.eq(s.activeIndex).attr('data-hash') || '';}}; /*=========================
	      Keyboard Control
	      ===========================*/function handleKeyboard(e){if(e.originalEvent)e = e.originalEvent; //jquery fix
	var kc=e.keyCode || e.charCode; // Directions locks
	if(!s.params.allowSwipeToNext && (isH() && kc === 39 || !isH() && kc === 40)){return false;}if(!s.params.allowSwipeToPrev && (isH() && kc === 37 || !isH() && kc === 38)){return false;}if(e.shiftKey || e.altKey || e.ctrlKey || e.metaKey){return;}if(document.activeElement && document.activeElement.nodeName && (document.activeElement.nodeName.toLowerCase() === 'input' || document.activeElement.nodeName.toLowerCase() === 'textarea')){return;}if(kc === 37 || kc === 39 || kc === 38 || kc === 40){var inView=false; //Check that swiper should be inside of visible area of window
	if(s.container.parents('.swiper-slide').length > 0 && s.container.parents('.swiper-slide-active').length === 0){return;}var windowScroll={left:window.pageXOffset,top:window.pageYOffset};var windowWidth=window.innerWidth;var windowHeight=window.innerHeight;var swiperOffset=s.container.offset();if(s.rtl)swiperOffset.left = swiperOffset.left - s.container[0].scrollLeft;var swiperCoord=[[swiperOffset.left,swiperOffset.top],[swiperOffset.left + s.width,swiperOffset.top],[swiperOffset.left,swiperOffset.top + s.height],[swiperOffset.left + s.width,swiperOffset.top + s.height]];for(var i=0;i < swiperCoord.length;i++) {var point=swiperCoord[i];if(point[0] >= windowScroll.left && point[0] <= windowScroll.left + windowWidth && point[1] >= windowScroll.top && point[1] <= windowScroll.top + windowHeight){inView = true;}}if(!inView)return;}if(isH()){if(kc === 37 || kc === 39){if(e.preventDefault)e.preventDefault();else e.returnValue = false;}if(kc === 39 && !s.rtl || kc === 37 && s.rtl)s.slideNext();if(kc === 37 && !s.rtl || kc === 39 && s.rtl)s.slidePrev();}else {if(kc === 38 || kc === 40){if(e.preventDefault)e.preventDefault();else e.returnValue = false;}if(kc === 40)s.slideNext();if(kc === 38)s.slidePrev();}}s.disableKeyboardControl = function(){$(document).off('keydown',handleKeyboard);};s.enableKeyboardControl = function(){$(document).on('keydown',handleKeyboard);}; /*=========================
	      Mousewheel Control
	      ===========================*/s.mousewheel = {event:false,lastScrollTime:new window.Date().getTime()};if(s.params.mousewheelControl){try{new window.WheelEvent('wheel');s.mousewheel.event = 'wheel';}catch(e) {}if(!s.mousewheel.event && document.onmousewheel !== undefined){s.mousewheel.event = 'mousewheel';}if(!s.mousewheel.event){s.mousewheel.event = 'DOMMouseScroll';}}function handleMousewheel(e){if(e.originalEvent)e = e.originalEvent; //jquery fix
	var we=s.mousewheel.event;var delta=0; //Opera & IE
	if(e.detail)delta = -e.detail;else if(we === 'mousewheel'){if(s.params.mousewheelForceToAxis){if(isH()){if(Math.abs(e.wheelDeltaX) > Math.abs(e.wheelDeltaY))delta = e.wheelDeltaX;else return;}else {if(Math.abs(e.wheelDeltaY) > Math.abs(e.wheelDeltaX))delta = e.wheelDeltaY;else return;}}else {delta = e.wheelDelta;}}else if(we === 'DOMMouseScroll')delta = -e.detail;else if(we === 'wheel'){if(s.params.mousewheelForceToAxis){if(isH()){if(Math.abs(e.deltaX) > Math.abs(e.deltaY))delta = -e.deltaX;else return;}else {if(Math.abs(e.deltaY) > Math.abs(e.deltaX))delta = -e.deltaY;else return;}}else {delta = Math.abs(e.deltaX) > Math.abs(e.deltaY)?-e.deltaX:-e.deltaY;}}if(s.params.mousewheelInvert)delta = -delta;if(!s.params.freeMode){if(new window.Date().getTime() - s.mousewheel.lastScrollTime > 60){if(delta < 0){if((!s.isEnd || s.params.loop) && !s.animating)s.slideNext();else if(s.params.mousewheelReleaseOnEdges)return true;}else {if((!s.isBeginning || s.params.loop) && !s.animating)s.slidePrev();else if(s.params.mousewheelReleaseOnEdges)return true;}}s.mousewheel.lastScrollTime = new window.Date().getTime();}else { //Freemode or scrollContainer:
	var position=s.getWrapperTranslate() + delta * s.params.mousewheelSensitivity;if(position > 0)position = 0;if(position < s.maxTranslate())position = s.maxTranslate();s.setWrapperTransition(0);s.setWrapperTranslate(position);s.updateProgress();s.updateActiveIndex();if(s.params.freeModeSticky){clearTimeout(s.mousewheel.timeout);s.mousewheel.timeout = setTimeout(function(){s.slideReset();},300);} // Return page scroll on edge positions
	if(position === 0 || position === s.maxTranslate())return;}if(s.params.autoplay)s.stopAutoplay();if(e.preventDefault)e.preventDefault();else e.returnValue = false;return false;}s.disableMousewheelControl = function(){if(!s.mousewheel.event)return false;s.container.off(s.mousewheel.event,handleMousewheel);return true;};s.enableMousewheelControl = function(){if(!s.mousewheel.event)return false;s.container.on(s.mousewheel.event,handleMousewheel);return true;}; /*=========================
	      Parallax
	      ===========================*/function setParallaxTransform(el,progress){el = $(el);var p,pX,pY;p = el.attr('data-swiper-parallax') || '0';pX = el.attr('data-swiper-parallax-x');pY = el.attr('data-swiper-parallax-y');if(pX || pY){pX = pX || '0';pY = pY || '0';}else {if(isH()){pX = p;pY = '0';}else {pY = p;pX = '0';}}if(pX.indexOf('%') >= 0){pX = parseInt(pX,10) * progress + '%';}else {pX = pX * progress + 'px';}if(pY.indexOf('%') >= 0){pY = parseInt(pY,10) * progress + '%';}else {pY = pY * progress + 'px';}el.transform('translate3d(' + pX + ', ' + pY + ',0px)');}s.parallax = {setTranslate:function setTranslate(){s.container.children('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]').each(function(){setParallaxTransform(this,s.progress);});s.slides.each(function(){var slide=$(this);slide.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]').each(function(){var progress=Math.min(Math.max(slide[0].progress,-1),1);setParallaxTransform(this,progress);});});},setTransition:function setTransition(duration){if(typeof duration === 'undefined')duration = s.params.speed;s.container.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]').each(function(){var el=$(this);var parallaxDuration=parseInt(el.attr('data-swiper-parallax-duration'),10) || duration;if(duration === 0)parallaxDuration = 0;el.transition(parallaxDuration);});}}; /*=========================
	      Plugins API. Collect all and init all plugins
	      ===========================*/s._plugins = [];for(var plugin in s.plugins) {var p=s.plugins[plugin](s,s.params[plugin]);if(p)s._plugins.push(p);} // Method to call all plugins event/method
	s.callPlugins = function(eventName){for(var i=0;i < s._plugins.length;i++) {if(eventName in s._plugins[i]){s._plugins[i][eventName](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);}}}; /*=========================
	      Events/Callbacks/Plugins Emitter
	      ===========================*/function normalizeEventName(eventName){if(eventName.indexOf('on') !== 0){if(eventName[0] !== eventName[0].toUpperCase()){eventName = 'on' + eventName[0].toUpperCase() + eventName.substring(1);}else {eventName = 'on' + eventName;}}return eventName;}s.emitterEventListeners = {};s.emit = function(eventName){ // Trigger callbacks
	if(s.params[eventName]){s.params[eventName](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);}var i; // Trigger events
	if(s.emitterEventListeners[eventName]){for(i = 0;i < s.emitterEventListeners[eventName].length;i++) {s.emitterEventListeners[eventName][i](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);}} // Trigger plugins
	if(s.callPlugins)s.callPlugins(eventName,arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);};s.on = function(eventName,handler){eventName = normalizeEventName(eventName);if(!s.emitterEventListeners[eventName])s.emitterEventListeners[eventName] = [];s.emitterEventListeners[eventName].push(handler);return s;};s.off = function(eventName,handler){var i;eventName = normalizeEventName(eventName);if(typeof handler === 'undefined'){ // Remove all handlers for such event
	s.emitterEventListeners[eventName] = [];return s;}if(!s.emitterEventListeners[eventName] || s.emitterEventListeners[eventName].length === 0)return;for(i = 0;i < s.emitterEventListeners[eventName].length;i++) {if(s.emitterEventListeners[eventName][i] === handler)s.emitterEventListeners[eventName].splice(i,1);}return s;};s.once = function(eventName,handler){eventName = normalizeEventName(eventName);var _handler=function _handler(){handler(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]);s.off(eventName,_handler);};s.on(eventName,_handler);return s;}; // Accessibility tools
	s.a11y = {makeFocusable:function makeFocusable($el){$el.attr('tabIndex','0');return $el;},addRole:function addRole($el,role){$el.attr('role',role);return $el;},addLabel:function addLabel($el,label){$el.attr('aria-label',label);return $el;},disable:function disable($el){$el.attr('aria-disabled',true);return $el;},enable:function enable($el){$el.attr('aria-disabled',false);return $el;},onEnterKey:function onEnterKey(event){if(event.keyCode !== 13)return;if($(event.target).is(s.params.nextButton)){s.onClickNext(event);if(s.isEnd){s.a11y.notify(s.params.lastSlideMessage);}else {s.a11y.notify(s.params.nextSlideMessage);}}else if($(event.target).is(s.params.prevButton)){s.onClickPrev(event);if(s.isBeginning){s.a11y.notify(s.params.firstSlideMessage);}else {s.a11y.notify(s.params.prevSlideMessage);}}if($(event.target).is('.' + s.params.bulletClass)){$(event.target)[0].click();}},liveRegion:$('<span class="swiper-notification" aria-live="assertive" aria-atomic="true"></span>'),notify:function notify(message){var notification=s.a11y.liveRegion;if(notification.length === 0)return;notification.html('');notification.html(message);},init:function init(){ // Setup accessibility
	if(s.params.nextButton){var nextButton=$(s.params.nextButton);s.a11y.makeFocusable(nextButton);s.a11y.addRole(nextButton,'button');s.a11y.addLabel(nextButton,s.params.nextSlideMessage);}if(s.params.prevButton){var prevButton=$(s.params.prevButton);s.a11y.makeFocusable(prevButton);s.a11y.addRole(prevButton,'button');s.a11y.addLabel(prevButton,s.params.prevSlideMessage);}$(s.container).append(s.a11y.liveRegion);},initPagination:function initPagination(){if(s.params.pagination && s.params.paginationClickable && s.bullets && s.bullets.length){s.bullets.each(function(){var bullet=$(this);s.a11y.makeFocusable(bullet);s.a11y.addRole(bullet,'button');s.a11y.addLabel(bullet,s.params.paginationBulletMessage.replace(/{{index}}/,bullet.index() + 1));});}},destroy:function destroy(){if(s.a11y.liveRegion && s.a11y.liveRegion.length > 0)s.a11y.liveRegion.remove();}}; /*=========================
	      Init/Destroy
	      ===========================*/s.init = function(){if(s.params.loop)s.createLoop();s.updateContainerSize();s.updateSlidesSize();s.updatePagination();if(s.params.scrollbar && s.scrollbar){s.scrollbar.set();}if(s.params.effect !== 'slide' && s.effects[s.params.effect]){if(!s.params.loop)s.updateProgress();s.effects[s.params.effect].setTranslate();}if(s.params.loop){s.slideTo(s.params.initialSlide + s.loopedSlides,0,s.params.runCallbacksOnInit);}else {s.slideTo(s.params.initialSlide,0,s.params.runCallbacksOnInit);if(s.params.initialSlide === 0){if(s.parallax && s.params.parallax)s.parallax.setTranslate();if(s.lazy && s.params.lazyLoading){s.lazy.load();s.lazy.initialImageLoaded = true;}}}s.attachEvents();if(s.params.observer && s.support.observer){s.initObservers();}if(s.params.preloadImages && !s.params.lazyLoading){s.preloadImages();}if(s.params.autoplay){s.startAutoplay();}if(s.params.keyboardControl){if(s.enableKeyboardControl)s.enableKeyboardControl();}if(s.params.mousewheelControl){if(s.enableMousewheelControl)s.enableMousewheelControl();}if(s.params.hashnav){if(s.hashnav)s.hashnav.init();}if(s.params.a11y && s.a11y)s.a11y.init();s.emit('onInit',s);}; // Cleanup dynamic styles
	s.cleanupStyles = function(){ // Container
	s.container.removeClass(s.classNames.join(' ')).removeAttr('style'); // Wrapper
	s.wrapper.removeAttr('style'); // Slides
	if(s.slides && s.slides.length){s.slides.removeClass([s.params.slideVisibleClass,s.params.slideActiveClass,s.params.slideNextClass,s.params.slidePrevClass].join(' ')).removeAttr('style').removeAttr('data-swiper-column').removeAttr('data-swiper-row');} // Pagination/Bullets
	if(s.paginationContainer && s.paginationContainer.length){s.paginationContainer.removeClass(s.params.paginationHiddenClass);}if(s.bullets && s.bullets.length){s.bullets.removeClass(s.params.bulletActiveClass);} // Buttons
	if(s.params.prevButton)$(s.params.prevButton).removeClass(s.params.buttonDisabledClass);if(s.params.nextButton)$(s.params.nextButton).removeClass(s.params.buttonDisabledClass); // Scrollbar
	if(s.params.scrollbar && s.scrollbar){if(s.scrollbar.track && s.scrollbar.track.length)s.scrollbar.track.removeAttr('style');if(s.scrollbar.drag && s.scrollbar.drag.length)s.scrollbar.drag.removeAttr('style');}}; // Destroy
	s.destroy = function(deleteInstance,cleanupStyles){ // Detach evebts
	s.detachEvents(); // Stop autoplay
	s.stopAutoplay(); // Destroy loop
	if(s.params.loop){s.destroyLoop();} // Cleanup styles
	if(cleanupStyles){s.cleanupStyles();} // Disconnect observer
	s.disconnectObservers(); // Disable keyboard/mousewheel
	if(s.params.keyboardControl){if(s.disableKeyboardControl)s.disableKeyboardControl();}if(s.params.mousewheelControl){if(s.disableMousewheelControl)s.disableMousewheelControl();} // Disable a11y
	if(s.params.a11y && s.a11y)s.a11y.destroy(); // Destroy callback
	s.emit('onDestroy'); // Delete instance
	if(deleteInstance !== false)s = null;};s.init(); // Return swiper instance
	return s;}; /*==================================================
	    Prototype
	====================================================*/Swiper.prototype = {isSafari:(function(){var ua=navigator.userAgent.toLowerCase();return ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0;})(),isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(navigator.userAgent),isArray:function isArray(arr){return Object.prototype.toString.apply(arr) === '[object Array]';}, /*==================================================
	    Browser
	    ====================================================*/browser:{ie:window.navigator.pointerEnabled || window.navigator.msPointerEnabled,ieTouch:window.navigator.msPointerEnabled && window.navigator.msMaxTouchPoints > 1 || window.navigator.pointerEnabled && window.navigator.maxTouchPoints > 1}, /*==================================================
	    Devices
	    ====================================================*/device:(function(){var ua=navigator.userAgent;var android=ua.match(/(Android);?[\s\/]+([\d.]+)?/);var ipad=ua.match(/(iPad).*OS\s([\d_]+)/);var ipod=ua.match(/(iPod)(.*OS\s([\d_]+))?/);var iphone=!ipad && ua.match(/(iPhone\sOS)\s([\d_]+)/);return {ios:ipad || iphone || ipod,android:android};})(), /*==================================================
	    Feature Detection
	    ====================================================*/support:{touch:window.Modernizr && Modernizr.touch === true || (function(){return !!('ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch);})(),transforms3d:window.Modernizr && Modernizr.csstransforms3d === true || (function(){var div=document.createElement('div').style;return 'webkitPerspective' in div || 'MozPerspective' in div || 'OPerspective' in div || 'MsPerspective' in div || 'perspective' in div;})(),flexbox:(function(){var div=document.createElement('div').style;var styles='alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient'.split(' ');for(var i=0;i < styles.length;i++) {if(styles[i] in div)return true;}})(),observer:(function(){return 'MutationObserver' in window || 'WebkitMutationObserver' in window;})()}, /*==================================================
	    Plugins
	    ====================================================*/plugins:{}}; /*===========================
	Dom7 Library
	===========================*/var Dom7=(function(){var Dom7=function Dom7(arr){var _this=this,i=0; // Create array-like object
	for(i = 0;i < arr.length;i++) {_this[i] = arr[i];}_this.length = arr.length; // Return collection with methods
	return this;};var $=function $(selector,context){var arr=[],i=0;if(selector && !context){if(selector instanceof Dom7){return selector;}}if(selector){ // String
	if(typeof selector === 'string'){var els,tempParent,html=selector.trim();if(html.indexOf('<') >= 0 && html.indexOf('>') >= 0){var toCreate='div';if(html.indexOf('<li') === 0)toCreate = 'ul';if(html.indexOf('<tr') === 0)toCreate = 'tbody';if(html.indexOf('<td') === 0 || html.indexOf('<th') === 0)toCreate = 'tr';if(html.indexOf('<tbody') === 0)toCreate = 'table';if(html.indexOf('<option') === 0)toCreate = 'select';tempParent = document.createElement(toCreate);tempParent.innerHTML = selector;for(i = 0;i < tempParent.childNodes.length;i++) {arr.push(tempParent.childNodes[i]);}}else {if(!context && selector[0] === '#' && !selector.match(/[ .<>:~]/)){ // Pure ID selector
	els = [document.getElementById(selector.split('#')[1])];}else { // Other selectors
	els = (context || document).querySelectorAll(selector);}for(i = 0;i < els.length;i++) {if(els[i])arr.push(els[i]);}}}else if(selector.nodeType || selector === window || selector === document){arr.push(selector);}else if(selector.length > 0 && selector[0].nodeType){for(i = 0;i < selector.length;i++) {arr.push(selector[i]);}}}return new Dom7(arr);};Dom7.prototype = { // Classes and attriutes
	addClass:function addClass(className){if(typeof className === 'undefined'){return this;}var classes=className.split(' ');for(var i=0;i < classes.length;i++) {for(var j=0;j < this.length;j++) {this[j].classList.add(classes[i]);}}return this;},removeClass:function removeClass(className){var classes=className.split(' ');for(var i=0;i < classes.length;i++) {for(var j=0;j < this.length;j++) {this[j].classList.remove(classes[i]);}}return this;},hasClass:function hasClass(className){if(!this[0])return false;else return this[0].classList.contains(className);},toggleClass:function toggleClass(className){var classes=className.split(' ');for(var i=0;i < classes.length;i++) {for(var j=0;j < this.length;j++) {this[j].classList.toggle(classes[i]);}}return this;},attr:function attr(attrs,value){if(arguments.length === 1 && typeof attrs === 'string'){ // Get attr
	if(this[0])return this[0].getAttribute(attrs);else return undefined;}else { // Set attrs
	for(var i=0;i < this.length;i++) {if(arguments.length === 2){ // String
	this[i].setAttribute(attrs,value);}else { // Object
	for(var attrName in attrs) {this[i][attrName] = attrs[attrName];this[i].setAttribute(attrName,attrs[attrName]);}}}return this;}},removeAttr:function removeAttr(attr){for(var i=0;i < this.length;i++) {this[i].removeAttribute(attr);}return this;},data:function data(key,value){if(typeof value === 'undefined'){ // Get value
	if(this[0]){var dataKey=this[0].getAttribute('data-' + key);if(dataKey)return dataKey;else if(this[0].dom7ElementDataStorage && key in this[0].dom7ElementDataStorage)return this[0].dom7ElementDataStorage[key];else return undefined;}else return undefined;}else { // Set value
	for(var i=0;i < this.length;i++) {var el=this[i];if(!el.dom7ElementDataStorage)el.dom7ElementDataStorage = {};el.dom7ElementDataStorage[key] = value;}return this;}}, // Transforms
	transform:function transform(_transform){for(var i=0;i < this.length;i++) {var elStyle=this[i].style;elStyle.webkitTransform = elStyle.MsTransform = elStyle.msTransform = elStyle.MozTransform = elStyle.OTransform = elStyle.transform = _transform;}return this;},transition:function transition(duration){if(typeof duration !== 'string'){duration = duration + 'ms';}for(var i=0;i < this.length;i++) {var elStyle=this[i].style;elStyle.webkitTransitionDuration = elStyle.MsTransitionDuration = elStyle.msTransitionDuration = elStyle.MozTransitionDuration = elStyle.OTransitionDuration = elStyle.transitionDuration = duration;}return this;}, //Events
	on:function on(eventName,targetSelector,listener,capture){function handleLiveEvent(e){var target=e.target;if($(target).is(targetSelector))listener.call(target,e);else {var parents=$(target).parents();for(var k=0;k < parents.length;k++) {if($(parents[k]).is(targetSelector))listener.call(parents[k],e);}}}var events=eventName.split(' ');var i,j;for(i = 0;i < this.length;i++) {if(typeof targetSelector === 'function' || targetSelector === false){ // Usual events
	if(typeof targetSelector === 'function'){listener = arguments[1];capture = arguments[2] || false;}for(j = 0;j < events.length;j++) {this[i].addEventListener(events[j],listener,capture);}}else { //Live events
	for(j = 0;j < events.length;j++) {if(!this[i].dom7LiveListeners)this[i].dom7LiveListeners = [];this[i].dom7LiveListeners.push({listener:listener,liveListener:handleLiveEvent});this[i].addEventListener(events[j],handleLiveEvent,capture);}}}return this;},off:function off(eventName,targetSelector,listener,capture){var events=eventName.split(' ');for(var i=0;i < events.length;i++) {for(var j=0;j < this.length;j++) {if(typeof targetSelector === 'function' || targetSelector === false){ // Usual events
	if(typeof targetSelector === 'function'){listener = arguments[1];capture = arguments[2] || false;}this[j].removeEventListener(events[i],listener,capture);}else { // Live event
	if(this[j].dom7LiveListeners){for(var k=0;k < this[j].dom7LiveListeners.length;k++) {if(this[j].dom7LiveListeners[k].listener === listener){this[j].removeEventListener(events[i],this[j].dom7LiveListeners[k].liveListener,capture);}}}}}}return this;},once:function once(eventName,targetSelector,listener,capture){var dom=this;if(typeof targetSelector === 'function'){targetSelector = false;listener = arguments[1];capture = arguments[2];}function proxy(e){listener(e);dom.off(eventName,targetSelector,proxy,capture);}dom.on(eventName,targetSelector,proxy,capture);},trigger:function trigger(eventName,eventData){for(var i=0;i < this.length;i++) {var evt;try{evt = new window.CustomEvent(eventName,{detail:eventData,bubbles:true,cancelable:true});}catch(e) {evt = document.createEvent('Event');evt.initEvent(eventName,true,true);evt.detail = eventData;}this[i].dispatchEvent(evt);}return this;},transitionEnd:function transitionEnd(callback){var events=['webkitTransitionEnd','transitionend','oTransitionEnd','MSTransitionEnd','msTransitionEnd'],i,j,dom=this;function fireCallBack(e){ /*jshint validthis:true */if(e.target !== this)return;callback.call(this,e);for(i = 0;i < events.length;i++) {dom.off(events[i],fireCallBack);}}if(callback){for(i = 0;i < events.length;i++) {dom.on(events[i],fireCallBack);}}return this;}, // Sizing/Styles
	width:function width(){if(this[0] === window){return window.innerWidth;}else {if(this.length > 0){return parseFloat(this.css('width'));}else {return null;}}},outerWidth:function outerWidth(includeMargins){if(this.length > 0){if(includeMargins)return this[0].offsetWidth + parseFloat(this.css('margin-right')) + parseFloat(this.css('margin-left'));else return this[0].offsetWidth;}else return null;},height:function height(){if(this[0] === window){return window.innerHeight;}else {if(this.length > 0){return parseFloat(this.css('height'));}else {return null;}}},outerHeight:function outerHeight(includeMargins){if(this.length > 0){if(includeMargins)return this[0].offsetHeight + parseFloat(this.css('margin-top')) + parseFloat(this.css('margin-bottom'));else return this[0].offsetHeight;}else return null;},offset:function offset(){if(this.length > 0){var el=this[0];var box=el.getBoundingClientRect();var body=document.body;var clientTop=el.clientTop || body.clientTop || 0;var clientLeft=el.clientLeft || body.clientLeft || 0;var scrollTop=window.pageYOffset || el.scrollTop;var scrollLeft=window.pageXOffset || el.scrollLeft;return {top:box.top + scrollTop - clientTop,left:box.left + scrollLeft - clientLeft};}else {return null;}},css:function css(props,value){var i;if(arguments.length === 1){if(typeof props === 'string'){if(this[0])return window.getComputedStyle(this[0],null).getPropertyValue(props);}else {for(i = 0;i < this.length;i++) {for(var prop in props) {this[i].style[prop] = props[prop];}}return this;}}if(arguments.length === 2 && typeof props === 'string'){for(i = 0;i < this.length;i++) {this[i].style[props] = value;}return this;}return this;}, //Dom manipulation
	each:function each(callback){for(var i=0;i < this.length;i++) {callback.call(this[i],i,this[i]);}return this;},html:function html(_html){if(typeof _html === 'undefined'){return this[0]?this[0].innerHTML:undefined;}else {for(var i=0;i < this.length;i++) {this[i].innerHTML = _html;}return this;}},is:function is(selector){if(!this[0])return false;var compareWith,i;if(typeof selector === 'string'){var el=this[0];if(el === document)return selector === document;if(el === window)return selector === window;if(el.matches)return el.matches(selector);else if(el.webkitMatchesSelector)return el.webkitMatchesSelector(selector);else if(el.mozMatchesSelector)return el.mozMatchesSelector(selector);else if(el.msMatchesSelector)return el.msMatchesSelector(selector);else {compareWith = $(selector);for(i = 0;i < compareWith.length;i++) {if(compareWith[i] === this[0])return true;}return false;}}else if(selector === document)return this[0] === document;else if(selector === window)return this[0] === window;else {if(selector.nodeType || selector instanceof Dom7){compareWith = selector.nodeType?[selector]:selector;for(i = 0;i < compareWith.length;i++) {if(compareWith[i] === this[0])return true;}return false;}return false;}},index:function index(){if(this[0]){var child=this[0];var i=0;while((child = child.previousSibling) !== null) {if(child.nodeType === 1)i++;}return i;}else return undefined;},eq:function eq(index){if(typeof index === 'undefined')return this;var length=this.length;var returnIndex;if(index > length - 1){return new Dom7([]);}if(index < 0){returnIndex = length + index;if(returnIndex < 0)return new Dom7([]);else return new Dom7([this[returnIndex]]);}return new Dom7([this[index]]);},append:function append(newChild){var i,j;for(i = 0;i < this.length;i++) {if(typeof newChild === 'string'){var tempDiv=document.createElement('div');tempDiv.innerHTML = newChild;while(tempDiv.firstChild) {this[i].appendChild(tempDiv.firstChild);}}else if(newChild instanceof Dom7){for(j = 0;j < newChild.length;j++) {this[i].appendChild(newChild[j]);}}else {this[i].appendChild(newChild);}}return this;},prepend:function prepend(newChild){var i,j;for(i = 0;i < this.length;i++) {if(typeof newChild === 'string'){var tempDiv=document.createElement('div');tempDiv.innerHTML = newChild;for(j = tempDiv.childNodes.length - 1;j >= 0;j--) {this[i].insertBefore(tempDiv.childNodes[j],this[i].childNodes[0]);}}else if(newChild instanceof Dom7){for(j = 0;j < newChild.length;j++) {this[i].insertBefore(newChild[j],this[i].childNodes[0]);}}else {this[i].insertBefore(newChild,this[i].childNodes[0]);}}return this;},insertBefore:function insertBefore(selector){var before=$(selector);for(var i=0;i < this.length;i++) {if(before.length === 1){before[0].parentNode.insertBefore(this[i],before[0]);}else if(before.length > 1){for(var j=0;j < before.length;j++) {before[j].parentNode.insertBefore(this[i].cloneNode(true),before[j]);}}}},insertAfter:function insertAfter(selector){var after=$(selector);for(var i=0;i < this.length;i++) {if(after.length === 1){after[0].parentNode.insertBefore(this[i],after[0].nextSibling);}else if(after.length > 1){for(var j=0;j < after.length;j++) {after[j].parentNode.insertBefore(this[i].cloneNode(true),after[j].nextSibling);}}}},next:function next(selector){if(this.length > 0){if(selector){if(this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector))return new Dom7([this[0].nextElementSibling]);else return new Dom7([]);}else {if(this[0].nextElementSibling)return new Dom7([this[0].nextElementSibling]);else return new Dom7([]);}}else return new Dom7([]);},nextAll:function nextAll(selector){var nextEls=[];var el=this[0];if(!el)return new Dom7([]);while(el.nextElementSibling) {var next=el.nextElementSibling;if(selector){if($(next).is(selector))nextEls.push(next);}else nextEls.push(next);el = next;}return new Dom7(nextEls);},prev:function prev(selector){if(this.length > 0){if(selector){if(this[0].previousElementSibling && $(this[0].previousElementSibling).is(selector))return new Dom7([this[0].previousElementSibling]);else return new Dom7([]);}else {if(this[0].previousElementSibling)return new Dom7([this[0].previousElementSibling]);else return new Dom7([]);}}else return new Dom7([]);},prevAll:function prevAll(selector){var prevEls=[];var el=this[0];if(!el)return new Dom7([]);while(el.previousElementSibling) {var prev=el.previousElementSibling;if(selector){if($(prev).is(selector))prevEls.push(prev);}else prevEls.push(prev);el = prev;}return new Dom7(prevEls);},parent:function parent(selector){var parents=[];for(var i=0;i < this.length;i++) {if(selector){if($(this[i].parentNode).is(selector))parents.push(this[i].parentNode);}else {parents.push(this[i].parentNode);}}return $($.unique(parents));},parents:function parents(selector){var parents=[];for(var i=0;i < this.length;i++) {var parent=this[i].parentNode;while(parent) {if(selector){if($(parent).is(selector))parents.push(parent);}else {parents.push(parent);}parent = parent.parentNode;}}return $($.unique(parents));},find:function find(selector){var foundElements=[];for(var i=0;i < this.length;i++) {var found=this[i].querySelectorAll(selector);for(var j=0;j < found.length;j++) {foundElements.push(found[j]);}}return new Dom7(foundElements);},children:function children(selector){var children=[];for(var i=0;i < this.length;i++) {var childNodes=this[i].childNodes;for(var j=0;j < childNodes.length;j++) {if(!selector){if(childNodes[j].nodeType === 1)children.push(childNodes[j]);}else {if(childNodes[j].nodeType === 1 && $(childNodes[j]).is(selector))children.push(childNodes[j]);}}}return new Dom7($.unique(children));},remove:function remove(){for(var i=0;i < this.length;i++) {if(this[i].parentNode)this[i].parentNode.removeChild(this[i]);}return this;},add:function add(){var dom=this;var i,j;for(i = 0;i < arguments.length;i++) {var toAdd=$(arguments[i]);for(j = 0;j < toAdd.length;j++) {dom[dom.length] = toAdd[j];dom.length++;}}return dom;}};$.fn = Dom7.prototype;$.unique = function(arr){var unique=[];for(var i=0;i < arr.length;i++) {if(unique.indexOf(arr[i]) === -1)unique.push(arr[i]);}return unique;};return $;})(); /*===========================
	 Get Dom libraries
	 ===========================*/var swiperDomPlugins=['jQuery','Zepto','Dom7'];for(var i=0;i < swiperDomPlugins.length;i++) {if(window[swiperDomPlugins[i]]){addLibraryPlugin(window[swiperDomPlugins[i]]);}} // Required DOM Plugins
	var domLib;if(typeof Dom7 === 'undefined'){domLib = window.Dom7 || window.Zepto || window.jQuery;}else {domLib = Dom7;} /*===========================
	Add .swiper plugin from Dom libraries
	===========================*/function addLibraryPlugin(lib){lib.fn.swiper = function(params){var firstInstance;lib(this).each(function(){var s=new Swiper(this,params);if(!firstInstance)firstInstance = s;});return firstInstance;};}if(domLib){if(!('transitionEnd' in domLib.fn)){domLib.fn.transitionEnd = function(callback){var events=['webkitTransitionEnd','transitionend','oTransitionEnd','MSTransitionEnd','msTransitionEnd'],i,j,dom=this;function fireCallBack(e){ /*jshint validthis:true */if(e.target !== this)return;callback.call(this,e);for(i = 0;i < events.length;i++) {dom.off(events[i],fireCallBack);}}if(callback){for(i = 0;i < events.length;i++) {dom.on(events[i],fireCallBack);}}return this;};}if(!('transform' in domLib.fn)){domLib.fn.transform = function(transform){for(var i=0;i < this.length;i++) {var elStyle=this[i].style;elStyle.webkitTransform = elStyle.MsTransform = elStyle.msTransform = elStyle.MozTransform = elStyle.OTransform = elStyle.transform = transform;}return this;};}if(!('transition' in domLib.fn)){domLib.fn.transition = function(duration){if(typeof duration !== 'string'){duration = duration + 'ms';}for(var i=0;i < this.length;i++) {var elStyle=this[i].style;elStyle.webkitTransitionDuration = elStyle.MsTransitionDuration = elStyle.msTransitionDuration = elStyle.MozTransitionDuration = elStyle.OTransitionDuration = elStyle.transitionDuration = duration;}return this;};}}

/***/ },
/* 484 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _angular2Angular2 = __webpack_require__(45);

	var _ion = __webpack_require__(462);

	var _appApp = __webpack_require__(434);

	var _appId = __webpack_require__(485);

	var _configConfig = __webpack_require__(437);

	var _platformPlatform = __webpack_require__(438);

	var _navViewController = __webpack_require__(470);

	var _configDecorators = __webpack_require__(458);

	var _iconIcon = __webpack_require__(446);

	/**
	 * _For basic Tabs usage, see the [Tabs section](../../../../components/#tabs)
	 * of the Component docs._
	 *
	 * The Tabs component is a container with a TabBar and any number of
	 * individual Tab components. On iOS, the TabBar is placed on the bottom of
	 * the screen, while on Android it is at the top.
	 *
	 * See the [Tab API reference](../Tab/) for more details on individual Tab components.
	 *
	 * The TabBar is automatically created for you using the
	 * [properties you set on each Tab](../Tab/#tab_properties).
	 *
	 * To override the platform specific TabBar placement, use the
	 * `tabbar-placement` property:
	 *
	 * ```html
	 * <ion-tabs tabbar-placement="top">
	 *   <ion-tab [root]="tabRoot"></ion-tab>
	 * </ion-tabs>
	 * ```
	 *
	 * To change the location of the icons in the TabBar, use the `tabbar-icons`
	 * property:
	 * ```html
	 * <ion-tabs tabbar-icons="bottom">
	 *   <ion-tab [root]="tabRoot"></ion-tab>
	 * </ion-tabs>
	 * ```
	 *
	 * You can select tabs programatically by injecting Tabs into any child
	 * component, and using the [select()](#select) method:
	 * ```ts
	 * @Page({
	 *   template: `<button (click)="goToTabTwo()">Go to Tab2</button>`
	 * })
	 * class TabOne {
	 *   constructor(tabs: Tabs){
	 *     this.tabs = tabs;
	 *   }
	 *
	 *   goToTabTwo() {
	 *     this.tabs.select(this.tabs.tabs[1]);
	 *   }
	 * }
	 * ```
	 * The [tabs](#tabs) property is an array of all child [Tab](../Tab/) components
	 * of that Tabs component.
	 *
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = undefined && undefined.__param || function (paramIndex, decorator) {
	    return function (target, key) {
	        decorator(target, key, paramIndex);
	    };
	};
	var Tabs = (function (_Ion) {
	    _inherits(Tabs, _Ion);

	    /**
	     * Hi, I'm "Tabs". I'm really just another Page, with a few special features.
	     * "Tabs" can be a sibling to other pages that can be navigated to, which those
	     * sibling pages may or may not have their own tab bars (doesn't matter). The fact
	     * that "Tabs" can happen to have children "Tab" classes, and each "Tab" can have
	     * children pages with their own "ViewController" instance, as nothing to do with the
	     * point that "Tabs" is itself is just a page with its own instance of ViewController.
	     */

	    function Tabs(app, config, elementRef, viewCtrl, platform) {
	        var _this = this;

	        _classCallCheck(this, Tabs);

	        _get(Object.getPrototypeOf(Tabs.prototype), "constructor", this).call(this, elementRef, config);
	        this.platform = platform;
	        this.app = app;
	        this.subPages = config.get('tabSubPages');
	        // collection of children "Tab" instances, which extends NavController
	        this.tabs = [];
	        // Tabs may also be an actual ViewController which was navigated to
	        // if Tabs is static and not navigated to within a NavController
	        // then skip this and don't treat it as it's own ViewController
	        if (viewCtrl) {
	            viewCtrl.setContent(this);
	            viewCtrl.setContentRef(elementRef);
	            // TODO: improve how this works, probably not use promises here
	            this.readyPromise = new Promise(function (res) {
	                _this.isReady = res;
	            });
	            viewCtrl.onReady = function () {
	                return _this.readyPromise;
	            };
	        }
	    }

	    /**
	     * @private
	     */

	    _createClass(Tabs, [{
	        key: "onInit",
	        value: function onInit() {
	            var _this2 = this;

	            _get(Object.getPrototypeOf(Tabs.prototype), "onInit", this).call(this);
	            this.preloadTabs = this.preloadTabs !== "false" && this.preloadTabs !== false;
	            if (this.highlight) {
	                this.platform.onResize(function () {
	                    _this2.highlight.select(_this2.getSelected());
	                });
	            }
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "add",
	        value: function add(tab) {
	            tab.id = ++_tabIds;
	            tab.btnId = 'tab-' + tab.id;
	            tab.panelId = 'tabpanel-' + tab.id;
	            this.tabs.push(tab);
	            return this.tabs.length === 1;
	        }

	        /**
	         * TODO
	         * @param {Tab} tab  TODO
	         * @returns {TODO} TODO
	         */
	    }, {
	        key: "select",
	        value: function select(tabOrIndex) {
	            var _this3 = this;

	            var selectedTab = typeof tabOrIndex === 'number' ? this.getByIndex(tabOrIndex) : tabOrIndex;
	            if (!selectedTab) {
	                return Promise.reject();
	            }
	            console.time('select tab ' + selectedTab.id);
	            var deselectedTab = this.getSelected();
	            if (selectedTab === deselectedTab) {
	                // no change
	                return this.touchActive(selectedTab);
	            }
	            var opts = {
	                animate: false
	            };
	            var deselectedPage = undefined;
	            if (deselectedTab) {
	                deselectedPage = deselectedTab.getActive();
	                deselectedPage && deselectedPage.willLeave();
	            }
	            var selectedPage = selectedTab.getActive();
	            selectedPage && selectedPage.willEnter();
	            selectedTab.load(opts, function () {
	                _this3.tabs.forEach(function (tab) {
	                    tab.setSelected(tab === selectedTab);
	                });
	                _this3.highlight && _this3.highlight.select(selectedTab);
	                selectedPage && selectedPage.didEnter();
	                deselectedPage && deselectedPage.didLeave();
	                _this3.isReady && _this3.isReady();
	                console.timeEnd('select tab ' + selectedTab.id);
	            });
	        }

	        /**
	         * TODO
	         * @param {TODO} index  TODO
	         * @returns {TODO} TODO
	         */
	    }, {
	        key: "getByIndex",
	        value: function getByIndex(index) {
	            if (index < this.tabs.length && index > -1) {
	                return this.tabs[index];
	            }
	            return null;
	        }
	    }, {
	        key: "getSelected",
	        value: function getSelected() {
	            for (var i = 0; i < this.tabs.length; i++) {
	                if (this.tabs[i].isSelected) {
	                    return this.tabs[i];
	                }
	            }
	            return null;
	        }
	    }, {
	        key: "getIndex",
	        value: function getIndex(tab) {
	            return this.tabs.indexOf(tab);
	        }

	        /**
	         * @private
	         * "Touch" the active tab, going back to the root view of the tab
	         * or optionally letting the tab handle the event
	         */
	    }, {
	        key: "touchActive",
	        value: function touchActive(tab) {
	            var active = tab.getActive();
	            if (!active) {
	                return Promise.resolve();
	            }
	            var instance = active.instance;
	            // If they have a custom tab selected handler, call it
	            if (instance.tabSelected) {
	                return instance.tabSelected();
	            }
	            // If we're a few pages deep, pop to root
	            if (tab.length() > 1) {
	                // Pop to the root view
	                return tab.popToRoot();
	            }
	            // Otherwise, if the page we're on is not our real root, reset it to our
	            // default root type
	            if (tab.root != active.componentType) {
	                return tab.setRoot(tab.root);
	            }
	            // And failing all of that, we do something safe and secure
	            return Promise.resolve();
	        }
	    }]);

	    return Tabs;
	})(_ion.Ion);
	exports.Tabs = Tabs;
	exports.Tabs = Tabs = __decorate([(0, _configDecorators.ConfigComponent)({
	    selector: 'ion-tabs',
	    defaultInputs: {
	        'tabbarPlacement': 'bottom',
	        'tabbarIcons': 'top',
	        'tabbarStyle': 'default',
	        'preloadTabs': false
	    },
	    template: '<ion-navbar-section>' + '<template navbar-anchor></template>' + '</ion-navbar-section>' + '<ion-tabbar-section>' + '<tabbar role="tablist" [attr]="tabbarStyle">' + '<a *ng-for="#t of tabs" [tab]="t" class="tab-button" role="tab">' + '<icon [name]="t.tabIcon" [is-active]="t.isSelected" class="tab-button-icon"></icon>' + '<span class="tab-button-text">{{t.tabTitle}}</span>' + '</a>' + '<tab-highlight></tab-highlight>' + '</tabbar>' + '</ion-tabbar-section>' + '<ion-content-section>' + '<ng-content></ng-content>' + '</ion-content-section>',
	    directives: [_iconIcon.Icon, _angular2Angular2.NgFor, _angular2Angular2.NgIf, _appId.Attr, (0, _angular2Angular2.forwardRef)(function () {
	        return TabButton;
	    }), (0, _angular2Angular2.forwardRef)(function () {
	        return TabHighlight;
	    }), (0, _angular2Angular2.forwardRef)(function () {
	        return TabNavBarAnchor;
	    })]
	}), __param(3, (0, _angular2Angular2.Optional)()), __metadata('design:paramtypes', [typeof (_a = typeof _appApp.IonicApp !== 'undefined' && _appApp.IonicApp) === 'function' && _a || Object, typeof (_b = typeof _configConfig.Config !== 'undefined' && _configConfig.Config) === 'function' && _b || Object, typeof (_c = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _c || Object, typeof (_d = typeof _navViewController.ViewController !== 'undefined' && _navViewController.ViewController) === 'function' && _d || Object, typeof (_e = typeof _platformPlatform.Platform !== 'undefined' && _platformPlatform.Platform) === 'function' && _e || Object])], Tabs);
	var _tabIds = -1;
	/**
	 * @private
	 */
	var TabButton = (function (_Ion2) {
	    _inherits(TabButton, _Ion2);

	    function TabButton(tabs, config, elementRef) {
	        _classCallCheck(this, TabButton);

	        _get(Object.getPrototypeOf(TabButton.prototype), "constructor", this).call(this, elementRef, config);
	        this.tabs = tabs;
	        this.disHover = config.get('hoverCSS') === false;
	    }

	    _createClass(TabButton, [{
	        key: "onInit",
	        value: function onInit() {
	            this.tab.btn = this;
	            this.hasTitle = !!this.tab.tabTitle;
	            this.hasIcon = !!this.tab.tabIcon;
	            this.hasTitleOnly = this.hasTitle && !this.hasIcon;
	            this.hasIconOnly = this.hasIcon && !this.hasTitle;
	        }
	    }, {
	        key: "onClick",
	        value: function onClick() {
	            this.tabs.select(this.tab);
	        }
	    }]);

	    return TabButton;
	})(_ion.Ion);
	TabButton = __decorate([(0, _angular2Angular2.Directive)({
	    selector: '.tab-button',
	    inputs: ['tab'],
	    host: {
	        '[attr.id]': 'tab.btnId',
	        '[attr.aria-controls]': 'tab.panelId',
	        '[attr.aria-selected]': 'tab.isSelected',
	        '[class.has-title]': 'hasTitle',
	        '[class.has-icon]': 'hasIcon',
	        '[class.has-title-only]': 'hasTitleOnly',
	        '[class.icon-only]': 'hasIconOnly',
	        '[class.disable-hover]': 'disHover',
	        '(click)': 'onClick()'
	    }
	}), __param(0, (0, _angular2Angular2.Host)()), __metadata('design:paramtypes', [Tabs, typeof (_f = typeof _configConfig.Config !== 'undefined' && _configConfig.Config) === 'function' && _f || Object, typeof (_g = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _g || Object])], TabButton);
	/**
	 * @private
	 */
	var TabHighlight = (function () {
	    function TabHighlight(tabs, config, elementRef) {
	        _classCallCheck(this, TabHighlight);

	        if (config.get('tabbarHighlight')) {
	            tabs.highlight = this;
	            this.elementRef = elementRef;
	        }
	    }

	    _createClass(TabHighlight, [{
	        key: "select",
	        value: function select(tab) {
	            var d = tab.btn.getDimensions();
	            var ele = this.elementRef.nativeElement;
	            ele.style.transform = 'translate3d(' + d.left + 'px,0,0) scaleX(' + d.width + ')';
	            if (!this.init) {
	                this.init = true;
	                setTimeout(function () {
	                    ele.classList.add('animate');
	                }, 64);
	            }
	        }
	    }]);

	    return TabHighlight;
	})();
	TabHighlight = __decorate([(0, _angular2Angular2.Directive)({
	    selector: 'tab-highlight'
	}), __param(0, (0, _angular2Angular2.Host)()), __metadata('design:paramtypes', [Tabs, typeof (_h = typeof _configConfig.Config !== 'undefined' && _configConfig.Config) === 'function' && _h || Object, typeof (_j = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _j || Object])], TabHighlight);
	/**
	 * @private
	 */
	var TabNavBarAnchor = function TabNavBarAnchor(tabs, viewContainerRef) {
	    _classCallCheck(this, TabNavBarAnchor);

	    tabs.navbarContainerRef = viewContainerRef;
	};
	TabNavBarAnchor = __decorate([(0, _angular2Angular2.Directive)({ selector: 'template[navbar-anchor]' }), __param(0, (0, _angular2Angular2.Host)()), __metadata('design:paramtypes', [Tabs, typeof (_k = typeof _angular2Angular2.ViewContainerRef !== 'undefined' && _angular2Angular2.ViewContainerRef) === 'function' && _k || Object])], TabNavBarAnchor);
	var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;

/***/ },
/* 485 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _angular2Angular2 = __webpack_require__(45);

	var _app = __webpack_require__(434);

	/**
	 * IdRef is an easy way to identify unique components in an app and access them
	 * no matter where in the UI heirarchy you are. For example, this makes toggling
	 * a global side menu feasible from any place in the application.
	 *
	 * See the [Menu section](http://localhost:4000/docs/v2/components/#menus) of
	 * the Component docs for an example of how Menus rely on ID's.
	 *
	 * To give any component an ID, simply set its `id` property:
	 * ```html
	 * <ion-checkbox id="myCheckbox"></ion-checkbox>
	 * ```
	 *
	 * To get a reference to the registered component, inject the [IonicApp](../app/IonicApp/)
	 * service:
	 * ```ts
	 * constructor(app: IonicApp) {
	 *   var checkbox = app.getComponent("myCheckbox");
	 *   if (checkbox.checked) console.log('checkbox is checked');
	 * }
	 * ```
	 *
	 * *NOTE:* It is not recommended to use ID's across Pages, as there is often no
	 * guarantee that the registered component has not been destroyed if its Page
	 * has been navigated away from.
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var IdRef = (function () {
	    function IdRef(app, elementRef, appViewManager) {
	        _classCallCheck(this, IdRef);

	        this.app = app;
	        this.elementRef = elementRef;
	        this.appViewManager = appViewManager;
	        // Grab the component this directive is attached to
	        this.component = appViewManager.getComponent(elementRef);
	    }

	    /**
	     * @private
	     */

	    _createClass(IdRef, [{
	        key: "onInit",
	        value: function onInit() {
	            this.app.register(this.id, this.component);
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "onDestroy",
	        value: function onDestroy() {
	            this.app.unregister(this.id);
	        }
	    }]);

	    return IdRef;
	})();
	exports.IdRef = IdRef;
	exports.IdRef = IdRef = __decorate([(0, _angular2Angular2.Directive)({
	    selector: '[id]',
	    inputs: ['id']
	}), __metadata('design:paramtypes', [typeof (_a = typeof _app.IonicApp !== 'undefined' && _app.IonicApp) === 'function' && _a || Object, typeof (_b = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _b || Object, typeof (_c = typeof _angular2Angular2.AppViewManager !== 'undefined' && _angular2Angular2.AppViewManager) === 'function' && _c || Object])], IdRef);
	var Attr = (function () {
	    function Attr(renderer, elementRef) {
	        _classCallCheck(this, Attr);

	        this.renderer = renderer;
	        this.elementRef = elementRef;
	    }

	    /**
	     * @private
	     */

	    _createClass(Attr, [{
	        key: "onInit",
	        value: function onInit() {
	            this.renderer.setElementAttribute(this.elementRef, this.attr, '');
	        }
	    }]);

	    return Attr;
	})();
	exports.Attr = Attr;
	exports.Attr = Attr = __decorate([(0, _angular2Angular2.Directive)({
	    selector: '[attr]',
	    inputs: ['attr']
	}), __metadata('design:paramtypes', [typeof (_d = typeof _angular2Angular2.Renderer !== 'undefined' && _angular2Angular2.Renderer) === 'function' && _d || Object, typeof (_e = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _e || Object])], Attr);
	var _a, _b, _c, _d, _e;

/***/ },
/* 486 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _angular2Angular2 = __webpack_require__(45);

	var _appApp = __webpack_require__(434);

	var _configConfig = __webpack_require__(437);

	var _navNavController = __webpack_require__(471);

	var _tabs = __webpack_require__(484);

	/**
	 * _For basic Tabs usage, see the [Tabs section](../../../../components/#tabs)
	 * of the Component docs._
	 *
	 * Tab components are basic navigation controllers used with Tabs.  Much like
	 * Nav, they are a subclass of NavController and can be used to navigate
	 * to pages in and manipulate the navigation stack of a particular tab.
	 *
	 * For more information on using navigation controllers like Tab or [Nav](../../nav/Nav/),
	 * take a look at the [NavController API reference](../NavController/).
	 *
	 * See the [Tabs API reference](../Tabs/) for more details on configuring Tabs
	 * and the TabBar.
	 *
	 * Like Nav, you must set a root page to be loaded initially for each Tab with
	 * the 'root' property:
	 * ```
	 * import {GettingStartedPage} from 'getting-started';
	 * @App({
	 *   template: `<ion-tabs>
	 *                <ion-tab [root]="tabOneRoot"></ion-tab>
	 *                <ion-tab [root]="tabTwoRoot"></ion-tab>
	 *              <ion-tabs>`
	 * })
	 * class MyApp {
	 *   constructor(){
	 *     this.tabOneRoot = GettingStartedPage;
	 *     this.tabTwoRoot = GettingStartedPage;
	 *   }
	 * }
	 * ```
	 * <h3 id="tab_properties">Tab Properties</h3>
	 * The Tabs component automatically creates the TabBar from the properties you
	 * set on each Tab.
	 *
	 * To change the title and icon, use the `tab-title` and `tab-icon`
	 * inputs:
	 * ```html
	 * <ion-tabs>
	 * 	 <ion-tab tab-title="Home" tab-icon="home" [root]="tabOneRoot"></ion-tab>
	 * 	 <ion-tab tab-title="Login" tab-icon="star" [root]="tabTwoRoot"></ion-tab>
	 * <ion-tabs>
	 * ```
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = undefined && undefined.__param || function (paramIndex, decorator) {
	    return function (target, key) {
	        decorator(target, key, paramIndex);
	    };
	};
	var Tab = (function (_NavController) {
	    _inherits(Tab, _NavController);

	    function Tab(tabs, app, config, elementRef, compiler, loader, viewManager, zone, renderer) {
	        _classCallCheck(this, Tab);

	        // A Tab is a NavController for its child pages
	        _get(Object.getPrototypeOf(Tab.prototype), "constructor", this).call(this, tabs, app, config, elementRef, compiler, loader, viewManager, zone, renderer);
	        this.tabs = tabs;
	        this._isInitial = tabs.add(this);
	    }

	    /**
	     * @private
	     */

	    _createClass(Tab, [{
	        key: "onInit",
	        value: function onInit() {
	            var _this = this;

	            if (this._isInitial) {
	                this.tabs.select(this);
	            } else if (this.tabs.preloadTabs) {
	                setTimeout(function () {
	                    if (!_this._loaded) {
	                        var opts = {
	                            animate: false,
	                            preload: true
	                        };
	                        _this.load(opts, function () {
	                            _this.hideNavbars(true);
	                        });
	                    }
	                }, 1000 * this.index);
	            }
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "load",
	        value: function load(opts, done) {
	            if (!this._loaded && this.root) {
	                this.push(this.root, null, opts).then(done);
	                this._loaded = true;
	            } else {
	                done();
	            }
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "loadPage",
	        value: function loadPage(viewCtrl, navbarContainerRef, done) {
	            // by default a page's navbar goes into the shared tab's navbar section
	            navbarContainerRef = this.tabs.navbarContainerRef;
	            var isTabSubPage = this.tabs.subPages && viewCtrl.index > 0;
	            if (isTabSubPage) {
	                // a subpage, that's not the first index
	                // should not use the shared tabs navbar section, but use it's own
	                navbarContainerRef = null;
	            }
	            _get(Object.getPrototypeOf(Tab.prototype), "loadPage", this).call(this, viewCtrl, navbarContainerRef, function () {
	                if (viewCtrl.instance) {
	                    viewCtrl.instance._tabSubPage = isTabSubPage;
	                }
	                done();
	            });
	        }
	    }, {
	        key: "setSelected",
	        value: function setSelected(isSelected) {
	            this.isSelected = isSelected;
	            this.hideNavbars(!isSelected);
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "hideNavbars",
	        value: function hideNavbars(shouldHideNavbars) {
	            this._views.forEach(function (viewCtrl) {
	                var navbar = viewCtrl.getNavbar();
	                navbar && navbar.setHidden(shouldHideNavbars);
	            });
	        }
	    }, {
	        key: "index",
	        get: function get() {
	            return this.tabs.getIndex(this);
	        }
	    }]);

	    return Tab;
	})(_navNavController.NavController);
	exports.Tab = Tab;
	exports.Tab = Tab = __decorate([(0, _angular2Angular2.Component)({
	    selector: 'ion-tab',
	    inputs: ['root', 'tabTitle', 'tabIcon'],
	    host: {
	        '[attr.id]': 'panelId',
	        '[attr.aria-labelledby]': 'btnId',
	        '[class.show-tab]': 'isSelected',
	        'role': 'tabpanel'
	    },
	    template: '<template #contents></template>'
	}), __param(0, (0, _angular2Angular2.Host)()), __metadata('design:paramtypes', [typeof (_a = typeof _tabs.Tabs !== 'undefined' && _tabs.Tabs) === 'function' && _a || Object, typeof (_b = typeof _appApp.IonicApp !== 'undefined' && _appApp.IonicApp) === 'function' && _b || Object, typeof (_c = typeof _configConfig.Config !== 'undefined' && _configConfig.Config) === 'function' && _c || Object, typeof (_d = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _d || Object, typeof (_e = typeof _angular2Angular2.Compiler !== 'undefined' && _angular2Angular2.Compiler) === 'function' && _e || Object, typeof (_f = typeof _angular2Angular2.DynamicComponentLoader !== 'undefined' && _angular2Angular2.DynamicComponentLoader) === 'function' && _f || Object, typeof (_g = typeof _angular2Angular2.AppViewManager !== 'undefined' && _angular2Angular2.AppViewManager) === 'function' && _g || Object, typeof (_h = typeof _angular2Angular2.NgZone !== 'undefined' && _angular2Angular2.NgZone) === 'function' && _h || Object, typeof (_j = typeof _angular2Angular2.Renderer !== 'undefined' && _angular2Angular2.Renderer) === 'function' && _j || Object])], Tab);
	var _a, _b, _c, _d, _e, _f, _g, _h, _j;

/***/ },
/* 487 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _angular2Angular2 = __webpack_require__(45);

	var _ion = __webpack_require__(462);

	var _configConfig = __webpack_require__(437);

	var _virtual = __webpack_require__(488);

	var _itemItemSlidingGesture = __webpack_require__(489);

	var _ionicUtil = __webpack_require__(442);

	var util = _interopRequireWildcard(_ionicUtil);

	/**
	 * The List is a widely used interface element in almost any mobile app, and can include
	 * content ranging from basic text all the way to buttons, toggles, icons, and thumbnails.
	 *
	 * Both the list, which contains items, and the list items themselves can be any HTML
	 * element.
	 *
	 * Using the List and Item components make it easy to support various
	 * interaction modes such as swipe to edit, drag to reorder, and removing items.
	 *
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var List = (function (_Ion) {
	    _inherits(List, _Ion);

	    function List(elementRef, config, zone) {
	        _classCallCheck(this, List);

	        _get(Object.getPrototypeOf(List.prototype), "constructor", this).call(this, elementRef, config);
	        this.zone = zone;
	        this.ele = elementRef.nativeElement;
	        this._enableSliding = false;
	    }

	    /**
	     * @private
	     */

	    _createClass(List, [{
	        key: "onInit",
	        value: function onInit() {
	            _get(Object.getPrototypeOf(List.prototype), "onInit", this).call(this);
	            if (util.isDefined(this.virtual)) {
	                console.log('Content', this.content);
	                console.log('Virtual?', this.virtual);
	                console.log('Items?', this.items.length, 'of \'em');
	                this._initVirtualScrolling();
	            }
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "onDestroy",
	        value: function onDestroy() {
	            this.ele = null;
	            this.slidingGesture && this.slidingGesture.unlisten();
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "_initVirtualScrolling",
	        value: function _initVirtualScrolling() {
	            if (!this.content) {
	                return;
	            }
	            this._virtualScrollingManager = new _virtual.ListVirtualScroll(this);
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "setItemTemplate",
	        value: function setItemTemplate(item) {
	            this.itemTemplate = item;
	        }
	    }, {
	        key: "enableSlidingItems",
	        value: function enableSlidingItems(shouldEnable) {
	            var _this = this;

	            if (this._init) {
	                if (this._enableSliding !== shouldEnable) {
	                    this._enableSliding = shouldEnable;
	                    if (shouldEnable) {
	                        console.debug('enableSlidingItems');
	                        this.zone.runOutsideAngular(function () {
	                            setTimeout(function () {
	                                _this.slidingGesture = new _itemItemSlidingGesture.ItemSlidingGesture(_this, _this.ele);
	                            });
	                        });
	                    } else {
	                        this.slidingGesture && this.slidingGesture.unlisten();
	                    }
	                }
	            }
	        }
	    }, {
	        key: "closeSlidingItems",
	        value: function closeSlidingItems() {
	            this.slidingGesture && this.slidingGesture.closeOpened();
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "afterViewInit",
	        value: function afterViewInit() {
	            this._init = true;
	            if (this._enableSliding) {
	                this.enableSlidingItems(true);
	            }
	        }
	    }]);

	    return List;
	})(_ion.Ion);
	exports.List = List;
	exports.List = List = __decorate([(0, _angular2Angular2.Directive)({
	    selector: 'ion-list',
	    inputs: ['items', 'virtual', 'content'],
	    host: {
	        'class': 'list'
	    }
	}), __metadata('design:paramtypes', [typeof (_a = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _a || Object, typeof (_b = typeof _configConfig.Config !== 'undefined' && _configConfig.Config) === 'function' && _b || Object, typeof (_c = typeof _angular2Angular2.NgZone !== 'undefined' && _angular2Angular2.NgZone) === 'function' && _c || Object])], List);
	var ListHeader = function ListHeader() {
	    _classCallCheck(this, ListHeader);
	};
	exports.ListHeader = ListHeader;
	exports.ListHeader = ListHeader = __decorate([(0, _angular2Angular2.Directive)({
	    selector: 'ion-header',
	    inputs: ['id'],
	    host: {
	        '[attr.id]': 'id'
	    }
	}), __metadata('design:paramtypes', [])], ListHeader);
	var _a, _b, _c;

/***/ },
/* 488 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var ListVirtualScroll = (function () {
	    function ListVirtualScroll(list) {
	        var _this = this;

	        _classCallCheck(this, ListVirtualScroll);

	        this.list = list;
	        this.content = this.list.content;
	        this.viewportHeight = this.content.height();
	        this.viewContainer = this.list.itemTemplate.viewContainer;
	        this.itemHeight = 60;
	        this.shownItems = {};
	        this.enteringItems = [];
	        this.leavingItems = [];
	        // Compute the initial sizes
	        setTimeout(function () {
	            _this.resize();
	            // Simulate the first event to start layout
	            _this._handleVirtualScroll({
	                target: _this.content.scrollElement
	            });
	        });
	        this.content.addScrollEventListener(function (event) {
	            _this._handleVirtualScroll(event);
	        });
	    }

	    _createClass(ListVirtualScroll, [{
	        key: 'resize',
	        value: function resize() {
	            this.viewportHeight = this.content.height();
	            this.viewportScrollHeight = this.content.scrollElement.scrollHeight;
	            this.virtualHeight = this.list.items.length * this.itemHeight;
	            this.itemsPerScreen = this.viewportHeight / this.itemHeight;
	            console.log('VIRTUAL: resize(viewportHeight:', this.viewportHeight, 'viewportScrollHeight:', this.viewportScrollHeight, 'virtualHeight:', this.virtualHeight, ', itemsPerScreen:', this.itemsPerScreen, ')');
	        }
	    }, {
	        key: '_handleVirtualScroll',
	        value: function _handleVirtualScroll(event) {
	            var item = undefined;
	            var shownItemRef = undefined;
	            var st = event.target.scrollTop;
	            var sh = event.target.scrollHeight;
	            var topIndex = Math.floor(st / this.itemHeight);
	            var bottomIndex = Math.floor(st / this.itemHeight + this.itemsPerScreen);
	            var items = this.list.items;
	            // Key iterate the shown items map
	            // and compare the index to our index range,
	            // pushing the items to remove to our leaving
	            // list if they're ouside this range.
	            for (var i in this.shownItems) {
	                if (i < topIndex || i > bottomIndex) {
	                    this.leavingItems.push(this.shownItems[i]);
	                    delete this.shownItems[i];
	                }
	            }
	            var realIndex = 0;
	            // Iterate the set of items that will be rendered, using the
	            // index from the actual items list as the map for the
	            // virtual items we draw
	            for (var i = topIndex, _realIndex = 0; i < bottomIndex && i < items.length; i++, _realIndex++) {
	                item = items[i];
	                console.log('Drawing item', i, item.title);
	                shownItemRef = this.shownItems[i];
	                // Is this a new item?
	                if (!shownItemRef) {
	                    var itemView = this.viewContainer.create(this.list.itemTemplate.protoViewRef, _realIndex);
	                    itemView.setLocal('\$implicit', item);
	                    itemView.setLocal('\$item', item);
	                    shownItemRef = new VirtualItemRef(item, i, _realIndex, itemView);
	                    this.shownItems[i] = shownItemRef;
	                    this.enteringItems.push(shownItemRef);
	                }
	            }
	            while (this.leavingItems.length) {
	                var itemRef = this.leavingItems.pop();
	                console.log('Removing item', itemRef.item, itemRef.realIndex);
	                this.viewContainer.remove(itemRef.realIndex);
	            }
	            console.log('VIRTUAL SCROLL: scroll(scrollTop:', st, 'topIndex:', topIndex, 'bottomIndex:', bottomIndex, ')');
	            console.log('Container has', this.list.getNativeElement().children.length, 'children');
	        }
	    }, {
	        key: 'cellAtIndex',
	        value: function cellAtIndex(index) {}
	    }]);

	    return ListVirtualScroll;
	})();

	exports.ListVirtualScroll = ListVirtualScroll;

	var VirtualItemRef = function VirtualItemRef(item, index, realIndex, view) {
	    _classCallCheck(this, VirtualItemRef);

	    this.item = item;
	    this.index = index;
	    this.realIndex = realIndex;
	    this.view = view;
	};

/***/ },
/* 489 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _ionicGesturesHammer = __webpack_require__(468);

	var _ionicGesturesDragGesture = __webpack_require__(466);

	var _ionicUtilDom = __webpack_require__(435);

	var ItemSlidingGesture = (function (_DragGesture) {
	    _inherits(ItemSlidingGesture, _DragGesture);

	    function ItemSlidingGesture(list, listEle) {
	        var _this = this;

	        _classCallCheck(this, ItemSlidingGesture);

	        _get(Object.getPrototypeOf(ItemSlidingGesture.prototype), 'constructor', this).call(this, listEle, {
	            direction: 'x',
	            threshold: DRAG_THRESHOLD
	        });
	        this.data = {};
	        this.openItems = 0;
	        this.list = list;
	        this.listEle = listEle;
	        this.canDrag = true;
	        this.listen();
	        this.tap = function (ev) {
	            if (!isFromOptionButtons(ev.target)) {
	                var didClose = _this.closeOpened();
	                if (didClose) {
	                    preventDefault(ev);
	                }
	            }
	        };
	        this.mouseOut = function (ev) {
	            _this.onDragEnd(ev);
	        };
	    }

	    _createClass(ItemSlidingGesture, [{
	        key: 'onDragStart',
	        value: function onDragStart(ev) {
	            var itemContainerEle = getItemConatiner(ev.target);
	            if (!itemContainerEle) return;
	            this.closeOpened(itemContainerEle);
	            var openAmout = this.getOpenAmount(itemContainerEle);
	            var itemData = this.get(itemContainerEle);
	            this.preventDrag = openAmout > 0;
	            if (this.preventDrag) {
	                this.closeOpened();
	                return preventDefault(ev);
	            }
	            itemContainerEle.classList.add('active-slide');
	            this.set(itemContainerEle, 'offsetX', openAmout);
	            this.set(itemContainerEle, 'startX', ev.center[this.direction]);
	            if (ev.srcEvent.type.indexOf('mouse') > -1) {
	                ev.target.addEventListener('mouseout', this.mouseOut);
	            }
	            this.dragEnded = false;
	        }
	    }, {
	        key: 'onDrag',
	        value: function onDrag(ev) {
	            var _this2 = this;

	            if (this.dragEnded || this.preventDrag || Math.abs(ev.deltaY) > 30) {
	                this.preventDrag = true;
	                return;
	            }
	            var itemContainerEle = getItemConatiner(ev.target);
	            if (!itemContainerEle || !isActive(itemContainerEle)) return;
	            var itemData = this.get(itemContainerEle);
	            if (!itemData.optsWidth) {
	                itemData.optsWidth = getOptionsWidth(itemContainerEle);
	                if (!itemData.optsWidth) return;
	            }
	            var x = ev.center[this.direction];
	            var delta = x - itemData.startX;
	            var newX = Math.max(0, itemData.offsetX - delta);
	            if (newX > itemData.optsWidth) {
	                // Calculate the new X position, capped at the top of the buttons
	                newX = -Math.min(-itemData.optsWidth, -itemData.optsWidth + (delta + itemData.optsWidth) * 0.4);
	            }
	            (0, _ionicUtilDom.raf)(function () {
	                if (!_this2.dragEnded && !_this2.preventDrag) {
	                    isItemActive(itemContainerEle, true);
	                    _this2.open(itemContainerEle, newX, false);
	                }
	            });
	        }
	    }, {
	        key: 'onDragEnd',
	        value: function onDragEnd(ev) {
	            var _this3 = this;

	            this.preventDrag = false;
	            this.dragEnded = true;
	            var itemContainerEle = getItemConatiner(ev.target);
	            if (!itemContainerEle || !isActive(itemContainerEle)) return;
	            // If we are currently dragging, we want to snap back into place
	            // The final resting point X will be the width of the exposed buttons
	            var itemData = this.get(itemContainerEle);
	            var restingPoint = itemData.optsWidth;
	            // Check if the drag didn't clear the buttons mid-point
	            // and we aren't moving fast enough to swipe open
	            if (this.getOpenAmount(itemContainerEle) < restingPoint / 2) {
	                // If we are going left but too slow, or going right, go back to resting
	                if (ev.direction & _ionicGesturesHammer.Hammer.DIRECTION_RIGHT || Math.abs(ev.velocityX) < 0.3) {
	                    restingPoint = 0;
	                }
	            }
	            ev.target.removeEventListener('mouseout', this.mouseOut);
	            (0, _ionicUtilDom.raf)(function () {
	                _this3.open(itemContainerEle, restingPoint, true);
	            });
	        }
	    }, {
	        key: 'closeOpened',
	        value: function closeOpened(doNotCloseEle) {
	            var didClose = false;
	            if (this.openItems) {
	                var openItemElements = this.listEle.querySelectorAll('.active-slide');
	                for (var i = 0; i < openItemElements.length; i++) {
	                    if (openItemElements[i] !== doNotCloseEle) {
	                        this.open(openItemElements[i], 0, true);
	                        didClose = true;
	                    }
	                }
	            }
	            return didClose;
	        }
	    }, {
	        key: 'open',
	        value: function open(itemContainerEle, openAmount, isFinal) {
	            var _this4 = this;

	            var slidingEle = itemContainerEle.querySelector('ion-item,[ion-item]');
	            if (!slidingEle) return;
	            this.set(itemContainerEle, 'openAmount', openAmount);
	            clearTimeout(this.get(itemContainerEle).timerId);
	            if (openAmount) {
	                this.openItems++;
	            } else {
	                var timerId = setTimeout(function () {
	                    if (slidingEle.style[_ionicUtilDom.CSS.transform] === '') {
	                        isItemActive(itemContainerEle, false);
	                        _this4.openItems--;
	                    }
	                }, 400);
	                this.set(itemContainerEle, 'timerId', timerId);
	            }
	            slidingEle.style[_ionicUtilDom.CSS.transition] = isFinal ? '' : 'none';
	            slidingEle.style[_ionicUtilDom.CSS.transform] = openAmount ? 'translate3d(' + -openAmount + 'px,0,0)' : '';
	            if (isFinal) {
	                if (openAmount) {
	                    isItemActive(itemContainerEle, true);
	                    this.on('tap', this.tap);
	                } else {
	                    this.off('tap', this.tap);
	                }
	                this.enableScroll(!openAmount);
	            }
	        }
	    }, {
	        key: 'getOpenAmount',
	        value: function getOpenAmount(itemContainerEle) {
	            return this.get(itemContainerEle).openAmount || 0;
	        }
	    }, {
	        key: 'get',
	        value: function get(itemContainerEle) {
	            return this.data[itemContainerEle && itemContainerEle.$ionSlide] || {};
	        }
	    }, {
	        key: 'set',
	        value: function set(itemContainerEle, key, value) {
	            if (!this.data[itemContainerEle.$ionSlide]) {
	                this.data[itemContainerEle.$ionSlide] = {};
	            }
	            this.data[itemContainerEle.$ionSlide][key] = value;
	        }
	    }, {
	        key: 'enableScroll',
	        value: function enableScroll(shouldEnable) {
	            var scrollContentEle = (0, _ionicUtilDom.closest)(this.listEle, 'scroll-content');
	            if (scrollContentEle) {
	                scrollContentEle[shouldEnable ? 'removeEventListener' : 'addEventListener']('touchstart', preventDefault);
	            }
	        }
	    }, {
	        key: 'unlisten',
	        value: function unlisten() {
	            _get(Object.getPrototypeOf(ItemSlidingGesture.prototype), 'unlisten', this).call(this);
	            this.listEle = null;
	        }
	    }]);

	    return ItemSlidingGesture;
	})(_ionicGesturesDragGesture.DragGesture);

	exports.ItemSlidingGesture = ItemSlidingGesture;

	function isItemActive(ele, isActive) {
	    ele.classList[isActive ? 'add' : 'remove']('active-slide');
	    ele.classList[isActive ? 'add' : 'remove']('active-options');
	}
	function preventDefault(ev) {
	    ev.preventDefault();
	}
	function getItemConatiner(ele) {
	    return (0, _ionicUtilDom.closest)(ele, 'ion-item-sliding', true);
	}
	function isFromOptionButtons(ele) {
	    return !!(0, _ionicUtilDom.closest)(ele, 'ion-item-options', true);
	}
	function getOptionsWidth(itemContainerEle) {
	    var optsEle = itemContainerEle.querySelector('ion-item-options');
	    if (optsEle) {
	        return optsEle.offsetWidth;
	    }
	}
	function isActive(itemContainerEle) {
	    return itemContainerEle.classList.contains('active-slide');
	}
	var DRAG_THRESHOLD = 20;

/***/ },
/* 490 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _angular2Angular2 = __webpack_require__(45);

	/**
	 * Creates a list-item that can easily be swiped, deleted, reordered, edited, and more.
	 *
	 * There are three common ways to use an item:
	 * - Use `<ion-item>` for something that is only non-clickable text.
	 * - Use `<button ion-item>` for something that can be clicked/tapped. Typically this element will also have a `(click)` handler.
	 * - Use `<a ion-item>` for when the item needs to contain a `href`.
	 *
	 * By default, `<button ion-item>` and `<a ion-item>` will receive a right arrow icon on iOS to signal that tapping the item will reveal more information.
	 * To hide this icon, add the `detail-none` attribute to the item (eg: `<button ion-item detail-none>`). To add the icon when it is not displayed by default,
	 * add the `detail-push` attribute (eg: `<ion-item detail-push>`).
	 *
	 * To break an item up into multiple columns, add multiple `<ion-item-content>` components inside of the item. By default,
	 * this component will automatically be added inside of an `<ion-item>`, giving it a single column.
	 *
	 *
	 * @usage
	 * ```html
	 *
	 * <ion-list>
	 *
	 *   // default item
	 *   <ion-item>
	 *     {{item.title}}
	 *   </ion-item>
	 *
	 *   // multiple item-content containers
	 *   <ion-item>
	 *     <ion-item-content>First Column</ion-item-content>
	 *     <ion-item-content>Second Column</ion-item-content>
	 *     <ion-item-content>Third Column</ion-item-content>
	 *   </ion-item>
	 *
	 * </ion-list>
	 *
	 *  ```
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var Item = function Item() {
	    _classCallCheck(this, Item);
	};
	exports.Item = Item;
	exports.Item = Item = __decorate([(0, _angular2Angular2.Component)({
	    selector: 'ion-item,[ion-item]',
	    template: '<ng-content select="[item-left]"></ng-content>' + '<div class="item-inner">' + '<ng-content select="ion-item-content"></ng-content>' + '<ion-item-content cnt>' + '<ng-content></ng-content>' + '</ion-item-content>' + '<ng-content select="[item-right]"></ng-content>' + '</div>',
	    host: {
	        'class': 'item'
	    }
	}), __metadata('design:paramtypes', [])], Item);

/***/ },
/* 491 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _angular2Angular2 = __webpack_require__(45);

	var _contentContent = __webpack_require__(478);

	var _configConfig = __webpack_require__(437);

	/**
	 * TODO
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var ItemGroup =
	/**
	 * TODO
	 * @param {ElementRef} elementRef  TODO
	 */
	function ItemGroup(elementRef) {
	    _classCallCheck(this, ItemGroup);

	    this.ele = elementRef.nativeElement;
	};
	exports.ItemGroup = ItemGroup;
	exports.ItemGroup = ItemGroup = __decorate([(0, _angular2Angular2.Directive)({
	    selector: 'ion-item-group',
	    host: {
	        'class': 'item-group'
	    }
	}), __metadata('design:paramtypes', [typeof (_a = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _a || Object])], ItemGroup);
	/**
	 * TODO
	 */
	var ItemGroupTitle =
	/**
	 * TODO
	 * @param {ElementRef} elementRef  TODO
	 */
	function ItemGroupTitle(elementRef, zone, config, content) {
	    _classCallCheck(this, ItemGroupTitle);

	    this.elementRef = elementRef;
	    this.zone = zone;
	    this.content = content;
	    // make sure the sticky class gets set on the title
	    this.isSticky = true;
	};
	exports.ItemGroupTitle = ItemGroupTitle;
	exports.ItemGroupTitle = ItemGroupTitle = __decorate([(0, _angular2Angular2.Directive)({
	    selector: 'ion-item-group-title',
	    host: {
	        'class': 'item-group-title',
	        '[class.sticky]': 'isSticky'
	    }
	}), __metadata('design:paramtypes', [typeof (_b = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _b || Object, typeof (_c = typeof _angular2Angular2.NgZone !== 'undefined' && _angular2Angular2.NgZone) === 'function' && _c || Object, typeof (_d = typeof _configConfig.Config !== 'undefined' && _configConfig.Config) === 'function' && _d || Object, typeof (_e = typeof _contentContent.Content !== 'undefined' && _contentContent.Content) === 'function' && _e || Object])], ItemGroupTitle);
	var _a, _b, _c, _d, _e;

/***/ },
/* 492 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _angular2Angular2 = __webpack_require__(45);

	var _listList = __webpack_require__(487);

	/**
	 * @description
	 * Creates a list-item that can easily be swiped,
	 * deleted, reordered, edited, and more.
	 *
	 * @usage
	 * ```html
	 * <ion-list>
	 *   <ion-item-sliding *ng-for="#item of items">
	 *     <ion-item (click)="itemTapped(item)">
	 *       {{item.title}}
	 *     </ion-item>
	 *     <ion-item-options>
	 *       <button (click)="favorite(item)">Favorite</button>
	 *       <button (click)="share(item)">Share</button>
	 *     </ion-item-options>
	 *   </ion-item>
	 * </ion-list>
	 * ```
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = undefined && undefined.__param || function (paramIndex, decorator) {
	    return function (target, key) {
	        decorator(target, key, paramIndex);
	    };
	};
	var ItemSliding = (function () {
	    function ItemSliding(list, elementRef) {
	        _classCallCheck(this, ItemSliding);

	        this.list = list;
	        list.enableSlidingItems(true);
	        elementRef.nativeElement.$ionSlide = ++slideIds;
	    }

	    _createClass(ItemSliding, [{
	        key: "close",
	        value: function close() {
	            this.list.closeSlidingItems();
	        }
	    }]);

	    return ItemSliding;
	})();
	exports.ItemSliding = ItemSliding;
	exports.ItemSliding = ItemSliding = __decorate([(0, _angular2Angular2.Component)({
	    selector: 'ion-item-sliding',
	    template: '<ng-content select="ion-item,[ion-item]"></ng-content>' + '<ng-content select="ion-item-options"></ng-content>'
	}), __param(0, (0, _angular2Angular2.Optional)()), __metadata('design:paramtypes', [typeof (_a = typeof _listList.List !== 'undefined' && _listList.List) === 'function' && _a || Object, typeof (_b = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _b || Object])], ItemSliding);
	var slideIds = 0;
	var _a, _b;

/***/ },
/* 493 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _angular2Angular2 = __webpack_require__(45);

	var _utilForm = __webpack_require__(443);

	/**
	 * The checkbox is no different than the HTML checkbox input, except it's styled differently
	 *
	 * See the [Angular 2 Docs](https://angular.io/docs/js/latest/api/core/Form-interface.html) for more info on forms and input.
	 *
	 * @usage
	 * ```html
	 * <ion-checkbox checked="true" value="isChecked" ng-control="htmlCtrl">
	 *   HTML5
	 * </ion-checkbox>
	 * ```
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = undefined && undefined.__param || function (paramIndex, decorator) {
	    return function (target, key) {
	        decorator(target, key, paramIndex);
	    };
	};
	var Checkbox = (function () {
	    function Checkbox(form, ngControl, elementRef) {
	        _classCallCheck(this, Checkbox);

	        this.form = form;
	        form.register(this);
	        this.onChange = function (_) {};
	        this.onTouched = function (_) {};
	        this.ngControl = ngControl;
	        if (ngControl) ngControl.valueAccessor = this;
	    }

	    _createClass(Checkbox, [{
	        key: "onInit",
	        value: function onInit() {
	            this.labelId = 'label-' + this.inputId;
	        }

	        /**
	         * Toggle the checked state of the checkbox. Calls onChange to pass the
	         * updated checked state to the model (Control).
	         */
	    }, {
	        key: "toggle",
	        value: function toggle() {
	            this.checked = !this.checked;
	            this.onChange(this.checked);
	        }

	        /**
	         * @private
	         * Click event handler to toggle the checkbox checked state.
	         * @param {MouseEvent} ev  The click event.
	         */
	    }, {
	        key: "click",
	        value: function click(ev) {
	            ev.preventDefault();
	            ev.stopPropagation();
	            this.toggle();
	        }

	        /**
	         * @private
	         * Angular2 Forms API method called by the model (Control) on change to update
	         * the checked value.
	         * https://github.com/angular/angular/blob/master/modules/angular2/src/forms/directives/shared.ts#L34
	         */
	    }, {
	        key: "writeValue",
	        value: function writeValue(value) {
	            this.checked = value;
	        }

	        /**
	         * @private
	         * Angular2 Forms API method called by the view (NgControl) to register the
	         * onChange event handler that updates the model (Control).
	         * https://github.com/angular/angular/blob/master/modules/angular2/src/forms/directives/shared.ts#L27
	         * @param {Function} fn  the onChange event handler.
	         */
	    }, {
	        key: "registerOnChange",
	        value: function registerOnChange(fn) {
	            this.onChange = fn;
	        }

	        /**
	         * @private
	         * Angular2 Forms API method called by the the view (NgControl) to register
	         * the onTouched event handler that marks model (Control) as touched.
	         * @param {Function} fn  onTouched event handler.
	         */
	    }, {
	        key: "registerOnTouched",
	        value: function registerOnTouched(fn) {
	            this.onTouched = fn;
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "onDestroy",
	        value: function onDestroy() {
	            this.form.deregister(this);
	        }
	    }]);

	    return Checkbox;
	})();
	exports.Checkbox = Checkbox;
	exports.Checkbox = Checkbox = __decorate([(0, _angular2Angular2.Component)({
	    selector: 'ion-checkbox',
	    inputs: ['value', 'checked', 'disabled', 'id'],
	    host: {
	        'role': 'checkbox',
	        'tappable': 'true',
	        '[attr.tab-index]': 'tabIndex',
	        '[attr.aria-checked]': 'checked',
	        '[attr.aria-disabled]': 'disabled',
	        '[attr.aria-labelledby]': 'labelId',
	        '(click)': 'click($event)',
	        'class': 'item'
	    },
	    template: '<div class="item-inner">' + '<media-checkbox disable-activated>' + '<checkbox-icon></checkbox-icon>' + '</media-checkbox>' + '<ion-item-content id="{{labelId}}">' + '<ng-content></ng-content>' + '</ion-item-content>' + '</div>'
	}), __param(1, (0, _angular2Angular2.Optional)()), __metadata('design:paramtypes', [typeof (_a = typeof _utilForm.Form !== 'undefined' && _utilForm.Form) === 'function' && _a || Object, typeof (_b = typeof _angular2Angular2.NgControl !== 'undefined' && _angular2Angular2.NgControl) === 'function' && _b || Object, typeof (_c = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _c || Object])], Checkbox);
	var _a, _b, _c;

/***/ },
/* 494 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _angular2Angular2 = __webpack_require__(45);

	var _utilForm = __webpack_require__(443);

	var _configConfig = __webpack_require__(437);

	var _utilDom = __webpack_require__(435);

	/**
	 * @private
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = undefined && undefined.__param || function (paramIndex, decorator) {
	    return function (target, key) {
	        decorator(target, key, paramIndex);
	    };
	};
	var MediaSwitch =
	/**
	 * TODO
	 * @param {Switch} swtch  TODO
	 * @param {} elementRef  TODO
	 * @param {Config} config  TODO
	 */
	function MediaSwitch(swtch, elementRef) {
	    _classCallCheck(this, MediaSwitch);

	    swtch.switchEle = elementRef.nativeElement;
	    this.swtch = swtch;
	};
	MediaSwitch = __decorate([(0, _angular2Angular2.Directive)({
	    selector: 'media-switch',
	    host: {
	        '[class.switch-activated]': 'swtch.isActivated'
	    }
	}), __param(0, (0, _angular2Angular2.Host)()), __param(0, (0, _angular2Angular2.Inject)((0, _angular2Angular2.forwardRef)(function () {
	    return Switch;
	}))), __metadata('design:paramtypes', [Switch, typeof (_a = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _a || Object])], MediaSwitch);
	/**
	 * A switch technically is the same thing as an HTML checkbox input, except it looks different and is easier to use on a touch device. Ionic prefers to wrap the checkbox input with the <label> in order to make the entire toggle easy to tap or drag.
	 *
	 * Toggles can also have colors assigned to them, by adding the `toggle-assertive` attribute to assign the assertive color.
	 *
	 * See the [Angular 2 Docs](https://angular.io/docs/js/latest/api/forms/) for more info on forms and input.
	 *
	 * @usage
	 * ```html
	 * // Create a single switch
	 *  <ion-switch checked="true">
	 *    Pineapple
	 *  </ion-switch>
	 *
	 * // Create a list of switches:
	 *  <ion-list>
	 *
	 *    <ion-switch checked="true">
	 *      Apple
	 *    </ion-switch>
	 *
	 *     <ion-switch checked="false">
	 *       Banana
	 *     </ion-switch>
	 *
	 *     <ion-switch disabled="true">
	 *       Cherry
	 *     </ion-switch>
	 *
	 *  </ion-list>
	 * ```
	 *
	 */
	var Switch = (function () {
	    function Switch(form, elementRef, config, ngControl) {
	        _classCallCheck(this, Switch);

	        this.ngControl = ngControl;
	        this.form = form;
	        form.register(this);
	        this.lastTouch = 0;
	        this.mode = config.get('mode');
	        this.onChange = function (_) {};
	        this.onTouched = function (_) {};
	        if (ngControl) ngControl.valueAccessor = this;
	        var self = this;
	        function pointerMove(ev) {
	            var currentX = (0, _utilDom.pointerCoord)(ev).x;
	            if (self.checked) {
	                if (currentX + 15 < self.startX) {
	                    self.toggle(ev);
	                    self.startX = currentX;
	                }
	            } else if (currentX - 15 > self.startX) {
	                self.toggle(ev);
	                self.startX = currentX;
	            }
	        }
	        function pointerOut(ev) {
	            if (ev.currentTarget === ev.target) {
	                self.pointerUp(ev);
	            }
	        }
	        this.addMoveListener = function () {
	            self.switchEle.addEventListener('touchmove', pointerMove);
	            self.switchEle.addEventListener('mousemove', pointerMove);
	            elementRef.nativeElement.addEventListener('mouseout', pointerOut);
	        };
	        this.removeMoveListener = function () {
	            self.switchEle.removeEventListener('touchmove', pointerMove);
	            self.switchEle.removeEventListener('mousemove', pointerMove);
	            elementRef.nativeElement.removeEventListener('mouseout', pointerOut);
	        };
	    }

	    /**
	     * @private
	     */

	    _createClass(Switch, [{
	        key: "onInit",
	        value: function onInit() {
	            this.labelId = 'label-' + this.inputId;
	        }

	        /**
	         * Set checked state of this switch.
	         * @param {boolean} value  Boolean to set this switch's checked state to.
	         */
	    }, {
	        key: "check",
	        value: function check(value) {
	            this.checked = !!value;
	            this.onChange(this.checked);
	        }

	        /**
	         * Toggle the checked state of this switch.
	         */
	    }, {
	        key: "toggle",
	        value: function toggle(ev) {
	            this.check(!this.checked);
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "writeValue",
	        value: function writeValue(value) {
	            this.checked = value;
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "pointerDown",
	        value: function pointerDown(ev) {
	            if (/touch/.test(ev.type)) {
	                this.lastTouch = Date.now();
	            }
	            if (this.isDisabled(ev)) return;
	            this.startX = (0, _utilDom.pointerCoord)(ev).x;
	            this.removeMoveListener();
	            this.addMoveListener();
	            this.isActivated = true;
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "pointerUp",
	        value: function pointerUp(ev) {
	            if (this.isDisabled(ev)) return;
	            var endX = (0, _utilDom.pointerCoord)(ev).x;
	            if (this.checked) {
	                if (this.startX + 4 > endX) {
	                    this.toggle(ev);
	                }
	            } else if (this.startX - 4 < endX) {
	                this.toggle(ev);
	            }
	            this.removeMoveListener();
	            this.isActivated = false;
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "registerOnChange",
	        value: function registerOnChange(fn) {
	            this.onChange = fn;
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "registerOnTouched",
	        value: function registerOnTouched(fn) {
	            this.onTouched = fn;
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "onDestroy",
	        value: function onDestroy() {
	            this.removeMoveListener();
	            this.switchEle = this.addMoveListener = this.removeMoveListener = null;
	            this.form.deregister(this);
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "isDisabled",
	        value: function isDisabled(ev) {
	            return this.lastTouch + 999 > Date.now() && /mouse/.test(ev.type) || this.mode == 'ios' && ev.target.tagName == 'ION-SWITCH';
	        }
	    }]);

	    return Switch;
	})();
	exports.Switch = Switch;
	exports.Switch = Switch = __decorate([(0, _angular2Angular2.Component)({
	    selector: 'ion-switch',
	    inputs: ['value', 'checked', 'disabled', 'id'],
	    host: {
	        'role': 'checkbox',
	        'tappable': 'true',
	        '[attr.tab-index]': 'tabIndex',
	        '[attr.aria-checked]': 'checked',
	        '[attr.aria-disabled]': 'disabled',
	        '[attr.aria-labelledby]': 'labelId',
	        '(touchstart)': 'pointerDown($event)',
	        '(mousedown)': 'pointerDown($event)',
	        '(touchend)': 'pointerUp($event)',
	        '(mouseup)': 'pointerUp($event)',
	        'class': 'item'
	    },
	    template: '<ng-content select="[item-left]"></ng-content>' + '<div class="item-inner">' + '<ion-item-content id="{{labelId}}">' + '<ng-content></ng-content>' + '</ion-item-content>' + '<media-switch disable-activated>' + '<switch-icon></switch-icon>' + '</media-switch>' + "</div>",
	    directives: [MediaSwitch]
	}), __param(3, (0, _angular2Angular2.Optional)()), __metadata('design:paramtypes', [typeof (_b = typeof _utilForm.Form !== 'undefined' && _utilForm.Form) === 'function' && _b || Object, typeof (_c = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _c || Object, typeof (_d = typeof _configConfig.Config !== 'undefined' && _configConfig.Config) === 'function' && _d || Object, typeof (_e = typeof _angular2Angular2.NgControl !== 'undefined' && _angular2Angular2.NgControl) === 'function' && _e || Object])], Switch);
	var _a, _b, _c, _d, _e;

/***/ },
/* 495 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _angular2Angular2 = __webpack_require__(45);

	var _configConfig = __webpack_require__(437);

	var _utilForm = __webpack_require__(443);

	var _appApp = __webpack_require__(434);

	var _contentContent = __webpack_require__(478);

	var _utilDom = __webpack_require__(435);

	var dom = _interopRequireWildcard(_utilDom);

	var _platformPlatform = __webpack_require__(438);

	/**
	 * TODO
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = undefined && undefined.__param || function (paramIndex, decorator) {
	    return function (target, key) {
	        decorator(target, key, paramIndex);
	    };
	};
	var _TextInput = (function () {
	    function TextInput(form, elementRef, config, renderer, app, platform, scrollView) {
	        _classCallCheck(this, TextInput);

	        this.renderer = renderer;
	        this.form = form;
	        form.register(this);
	        this.type = 'text';
	        this.lastTouch = 0;
	        this.app = app;
	        this.elementRef = elementRef;
	        this.platform = platform;
	        this.scrollView = scrollView;
	        this.scrollAssist = config.get('scrollAssist');
	        this.keyboardHeight = config.get('keyboardHeight');
	    }

	    /**
	     * @private
	     */

	    _createClass(TextInput, [{
	        key: "registerInput",
	        value: function registerInput(textInputElement) {
	            this.input = textInputElement;
	            this.type = textInputElement.type || 'text';
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "registerLabel",
	        value: function registerLabel(label) {
	            this.label = label;
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "onInit",
	        value: function onInit() {
	            var _this = this;

	            if (this.input && this.label) {
	                // if there is an input and an label
	                // then give the label an ID
	                // and tell the input the ID of who it's labelled by
	                this.input.labelledBy(this.label.id);
	            }
	            var self = this;
	            self.scrollMove = function (ev) {
	                if (!self.app.isTransitioning()) {
	                    self.deregMove();
	                    if (self.hasFocus) {
	                        self.input.hideFocus(true);
	                        _this.scrollView.onScrollEnd(function () {
	                            self.input.hideFocus(false);
	                            if (self.hasFocus) {
	                                self.regMove();
	                            }
	                        });
	                    }
	                }
	            };
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "pointerStart",
	        value: function pointerStart(ev) {
	            if (this.scrollAssist && this.app.isEnabled()) {
	                // remember where the touchstart/mousedown started
	                this.startCoord = dom.pointerCoord(ev);
	            }
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "pointerEnd",
	        value: function pointerEnd(ev) {
	            if (!this.app.isEnabled()) {
	                ev.preventDefault();
	                ev.stopPropagation();
	            } else if (this.scrollAssist && ev.type === 'touchend') {
	                // get where the touchend/mouseup ended
	                var endCoord = dom.pointerCoord(ev);
	                // focus this input if the pointer hasn't moved XX pixels
	                // and the input doesn't already have focus
	                if (!dom.hasPointerMoved(8, this.startCoord, endCoord) && !this.hasFocus) {
	                    ev.preventDefault();
	                    ev.stopPropagation();
	                    this.initFocus();
	                    // temporarily prevent mouseup's from focusing
	                    this.lastTouch = Date.now();
	                }
	            } else if (this.lastTouch + 999 < Date.now()) {
	                ev.preventDefault();
	                ev.stopPropagation();
	                this.setFocus();
	                this.regMove();
	            }
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "initFocus",
	        value: function initFocus() {
	            var _this2 = this;

	            // begin the process of setting focus to the inner input element
	            var scrollView = this.scrollView;
	            if (scrollView && this.scrollAssist) {
	                // this input is inside of a scroll view
	                // find out if text input should be manually scrolled into view
	                var ele = this.elementRef.nativeElement;
	                var scrollData = _TextInput.getScollData(ele.offsetTop, ele.offsetHeight, scrollView.getDimensions(), this.keyboardHeight, this.platform.height());
	                if (scrollData.scrollAmount > -3 && scrollData.scrollAmount < 3) {
	                    // the text input is in a safe position that doesn't require
	                    // it to be scrolled into view, just set focus now
	                    this.setFocus();
	                    this.regMove();
	                    return;
	                }
	                // add padding to the bottom of the scroll view (if needed)
	                scrollView.addScrollPadding(scrollData.scrollPadding);
	                // manually scroll the text input to the top
	                // do not allow any clicks while it's scrolling
	                var scrollDuration = getScrollAssistDuration(scrollData.scrollAmount);
	                this.app.setEnabled(false, scrollDuration);
	                this.app.setTransitioning(true, scrollDuration);
	                // temporarily move the focus to the focus holder so the browser
	                // doesn't freak out while it's trying to get the input in place
	                // at this point the native text input still does not have focus
	                this.input.relocate(true, scrollData.inputSafeY);
	                // scroll the input into place
	                scrollView.scrollTo(0, scrollData.scrollTo, scrollDuration).then(function () {
	                    // the scroll view is in the correct position now
	                    // give the native text input focus
	                    _this2.input.relocate(false);
	                    // all good, allow clicks again
	                    _this2.app.setEnabled(true);
	                    _this2.app.setTransitioning(false);
	                    _this2.regMove();
	                });
	            } else {
	                // not inside of a scroll view, just focus it
	                this.setFocus();
	                this.regMove();
	            }
	        }

	        /**
	         * @private
	         * @param {TODO} inputOffsetTop  TODO
	         * @param {TODO} inputOffsetHeight  TODO
	         * @param {TODO} scrollViewDimensions  TODO
	         * @param {TODO} keyboardHeight  TODO
	         * @returns {TODO} TODO
	         */
	    }, {
	        key: "focusChange",

	        /**
	         * @private
	         */
	        value: function focusChange(hasFocus) {
	            this.renderer.setElementClass(this.elementRef, 'has-focus', hasFocus);
	            if (!hasFocus) {
	                this.deregMove();
	                this.input.hideFocus(false);
	            }
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "hasValue",
	        value: function hasValue(inputValue) {
	            this.renderer.setElementClass(this.elementRef, 'has-value', inputValue && inputValue !== '');
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "setFocus",
	        value: function setFocus() {
	            if (this.input) {
	                this.form.setAsFocused(this);
	                // set focus on the actual input element
	                this.input.setFocus();
	                // ensure the body hasn't scrolled down
	                document.body.scrollTop = 0;
	            }
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "regMove",
	        value: function regMove() {
	            var _this3 = this;

	            if (this.scrollAssist && this.scrollView) {
	                setTimeout(function () {
	                    _this3.deregMove();
	                    _this3.deregScroll = _this3.scrollView.addScrollEventListener(_this3.scrollMove);
	                }, 80);
	            }
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "deregMove",
	        value: function deregMove() {
	            this.deregScroll && this.deregScroll();
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "onDestroy",

	        /**
	         * @private
	         */
	        value: function onDestroy() {
	            this.deregMove();
	            this.form.deregister(this);
	        }
	    }, {
	        key: "hasFocus",
	        get: function get() {
	            return !!this.input && this.input.hasFocus;
	        }
	    }], [{
	        key: "getScollData",
	        value: function getScollData(inputOffsetTop, inputOffsetHeight, scrollViewDimensions, keyboardHeight, plaformHeight) {
	            // compute input's Y values relative to the body
	            var inputTop = inputOffsetTop + scrollViewDimensions.contentTop - scrollViewDimensions.scrollTop;
	            var inputBottom = inputTop + inputOffsetHeight;
	            // compute the safe area which is the viewable content area when the soft keyboard is up
	            var safeAreaTop = scrollViewDimensions.contentTop;
	            var safeAreaHeight = plaformHeight - keyboardHeight - safeAreaTop;
	            safeAreaHeight /= 2;
	            var safeAreaBottom = safeAreaTop + safeAreaHeight;
	            var inputTopWithinSafeArea = inputTop >= safeAreaTop && inputTop <= safeAreaBottom;
	            var inputTopAboveSafeArea = inputTop < safeAreaTop;
	            var inputTopBelowSafeArea = inputTop > safeAreaBottom;
	            var inputBottomWithinSafeArea = inputBottom >= safeAreaTop && inputBottom <= safeAreaBottom;
	            var inputBottomBelowSafeArea = inputBottom > safeAreaBottom;
	            /*
	            Text Input Scroll To Scenarios
	            ---------------------------------------
	            1) Input top within safe area, bottom within safe area
	            2) Input top within safe area, bottom below safe area, room to scroll
	            3) Input top above safe area, bottom within safe area, room to scroll
	            4) Input top below safe area, no room to scroll, input smaller than safe area
	            5) Input top within safe area, bottom below safe area, no room to scroll, input smaller than safe area
	            6) Input top within safe area, bottom below safe area, no room to scroll, input larger than safe area
	            7) Input top below safe area, no room to scroll, input larger than safe area
	            */
	            var scrollData = {
	                scrollAmount: 0,
	                scrollTo: 0,
	                scrollPadding: 0,
	                inputSafeY: 0
	            };
	            if (inputTopWithinSafeArea && inputBottomWithinSafeArea) {
	                // Input top within safe area, bottom within safe area
	                // no need to scroll to a position, it's good as-is
	                return scrollData;
	            }
	            // looks like we'll have to do some auto-scrolling
	            if (inputTopBelowSafeArea || inputBottomBelowSafeArea) {
	                // Input top and bottom below safe area
	                // auto scroll the input up so at least the top of it shows
	                if (safeAreaHeight > inputOffsetHeight) {
	                    // safe area height is taller than the input height, so we
	                    // can bring it up the input just enough to show the input bottom
	                    scrollData.scrollAmount = Math.round(safeAreaBottom - inputBottom);
	                } else {
	                    // safe area height is smaller than the input height, so we can
	                    // only scroll it up so the input top is at the top of the safe area
	                    // however the input bottom will be below the safe area
	                    scrollData.scrollAmount = Math.round(safeAreaTop - inputTop);
	                }
	                scrollData.inputSafeY = -(inputTop - safeAreaTop) + 4;
	            } else if (inputTopAboveSafeArea) {
	                // Input top above safe area
	                // auto scroll the input down so at least the top of it shows
	                scrollData.scrollAmount = Math.round(safeAreaTop - inputTop);
	                scrollData.inputSafeY = safeAreaTop - inputTop + 4;
	            }
	            // figure out where it should scroll to for the best position to the input
	            scrollData.scrollTo = scrollViewDimensions.scrollTop - scrollData.scrollAmount;
	            if (scrollData.scrollAmount < 0) {
	                // when auto-scrolling up, there also needs to be enough
	                // content padding at the bottom of the scroll view
	                // manually add it if there isn't enough scrollable area
	                // figure out how many scrollable area is left to scroll up
	                var availablePadding = scrollViewDimensions.scrollHeight - scrollViewDimensions.scrollTop - scrollViewDimensions.contentHeight;
	                var paddingSpace = availablePadding + scrollData.scrollAmount;
	                if (paddingSpace < 0) {
	                    // there's not enough scrollable area at the bottom, so manually add more
	                    scrollData.scrollPadding = scrollViewDimensions.contentHeight - safeAreaHeight;
	                }
	            }
	            // if (!window.safeAreaEle) {
	            //   window.safeAreaEle = document.createElement('div');
	            //   window.safeAreaEle.style.position = 'absolute';
	            //   window.safeAreaEle.style.background = 'rgba(0, 128, 0, 0.7)';
	            //   window.safeAreaEle.style.padding = '2px 5px';
	            //   window.safeAreaEle.style.textShadow = '1px 1px white';
	            //   window.safeAreaEle.style.left = '0px';
	            //   window.safeAreaEle.style.right = '0px';
	            //   window.safeAreaEle.style.fontWeight = 'bold';
	            //   window.safeAreaEle.style.pointerEvents = 'none';
	            //   document.body.appendChild(window.safeAreaEle);
	            // }
	            // window.safeAreaEle.style.top = safeAreaTop + 'px';
	            // window.safeAreaEle.style.height = safeAreaHeight + 'px';
	            // window.safeAreaEle.innerHTML = `
	            //   <div>scrollTo: ${scrollData.scrollTo}</div>
	            //   <div>scrollAmount: ${scrollData.scrollAmount}</div>
	            //   <div>scrollPadding: ${scrollData.scrollPadding}</div>
	            //   <div>inputSafeY: ${scrollData.inputSafeY}</div>
	            //   <div>scrollHeight: ${scrollViewDimensions.scrollHeight}</div>
	            //   <div>scrollTop: ${scrollViewDimensions.scrollTop}</div>
	            //   <div>contentHeight: ${scrollViewDimensions.contentHeight}</div>
	            // `;
	            return scrollData;
	        }
	    }]);

	    return TextInput;
	})();
	exports.TextInput = _TextInput;
	_TextInput = __decorate([(0, _angular2Angular2.Component)({
	    selector: 'ion-input',
	    host: {
	        '(touchstart)': 'pointerStart($event)',
	        '(touchend)': 'pointerEnd($event)',
	        '(mouseup)': 'pointerEnd($event)',
	        'class': 'item'
	    },
	    template: '<div class="item-inner">' + '<ng-content></ng-content>' + '<input [type]="type" aria-hidden="true" scroll-assist *ng-if="scrollAssist">' + '</div>',
	    directives: [_angular2Angular2.NgIf, (0, _angular2Angular2.forwardRef)(function () {
	        return InputScrollAssist;
	    })]
	}), __param(6, (0, _angular2Angular2.Optional)()), __param(6, (0, _angular2Angular2.Host)()), __metadata('design:paramtypes', [typeof (_a = typeof _utilForm.Form !== 'undefined' && _utilForm.Form) === 'function' && _a || Object, typeof (_b = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _b || Object, typeof (_c = typeof _configConfig.Config !== 'undefined' && _configConfig.Config) === 'function' && _c || Object, typeof (_d = typeof _angular2Angular2.Renderer !== 'undefined' && _angular2Angular2.Renderer) === 'function' && _d || Object, typeof (_e = typeof _appApp.IonicApp !== 'undefined' && _appApp.IonicApp) === 'function' && _e || Object, typeof (_f = typeof _platformPlatform.Platform !== 'undefined' && _platformPlatform.Platform) === 'function' && _f || Object, typeof (_g = typeof _contentContent.Content !== 'undefined' && _contentContent.Content) === 'function' && _g || Object])], _TextInput);
	/**
	 * @private
	 */
	var TextInputElement = (function () {
	    function TextInputElement(type, elementRef, renderer, wrapper) {
	        _classCallCheck(this, TextInputElement);

	        this.type = type;
	        this.elementRef = elementRef;
	        this.wrapper = wrapper;
	        this.renderer = renderer;
	        renderer.setElementAttribute(this.elementRef, 'text-input', '');
	        if (wrapper) {
	            // it's within ionic's ion-input, let ion-input handle what's up
	            wrapper.registerInput(this);
	        }
	    }

	    _createClass(TextInputElement, [{
	        key: "onKeyup",
	        value: function onKeyup(ev) {
	            this.wrapper.hasValue(ev.target.value);
	        }
	    }, {
	        key: "onInit",
	        value: function onInit() {
	            this.wrapper.hasValue(this.value);
	        }
	    }, {
	        key: "labelledBy",
	        value: function labelledBy(val) {
	            this.renderer.setElementAttribute(this.elementRef, 'aria-labelledby', val);
	        }
	    }, {
	        key: "setFocus",
	        value: function setFocus() {
	            this.getNativeElement().focus();
	        }
	    }, {
	        key: "relocate",
	        value: function relocate(shouldRelocate, inputRelativeY) {
	            if (this._relocated !== shouldRelocate) {
	                var focusedInputEle = this.getNativeElement();
	                if (shouldRelocate) {
	                    var clonedInputEle = focusedInputEle.cloneNode(true);
	                    clonedInputEle.classList.add('cloned-input');
	                    clonedInputEle.classList.remove('hide-focused-input');
	                    clonedInputEle.setAttribute('aria-hidden', true);
	                    clonedInputEle.tabIndex = -1;
	                    focusedInputEle.classList.add('hide-focused-input');
	                    focusedInputEle.style[dom.CSS.transform] = "translate3d(-9999px," + inputRelativeY + "px,0)";
	                    focusedInputEle.parentNode.insertBefore(clonedInputEle, focusedInputEle);
	                    this.wrapper.setFocus();
	                } else {
	                    focusedInputEle.classList.remove('hide-focused-input');
	                    focusedInputEle.style[dom.CSS.transform] = '';
	                    var clonedInputEle = focusedInputEle.parentNode.querySelector('.cloned-input');
	                    if (clonedInputEle) {
	                        clonedInputEle.parentNode.removeChild(clonedInputEle);
	                    }
	                }
	                this._relocated = shouldRelocate;
	            }
	        }
	    }, {
	        key: "hideFocus",
	        value: function hideFocus(shouldHideFocus) {
	            var focusedInputEle = this.getNativeElement();
	            if (shouldHideFocus) {
	                var clonedInputEle = focusedInputEle.cloneNode(true);
	                clonedInputEle.classList.add('cloned-hidden');
	                clonedInputEle.setAttribute('aria-hidden', true);
	                clonedInputEle.tabIndex = -1;
	                focusedInputEle.classList.add('hide-focused-input');
	                focusedInputEle.style[dom.CSS.transform] = 'translate3d(-9999px,0,0)';
	                focusedInputEle.parentNode.insertBefore(clonedInputEle, focusedInputEle);
	            } else {
	                focusedInputEle.classList.remove('hide-focused-input');
	                focusedInputEle.style[dom.CSS.transform] = '';
	                var clonedInputEle = focusedInputEle.parentNode.querySelector('.cloned-hidden');
	                if (clonedInputEle) {
	                    clonedInputEle.parentNode.removeChild(clonedInputEle);
	                }
	            }
	        }
	    }, {
	        key: "getNativeElement",
	        value: function getNativeElement() {
	            return this.elementRef.nativeElement;
	        }
	    }, {
	        key: "hasFocus",
	        get: function get() {
	            return dom.hasFocus(this.getNativeElement());
	        }
	    }]);

	    return TextInputElement;
	})();
	exports.TextInputElement = TextInputElement;
	exports.TextInputElement = TextInputElement = __decorate([(0, _angular2Angular2.Directive)({
	    selector: 'textarea,input[type=text],input[type=password],input[type=number],input[type=search],input[type=email],input[type=url],input[type=tel]',
	    inputs: ['value'],
	    host: {
	        '(focus)': 'wrapper.focusChange(true)',
	        '(blur)': 'wrapper.focusChange(false)',
	        '(keyup)': 'onKeyup($event)'
	    }
	}), __param(0, (0, _angular2Angular2.Attribute)('type')), __param(3, (0, _angular2Angular2.Optional)()), __metadata('design:paramtypes', [String, typeof (_h = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _h || Object, typeof (_j = typeof _angular2Angular2.Renderer !== 'undefined' && _angular2Angular2.Renderer) === 'function' && _j || Object, _TextInput])], TextInputElement);
	var InputScrollAssist = (function () {
	    function InputScrollAssist(form, textInput) {
	        _classCallCheck(this, InputScrollAssist);

	        this.form = form;
	        this.textInput = textInput;
	    }

	    _createClass(InputScrollAssist, [{
	        key: "receivedFocus",
	        value: function receivedFocus(ev) {
	            this.form.focusNext(this.textInput);
	        }
	    }]);

	    return InputScrollAssist;
	})();
	InputScrollAssist = __decorate([(0, _angular2Angular2.Directive)({
	    selector: '[scroll-assist]',
	    host: {
	        '(focus)': 'receivedFocus($event)'
	    }
	}), __metadata('design:paramtypes', [typeof (_k = typeof _utilForm.Form !== 'undefined' && _utilForm.Form) === 'function' && _k || Object, _TextInput])], InputScrollAssist);
	var SCROLL_ASSIST_SPEED = 0.5;
	function getScrollAssistDuration(distanceToScroll) {
	    //return 3000;
	    distanceToScroll = Math.abs(distanceToScroll);
	    var duration = distanceToScroll / SCROLL_ASSIST_SPEED;
	    return Math.min(380, Math.max(80, duration));
	}
	var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;

/***/ },
/* 496 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _angular2Angular2 = __webpack_require__(45);

	var _configConfig = __webpack_require__(437);

	var _textInput = __webpack_require__(495);

	var _utilDom = __webpack_require__(435);

	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = undefined && undefined.__param || function (paramIndex, decorator) {
	    return function (target, key) {
	        decorator(target, key, paramIndex);
	    };
	};
	var Label = (function () {
	    function Label(config, container) {
	        _classCallCheck(this, Label);

	        this.scrollAssist = config.get('scrollAssist');
	        if (!this.id) {
	            this.id = 'lbl-' + ++labelIds;
	        }
	        this.container = container;
	        container && container.registerLabel(this);
	    }

	    /**
	     * @private
	     */

	    _createClass(Label, [{
	        key: "pointerStart",
	        value: function pointerStart(ev) {
	            if (this.scrollAssist) {
	                // remember where the touchstart/mousedown started
	                this.startCoord = (0, _utilDom.pointerCoord)(ev);
	            }
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "pointerEnd",
	        value: function pointerEnd(ev) {
	            if (this.container) {
	                // get where the touchend/mouseup ended
	                var endCoord = (0, _utilDom.pointerCoord)(ev);
	                // focus this input if the pointer hasn't moved XX pixels
	                if (!(0, _utilDom.hasPointerMoved)(20, this.startCoord, endCoord)) {
	                    ev.preventDefault();
	                    ev.stopPropagation();
	                    this.container.initFocus();
	                }
	                this.startCoord = null;
	            }
	        }
	    }]);

	    return Label;
	})();
	exports.Label = Label;
	exports.Label = Label = __decorate([(0, _angular2Angular2.Directive)({
	    selector: 'ion-label',
	    inputs: ['id'],
	    host: {
	        '[attr.id]': 'id',
	        '(touchstart)': 'pointerStart($event)',
	        '(touchend)': 'pointerEnd($event)',
	        '(mousedown)': 'pointerStart($event)',
	        '(mouseup)': 'pointerEnd($event)'
	    }
	}), __param(1, (0, _angular2Angular2.Optional)()), __metadata('design:paramtypes', [typeof (_a = typeof _configConfig.Config !== 'undefined' && _configConfig.Config) === 'function' && _a || Object, typeof (_b = typeof _textInput.TextInput !== 'undefined' && _textInput.TextInput) === 'function' && _b || Object])], Label);
	var labelIds = -1;
	var _a, _b;

/***/ },
/* 497 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _angular2Angular2 = __webpack_require__(45);

	var _ion = __webpack_require__(462);

	var _configConfig = __webpack_require__(437);

	/**
	 * @description
	 * A Segment is a group of buttons, sometimes known as Segmented Controls, that allow the user to interact with a compact group of a number of controls.
	 *
	 * Segments provide functionality similar to tabs, selecting one will unselect all others. You should use a tab bar instead of a segmented control when you want to let the user move back and forth between distinct pages in your app.
	 *
	 * @usage
	 * ```html
	 * <ion-segment [(ng-model)]="relationship" danger>
	 *   <ion-segment-button value="friends">
	 *     Friends
	 *   </ion-segment-button>
	 *   <ion-segment-button value="enemies">
	 *     Enemies
	 *   </ion-segment-button>
	 * </ion-segment>
	 *
	 *
	 * <form [ng-form-model]="myForm">
	 *   <ion-segment ng-control="mapStyle" danger>
	 *     <ion-segment-button value="standard">
	 *       Standard
	 *     </ion-segment-button>
	 *     <ion-segment-button value="hybrid">
	 *       Hybrid
	 *     </ion-segment-button>
	 *     <ion-segment-button value="sat">
	 *       Satellite
	 *     </ion-segment-button>
	 *   </ion-segment>
	 * </form>
	 * ```
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = undefined && undefined.__param || function (paramIndex, decorator) {
	    return function (target, key) {
	        decorator(target, key, paramIndex);
	    };
	};
	var Segment = (function (_Ion) {
	    _inherits(Segment, _Ion);

	    function Segment(ngControl, elementRef, config) {
	        _classCallCheck(this, Segment);

	        _get(Object.getPrototypeOf(Segment.prototype), "constructor", this).call(this, elementRef, config);
	        /**
	         * @private
	         */
	        this.buttons = [];
	        this.onChange = function (_) {};
	        this.onTouched = function (_) {};
	        if (ngControl) ngControl.valueAccessor = this;
	    }

	    /**
	     * @private
	     */

	    _createClass(Segment, [{
	        key: "writeValue",
	        value: function writeValue(value) {
	            this.value = !value ? '' : value;
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "registerOnChange",
	        value: function registerOnChange(fn) {
	            this.onChange = fn;
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "registerOnTouched",
	        value: function registerOnTouched(fn) {
	            this.onTouched = fn;
	        }

	        /**
	         * @private
	         * Called by child SegmentButtons to bind themselves to
	         * the Segment.
	         * @param {SegmentButton} segmentButton  The child SegmentButton to register.
	         */
	    }, {
	        key: "register",
	        value: function register(segmentButton) {
	            this.buttons.push(segmentButton);
	            // If this button is registered and matches our value,
	            // make sure to select it
	            if (this.value == segmentButton.value) {
	                this.selected(segmentButton);
	            }
	        }

	        /**
	         * @private
	         * Select the button with the given value.
	         * @param {string} value  Value of the button to select.
	         */
	    }, {
	        key: "selectFromValue",
	        value: function selectFromValue(value) {
	            if (this.buttons.length == 0) {
	                return;
	            }
	            this.buttons.forEach(function (button) {
	                if (button.value === value) {
	                    button.isActive = true;
	                }
	            });
	        }

	        /**
	         * @private
	         * Indicate a button should be selected.
	         * @param {SegmentButton} segmentButton  The button to select.
	         */
	    }, {
	        key: "selected",
	        value: function selected(segmentButton) {
	            this.buttons.forEach(function (button) {
	                button.isActive = false;
	            });
	            segmentButton.isActive = true;
	            this.value = segmentButton.value;
	            this.onChange(segmentButton.value);
	        }
	    }]);

	    return Segment;
	})(_ion.Ion);
	exports.Segment = Segment;
	exports.Segment = Segment = __decorate([(0, _angular2Angular2.Directive)({
	    selector: 'ion-segment'
	}), __param(0, (0, _angular2Angular2.Optional)()), __metadata('design:paramtypes', [typeof (_a = typeof _angular2Angular2.NgControl !== 'undefined' && _angular2Angular2.NgControl) === 'function' && _a || Object, typeof (_b = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _b || Object, typeof (_c = typeof _configConfig.Config !== 'undefined' && _configConfig.Config) === 'function' && _c || Object])], Segment);
	var SegmentButton = (function () {
	    function SegmentButton(segment, elementRef, renderer) {
	        _classCallCheck(this, SegmentButton);

	        this.segment = segment;
	        renderer.setElementAttribute(elementRef, 'button', '');
	        renderer.setElementAttribute(elementRef, 'outline', '');
	    }

	    /**
	     * @private
	     */

	    _createClass(SegmentButton, [{
	        key: "onInit",
	        value: function onInit() {
	            this.segment.register(this);
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "click",
	        value: function click(event) {
	            this.segment.selected(this, event);
	        }
	    }]);

	    return SegmentButton;
	})();
	exports.SegmentButton = SegmentButton;
	exports.SegmentButton = SegmentButton = __decorate([(0, _angular2Angular2.Directive)({
	    selector: 'ion-segment-button',
	    inputs: ['value'],
	    host: {
	        '(click)': 'click($event)',
	        '[class.activated]': 'isActive'
	    }
	}), __param(0, (0, _angular2Angular2.Host)()), __metadata('design:paramtypes', [Segment, typeof (_d = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _d || Object, typeof (_e = typeof _angular2Angular2.Renderer !== 'undefined' && _angular2Angular2.Renderer) === 'function' && _e || Object])], SegmentButton);
	var _a, _b, _c, _d, _e;

/***/ },
/* 498 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _angular2Angular2 = __webpack_require__(45);

	var _configConfig = __webpack_require__(437);

	var _ion = __webpack_require__(462);

	var _listList = __webpack_require__(487);

	/**
	 * A radio group is a group of radio components.
	 *
	 * Selecting a radio button in the group unselects all others in the group.
	 *
	 * New radios can be registered dynamically.
	 *
	 * See the [Angular 2 Docs](https://angular.io/docs/js/latest/api/forms/) for more info on forms and input.
	 *
	 * @usage
	 * ```html
	 * <ion-radio-group ng-control="clientside">
	 *
	 *   <ion-header>
	 *     Clientside
	 *   </ion-header>
	 *
	 *   <ion-radio value="ember">
	 *     Ember
	 *   </ion-radio>
	 *
	 *   <ion-radio value="angular1">
	 *     Angular 1
	 *   </ion-radio>
	 *
	 *   <ion-radio value="angular2" checked="true">
	 *     Angular 2
	 *   </ion-radio>
	 *
	 *   <ion-radio value="react">
	 *     React
	 *   </ion-radio>
	 *
	 * </ion-radio-group>
	 * ```
	*/
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = undefined && undefined.__param || function (paramIndex, decorator) {
	    return function (target, key) {
	        decorator(target, key, paramIndex);
	    };
	};
	var RadioGroup = (function (_Ion) {
	    _inherits(RadioGroup, _Ion);

	    function RadioGroup(elementRef, config, ngControl, headerQuery) {
	        _classCallCheck(this, RadioGroup);

	        _get(Object.getPrototypeOf(RadioGroup.prototype), "constructor", this).call(this, elementRef, config);
	        this.headerQuery = headerQuery;
	        this.radios = [];
	        this.id = ++radioGroupIds;
	        this.radioIds = -1;
	        this.onChange = function (_) {};
	        this.onTouched = function (_) {};
	        if (ngControl) ngControl.valueAccessor = this;
	    }

	    /**
	     * @private
	     */

	    _createClass(RadioGroup, [{
	        key: "onInit",
	        value: function onInit() {
	            var header = this.headerQuery.first;
	            if (header) {
	                if (!header.id) {
	                    header.id = 'radio-header-' + this.id;
	                }
	                this.describedById = header.id;
	            }
	        }

	        /**
	         * @private
	         * Register the specified radio button with the radio group.
	         * @param {RadioButton} radio  The radio button to register.
	         */
	    }, {
	        key: "registerRadio",
	        value: function registerRadio(radio) {
	            radio.id = radio.id || 'radio-' + this.id + '-' + ++this.radioIds;
	            this.radios.push(radio);
	            if (radio.checked) {
	                this.value = radio.value;
	                this.activeId = radio.id;
	            }
	        }

	        /**
	         * @private
	         * Update which radio button in the group is checked, unchecking all others.
	         * @param {RadioButton} checkedRadio  The radio button to check.
	         */
	    }, {
	        key: "update",
	        value: function update(checkedRadio) {
	            this.value = checkedRadio.value;
	            this.activeId = checkedRadio.id;
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = this.radios[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var radio = _step.value;

	                    radio.checked = radio === checkedRadio;
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator["return"]) {
	                        _iterator["return"]();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            this.onChange(this.value);
	        }

	        /**
	         * @private
	         * Angular2 Forms API method called by the model (Control) on change to update
	         * the checked value.
	         * https://github.com/angular/angular/blob/master/modules/angular2/src/forms/directives/shared.ts#L34
	         */
	    }, {
	        key: "writeValue",
	        value: function writeValue(value) {
	            this.value = value;
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	                for (var _iterator2 = this.radios[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    var radio = _step2.value;

	                    radio.checked = radio.value == value;
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2["return"]) {
	                        _iterator2["return"]();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }
	        }

	        /**
	         * @private
	         * Angular2 Forms API method called by the view (NgControl) to register the
	         * onChange event handler that updates the model (Control).
	         * https://github.com/angular/angular/blob/master/modules/angular2/src/forms/directives/shared.ts#L27
	         * @param {Function} fn  the onChange event handler.
	         */
	    }, {
	        key: "registerOnChange",
	        value: function registerOnChange(fn) {
	            this.onChange = fn;
	        }

	        /**
	         * @private
	         * Angular2 Forms API method called by the the view (NgControl) to register
	         * the onTouched event handler that marks the model (Control) as touched.
	         * @param {Function} fn  onTouched event handler.
	         */
	    }, {
	        key: "registerOnTouched",
	        value: function registerOnTouched(fn) {
	            this.onTouched = fn;
	        }
	    }]);

	    return RadioGroup;
	})(_ion.Ion);
	exports.RadioGroup = RadioGroup;
	exports.RadioGroup = RadioGroup = __decorate([(0, _angular2Angular2.Directive)({
	    selector: 'ion-radio-group',
	    host: {
	        'role': 'radiogroup',
	        '[attr.aria-activedescendant]': 'activeId',
	        '[attr.aria-describedby]': 'describedById',
	        'class': 'list'
	    }
	}), __param(2, (0, _angular2Angular2.Optional)()), __param(3, (0, _angular2Angular2.Query)(_listList.ListHeader)), __metadata('design:paramtypes', [typeof (_a = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _a || Object, typeof (_b = typeof _configConfig.Config !== 'undefined' && _configConfig.Config) === 'function' && _b || Object, typeof (_c = typeof _angular2Angular2.NgControl !== 'undefined' && _angular2Angular2.NgControl) === 'function' && _c || Object, typeof (_d = typeof _angular2Angular2.QueryList !== 'undefined' && _angular2Angular2.QueryList) === 'function' && _d || Object])], RadioGroup);
	/**
	 * @description
	 * A single radio component.
	 *
	 * See the [Angular 2 Docs](https://angular.io/docs/js/latest/api/forms/) for more info on forms and input.
	 *
	 * @usage
	 * ```html
	 * <ion-radio value="isChecked" checked="true">
	 *   Radio Label
	 * </ion-radio>
	 * ```
	 *
	 */
	var RadioButton = (function (_Ion2) {
	    _inherits(RadioButton, _Ion2);

	    function RadioButton(group, elementRef, config) {
	        _classCallCheck(this, RadioButton);

	        _get(Object.getPrototypeOf(RadioButton.prototype), "constructor", this).call(this, elementRef, config);
	        this.group = group;
	        this.tabIndex = 0;
	    }

	    /**
	     * @private
	     */

	    _createClass(RadioButton, [{
	        key: "onInit",
	        value: function onInit() {
	            _get(Object.getPrototypeOf(RadioButton.prototype), "onInit", this).call(this);
	            this.group.registerRadio(this);
	            this.labelId = 'label-' + this.id;
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "click",
	        value: function click(ev) {
	            ev.preventDefault();
	            ev.stopPropagation();
	            this.check();
	        }

	        /**
	         * Update the checked state of this radio button.
	         * TODO: Call this toggle? Since unchecks as well
	         */
	    }, {
	        key: "check",
	        value: function check() {
	            this.checked = !this.checked;
	            this.group.update(this);
	        }
	    }]);

	    return RadioButton;
	})(_ion.Ion);
	exports.RadioButton = RadioButton;
	exports.RadioButton = RadioButton = __decorate([(0, _angular2Angular2.Component)({
	    selector: 'ion-radio',
	    inputs: ['value', 'checked', 'disabled', 'id'],
	    host: {
	        'role': 'radio',
	        'tappable': 'true',
	        '[attr.id]': 'id',
	        '[attr.tab-index]': 'tabIndex',
	        '[attr.aria-checked]': 'checked',
	        '[attr.aria-disabled]': 'disabled',
	        '[attr.aria-labelledby]': 'labelId',
	        '(click)': 'click($event)',
	        'class': 'item'
	    },
	    template: '<div class="item-inner">' + '<ion-item-content id="{{labelId}}">' + '<ng-content></ng-content>' + '</ion-item-content>' + '<media-radio>' + '<radio-icon></radio-icon>' + '</media-radio>' + '</div>'
	}), __param(0, (0, _angular2Angular2.Host)()), __param(0, (0, _angular2Angular2.Optional)()), __metadata('design:paramtypes', [RadioGroup, typeof (_e = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _e || Object, typeof (_f = typeof _configConfig.Config !== 'undefined' && _configConfig.Config) === 'function' && _f || Object])], RadioButton);
	var radioGroupIds = -1;
	var _a, _b, _c, _d, _e, _f;

/***/ },
/* 499 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _angular2Angular2 = __webpack_require__(45);

	var _ion = __webpack_require__(462);

	var _configConfig = __webpack_require__(437);

	var _configDecorators = __webpack_require__(458);

	var _iconIcon = __webpack_require__(446);

	/**
	 * @description
	 * The Search Bar service adds an input field which can be used to search or filter items.
	 *
	 * @usage
	 * ```html
	 * <ion-searchbar ng-control="searchQuery"></ion-searchbar>
	 * ```
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var SearchBar = (function (_Ion) {
	    _inherits(SearchBar, _Ion);

	    function SearchBar(elementRef, config, ngControl, renderer) {
	        _classCallCheck(this, SearchBar);

	        _get(Object.getPrototypeOf(SearchBar.prototype), "constructor", this).call(this, elementRef, config);
	        this.renderer = renderer;
	        this.elementRef = elementRef;
	        if (!ngControl) {
	            // They don't want to do anything that works, so we won't do anything that breaks
	            return;
	        }
	        this.ngControl = ngControl;
	        this.ngControl.valueAccessor = this;
	    }

	    /**
	     * @private
	     */

	    _createClass(SearchBar, [{
	        key: "afterViewInit",
	        value: function afterViewInit() {
	            this.cancelButton = this.elementRef.nativeElement.querySelector('.searchbar-cancel');
	            if (this.cancelButton) {
	                this.cancelWidth = this.cancelButton.offsetWidth;
	                this.cancelButton.style.marginRight = "-" + this.cancelWidth + "px";
	            }
	            // If the user passes in a value to the model we should left align
	            this.shouldLeftAlign = this.ngControl.value && this.ngControl.value.trim() != '';
	            this.query = this.ngControl.value || '';
	        }

	        /**
	         * @private
	         * Much like ngModel, this is called from our valueAccessor for the attached
	         * ControlDirective to update the value internally.
	         */
	    }, {
	        key: "writeValue",
	        value: function writeValue(value) {
	            this.query = value;
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "registerOnChange",
	        value: function registerOnChange(fn) {
	            this.onChange = fn;
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "registerOnTouched",
	        value: function registerOnTouched(fn) {
	            this.onTouched = fn;
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "inputChanged",
	        value: function inputChanged(event) {
	            this.writeValue(event.target.value);
	            this.onChange(event.target.value);
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "inputFocused",
	        value: function inputFocused() {
	            this.isFocused = true;
	            this.shouldLeftAlign = true;
	            if (this.cancelButton) {
	                this.cancelButton.style.marginRight = "0px";
	            }
	        }

	        /**
	         * @private
	         */
	    }, {
	        key: "inputBlurred",
	        value: function inputBlurred() {
	            this.isFocused = false;
	            this.shouldLeftAlign = this.ngControl.value && this.ngControl.value.trim() != '';
	            if (this.cancelButton) {
	                this.cancelButton.style.marginRight = "-" + this.cancelWidth + "px";
	            }
	        }
	    }, {
	        key: "clearInput",
	        value: function clearInput(event) {
	            this.writeValue('');
	            this.onChange('');
	        }
	    }]);

	    return SearchBar;
	})(_ion.Ion);
	exports.SearchBar = SearchBar;
	exports.SearchBar = SearchBar = __decorate([(0, _configDecorators.ConfigComponent)({
	    selector: 'ion-searchbar',
	    defaultInputs: {
	        'showCancel': false,
	        'cancelText': 'Cancel',
	        'placeholder': 'Search',
	        'cancelAction': function cancelAction(event, query) {
	            this.element = this.elementRef.nativeElement.querySelector('input');
	            this.element.blur();
	            this.clearInput();
	        }
	    },
	    host: {
	        '[class.left-align]': 'shouldLeftAlign',
	        '[class.focused]': 'isFocused'
	    },
	    template: '<div class="searchbar-input-container">' + '<button (click)="cancelAction($event, query)" clear dark class="searchbar-cancel-icon"><icon arrow-back></icon></button>' + '<div class="searchbar-search-icon"></div>' + '<input [(value)]="query" (focus)="inputFocused()" (blur)="inputBlurred()" ' + '(input)="inputChanged($event)" class="searchbar-input" type="search" [attr.placeholder]="placeholder">' + '<button clear *ng-if="query" class="searchbar-close-icon" (click)="clearInput($event)"></button>' + '</div>' + '<button *ng-if="showCancel" (click)="cancelAction($event, query)" class="searchbar-cancel">{{cancelText}}</button>',
	    directives: [_angular2Angular2.FORM_DIRECTIVES, _angular2Angular2.NgIf, _angular2Angular2.NgClass, _iconIcon.Icon]
	}), __metadata('design:paramtypes', [typeof (_a = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _a || Object, typeof (_b = typeof _configConfig.Config !== 'undefined' && _configConfig.Config) === 'function' && _b || Object, typeof (_c = typeof _angular2Angular2.NgControl !== 'undefined' && _angular2Angular2.NgControl) === 'function' && _c || Object, typeof (_d = typeof _angular2Angular2.Renderer !== 'undefined' && _angular2Angular2.Renderer) === 'function' && _d || Object])], SearchBar);
	var _a, _b, _c, _d;

/***/ },
/* 500 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _angular2Angular2 = __webpack_require__(45);

	var _appApp = __webpack_require__(434);

	var _configConfig = __webpack_require__(437);

	var _configDecorators = __webpack_require__(458);

	var _navController = __webpack_require__(471);

	var _viewController = __webpack_require__(470);

	/**
	 * _For a quick walkthrough of navigation in Ionic, check out the
	 * [Navigation section](../../../../components/#navigation) of the Component
	 * docs._
	 *
	 * Nav is a basic navigation controller component.  As a subclass of NavController
	 * you use it to navigate to pages in your app and manipulate the navigation stack.
	 * Nav automatically animates transitions between pages for you.
	 *
	 * For more information on using navigation controllers like Nav or [Tab](../../Tabs/Tab/),
	 * take a look at the [NavController API reference](../NavController/).
	 *
	 * You must set a root page (where page is any [@Page](../../config/Page/)
	 * component) to be loaded initially by any Nav you create, using
	 * the 'root' property:
	 *
	 * ```ts
	 * import {GettingStartedPage} from 'getting-started';
	 * @App({
	 *   template: `<ion-nav [root]="rootPage"></ion-nav>`
	 * })
	 * class MyApp {
	 *   constructor(){
	 *     this.rootPage = GettingStartedPage;
	 *   }
	 * }
	 * ```
	 *
	 * <h2 id="back_navigation">Back navigation</h2>
	 * If a [page](../NavController/#creating_pages) you navigate to has a [NavBar](../NavBar/),
	 * Nav will automatically add a back button to it if there is a page
	 * before the one you are navigating to in the navigation stack.
	 *
	 * Additionally, specifying the `swipe-back-enabled` property will allow you to
	 * swipe to go back:
	 * ```html
	 * <ion-nav swipe-back-enabled="false" [root]="rootPage"></ion-nav>
	 * ```
	 *
	 * Here is a diagram of how Nav animates smoothly between pages:
	 *
	 * <div class="highlight less-margin">
	 *   <pre>
	 *                           +-------+
	 *                           |  App  |
	 *                           +---+---+
	 *                           &lt;ion-app&gt;
	 *                               |
	 *                  +------------+-------------+
	 *                  |   Ionic Nav Controller   |
	 *                  +------------+-------------+
	 *                           &lt;ion-nav&gt;
	 *                               |
	 *                               |
	 *             Page 3  +--------------------+                     LoginPage
	 *           Page 2  +--------------------+ |
	 *         Page 1  +--------------------+ | |              +--------------------+
	 *                 | | Header           |&lt;-----------------|       Login        |
	 *                 +--------------------+ | |              +--------------------+
	 *                 | | |                | | |              | Username:          |
	 *                 | | |                | | |              | Password:          |
	 *                 | | |  Page 3 is     | | |              |                    |
	 *                 | | |  only content  | | |              |                    |
	 *                 | | |                |&lt;-----------------|                    |
	 *                 | | |                | | |              |                    |
	 *                 | | |                | | |              |                    |
	 *                 | +------------------|-+ |              |                    |
	 *                 | | Footer           |-|-+              |                    |
	 *                 | +------------------|-+                |                    |
	 *                 +--------------------+                  +--------------------+
	 *
	 *           +--------------------+    +--------------------+    +--------------------+
	 *           | Header             |    | Content            |    | Content            |
	 *           +--------------------+    |                    |    |                    |
	 *           | Content            |    |                    |    |                    |
	 *           |                    |    |                    |    |                    |
	 *           |                    |    |                    |    |                    |
	 *           |                    |    |                    |    |                    |
	 *           |                    |    |                    |    |                    |
	 *           |                    |    |                    |    |                    |
	 *           |                    |    |                    |    |                    |
	 *           |                    |    |                    |    |                    |
	 *           |                    |    +--------------------+    |                    |
	 *           |                    |    | Footer             |    |                    |
	 *           +--------------------+    +--------------------+    +--------------------+
	 *
	 *   </pre>
	 * </div>
	 *
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = undefined && undefined.__param || function (paramIndex, decorator) {
	    return function (target, key) {
	        decorator(target, key, paramIndex);
	    };
	};
	var Nav = (function (_NavController) {
	    _inherits(Nav, _NavController);

	    function Nav(hostNavCtrl, viewCtrl, app, config, elementRef, compiler, loader, viewManager, zone, renderer) {
	        _classCallCheck(this, Nav);

	        _get(Object.getPrototypeOf(Nav.prototype), "constructor", this).call(this, hostNavCtrl, app, config, elementRef, compiler, loader, viewManager, zone, renderer);
	        if (viewCtrl) {
	            // an ion-nav can also act as an ion-page within a parent ion-nav
	            // this would happen when an ion-nav nests a child ion-nav.
	            viewCtrl.setContent(this);
	            viewCtrl.setContentRef(elementRef);
	        }
	    }

	    /**
	     * @private
	     */

	    _createClass(Nav, [{
	        key: "onInit",
	        value: function onInit() {
	            _get(Object.getPrototypeOf(Nav.prototype), "onInit", this).call(this);
	            if (this.root) {
	                if (typeof this.root !== 'function') {
	                    throw 'The [root] property in <ion-nav> must be given a reference to a component class from within the constructor.';
	                }
	                this.push(this.root);
	            }
	            // default the swipe back to be enabled
	            this.isSwipeBackEnabled((this.swipeBackEnabled || '').toString() !== 'false');
	        }
	    }]);

	    return Nav;
	})(_navController.NavController);
	exports.Nav = Nav;
	exports.Nav = Nav = __decorate([(0, _configDecorators.ConfigComponent)({
	    selector: 'ion-nav',
	    inputs: ['root'],
	    defaultInputs: {
	        'swipeBackEnabled': true
	    },
	    template: '<template #contents></template>'
	}), __param(0, (0, _angular2Angular2.Optional)()), __param(1, (0, _angular2Angular2.Optional)()), __metadata('design:paramtypes', [typeof (_a = typeof _navController.NavController !== 'undefined' && _navController.NavController) === 'function' && _a || Object, typeof (_b = typeof _viewController.ViewController !== 'undefined' && _viewController.ViewController) === 'function' && _b || Object, typeof (_c = typeof _appApp.IonicApp !== 'undefined' && _appApp.IonicApp) === 'function' && _c || Object, typeof (_d = typeof _configConfig.Config !== 'undefined' && _configConfig.Config) === 'function' && _d || Object, typeof (_e = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _e || Object, typeof (_f = typeof _angular2Angular2.Compiler !== 'undefined' && _angular2Angular2.Compiler) === 'function' && _f || Object, typeof (_g = typeof _angular2Angular2.DynamicComponentLoader !== 'undefined' && _angular2Angular2.DynamicComponentLoader) === 'function' && _g || Object, typeof (_h = typeof _angular2Angular2.AppViewManager !== 'undefined' && _angular2Angular2.AppViewManager) === 'function' && _h || Object, typeof (_j = typeof _angular2Angular2.NgZone !== 'undefined' && _angular2Angular2.NgZone) === 'function' && _j || Object, typeof (_k = typeof _angular2Angular2.Renderer !== 'undefined' && _angular2Angular2.Renderer) === 'function' && _k || Object])], Nav);
	var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;

/***/ },
/* 501 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _angular2Angular2 = __webpack_require__(45);

	var _navController = __webpack_require__(471);

	var _navRegistry = __webpack_require__(451);

	/**
	 * Directive for declaratively linking to a new page instead of using
	 * [NavController.push()](../NavController/#push). Similar to ui-router's `ui-sref`.
	 *
	 * Basic usage:
	 * ```html
	 * <button [nav-push]="pushPage"></button>
	 * ```
	 * To specify parameters you can use array syntax or the `nav-params` property:
	 * ```html
	 * <button [nav-push]="pushPage" [nav-params]="params"></button>
	 * ```
	 * Where `pushPage` and `params` are specified in your component, and `pushPage`
	 * contains a reference to a [@Page component](../../../config/Page/):
	 *
	 * ```ts
	 * import {LoginPage} from 'login';
	 * @Page({
	 *   template: `<button [nav-push]="pushPage" [nav-params]="params"></button>`
	 * })
	 * class MyPage {
	 *   constructor(){
	 *     this.pushPage = LoginPage;
	 *     this.params = { id: 42 };
	 *   }
	 * }
	 * ```
	 *
	 * ### Alternate syntax
	 * You can also use syntax similar to Angular2's router, passing an array to
	 * NavPush:
	 * ```html
	 * <button [nav-push]="[pushPage, params]"></button>
	 * ```
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = undefined && undefined.__param || function (paramIndex, decorator) {
	    return function (target, key) {
	        decorator(target, key, paramIndex);
	    };
	};
	var NavPush = (function () {
	    /**
	     * TODO
	     * @param {NavController} nav  TODO
	     */

	    function NavPush(nav, registry) {
	        _classCallCheck(this, NavPush);

	        this.nav = nav;
	        this.registry = registry;
	        if (!nav) {
	            console.error('nav-push must be within a NavController');
	        }
	    }

	    _createClass(NavPush, [{
	        key: "onClick",
	        value: function onClick() {
	            var destination = undefined,
	                params = undefined;
	            if (this.instruction instanceof Array) {
	                if (this.instruction.length > 2) {
	                    throw 'Too many [nav-push] arguments, expects [View, { params }]';
	                }
	                destination = this.instruction[0];
	                params = this.instruction[1] || this.params;
	            } else {
	                destination = this.instruction;
	                params = this.params;
	            }
	            if (typeof destination === "string") {
	                destination = this.registry.get(destination);
	            }
	            this.nav && this.nav.push(destination, params);
	        }
	    }]);

	    return NavPush;
	})();
	exports.NavPush = NavPush;
	exports.NavPush = NavPush = __decorate([(0, _angular2Angular2.Directive)({
	    selector: '[nav-push]',
	    inputs: ['instruction: navPush', 'params: navParams'],
	    host: {
	        '(click)': 'onClick()',
	        'role': 'link'
	    }
	}), __param(0, (0, _angular2Angular2.Optional)()), __metadata('design:paramtypes', [typeof (_a = typeof _navController.NavController !== 'undefined' && _navController.NavController) === 'function' && _a || Object, typeof (_b = typeof _navRegistry.NavRegistry !== 'undefined' && _navRegistry.NavRegistry) === 'function' && _b || Object])], NavPush);
	/**
	 * TODO
	 */
	var NavPop = (function () {
	    /**
	     * TODO
	     * @param {NavController} nav  TODO
	     */

	    function NavPop(nav) {
	        _classCallCheck(this, NavPop);

	        this.nav = nav;
	        if (!nav) {
	            console.error('nav-pop must be within a NavController');
	        }
	    }

	    _createClass(NavPop, [{
	        key: "onClick",
	        value: function onClick() {
	            this.nav && this.nav.pop();
	        }
	    }]);

	    return NavPop;
	})();
	exports.NavPop = NavPop;
	exports.NavPop = NavPop = __decorate([(0, _angular2Angular2.Directive)({
	    selector: '[nav-pop]',
	    host: {
	        '(click)': 'onClick()',
	        'role': 'link'
	    }
	}), __param(0, (0, _angular2Angular2.Optional)()), __metadata('design:paramtypes', [typeof (_c = typeof _navController.NavController !== 'undefined' && _navController.NavController) === 'function' && _c || Object])], NavPop);
	var _a, _b, _c;

/***/ },
/* 502 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _angular2Angular2 = __webpack_require__(45);

	var _angular2Router = __webpack_require__(396);

	var _nav = __webpack_require__(500);

	/**
	 * TODO
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = undefined && undefined.__param || function (paramIndex, decorator) {
	    return function (target, key) {
	        decorator(target, key, paramIndex);
	    };
	};
	var NavRouter = (function (_RouterOutlet) {
	    _inherits(NavRouter, _RouterOutlet);

	    /**
	     * TODO
	     * @param {ElementRef} _elementRef  TODO
	     * @param {DynamicComponentLoader} _loader  TODO
	     * @param {Router} _parentRouter  TODO
	     * @param {string} nameAttr  Value of the element's 'name' attribute
	     * @param {Nav} nav  TODO
	     */

	    function NavRouter(_elementRef, _loader, _parentRouter, nameAttr, nav) {
	        _classCallCheck(this, NavRouter);

	        _get(Object.getPrototypeOf(NavRouter.prototype), "constructor", this).call(this, _elementRef, _loader, _parentRouter, nameAttr);
	        // Nav is Ionic's NavController, which we injected into this class
	        this.nav = nav;
	        // register this router with Ionic's NavController
	        // Ionic's NavController will call this NavRouter's "stateChange"
	        // method when the NavController has...changed its state
	        nav.registerRouter(this);
	    }

	    /**
	     * @private
	     * TODO
	     * @param {ComponentInstruction} instruction  TODO
	     */

	    _createClass(NavRouter, [{
	        key: "activate",
	        value: function activate(nextInstruction) {
	            var previousInstruction = this._currentInstruction;
	            this._currentInstruction = nextInstruction;
	            var componentType = nextInstruction.componentType;
	            var childRouter = this._parentRouter.childRouter(componentType);
	            // prevent double navigations to the same view
	            var lastView = this.nav.last();
	            if (lastView && lastView.componentType === componentType && lastView.params.data === nextInstruction.params) {
	                return Promise.resolve();
	            }
	            // tell the NavController which componentType, and it's params, to navigate to
	            return this.nav.push(componentType, nextInstruction.params);
	        }
	    }, {
	        key: "reuse",
	        value: function reuse(nextInstruction) {
	            return Promise.resolve();
	        }

	        /**
	         * TODO
	         * @param {TODO} type  TODO
	         * @param {TODO} viewCtrl  TODO
	         */
	    }, {
	        key: "stateChange",
	        value: function stateChange(type, viewCtrl) {
	            // stateChange is called by Ionic's NavController
	            // type could be "push" or "pop"
	            // viewCtrl is Ionic's ViewController class, which has the properties "componentType" and "params"
	            // only do an update if there's an actual view change
	            if (!viewCtrl || this._activeViewId === viewCtrl.id) return;
	            this._activeViewId = viewCtrl.id;
	            // get the best PathRecognizer for this view's componentType
	            var pathRecognizer = this.getPathRecognizerByComponent(viewCtrl.componentType);
	            if (pathRecognizer) {
	                // generate a componentInstruction from the view's PathRecognizer and params
	                var componentInstruction = pathRecognizer.generate(viewCtrl.params.data);
	                // create an Instruction from the componentInstruction
	                var instruction = new _angular2Router.Instruction(componentInstruction, null);
	                this._parentRouter.navigateByInstruction(instruction);
	            }
	        }

	        /**
	         * TODO
	         * @param {TODO} componentType  TODO
	         * @returns {TODO} TODO
	         */
	    }, {
	        key: "getPathRecognizerByComponent",
	        value: function getPathRecognizerByComponent(componentType) {
	            // given a componentType, figure out the best PathRecognizer to use
	            var rules = this._parentRouter.registry._rules;
	            var pathRecognizer = null;
	            rules.forEach(function (rule) {
	                pathRecognizer = rule.matchers.find(function (matcherPathRecognizer) {
	                    return matcherPathRecognizer.handler.componentType === componentType;
	                });
	            });
	            return pathRecognizer;
	        }
	    }]);

	    return NavRouter;
	})(_angular2Router.RouterOutlet);
	exports.NavRouter = NavRouter;
	exports.NavRouter = NavRouter = __decorate([(0, _angular2Angular2.Directive)({
	    selector: 'ion-nav'
	}), __param(3, (0, _angular2Angular2.Attribute)('name')), __metadata('design:paramtypes', [typeof (_a = typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef) === 'function' && _a || Object, typeof (_b = typeof _angular2Angular2.DynamicComponentLoader !== 'undefined' && _angular2Angular2.DynamicComponentLoader) === 'function' && _b || Object, typeof (_c = typeof _angular2Router.Router !== 'undefined' && _angular2Router.Router) === 'function' && _c || Object, String, typeof (_d = typeof _nav.Nav !== 'undefined' && _nav.Nav) === 'function' && _d || Object])], NavRouter);
	var _a, _b, _c, _d;

/***/ },
/* 503 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _angular2Angular2 = __webpack_require__(45);

	var _platformPlatform = __webpack_require__(438);

	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = undefined && undefined.__param || function (paramIndex, decorator) {
	    return function (target, key) {
	        decorator(target, key, paramIndex);
	    };
	};

	var DisplayWhen = (function () {
	    function DisplayWhen(conditions, platform, ngZone) {
	        var _this = this;

	        _classCallCheck(this, DisplayWhen);

	        this.isMatch = false;
	        this.platform = platform;
	        if (!conditions) return;
	        this.conditions = conditions.split(',');
	        // check if its one of the matching platforms first
	        // a platform does not change during the life of an app
	        for (var i = 0; i < this.conditions.length; i++) {
	            if (this.conditions[i] && platform.is(this.conditions[i])) {
	                this.isMatch = true;
	                return;
	            }
	        }
	        if (this.orientation()) {
	            // add window resize listener
	            platform.onResize(function () {
	                ngZone.run(function () {
	                    _this.orientation();
	                });
	            });
	            return;
	        }
	    }

	    /**
	     * TODO
	     */

	    _createClass(DisplayWhen, [{
	        key: "orientation",
	        value: function orientation() {
	            for (var i = 0; i < this.conditions.length; i++) {
	                if (this.conditions[i] == 'portrait') {
	                    this.isMatch = this.platform.isPortrait();
	                    return true;
	                }
	                if (this.conditions[i] == 'landscape') {
	                    this.isMatch = this.platform.isLandscape();
	                    return true;
	                }
	            }
	        }
	    }]);

	    return DisplayWhen;
	})();

	var ShowWhen = (function (_DisplayWhen) {
	    _inherits(ShowWhen, _DisplayWhen);

	    function ShowWhen(showWhen, platform, ngZone) {
	        _classCallCheck(this, ShowWhen);

	        _get(Object.getPrototypeOf(ShowWhen.prototype), "constructor", this).call(this, showWhen, platform, ngZone);
	    }

	    /**
	     * @private
	     */

	    _createClass(ShowWhen, [{
	        key: "hidden",
	        get: function get() {
	            return !this.isMatch;
	        }
	    }]);

	    return ShowWhen;
	})(DisplayWhen);
	exports.ShowWhen = ShowWhen;
	exports.ShowWhen = ShowWhen = __decorate([(0, _angular2Angular2.Directive)({
	    selector: '[show-when]',
	    host: {
	        '[hidden]': 'hidden'
	    }
	}), __param(0, (0, _angular2Angular2.Attribute)('show-when')), __metadata('design:paramtypes', [String, typeof (_a = typeof _platformPlatform.Platform !== 'undefined' && _platformPlatform.Platform) === 'function' && _a || Object, typeof (_b = typeof _angular2Angular2.NgZone !== 'undefined' && _angular2Angular2.NgZone) === 'function' && _b || Object])], ShowWhen);
	/**
	 * TODO
	 */
	var HideWhen = (function (_DisplayWhen2) {
	    _inherits(HideWhen, _DisplayWhen2);

	    function HideWhen(hideWhen, platform, ngZone) {
	        _classCallCheck(this, HideWhen);

	        _get(Object.getPrototypeOf(HideWhen.prototype), "constructor", this).call(this, hideWhen, platform, ngZone);
	    }

	    /**
	     * @private
	     */

	    _createClass(HideWhen, [{
	        key: "hidden",
	        get: function get() {
	            return this.isMatch;
	        }
	    }]);

	    return HideWhen;
	})(DisplayWhen);
	exports.HideWhen = HideWhen;
	exports.HideWhen = HideWhen = __decorate([(0, _angular2Angular2.Directive)({
	    selector: '[hide-when]',
	    host: {
	        '[hidden]': 'hidden'
	    }
	}), __param(0, (0, _angular2Angular2.Attribute)('hide-when')), __metadata('design:paramtypes', [String, typeof (_c = typeof _platformPlatform.Platform !== 'undefined' && _platformPlatform.Platform) === 'function' && _c || Object, typeof (_d = typeof _angular2Angular2.NgZone !== 'undefined' && _angular2Angular2.NgZone) === 'function' && _d || Object])], HideWhen);
	var _a, _b, _c, _d;

/***/ },
/* 504 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopExportWildcard(obj, defaults) { var newObj = defaults({}, obj); delete newObj['default']; return newObj; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	var _ionicComponentsAppApp = __webpack_require__(434);

	_defaults(exports, _interopExportWildcard(_ionicComponentsAppApp, _defaults));

	var _ionicComponentsAppId = __webpack_require__(485);

	_defaults(exports, _interopExportWildcard(_ionicComponentsAppId, _defaults));

	var _ionicComponentsActionSheetActionSheet = __webpack_require__(445);

	_defaults(exports, _interopExportWildcard(_ionicComponentsActionSheetActionSheet, _defaults));

	var _ionicComponentsBlurBlur = __webpack_require__(477);

	_defaults(exports, _interopExportWildcard(_ionicComponentsBlurBlur, _defaults));

	var _ionicComponentsButtonButton = __webpack_require__(449);

	_defaults(exports, _interopExportWildcard(_ionicComponentsButtonButton, _defaults));

	var _ionicComponentsCheckboxCheckbox = __webpack_require__(493);

	_defaults(exports, _interopExportWildcard(_ionicComponentsCheckboxCheckbox, _defaults));

	var _ionicComponentsContentContent = __webpack_require__(478);

	_defaults(exports, _interopExportWildcard(_ionicComponentsContentContent, _defaults));

	var _ionicComponentsIconIcon = __webpack_require__(446);

	_defaults(exports, _interopExportWildcard(_ionicComponentsIconIcon, _defaults));

	var _ionicComponentsItemItem = __webpack_require__(490);

	_defaults(exports, _interopExportWildcard(_ionicComponentsItemItem, _defaults));

	var _ionicComponentsItemItemGroup = __webpack_require__(491);

	_defaults(exports, _interopExportWildcard(_ionicComponentsItemItemGroup, _defaults));

	var _ionicComponentsItemItemSliding = __webpack_require__(492);

	_defaults(exports, _interopExportWildcard(_ionicComponentsItemItemSliding, _defaults));

	var _ionicComponentsMenuMenu = __webpack_require__(461);

	_defaults(exports, _interopExportWildcard(_ionicComponentsMenuMenu, _defaults));

	var _ionicComponentsMenuMenuTypes = __webpack_require__(505);

	_defaults(exports, _interopExportWildcard(_ionicComponentsMenuMenuTypes, _defaults));

	var _ionicComponentsMenuMenuToggle = __webpack_require__(469);

	_defaults(exports, _interopExportWildcard(_ionicComponentsMenuMenuToggle, _defaults));

	var _ionicComponentsMenuMenuClose = __webpack_require__(476);

	_defaults(exports, _interopExportWildcard(_ionicComponentsMenuMenuClose, _defaults));

	var _ionicComponentsTextInputTextInput = __webpack_require__(495);

	_defaults(exports, _interopExportWildcard(_ionicComponentsTextInputTextInput, _defaults));

	var _ionicComponentsTextInputLabel = __webpack_require__(496);

	_defaults(exports, _interopExportWildcard(_ionicComponentsTextInputLabel, _defaults));

	var _ionicComponentsListList = __webpack_require__(487);

	_defaults(exports, _interopExportWildcard(_ionicComponentsListList, _defaults));

	var _ionicComponentsShowHideWhenShowHideWhen = __webpack_require__(503);

	_defaults(exports, _interopExportWildcard(_ionicComponentsShowHideWhenShowHideWhen, _defaults));

	var _ionicComponentsModalModal = __webpack_require__(447);

	_defaults(exports, _interopExportWildcard(_ionicComponentsModalModal, _defaults));

	var _ionicComponentsNavNav = __webpack_require__(500);

	_defaults(exports, _interopExportWildcard(_ionicComponentsNavNav, _defaults));

	var _ionicComponentsNavNavController = __webpack_require__(471);

	_defaults(exports, _interopExportWildcard(_ionicComponentsNavNavController, _defaults));

	var _ionicComponentsNavViewController = __webpack_require__(470);

	_defaults(exports, _interopExportWildcard(_ionicComponentsNavViewController, _defaults));

	var _ionicComponentsNavNavPush = __webpack_require__(501);

	_defaults(exports, _interopExportWildcard(_ionicComponentsNavNavPush, _defaults));

	var _ionicComponentsNavNavRouter = __webpack_require__(502);

	_defaults(exports, _interopExportWildcard(_ionicComponentsNavNavRouter, _defaults));

	var _ionicComponentsNavbarNavbar = __webpack_require__(474);

	_defaults(exports, _interopExportWildcard(_ionicComponentsNavbarNavbar, _defaults));

	var _ionicComponentsOverlayOverlay = __webpack_require__(460);

	_defaults(exports, _interopExportWildcard(_ionicComponentsOverlayOverlay, _defaults));

	var _ionicComponentsPopupPopup = __webpack_require__(448);

	_defaults(exports, _interopExportWildcard(_ionicComponentsPopupPopup, _defaults));

	var _ionicComponentsSlidesSlides = __webpack_require__(482);

	_defaults(exports, _interopExportWildcard(_ionicComponentsSlidesSlides, _defaults));

	var _ionicComponentsRadioRadio = __webpack_require__(498);

	_defaults(exports, _interopExportWildcard(_ionicComponentsRadioRadio, _defaults));

	var _ionicComponentsScrollScroll = __webpack_require__(480);

	_defaults(exports, _interopExportWildcard(_ionicComponentsScrollScroll, _defaults));

	var _ionicComponentsScrollPullToRefresh = __webpack_require__(481);

	_defaults(exports, _interopExportWildcard(_ionicComponentsScrollPullToRefresh, _defaults));

	var _ionicComponentsSearchbarSearchbar = __webpack_require__(499);

	_defaults(exports, _interopExportWildcard(_ionicComponentsSearchbarSearchbar, _defaults));

	var _ionicComponentsSegmentSegment = __webpack_require__(497);

	_defaults(exports, _interopExportWildcard(_ionicComponentsSegmentSegment, _defaults));

	var _ionicComponentsSwitchSwitch = __webpack_require__(494);

	_defaults(exports, _interopExportWildcard(_ionicComponentsSwitchSwitch, _defaults));

	var _ionicComponentsTabsTabs = __webpack_require__(484);

	_defaults(exports, _interopExportWildcard(_ionicComponentsTabsTabs, _defaults));

	var _ionicComponentsTabsTab = __webpack_require__(486);

	_defaults(exports, _interopExportWildcard(_ionicComponentsTabsTab, _defaults));

	var _ionicComponentsTapClickTapClick = __webpack_require__(454);

	_defaults(exports, _interopExportWildcard(_ionicComponentsTapClickTapClick, _defaults));

	var _ionicComponentsToolbarToolbar = __webpack_require__(475);

	_defaults(exports, _interopExportWildcard(_ionicComponentsToolbarToolbar, _defaults));

/***/ },
/* 505 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _menu = __webpack_require__(461);

	var _ionicAnimationsAnimation = __webpack_require__(441);

	/**
	 * Menu Type
	 * Base class which is extended by the various types. Each
	 * type will provide their own animations for open and close
	 * and registers itself with Menu.
	 */

	var MenuType = (function () {
	    function MenuType() {
	        _classCallCheck(this, MenuType);

	        this.open = new _ionicAnimationsAnimation.Animation();
	        this.close = new _ionicAnimationsAnimation.Animation();
	    }

	    /**
	     * Menu Reveal Type
	     * The content slides over to reveal the menu underneath.
	     * The menu itself, which is under the content, does not move.
	     */

	    _createClass(MenuType, [{
	        key: 'setOpen',
	        value: function setOpen(shouldOpen) {
	            var _this = this;

	            return new Promise(function (resolve) {
	                if (shouldOpen) {
	                    _this.open.playbackRate(1).onFinish(resolve, true).play();
	                } else {
	                    _this.close.playbackRate(1).onFinish(resolve, true).play();
	                }
	            });
	        }
	    }, {
	        key: 'setProgressStart',
	        value: function setProgressStart(isOpen) {
	            this.isOpening = !isOpen;
	            this.seek && this.seek.dispose();
	            // clone the correct animation depending on open/close
	            if (this.isOpening) {
	                this.seek = this.open.clone();
	            } else {
	                this.seek = this.close.clone();
	            }
	            // the cloned animation should not use an easing curve during seek
	            this.seek.easing('linear').progressStart();
	        }
	    }, {
	        key: 'setProgess',
	        value: function setProgess(value) {
	            // adjust progress value depending if it opening or closing
	            if (!this.isOpening) {
	                value = 1 - value;
	            }
	            this.seek.progress(value);
	        }
	    }, {
	        key: 'setProgressEnd',
	        value: function setProgressEnd(shouldComplete) {
	            var _this2 = this;

	            var resolve = undefined;
	            var promise = new Promise(function (res) {
	                resolve = res;
	            });
	            var isOpen = this.isOpening && shouldComplete;
	            if (!this.isOpening && !shouldComplete) {
	                isOpen = true;
	            }
	            this.seek.progressEnd(shouldComplete).then(function () {
	                _this2.isOpening = false;
	                resolve(isOpen);
	            });
	            return promise;
	        }
	    }, {
	        key: 'onDestroy',
	        value: function onDestroy() {
	            this.open && this.open.dispose();
	            this.close && this.close.dispose();
	            this.seek && this.seek.dispose();
	        }
	    }]);

	    return MenuType;
	})();

	exports.MenuType = MenuType;

	var MenuRevealType = (function (_MenuType) {
	    _inherits(MenuRevealType, _MenuType);

	    function MenuRevealType(menu) {
	        _classCallCheck(this, MenuRevealType);

	        _get(Object.getPrototypeOf(MenuRevealType.prototype), 'constructor', this).call(this);
	        var easing = 'ease';
	        var duration = 250;
	        var openedX = menu.width() * (menu.side == 'right' ? -1 : 1) + 'px';
	        var closedX = '0px';
	        this.open.easing(easing).duration(duration);
	        this.close.easing(easing).duration(duration);
	        var contentOpen = new _ionicAnimationsAnimation.Animation(menu.getContentElement());
	        contentOpen.fromTo(TRANSLATE_X, closedX, openedX);
	        this.open.add(contentOpen);
	        var contentClose = new _ionicAnimationsAnimation.Animation(menu.getContentElement());
	        contentClose.fromTo(TRANSLATE_X, openedX, closedX);
	        this.close.add(contentClose);
	    }

	    return MenuRevealType;
	})(MenuType);

	_menu.Menu.register('reveal', MenuRevealType);
	/**
	 * Menu Push Type
	 * The content slides over to reveal the menu underneath.
	 * The menu itself also slides over to reveal its bad self.
	 */

	var MenuPushType = (function (_MenuType2) {
	    _inherits(MenuPushType, _MenuType2);

	    function MenuPushType(menu) {
	        _classCallCheck(this, MenuPushType);

	        _get(Object.getPrototypeOf(MenuPushType.prototype), 'constructor', this).call(this);
	        var easing = 'ease';
	        var duration = 250;
	        var contentOpenedX = undefined,
	            menuClosedX = undefined,
	            menuOpenedX = undefined;
	        if (menu.side == 'right') {
	            contentOpenedX = -menu.width() + 'px';
	            menuOpenedX = menu.platform.width() - menu.width() + 'px';
	            menuClosedX = menu.platform.width() + 'px';
	        } else {
	            contentOpenedX = menu.width() + 'px';
	            menuOpenedX = '0px';
	            menuClosedX = -menu.width() + 'px';
	        }
	        // left side
	        this.open.easing(easing).duration(duration);
	        this.close.easing(easing).duration(duration);
	        var menuOpen = new _ionicAnimationsAnimation.Animation(menu.getMenuElement());
	        menuOpen.fromTo(TRANSLATE_X, menuClosedX, menuOpenedX);
	        this.open.add(menuOpen);
	        var contentOpen = new _ionicAnimationsAnimation.Animation(menu.getContentElement());
	        contentOpen.fromTo(TRANSLATE_X, '0px', contentOpenedX);
	        this.open.add(contentOpen);
	        var menuClose = new _ionicAnimationsAnimation.Animation(menu.getMenuElement());
	        menuClose.fromTo(TRANSLATE_X, menuOpenedX, menuClosedX);
	        this.close.add(menuClose);
	        var contentClose = new _ionicAnimationsAnimation.Animation(menu.getContentElement());
	        contentClose.fromTo(TRANSLATE_X, contentOpenedX, '0px');
	        this.close.add(contentClose);
	    }

	    return MenuPushType;
	})(MenuType);

	_menu.Menu.register('push', MenuPushType);
	/**
	 * Menu Overlay Type
	 * The menu slides over the content. The content
	 * itself, which is under the menu, does not move.
	 */

	var MenuOverlayType = (function (_MenuType3) {
	    _inherits(MenuOverlayType, _MenuType3);

	    function MenuOverlayType(menu) {
	        _classCallCheck(this, MenuOverlayType);

	        _get(Object.getPrototypeOf(MenuOverlayType.prototype), 'constructor', this).call(this);
	        var easing = 'ease';
	        var duration = 250;
	        var backdropOpacity = 0.35;
	        var closedX = undefined,
	            openedX = undefined;
	        if (menu.side == 'right') {
	            // right side
	            closedX = menu.platform.width() + 'px';
	            openedX = menu.platform.width() - menu.width() - 8 + 'px';
	        } else {
	            // left side
	            closedX = -menu.width() + 'px';
	            openedX = '8px';
	        }
	        this.open.easing(easing).duration(duration);
	        this.close.easing(easing).duration(duration);
	        var menuOpen = new _ionicAnimationsAnimation.Animation(menu.getMenuElement());
	        menuOpen.fromTo(TRANSLATE_X, closedX, openedX);
	        this.open.add(menuOpen);
	        var backdropOpen = new _ionicAnimationsAnimation.Animation(menu.getBackdropElement());
	        backdropOpen.fromTo(OPACITY, 0.01, backdropOpacity);
	        this.open.add(backdropOpen);
	        var menuClose = new _ionicAnimationsAnimation.Animation(menu.getMenuElement());
	        menuClose.fromTo(TRANSLATE_X, openedX, closedX);
	        this.close.add(menuClose);
	        var backdropClose = new _ionicAnimationsAnimation.Animation(menu.getBackdropElement());
	        backdropClose.fromTo(OPACITY, backdropOpacity, 0.01);
	        this.close.add(backdropClose);
	    }

	    return MenuOverlayType;
	})(MenuType);

	_menu.Menu.register('overlay', MenuOverlayType);
	var OPACITY = 'opacity';
	var TRANSLATE_X = 'translateX';

/***/ },
/* 506 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _platform = __webpack_require__(438);

	var _utilDom = __webpack_require__(435);

	_platform.Platform.register({
	    name: 'core',
	    settings: {
	        mode: 'ios',
	        keyboardHeight: 290
	    }
	});
	_platform.Platform.setDefault('core');
	_platform.Platform.register({
	    name: 'mobile'
	});
	_platform.Platform.register({
	    name: 'phablet',
	    isMatch: function isMatch(p) {
	        var smallest = Math.min(p.width(), p.height());
	        var largest = Math.max(p.width(), p.height());
	        return smallest > 390 && smallest < 520 && (largest > 620 && largest < 800);
	    }
	});
	_platform.Platform.register({
	    name: 'tablet',
	    isMatch: function isMatch(p) {
	        var smallest = Math.min(p.width(), p.height());
	        var largest = Math.max(p.width(), p.height());
	        return smallest > 460 && smallest < 820 && (largest > 780 && largest < 1400);
	    }
	});
	_platform.Platform.register({
	    name: 'android',
	    superset: 'mobile',
	    subsets: ['phablet', 'tablet'],
	    settings: {
	        activator: function activator(p) {
	            return p.version().major >= 5 ? 'ripple' : 'none';
	        },
	        hoverCSS: false,
	        keyboardHeight: 300,
	        mode: 'md',
	        scrollAssist: true
	    },
	    isMatch: function isMatch(p) {
	        return p.isPlatform('android', 'android|silk');
	    },
	    versionParser: function versionParser(p) {
	        return p.matchUserAgentVersion(/Android (\d+).(\d+)?/);
	    }
	});
	_platform.Platform.register({
	    name: 'ios',
	    superset: 'mobile',
	    subsets: ['ipad', 'iphone'],
	    settings: {
	        clickBlock: true,
	        hoverCSS: false,
	        keyboardHeight: 300,
	        mode: 'ios',
	        scrollAssist: isIOSDevice,
	        swipeBackEnabled: isIOSDevice,
	        swipeBackThreshold: 40,
	        tapPolyfill: isIOSDevice
	    },
	    isMatch: function isMatch(p) {
	        return p.isPlatform('ios', 'iphone|ipad|ipod');
	    },
	    versionParser: function versionParser(p) {
	        return p.matchUserAgentVersion(/OS (\d+)_(\d+)?/);
	    }
	});
	_platform.Platform.register({
	    name: 'ipad',
	    superset: 'tablet',
	    settings: {
	        keyboardHeight: 500
	    },
	    isMatch: function isMatch(p) {
	        return p.isPlatform('ipad');
	    }
	});
	_platform.Platform.register({
	    name: 'iphone',
	    subsets: ['phablet'],
	    isMatch: function isMatch(p) {
	        return p.isPlatform('iphone');
	    }
	});
	_platform.Platform.register({
	    name: 'windowsphone',
	    superset: 'mobile',
	    subsets: ['phablet', 'tablet'],
	    settings: {
	        mode: 'md'
	    },
	    isMatch: function isMatch(p) {
	        return p.isPlatform('windowsphone', 'windows phone');
	    },
	    versionParser: function versionParser(p) {
	        return p.matchUserAgentVersion(/Windows Phone (\d+).(\d+)?/);
	    }
	});
	_platform.Platform.register({
	    name: 'cordova',
	    isEngine: true,
	    methods: {
	        ready: function ready(resolve) {
	            function isReady() {
	                document.removeEventListener('deviceready', isReady);
	                resolve();
	            }
	            (0, _utilDom.windowLoad)(function () {
	                document.addEventListener('deviceready', isReady);
	            });
	        }
	    },
	    isMatch: function isMatch() {
	        return !!(window.cordova || window.PhoneGap || window.phonegap);
	    }
	});
	function isIOSDevice(p) {
	    // shortcut function to be reused internally
	    // checks navigator.platform to see if it's an actual iOS device
	    // this does not use the user-agent string because it is often spoofed
	    // an actual iPad will return true, a chrome dev tools iPad will return false
	    return (/iphone|ipad|ipod/i.test(p.navigatorPlatform())
	    );
	}

/***/ },
/* 507 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopExportWildcard(obj, defaults) { var newObj = defaults({}, obj); delete newObj['default']; return newObj; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	var _storageStorage = __webpack_require__(508);

	_defaults(exports, _interopExportWildcard(_storageStorage, _defaults));

	var _storageLocalStorage = __webpack_require__(509);

	_defaults(exports, _interopExportWildcard(_storageLocalStorage, _defaults));

	var _storageSql = __webpack_require__(510);

	_defaults(exports, _interopExportWildcard(_storageSql, _defaults));

/***/ },
/* 508 */
/***/ function(module, exports) {

	/**
	 * Storage is an easy way to store key/value pairs and other complicated
	 * data in a way that uses a variety of storage engines underneath.
	 *
	 * For most cases, we recommend the SqlStorage system as it will store
	 * data in a file in the app's sandbox. LocalStorage should ONLY be used
	 * for temporary data as it may be "cleaned up" by the operation system
	 * during low disk space situations.
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var Storage = (function () {
	    function Storage(strategyCls, options) {
	        _classCallCheck(this, Storage);

	        this._strategy = new strategyCls(options);
	    }

	    _createClass(Storage, [{
	        key: 'get',
	        value: function get(key) {
	            return this._strategy.get(key);
	        }
	    }, {
	        key: 'getJson',
	        value: function getJson(key) {
	            try {
	                return JSON.parse(this._strategy.get(key));
	            } catch (e) {
	                console.warn('Storage getJson(): unable to parse value for key', key, ' as JSON');
	                return null;
	            }
	        }
	    }, {
	        key: 'set',
	        value: function set(key, value) {
	            return this._strategy.set(key, value);
	        }
	    }, {
	        key: 'remove',
	        value: function remove(key) {
	            return this._strategy.remove(key);
	        }
	    }, {
	        key: 'query',
	        value: function query(_query, params) {
	            return this._strategy.query(_query, params);
	        }
	    }]);

	    return Storage;
	})();

	exports.Storage = Storage;

	var StorageEngine = (function () {
	    function StorageEngine() {
	        _classCallCheck(this, StorageEngine);
	    }

	    _createClass(StorageEngine, [{
	        key: 'get',
	        value: function get(key, value) {
	            throw Error("get() not implemented for this storage engine");
	        }
	    }, {
	        key: 'set',
	        value: function set(key, value) {
	            throw Error("set() not implemented for this storage engine");
	        }
	    }, {
	        key: 'remove',
	        value: function remove(key) {
	            throw Error("remove() not implemented for this storage engine");
	        }
	    }, {
	        key: 'query',
	        value: function query(_query2, params) {
	            throw Error("query() not implemented for this storage engine");
	        }
	    }]);

	    return StorageEngine;
	})();

	exports.StorageEngine = StorageEngine;

/***/ },
/* 509 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _storage = __webpack_require__(508);

	/**
	 * The LocalStorage storage engine uses the browser's local storage system for
	 * storing key/value pairs.
	 *
	 * Note: LocalStorage should ONLY be used for temporary data that you can afford to lose.
	 * Given disk space constraints on a mobile device, local storage might be "cleaned up"
	 * by the operating system (iOS).
	 *
	 * For guaranteed, long-term storage, use the SqlStorage engine which stores data in a file.
	 */

	var LocalStorage = (function (_StorageEngine) {
	    _inherits(LocalStorage, _StorageEngine);

	    function LocalStorage() {
	        _classCallCheck(this, LocalStorage);

	        _get(Object.getPrototypeOf(LocalStorage.prototype), 'constructor', this).call(this);
	    }

	    _createClass(LocalStorage, [{
	        key: 'get',
	        value: function get(key) {
	            return new Promise(function (resolve, reject) {
	                try {
	                    var value = window.localStorage.getItem(key);
	                    resolve(value);
	                } catch (e) {
	                    reject(e);
	                }
	            });
	        }
	    }, {
	        key: 'set',
	        value: function set(key, value) {
	            return new Promise(function (resolve, reject) {
	                try {
	                    window.localStorage.setItem(key, value);
	                    resolve();
	                } catch (e) {
	                    reject(e);
	                }
	            });
	        }
	    }, {
	        key: 'remove',
	        value: function remove(key) {
	            return new Promise(function (resolve, reject) {
	                try {
	                    window.localStorage.removeItem(key);
	                    resolve();
	                } catch (e) {
	                    reject(e);
	                }
	            });
	        }
	    }]);

	    return LocalStorage;
	})(_storage.StorageEngine);

	exports.LocalStorage = LocalStorage;

/***/ },
/* 510 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _storage = __webpack_require__(508);

	var _ionicUtil = __webpack_require__(442);

	var util = _interopRequireWildcard(_ionicUtil);

	var DB_NAME = '__ionicstorage';
	/**
	 * SqlStorage uses SQLite or WebSQL (development only!) to store data in a
	 * persistent SQL store on the filesystem.
	 *
	 * This is the preferred storage engine, as data will be stored in appropriate
	 * app storage, unlike Local Storage which is treated differently by the OS.
	 *
	 * For convenience, the engine supports key/value storage for simple get/set and blob
	 * storage. The full SQL engine is exposed underneath through the `query` method.
	 *
	 * @usage
	 ```js
	 * let storage = new Storage(SqlStorage, options);
	 * storage.set('name', 'Max');
	 * storage.get('name').then((name) => {
	 * });
	 *
	 * // Sql storage also exposes the full engine underneath
	 * storage.query('insert into projects(name, data) values('Cool Project', 'blah')');'
	 * storage.query('select * from projects').then((resp) => {})
	 * ```
	 *
	 * The `SqlStorage` service supports these options:
	 * {
	 *   name: the name of the database (__ionicstorage by default)
	 *   backupFlag: // where to store the file, default is BACKUP_LOCAL which DOES NOT store to iCloud. Other options: BACKUP_LIBRARY, BACKUP_DOCUMENTS
	 *   existingDatabase: whether to load this as an existing database (default is false)
	 * }
	 *
	 */

	var SqlStorage = (function (_StorageEngine) {
	    _inherits(SqlStorage, _StorageEngine);

	    function SqlStorage(options) {
	        _classCallCheck(this, SqlStorage);

	        _get(Object.getPrototypeOf(SqlStorage.prototype), 'constructor', this).call(this);
	        var dbOptions = util.defaults(options, {
	            name: DB_NAME,
	            backupFlag: SqlStorage.BACKUP_LOCAL,
	            existingDatabase: false
	        });
	        if (window.sqlitePlugin) {
	            var _location = this._getBackupLocation(dbOptions.backupFlag);
	            this._db = window.sqlitePlugin.openDatabase(util.extend({
	                name: dbOptions.name,
	                location: _location,
	                createFromLocation: dbOptions.existingDatabase ? 1 : 0
	            }, dbOptions));
	        } else {
	            console.warn('Storage: SQLite plugin not installed, falling back to WebSQL. Make sure to install cordova-sqlite-storage in production!');
	            this._db = window.openDatabase(dbOptions.name, '1.0', 'database', 5 * 1024 * 1024);
	        }
	        this._tryInit();
	    }

	    _createClass(SqlStorage, [{
	        key: '_getBackupLocation',
	        value: function _getBackupLocation(dbFlag) {
	            switch (dbFlag) {
	                case SqlStorage.BACKUP_LOCAL:
	                    return 2;
	                case SqlStorage.BACKUP_LIBRARY:
	                    return 1;
	                case SqlStorage.BACKUP_DOCUMENTS:
	                    return 0;
	                default:
	                    throw Error('Invalid backup flag: ' + dbFlag);
	            }
	        }

	        // Initialize the DB with our required tables
	    }, {
	        key: '_tryInit',
	        value: function _tryInit() {
	            this._db.transaction(function (tx) {
	                tx.executeSql('CREATE TABLE IF NOT EXISTS kv (key text primary key, value text)', [], function (tx, res) {}, function (tx, err) {
	                    console.error('Storage: Unable to create initial storage tables', tx, err);
	                });
	            });
	        }

	        /**
	         * Perform an arbitrary SQL operation on the database. Use this method
	         * to have full control over the underlying database through SQL operations
	         * like SELECT, INSERT, and UPDATE.
	         *
	         * @param {string} query the query to run
	         * @param {array} params the additional params to use for query placeholders
	         * @return {Promise} that resolves or rejects with an object of the form { tx: Transaction, res: Result (or err)}
	         */
	    }, {
	        key: 'query',
	        value: function query(_query) {
	            var _this = this;

	            for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	                params[_key - 1] = arguments[_key];
	            }

	            return new Promise(function (resolve, reject) {
	                _this._db.transaction(function (tx) {
	                    tx.executeSql(_query, params, function (tx, res) {
	                        resolve({
	                            tx: tx,
	                            res: res
	                        });
	                    }, function (tx, err) {
	                        reject({
	                            tx: tx,
	                            err: err
	                        });
	                    });
	                });
	            });
	        }

	        /**
	         * Get the value in the database identified by the given key.
	         * @param {string} key the key
	         * @return {Promise} that resolves or rejects with an object of the form { tx: Transaction, res: Result (or err)}
	         */
	    }, {
	        key: 'get',
	        value: function get(key) {
	            var _this2 = this;

	            return new Promise(function (resolve, reject) {
	                try {
	                    _this2._db.transaction(function (tx) {
	                        tx.executeSql("select key, value from kv where key = ? limit 1", [key], function (tx, res) {
	                            if (res.rows.length > 0) {
	                                var item = res.rows.item(0);
	                                resolve(item.value);
	                            }
	                            resolve(null);
	                        }, function (tx, err) {
	                            reject({
	                                tx: tx,
	                                err: err
	                            });
	                        });
	                    }, function (err) {
	                        reject(err);
	                    });
	                } catch (e) {
	                    reject(e);
	                }
	            });
	        }

	        /**
	        * Set the value in the database for the given key. Existing values will be overwritten.
	        * @param {string} key the key
	        * @param {string} value The value (as a string)
	        * @return {Promise} that resolves or rejects with an object of the form { tx: Transaction, res: Result (or err)}
	        */
	    }, {
	        key: 'set',
	        value: function set(key, value) {
	            var _this3 = this;

	            return new Promise(function (resolve, reject) {
	                try {
	                    _this3._db.transaction(function (tx) {
	                        tx.executeSql('insert or replace into kv(key, value) values (?, ?)', [key, value], function (tx, res) {
	                            resolve();
	                        }, function (tx, err) {
	                            reject({
	                                tx: tx,
	                                err: err
	                            });
	                        });
	                    }, function (err) {
	                        reject(err);
	                    });
	                } catch (e) {
	                    reject(e);
	                }
	            });
	        }

	        /**
	        * Remove the value in the database for the given key.
	        * @param {string} key the key
	        * @param {string} value The value (as a string)
	        * @return {Promise} that resolves or rejects with an object of the form { tx: Transaction, res: Result (or err)}
	        */
	    }, {
	        key: 'remove',
	        value: function remove(key) {
	            var _this4 = this;

	            return new Promise(function (resolve, reject) {
	                try {
	                    _this4._db.transaction(function (tx) {
	                        tx.executeSql('delete from kv where key = ?', [key], function (tx, res) {
	                            resolve();
	                        }, function (tx, err) {
	                            reject({
	                                tx: tx,
	                                err: err
	                            });
	                        });
	                    }, function (err) {
	                        reject(err);
	                    });
	                } catch (e) {
	                    reject(e);
	                }
	            });
	        }
	    }]);

	    return SqlStorage;
	})(_storage.StorageEngine);

	exports.SqlStorage = SqlStorage;

	SqlStorage.BACKUP_LOCAL = 2;
	SqlStorage.BACKUP_LIBRARY = 1;
	SqlStorage.BACKUP_DOCUMENTS = 0;

/***/ },
/* 511 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _animation = __webpack_require__(441);

	var SlideIn = (function (_Animation) {
	    _inherits(SlideIn, _Animation);

	    function SlideIn(element) {
	        _classCallCheck(this, SlideIn);

	        _get(Object.getPrototypeOf(SlideIn.prototype), 'constructor', this).call(this, element);
	        this.easing('cubic-bezier(0.1,0.7,0.1,1)').duration(400).fromTo('translateY', '100%', '0%');
	    }

	    return SlideIn;
	})(_animation.Animation);

	_animation.Animation.register('slide-in', SlideIn);

	var SlideOut = (function (_Animation2) {
	    _inherits(SlideOut, _Animation2);

	    function SlideOut(element) {
	        _classCallCheck(this, SlideOut);

	        _get(Object.getPrototypeOf(SlideOut.prototype), 'constructor', this).call(this, element);
	        this.easing('ease-out').duration(250).fromTo('translateY', '0%', '100%');
	    }

	    return SlideOut;
	})(_animation.Animation);

	_animation.Animation.register('slide-out', SlideOut);

	var FadeIn = (function (_Animation3) {
	    _inherits(FadeIn, _Animation3);

	    function FadeIn(element) {
	        _classCallCheck(this, FadeIn);

	        _get(Object.getPrototypeOf(FadeIn.prototype), 'constructor', this).call(this, element);
	        this.easing('ease-in').duration(400).fadeIn();
	    }

	    return FadeIn;
	})(_animation.Animation);

	_animation.Animation.register('fade-in', FadeIn);

	var FadeOut = (function (_Animation4) {
	    _inherits(FadeOut, _Animation4);

	    function FadeOut(element) {
	        _classCallCheck(this, FadeOut);

	        _get(Object.getPrototypeOf(FadeOut.prototype), 'constructor', this).call(this, element);
	        this.easing('ease-out').duration(250).fadeOut();
	    }

	    return FadeOut;
	})(_animation.Animation);

	_animation.Animation.register('fade-out', FadeOut);

/***/ },
/* 512 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _transition = __webpack_require__(472);

	var _animationsAnimation = __webpack_require__(441);

	var DURATION = 550;
	var EASING = 'cubic-bezier(0.36,0.66,0.04,1)';
	var OPACITY = 'opacity';
	var TRANSLATEX = 'translateX';
	var OFF_RIGHT = '99.5%';
	var OFF_LEFT = '-33%';
	var CENTER = '0%';
	var OFF_OPACITY = 0.8;
	var SHOW_BACK_BTN_CSS = 'show-back-button';

	var IOSTransition = (function (_Animation) {
	    _inherits(IOSTransition, _Animation);

	    function IOSTransition(navCtrl, opts) {
	        _classCallCheck(this, IOSTransition);

	        _get(Object.getPrototypeOf(IOSTransition.prototype), 'constructor', this).call(this, null, opts);
	        this.duration(DURATION);
	        this.easing(EASING);
	        // what direction is the transition going
	        var backDirection = opts.direction === 'back';
	        // get entering/leaving views
	        var enteringView = navCtrl.getStagedEnteringView();
	        var leavingView = navCtrl.getStagedLeavingView();
	        // do they have navbars?
	        var enteringHasNavbar = enteringView.hasNavbar();
	        var leavingHasNavbar = leavingView && leavingView.hasNavbar();
	        var enteringPage = new _animationsAnimation.Animation(enteringView.pageRef());
	        enteringPage.before.addClass('show-page');
	        this.add(enteringPage);
	        // entering content
	        var enteringContent = new _animationsAnimation.Animation(enteringView.contentRef());
	        this.add(enteringContent);
	        if (backDirection) {
	            // entering content, back direction
	            enteringContent.fromTo(TRANSLATEX, OFF_LEFT, CENTER).fromTo(OPACITY, OFF_OPACITY, 1);
	        } else {
	            // entering content, forward direction
	            enteringContent.fromTo(TRANSLATEX, OFF_RIGHT, CENTER).fromTo(OPACITY, 1, 1);
	        }
	        if (enteringHasNavbar) {
	            // entering page has a navbar
	            var enteringNavBar = new _animationsAnimation.Animation(enteringView.navbarRef());
	            this.add(enteringNavBar);
	            var enteringTitle = new _animationsAnimation.Animation(enteringView.titleRef());
	            var enteringNavbarItems = new _animationsAnimation.Animation(enteringView.navbarItemRefs());
	            var enteringNavbarBg = new _animationsAnimation.Animation(enteringView.navbarBgRef());
	            var enteringBackButton = new _animationsAnimation.Animation(enteringView.backBtnRef());
	            enteringNavBar.add(enteringTitle).add(enteringNavbarItems).add(enteringNavbarBg).add(enteringBackButton);
	            enteringTitle.fadeIn();
	            enteringNavbarItems.fadeIn();
	            // set properties depending on direction
	            if (backDirection) {
	                // entering navbar, back direction
	                enteringTitle.fromTo(TRANSLATEX, OFF_LEFT, CENTER);
	                if (enteringView.enableBack()) {
	                    // back direction, entering page has a back button
	                    enteringBackButton.fadeIn();
	                }
	            } else {
	                // entering navbar, forward direction
	                enteringTitle.fromTo(TRANSLATEX, OFF_RIGHT, CENTER);
	                if (leavingHasNavbar) {
	                    // entering navbar, forward direction, and there's a leaving navbar
	                    // should just fade in, no sliding
	                    enteringNavbarBg.fromTo(TRANSLATEX, CENTER, CENTER).fadeIn();
	                } else {
	                    // entering navbar, forward direction, and there's no leaving navbar
	                    // should just slide in, no fading in
	                    enteringNavbarBg.fromTo(TRANSLATEX, OFF_RIGHT, CENTER).fromTo(OPACITY, 1, 1);
	                }
	                if (enteringView.enableBack()) {
	                    // forward direction, entering page has a back button
	                    enteringBackButton.before.addClass(SHOW_BACK_BTN_CSS).fadeIn();
	                    var enteringBackBtnText = new _animationsAnimation.Animation(enteringView.backBtnTextRef());
	                    enteringBackBtnText.fromTo(TRANSLATEX, '100px', '0px');
	                    enteringNavBar.add(enteringBackBtnText);
	                } else {
	                    enteringBackButton.before.removeClass(SHOW_BACK_BTN_CSS);
	                }
	            }
	        }
	        // setup leaving view
	        if (leavingView) {
	            // leaving content
	            var leavingContent = new _animationsAnimation.Animation(leavingView.contentRef());
	            this.add(leavingContent);
	            if (backDirection) {
	                // leaving content, back direction
	                leavingContent.fromTo(TRANSLATEX, CENTER, '100%').fromTo(OPACITY, 1, 1);
	            } else {
	                // leaving content, forward direction
	                leavingContent.fromTo(TRANSLATEX, CENTER, OFF_LEFT).fromTo(OPACITY, 1, OFF_OPACITY);
	            }
	            if (leavingHasNavbar) {
	                // leaving page has a navbar
	                var leavingNavBar = new _animationsAnimation.Animation(leavingView.navbarRef());
	                var leavingBackButton = new _animationsAnimation.Animation(leavingView.backBtnRef());
	                var leavingTitle = new _animationsAnimation.Animation(leavingView.titleRef());
	                var leavingNavbarItems = new _animationsAnimation.Animation(leavingView.navbarItemRefs());
	                var leavingNavbarBg = new _animationsAnimation.Animation(leavingView.navbarBgRef());
	                leavingNavBar.add(leavingBackButton).add(leavingTitle).add(leavingNavbarItems).add(leavingNavbarBg);
	                this.add(leavingNavBar);
	                // fade out leaving navbar items
	                leavingBackButton.fadeOut();
	                leavingTitle.fadeOut();
	                leavingNavbarItems.fadeOut();
	                if (backDirection) {
	                    // leaving navbar, back direction
	                    leavingTitle.fromTo(TRANSLATEX, CENTER, '100%');
	                    if (enteringHasNavbar) {
	                        // leaving navbar, back direction, and there's an entering navbar
	                        // should just fade out, no sliding
	                        leavingNavbarBg.fromTo(TRANSLATEX, CENTER, CENTER).fadeOut();
	                    } else {
	                        // leaving navbar, back direction, and there's no entering navbar
	                        // should just slide out, no fading out
	                        leavingNavbarBg.fromTo(TRANSLATEX, CENTER, '100%').fromTo(OPACITY, 1, 1);
	                    }
	                    var leavingBackBtnText = new _animationsAnimation.Animation(leavingView.backBtnTextRef());
	                    leavingBackBtnText.fromTo(TRANSLATEX, CENTER, 300 + 'px');
	                    leavingNavBar.add(leavingBackBtnText);
	                } else {
	                    // leaving navbar, forward direction
	                    leavingTitle.fromTo(TRANSLATEX, CENTER, OFF_LEFT);
	                }
	            }
	        }
	    }

	    return IOSTransition;
	})(_animationsAnimation.Animation);

	_transition.Transition.register('ios', IOSTransition);

/***/ },
/* 513 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _transition = __webpack_require__(472);

	var _animationsAnimation = __webpack_require__(441);

	var TRANSLATEY = 'translateY';
	var OFF_BOTTOM = '40px';
	var CENTER = '0px';
	var SHOW_BACK_BTN_CSS = 'show-back-button';

	var MDTransition = (function (_Animation) {
	    _inherits(MDTransition, _Animation);

	    function MDTransition(navCtrl, opts) {
	        _classCallCheck(this, MDTransition);

	        _get(Object.getPrototypeOf(MDTransition.prototype), 'constructor', this).call(this, null, opts);
	        // what direction is the transition going
	        var backDirection = opts.direction === 'back';
	        // get entering/leaving views
	        var enteringView = navCtrl.getStagedEnteringView();
	        var leavingView = navCtrl.getStagedLeavingView();
	        // do they have navbars?
	        var enteringHasNavbar = enteringView.hasNavbar();
	        var leavingHasNavbar = leavingView && leavingView.hasNavbar();
	        // entering content item moves in bottom to center
	        var enteringPage = new _animationsAnimation.Animation(enteringView.pageRef());
	        enteringPage.before.addClass('show-page');
	        this.add(enteringPage);
	        if (backDirection) {
	            this.duration(200).easing('cubic-bezier(0.47,0,0.745,0.715)');
	            enteringPage.fromTo(TRANSLATEY, CENTER, CENTER);
	        } else {
	            this.duration(280).easing('cubic-bezier(0.36,0.66,0.04,1)');
	            enteringPage.fromTo(TRANSLATEY, OFF_BOTTOM, CENTER).fadeIn();
	        }
	        if (enteringHasNavbar) {
	            var enteringBackButton = new _animationsAnimation.Animation(enteringView.backBtnRef());
	            this.add(enteringBackButton);
	            if (enteringView.enableBack()) {
	                enteringBackButton.before.addClass(SHOW_BACK_BTN_CSS);
	            } else {
	                enteringBackButton.before.removeClass(SHOW_BACK_BTN_CSS);
	            }
	        }
	        // setup leaving view
	        if (leavingView && backDirection) {
	            // leaving content
	            this.duration(200).easing('cubic-bezier(0.47,0,0.745,0.715)');
	            var leavingPage = new _animationsAnimation.Animation(leavingView.pageRef());
	            this.add(leavingPage.fromTo(TRANSLATEY, CENTER, OFF_BOTTOM).fadeOut());
	        }
	    }

	    return MDTransition;
	})(_animationsAnimation.Animation);

	_transition.Transition.register('md', MDTransition);

/***/ },
/* 514 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _angular2Angular2 = __webpack_require__(45);

	var _translate = __webpack_require__(452);

	/**
	 * The Translate pipe makes it easy to translate strings.
	 *
	 * @usage
	 * Translate using the current language or language set through Translate.setLanguage
	 * {{ 'Please enter your location' | translate }}
	 *
	 * Translate using a specific language
	 * {{ 'Please enter your location' | translate:"de" }}
	 */
	var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = undefined && undefined.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var TranslatePipe = (function () {
	    function TranslatePipe(translate) {
	        _classCallCheck(this, TranslatePipe);

	        this.translate = translate;
	    }

	    _createClass(TranslatePipe, [{
	        key: "transform",
	        value: function transform(value, args) {
	            var lang = undefined;
	            if (args.length > 0) {
	                lang = args[0];
	            }
	            return this.translate.translate(value, lang);
	        }
	    }, {
	        key: "supports",
	        value: function supports(obj) {
	            return true;
	        }
	    }]);

	    return TranslatePipe;
	})();
	exports.TranslatePipe = TranslatePipe;
	exports.TranslatePipe = TranslatePipe = __decorate([(0, _angular2Angular2.Pipe)({ name: 'translate' }), (0, _angular2Angular2.Injectable)(), __metadata('design:paramtypes', [typeof (_a = typeof _translate.Translate !== 'undefined' && _translate.Translate) === 'function' && _a || Object])], TranslatePipe);
	var _a;

/***/ },
/* 515 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var ionic_1 = __webpack_require__(43);
	var Page1 = (function () {
	    function Page1() {
	    }
	    Page1 = __decorate([
	        ionic_1.Page({
	            templateUrl: 'app/page1/page1.html',
	        }), 
	        __metadata('design:paramtypes', [])
	    ], Page1);
	    return Page1;
	})();
	exports.Page1 = Page1;
	//# sourceMappingURL=page1.js.map

/***/ },
/* 516 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var ionic_1 = __webpack_require__(43);
	var Page2 = (function () {
	    function Page2() {
	    }
	    Page2 = __decorate([
	        ionic_1.Page({
	            templateUrl: 'app/page2/page2.html',
	        }), 
	        __metadata('design:paramtypes', [])
	    ], Page2);
	    return Page2;
	})();
	exports.Page2 = Page2;
	//# sourceMappingURL=page2.js.map

/***/ },
/* 517 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var ionic_1 = __webpack_require__(43);
	var Page3 = (function () {
	    function Page3() {
	    }
	    Page3 = __decorate([
	        ionic_1.Page({
	            templateUrl: 'app/page3/page3.html'
	        }), 
	        __metadata('design:paramtypes', [])
	    ], Page3);
	    return Page3;
	})();
	exports.Page3 = Page3;
	//# sourceMappingURL=page3.js.map

/***/ },
/* 518 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"!!./../../../../../../../../usr/local/lib/node_modules/ionic/node_modules/ionic-app-lib/node_modules/css-loader/index.js!./../../../../../../../../usr/local/lib/node_modules/ionic/node_modules/ionic-app-lib/node_modules/autoprefixer-loader/index.js?{\"browsers\":[\"last 2 versions\",\"iOS >= 7\",\"Android >= 4\",\"Explorer >= 10\",\"ExplorerMobile >= 11\"],\"cascade\":false}!./../../../../../../../../usr/local/lib/node_modules/ionic/node_modules/ionic-app-lib/node_modules/resolve-url-loader/index.js!./../../../../../../../../usr/local/lib/node_modules/ionic/node_modules/ionic-app-lib/node_modules/sass-loader/index.js?sourceMap!./app.scss\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(520)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../../../../../../usr/local/lib/node_modules/ionic/node_modules/ionic-app-lib/node_modules/css-loader/index.js!./../../../../../../../../usr/local/lib/node_modules/ionic/node_modules/ionic-app-lib/node_modules/autoprefixer-loader/index.js?{\"browsers\":[\"last 2 versions\",\"iOS >= 7\",\"Android >= 4\",\"Explorer >= 10\",\"ExplorerMobile >= 11\"],\"cascade\":false}!./../../../../../../../../usr/local/lib/node_modules/ionic/node_modules/ionic-app-lib/node_modules/resolve-url-loader/index.js!./../../../../../../../../usr/local/lib/node_modules/ionic/node_modules/ionic-app-lib/node_modules/sass-loader/index.js?sourceMap!./app.scss", function() {
				var newContent = require("!!./../../../../../../../../usr/local/lib/node_modules/ionic/node_modules/ionic-app-lib/node_modules/css-loader/index.js!./../../../../../../../../usr/local/lib/node_modules/ionic/node_modules/ionic-app-lib/node_modules/autoprefixer-loader/index.js?{\"browsers\":[\"last 2 versions\",\"iOS >= 7\",\"Android >= 4\",\"Explorer >= 10\",\"ExplorerMobile >= 11\"],\"cascade\":false}!./../../../../../../../../usr/local/lib/node_modules/ionic/node_modules/ionic-app-lib/node_modules/resolve-url-loader/index.js!./../../../../../../../../usr/local/lib/node_modules/ionic/node_modules/ionic-app-lib/node_modules/sass-loader/index.js?sourceMap!./app.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 519 */,
/* 520 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ }
/******/ ]);